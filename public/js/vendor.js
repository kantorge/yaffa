(self["webpackChunk"] = self["webpackChunk"] || []).push([["js/vendor"],{

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.3
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-12-20T21:28Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.9
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2022-12-19
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {

					// `qSA` may not throw for unrecognized parts using forgiving parsing:
					// https://drafts.csswg.org/selectors/#forgiving-selector
					// like the `:has()` pseudo-class:
					// https://drafts.csswg.org/selectors/#relational
					// `CSS.supports` is still expected to return `false` then:
					// https://drafts.csswg.org/css-conditional-4/#typedef-supports-selector-fn
					// https://drafts.csswg.org/css-conditional-4/#dfn-support-selector
					if ( support.cssSupportsSelector &&

						// eslint-disable-next-line no-undef
						!CSS.supports( "selector(:is(" + newSelector + "))" ) ) {

						// Support: IE 11+
						// Throw to get to the same code path as an error directly in qSA.
						// Note: once we only support browser supporting
						// `CSS.supports('selector(...)')`, we can most likely drop
						// the `try-catch`. IE doesn't implement the API.
						throw new Error();
					}

					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	// Support: Chrome 105+, Firefox 104+, Safari 15.4+
	// Make sure forgiving mode is not used in `CSS.supports( "selector(...)" )`.
	//
	// `:is()` uses a forgiving selector list as an argument and is widely
	// implemented, so it's a good one to test against.
	support.cssSupportsSelector = assert( function() {
		/* eslint-disable no-undef */

		return CSS.supports( "selector(*)" ) &&

			// Support: Firefox 78-81 only
			// In old Firefox, `:is()` didn't use forgiving parsing. In that case,
			// fail this test as there's no selector to test against that.
			// `CSS.supports` uses unforgiving parsing
			document.querySelectorAll( ":is(:jqfake)" ) &&

			// `*` is needed as Safari & newer Chrome implemented something in between
			// for `:has()` - it throws in `qSA` if it only contains an unsupported
			// argument but multiple ones, one of which is supported, are fine.
			// We want to play safe in case `:is()` gets the same treatment.
			!CSS.supports( "selector(:is(*,:jqfake))" );

		/* eslint-enable */
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	if ( !support.cssSupportsSelector ) {

		// Support: Chrome 105+, Safari 15.4+
		// `:has()` uses a forgiving selector list as an argument so our regular
		// `try-catch` mechanism fails to catch `:has()` with arguments not supported
		// natively like `:has(:contains("Foo"))`. Where supported & spec-compliant,
		// we now use `CSS.supports("selector(:is(SELECTOR_TO_BE_TESTED))")`, but
		// outside that we mark `:has` as buggy.
		rbuggyQSA.push( ":has" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {

			// Support: IE <9 only
			// IE doesn't have `contains` on `document` so we need to check for
			// `documentElement` presence.
			// We need to fall back to `a` when `documentElement` is missing
			// as `ownerDocument` of elements within `<template/>` may have
			// a null one - a default behavior of all modern browsers.
			var adown = a.nodeType === 9 && a.documentElement || a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE <10 only
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );

var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/select2/dist/js/select2.js":
/*!*************************************************!*\
  !*** ./node_modules/select2/dist/js/select2.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Select2 4.0.13
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
;(function (factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
} (function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 =(function () {
  // Restore the Select2 AMD loader so it can be used
  // Needed mostly in the language files, where the loader is not inserted
  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
    var S2 = jQuery.fn.select2.amd;
  }
var S2;(function () { if (!S2 || !S2.requirejs) {
if (!S2) { S2 = {}; } else { require = S2; }
/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name) {
            name = name.split('/');
            lastIndex = name.length - 1;

            // If wanting node ID compatibility, strip .js from end
            // of IDs. Have to do this here, and not in nameToUrl
            // because node allows either .js or non .js to map
            // to same file.
            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
            }

            // Starts with a '.' so need the baseName
            if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
            }

            //start trimDots
            for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                    name.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        name.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
            //end trimDots

            name = name.join('/');
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    //Creates a parts array for a relName where first part is plugin ID,
    //second part is resource ID. Assumes relName has already been normalized.
    function makeRelParts(relName) {
        return relName ? splitPrefix(relName) : [];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relParts) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0],
            relResourceName = relParts[1];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relResourceName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
            } else {
                name = normalize(name, relResourceName);
            }
        } else {
            name = normalize(name, relResourceName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i, relParts,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;
        relParts = makeRelParts(relName);

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, makeRelParts(callback)).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

S2.requirejs = requirejs;S2.require = require;S2.define = define;
}
}());
S2.define("almond", function(){});

/* global jQuery:false, $:false */
S2.define('jquery',[],function () {
  var _$ = jQuery || $;

  if (_$ == null && console && console.error) {
    console.error(
      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
      'found. Make sure that you are including jQuery before Select2 on your ' +
      'web page.'
    );
  }

  return _$;
});

S2.define('select2/utils',[
  'jquery'
], function ($) {
  var Utils = {};

  Utils.Extend = function (ChildClass, SuperClass) {
    var __hasProp = {}.hasOwnProperty;

    function BaseConstructor () {
      this.constructor = ChildClass;
    }

    for (var key in SuperClass) {
      if (__hasProp.call(SuperClass, key)) {
        ChildClass[key] = SuperClass[key];
      }
    }

    BaseConstructor.prototype = SuperClass.prototype;
    ChildClass.prototype = new BaseConstructor();
    ChildClass.__super__ = SuperClass.prototype;

    return ChildClass;
  };

  function getMethods (theClass) {
    var proto = theClass.prototype;

    var methods = [];

    for (var methodName in proto) {
      var m = proto[methodName];

      if (typeof m !== 'function') {
        continue;
      }

      if (methodName === 'constructor') {
        continue;
      }

      methods.push(methodName);
    }

    return methods;
  }

  Utils.Decorate = function (SuperClass, DecoratorClass) {
    var decoratedMethods = getMethods(DecoratorClass);
    var superMethods = getMethods(SuperClass);

    function DecoratedClass () {
      var unshift = Array.prototype.unshift;

      var argCount = DecoratorClass.prototype.constructor.length;

      var calledConstructor = SuperClass.prototype.constructor;

      if (argCount > 0) {
        unshift.call(arguments, SuperClass.prototype.constructor);

        calledConstructor = DecoratorClass.prototype.constructor;
      }

      calledConstructor.apply(this, arguments);
    }

    DecoratorClass.displayName = SuperClass.displayName;

    function ctr () {
      this.constructor = DecoratedClass;
    }

    DecoratedClass.prototype = new ctr();

    for (var m = 0; m < superMethods.length; m++) {
      var superMethod = superMethods[m];

      DecoratedClass.prototype[superMethod] =
        SuperClass.prototype[superMethod];
    }

    var calledMethod = function (methodName) {
      // Stub out the original method if it's not decorating an actual method
      var originalMethod = function () {};

      if (methodName in DecoratedClass.prototype) {
        originalMethod = DecoratedClass.prototype[methodName];
      }

      var decoratedMethod = DecoratorClass.prototype[methodName];

      return function () {
        var unshift = Array.prototype.unshift;

        unshift.call(arguments, originalMethod);

        return decoratedMethod.apply(this, arguments);
      };
    };

    for (var d = 0; d < decoratedMethods.length; d++) {
      var decoratedMethod = decoratedMethods[d];

      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
    }

    return DecoratedClass;
  };

  var Observable = function () {
    this.listeners = {};
  };

  Observable.prototype.on = function (event, callback) {
    this.listeners = this.listeners || {};

    if (event in this.listeners) {
      this.listeners[event].push(callback);
    } else {
      this.listeners[event] = [callback];
    }
  };

  Observable.prototype.trigger = function (event) {
    var slice = Array.prototype.slice;
    var params = slice.call(arguments, 1);

    this.listeners = this.listeners || {};

    // Params should always come in as an array
    if (params == null) {
      params = [];
    }

    // If there are no arguments to the event, use a temporary object
    if (params.length === 0) {
      params.push({});
    }

    // Set the `_type` of the first object to the event
    params[0]._type = event;

    if (event in this.listeners) {
      this.invoke(this.listeners[event], slice.call(arguments, 1));
    }

    if ('*' in this.listeners) {
      this.invoke(this.listeners['*'], arguments);
    }
  };

  Observable.prototype.invoke = function (listeners, params) {
    for (var i = 0, len = listeners.length; i < len; i++) {
      listeners[i].apply(this, params);
    }
  };

  Utils.Observable = Observable;

  Utils.generateChars = function (length) {
    var chars = '';

    for (var i = 0; i < length; i++) {
      var randomChar = Math.floor(Math.random() * 36);
      chars += randomChar.toString(36);
    }

    return chars;
  };

  Utils.bind = function (func, context) {
    return function () {
      func.apply(context, arguments);
    };
  };

  Utils._convertData = function (data) {
    for (var originalKey in data) {
      var keys = originalKey.split('-');

      var dataLevel = data;

      if (keys.length === 1) {
        continue;
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k];

        // Lowercase the first letter
        // By default, dash-separated becomes camelCase
        key = key.substring(0, 1).toLowerCase() + key.substring(1);

        if (!(key in dataLevel)) {
          dataLevel[key] = {};
        }

        if (k == keys.length - 1) {
          dataLevel[key] = data[originalKey];
        }

        dataLevel = dataLevel[key];
      }

      delete data[originalKey];
    }

    return data;
  };

  Utils.hasScroll = function (index, el) {
    // Adapted from the function created by @ShadowScripter
    // and adapted by @BillBarry on the Stack Exchange Code Review website.
    // The original code can be found at
    // http://codereview.stackexchange.com/q/13338
    // and was designed to be used with the Sizzle selector engine.

    var $el = $(el);
    var overflowX = el.style.overflowX;
    var overflowY = el.style.overflowY;

    //Check both x and y declarations
    if (overflowX === overflowY &&
        (overflowY === 'hidden' || overflowY === 'visible')) {
      return false;
    }

    if (overflowX === 'scroll' || overflowY === 'scroll') {
      return true;
    }

    return ($el.innerHeight() < el.scrollHeight ||
      $el.innerWidth() < el.scrollWidth);
  };

  Utils.escapeMarkup = function (markup) {
    var replaceMap = {
      '\\': '&#92;',
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
      '/': '&#47;'
    };

    // Do not try to escape the markup if it's not a string
    if (typeof markup !== 'string') {
      return markup;
    }

    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
      return replaceMap[match];
    });
  };

  // Append an array of jQuery nodes to a given element.
  Utils.appendMany = function ($element, $nodes) {
    // jQuery 1.7.x does not support $.fn.append() with an array
    // Fall back to a jQuery object collection using $.fn.add()
    if ($.fn.jquery.substr(0, 3) === '1.7') {
      var $jqNodes = $();

      $.map($nodes, function (node) {
        $jqNodes = $jqNodes.add(node);
      });

      $nodes = $jqNodes;
    }

    $element.append($nodes);
  };

  // Cache objects in Utils.__cache instead of $.data (see #4346)
  Utils.__cache = {};

  var id = 0;
  Utils.GetUniqueElementId = function (element) {
    // Get a unique element Id. If element has no id,
    // creates a new unique number, stores it in the id
    // attribute and returns the new id.
    // If an id already exists, it simply returns it.

    var select2Id = element.getAttribute('data-select2-id');
    if (select2Id == null) {
      // If element has id, use it.
      if (element.id) {
        select2Id = element.id;
        element.setAttribute('data-select2-id', select2Id);
      } else {
        element.setAttribute('data-select2-id', ++id);
        select2Id = id.toString();
      }
    }
    return select2Id;
  };

  Utils.StoreData = function (element, name, value) {
    // Stores an item in the cache for a specified element.
    // name is the cache key.
    var id = Utils.GetUniqueElementId(element);
    if (!Utils.__cache[id]) {
      Utils.__cache[id] = {};
    }

    Utils.__cache[id][name] = value;
  };

  Utils.GetData = function (element, name) {
    // Retrieves a value from the cache by its key (name)
    // name is optional. If no name specified, return
    // all cache items for the specified element.
    // and for a specified element.
    var id = Utils.GetUniqueElementId(element);
    if (name) {
      if (Utils.__cache[id]) {
        if (Utils.__cache[id][name] != null) {
          return Utils.__cache[id][name];
        }
        return $(element).data(name); // Fallback to HTML5 data attribs.
      }
      return $(element).data(name); // Fallback to HTML5 data attribs.
    } else {
      return Utils.__cache[id];
    }
  };

  Utils.RemoveData = function (element) {
    // Removes all cached items for a specified element.
    var id = Utils.GetUniqueElementId(element);
    if (Utils.__cache[id] != null) {
      delete Utils.__cache[id];
    }

    element.removeAttribute('data-select2-id');
  };

  return Utils;
});

S2.define('select2/results',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Results ($element, options, dataAdapter) {
    this.$element = $element;
    this.data = dataAdapter;
    this.options = options;

    Results.__super__.constructor.call(this);
  }

  Utils.Extend(Results, Utils.Observable);

  Results.prototype.render = function () {
    var $results = $(
      '<ul class="select2-results__options" role="listbox"></ul>'
    );

    if (this.options.get('multiple')) {
      $results.attr('aria-multiselectable', 'true');
    }

    this.$results = $results;

    return $results;
  };

  Results.prototype.clear = function () {
    this.$results.empty();
  };

  Results.prototype.displayMessage = function (params) {
    var escapeMarkup = this.options.get('escapeMarkup');

    this.clear();
    this.hideLoading();

    var $message = $(
      '<li role="alert" aria-live="assertive"' +
      ' class="select2-results__option"></li>'
    );

    var message = this.options.get('translations').get(params.message);

    $message.append(
      escapeMarkup(
        message(params.args)
      )
    );

    $message[0].className += ' select2-results__message';

    this.$results.append($message);
  };

  Results.prototype.hideMessages = function () {
    this.$results.find('.select2-results__message').remove();
  };

  Results.prototype.append = function (data) {
    this.hideLoading();

    var $options = [];

    if (data.results == null || data.results.length === 0) {
      if (this.$results.children().length === 0) {
        this.trigger('results:message', {
          message: 'noResults'
        });
      }

      return;
    }

    data.results = this.sort(data.results);

    for (var d = 0; d < data.results.length; d++) {
      var item = data.results[d];

      var $option = this.option(item);

      $options.push($option);
    }

    this.$results.append($options);
  };

  Results.prototype.position = function ($results, $dropdown) {
    var $resultsContainer = $dropdown.find('.select2-results');
    $resultsContainer.append($results);
  };

  Results.prototype.sort = function (data) {
    var sorter = this.options.get('sorter');

    return sorter(data);
  };

  Results.prototype.highlightFirstItem = function () {
    var $options = this.$results
      .find('.select2-results__option[aria-selected]');

    var $selected = $options.filter('[aria-selected=true]');

    // Check if there are any selected options
    if ($selected.length > 0) {
      // If there are selected options, highlight the first
      $selected.first().trigger('mouseenter');
    } else {
      // If there are no selected options, highlight the first option
      // in the dropdown
      $options.first().trigger('mouseenter');
    }

    this.ensureHighlightVisible();
  };

  Results.prototype.setClasses = function () {
    var self = this;

    this.data.current(function (selected) {
      var selectedIds = $.map(selected, function (s) {
        return s.id.toString();
      });

      var $options = self.$results
        .find('.select2-results__option[aria-selected]');

      $options.each(function () {
        var $option = $(this);

        var item = Utils.GetData(this, 'data');

        // id needs to be converted to a string when comparing
        var id = '' + item.id;

        if ((item.element != null && item.element.selected) ||
            (item.element == null && $.inArray(id, selectedIds) > -1)) {
          $option.attr('aria-selected', 'true');
        } else {
          $option.attr('aria-selected', 'false');
        }
      });

    });
  };

  Results.prototype.showLoading = function (params) {
    this.hideLoading();

    var loadingMore = this.options.get('translations').get('searching');

    var loading = {
      disabled: true,
      loading: true,
      text: loadingMore(params)
    };
    var $loading = this.option(loading);
    $loading.className += ' loading-results';

    this.$results.prepend($loading);
  };

  Results.prototype.hideLoading = function () {
    this.$results.find('.loading-results').remove();
  };

  Results.prototype.option = function (data) {
    var option = document.createElement('li');
    option.className = 'select2-results__option';

    var attrs = {
      'role': 'option',
      'aria-selected': 'false'
    };

    var matches = window.Element.prototype.matches ||
      window.Element.prototype.msMatchesSelector ||
      window.Element.prototype.webkitMatchesSelector;

    if ((data.element != null && matches.call(data.element, ':disabled')) ||
        (data.element == null && data.disabled)) {
      delete attrs['aria-selected'];
      attrs['aria-disabled'] = 'true';
    }

    if (data.id == null) {
      delete attrs['aria-selected'];
    }

    if (data._resultId != null) {
      option.id = data._resultId;
    }

    if (data.title) {
      option.title = data.title;
    }

    if (data.children) {
      attrs.role = 'group';
      attrs['aria-label'] = data.text;
      delete attrs['aria-selected'];
    }

    for (var attr in attrs) {
      var val = attrs[attr];

      option.setAttribute(attr, val);
    }

    if (data.children) {
      var $option = $(option);

      var label = document.createElement('strong');
      label.className = 'select2-results__group';

      var $label = $(label);
      this.template(data, label);

      var $children = [];

      for (var c = 0; c < data.children.length; c++) {
        var child = data.children[c];

        var $child = this.option(child);

        $children.push($child);
      }

      var $childrenContainer = $('<ul></ul>', {
        'class': 'select2-results__options select2-results__options--nested'
      });

      $childrenContainer.append($children);

      $option.append(label);
      $option.append($childrenContainer);
    } else {
      this.template(data, option);
    }

    Utils.StoreData(option, 'data', data);

    return option;
  };

  Results.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-results';

    this.$results.attr('id', id);

    container.on('results:all', function (params) {
      self.clear();
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
        self.highlightFirstItem();
      }
    });

    container.on('results:append', function (params) {
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
      }
    });

    container.on('query', function (params) {
      self.hideMessages();
      self.showLoading(params);
    });

    container.on('select', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();

      if (self.options.get('scrollAfterSelect')) {
        self.highlightFirstItem();
      }
    });

    container.on('unselect', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();

      if (self.options.get('scrollAfterSelect')) {
        self.highlightFirstItem();
      }
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expended="true"
      self.$results.attr('aria-expanded', 'true');
      self.$results.attr('aria-hidden', 'false');

      self.setClasses();
      self.ensureHighlightVisible();
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expended="false"
      self.$results.attr('aria-expanded', 'false');
      self.$results.attr('aria-hidden', 'true');
      self.$results.removeAttr('aria-activedescendant');
    });

    container.on('results:toggle', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      $highlighted.trigger('mouseup');
    });

    container.on('results:select', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      var data = Utils.GetData($highlighted[0], 'data');

      if ($highlighted.attr('aria-selected') == 'true') {
        self.trigger('close', {});
      } else {
        self.trigger('select', {
          data: data
        });
      }
    });

    container.on('results:previous', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[aria-selected]');

      var currentIndex = $options.index($highlighted);

      // If we are already at the top, don't move further
      // If no options, currentIndex will be -1
      if (currentIndex <= 0) {
        return;
      }

      var nextIndex = currentIndex - 1;

      // If none are highlighted, highlight the first
      if ($highlighted.length === 0) {
        nextIndex = 0;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top;
      var nextTop = $next.offset().top;
      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextTop - currentOffset < 0) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:next', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[aria-selected]');

      var currentIndex = $options.index($highlighted);

      var nextIndex = currentIndex + 1;

      // If we are at the last option, stay there
      if (nextIndex >= $options.length) {
        return;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var nextBottom = $next.offset().top + $next.outerHeight(false);
      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextBottom > currentOffset) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:focus', function (params) {
      params.element.addClass('select2-results__option--highlighted');
    });

    container.on('results:message', function (params) {
      self.displayMessage(params);
    });

    if ($.fn.mousewheel) {
      this.$results.on('mousewheel', function (e) {
        var top = self.$results.scrollTop();

        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

        if (isAtTop) {
          self.$results.scrollTop(0);

          e.preventDefault();
          e.stopPropagation();
        } else if (isAtBottom) {
          self.$results.scrollTop(
            self.$results.get(0).scrollHeight - self.$results.height()
          );

          e.preventDefault();
          e.stopPropagation();
        }
      });
    }

    this.$results.on('mouseup', '.select2-results__option[aria-selected]',
      function (evt) {
      var $this = $(this);

      var data = Utils.GetData(this, 'data');

      if ($this.attr('aria-selected') === 'true') {
        if (self.options.get('multiple')) {
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        } else {
          self.trigger('close', {});
        }

        return;
      }

      self.trigger('select', {
        originalEvent: evt,
        data: data
      });
    });

    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
      function (evt) {
      var data = Utils.GetData(this, 'data');

      self.getHighlightedResults()
          .removeClass('select2-results__option--highlighted');

      self.trigger('results:focus', {
        data: data,
        element: $(this)
      });
    });
  };

  Results.prototype.getHighlightedResults = function () {
    var $highlighted = this.$results
    .find('.select2-results__option--highlighted');

    return $highlighted;
  };

  Results.prototype.destroy = function () {
    this.$results.remove();
  };

  Results.prototype.ensureHighlightVisible = function () {
    var $highlighted = this.getHighlightedResults();

    if ($highlighted.length === 0) {
      return;
    }

    var $options = this.$results.find('[aria-selected]');

    var currentIndex = $options.index($highlighted);

    var currentOffset = this.$results.offset().top;
    var nextTop = $highlighted.offset().top;
    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

    var offsetDelta = nextTop - currentOffset;
    nextOffset -= $highlighted.outerHeight(false) * 2;

    if (currentIndex <= 2) {
      this.$results.scrollTop(0);
    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
      this.$results.scrollTop(nextOffset);
    }
  };

  Results.prototype.template = function (result, container) {
    var template = this.options.get('templateResult');
    var escapeMarkup = this.options.get('escapeMarkup');

    var content = template(result, container);

    if (content == null) {
      container.style.display = 'none';
    } else if (typeof content === 'string') {
      container.innerHTML = escapeMarkup(content);
    } else {
      $(container).append(content);
    }
  };

  return Results;
});

S2.define('select2/keys',[

], function () {
  var KEYS = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  return KEYS;
});

S2.define('select2/selection/base',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function BaseSelection ($element, options) {
    this.$element = $element;
    this.options = options;

    BaseSelection.__super__.constructor.call(this);
  }

  Utils.Extend(BaseSelection, Utils.Observable);

  BaseSelection.prototype.render = function () {
    var $selection = $(
      '<span class="select2-selection" role="combobox" ' +
      ' aria-haspopup="true" aria-expanded="false">' +
      '</span>'
    );

    this._tabindex = 0;

    if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
      this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
    } else if (this.$element.attr('tabindex') != null) {
      this._tabindex = this.$element.attr('tabindex');
    }

    $selection.attr('title', this.$element.attr('title'));
    $selection.attr('tabindex', this._tabindex);
    $selection.attr('aria-disabled', 'false');

    this.$selection = $selection;

    return $selection;
  };

  BaseSelection.prototype.bind = function (container, $container) {
    var self = this;

    var resultsId = container.id + '-results';

    this.container = container;

    this.$selection.on('focus', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('blur', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      if (evt.which === KEYS.SPACE) {
        evt.preventDefault();
      }
    });

    container.on('results:focus', function (params) {
      self.$selection.attr('aria-activedescendant', params.data._resultId);
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expanded="true"
      self.$selection.attr('aria-expanded', 'true');
      self.$selection.attr('aria-owns', resultsId);

      self._attachCloseHandler(container);
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expanded="false"
      self.$selection.attr('aria-expanded', 'false');
      self.$selection.removeAttr('aria-activedescendant');
      self.$selection.removeAttr('aria-owns');

      self.$selection.trigger('focus');

      self._detachCloseHandler(container);
    });

    container.on('enable', function () {
      self.$selection.attr('tabindex', self._tabindex);
      self.$selection.attr('aria-disabled', 'false');
    });

    container.on('disable', function () {
      self.$selection.attr('tabindex', '-1');
      self.$selection.attr('aria-disabled', 'true');
    });
  };

  BaseSelection.prototype._handleBlur = function (evt) {
    var self = this;

    // This needs to be delayed as the active element is the body when the tab
    // key is pressed, possibly along with others.
    window.setTimeout(function () {
      // Don't trigger `blur` if the focus is still in the selection
      if (
        (document.activeElement == self.$selection[0]) ||
        ($.contains(self.$selection[0], document.activeElement))
      ) {
        return;
      }

      self.trigger('blur', evt);
    }, 1);
  };

  BaseSelection.prototype._attachCloseHandler = function (container) {

    $(document.body).on('mousedown.select2.' + container.id, function (e) {
      var $target = $(e.target);

      var $select = $target.closest('.select2');

      var $all = $('.select2.select2-container--open');

      $all.each(function () {
        if (this == $select[0]) {
          return;
        }

        var $element = Utils.GetData(this, 'element');

        $element.select2('close');
      });
    });
  };

  BaseSelection.prototype._detachCloseHandler = function (container) {
    $(document.body).off('mousedown.select2.' + container.id);
  };

  BaseSelection.prototype.position = function ($selection, $container) {
    var $selectionContainer = $container.find('.selection');
    $selectionContainer.append($selection);
  };

  BaseSelection.prototype.destroy = function () {
    this._detachCloseHandler(this.container);
  };

  BaseSelection.prototype.update = function (data) {
    throw new Error('The `update` method must be defined in child classes.');
  };

  /**
   * Helper method to abstract the "enabled" (not "disabled") state of this
   * object.
   *
   * @return {true} if the instance is not disabled.
   * @return {false} if the instance is disabled.
   */
  BaseSelection.prototype.isEnabled = function () {
    return !this.isDisabled();
  };

  /**
   * Helper method to abstract the "disabled" state of this object.
   *
   * @return {true} if the disabled option is true.
   * @return {false} if the disabled option is false.
   */
  BaseSelection.prototype.isDisabled = function () {
    return this.options.get('disabled');
  };

  return BaseSelection;
});

S2.define('select2/selection/single',[
  'jquery',
  './base',
  '../utils',
  '../keys'
], function ($, BaseSelection, Utils, KEYS) {
  function SingleSelection () {
    SingleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(SingleSelection, BaseSelection);

  SingleSelection.prototype.render = function () {
    var $selection = SingleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--single');

    $selection.html(
      '<span class="select2-selection__rendered"></span>' +
      '<span class="select2-selection__arrow" role="presentation">' +
        '<b role="presentation"></b>' +
      '</span>'
    );

    return $selection;
  };

  SingleSelection.prototype.bind = function (container, $container) {
    var self = this;

    SingleSelection.__super__.bind.apply(this, arguments);

    var id = container.id + '-container';

    this.$selection.find('.select2-selection__rendered')
      .attr('id', id)
      .attr('role', 'textbox')
      .attr('aria-readonly', 'true');
    this.$selection.attr('aria-labelledby', id);

    this.$selection.on('mousedown', function (evt) {
      // Only respond to left clicks
      if (evt.which !== 1) {
        return;
      }

      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on('focus', function (evt) {
      // User focuses on the container
    });

    this.$selection.on('blur', function (evt) {
      // User exits the container
    });

    container.on('focus', function (evt) {
      if (!container.isOpen()) {
        self.$selection.trigger('focus');
      }
    });
  };

  SingleSelection.prototype.clear = function () {
    var $rendered = this.$selection.find('.select2-selection__rendered');
    $rendered.empty();
    $rendered.removeAttr('title'); // clear tooltip on empty
  };

  SingleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  SingleSelection.prototype.selectionContainer = function () {
    return $('<span></span>');
  };

  SingleSelection.prototype.update = function (data) {
    if (data.length === 0) {
      this.clear();
      return;
    }

    var selection = data[0];

    var $rendered = this.$selection.find('.select2-selection__rendered');
    var formatted = this.display(selection, $rendered);

    $rendered.empty().append(formatted);

    var title = selection.title || selection.text;

    if (title) {
      $rendered.attr('title', title);
    } else {
      $rendered.removeAttr('title');
    }
  };

  return SingleSelection;
});

S2.define('select2/selection/multiple',[
  'jquery',
  './base',
  '../utils'
], function ($, BaseSelection, Utils) {
  function MultipleSelection ($element, options) {
    MultipleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(MultipleSelection, BaseSelection);

  MultipleSelection.prototype.render = function () {
    var $selection = MultipleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--multiple');

    $selection.html(
      '<ul class="select2-selection__rendered"></ul>'
    );

    return $selection;
  };

  MultipleSelection.prototype.bind = function (container, $container) {
    var self = this;

    MultipleSelection.__super__.bind.apply(this, arguments);

    this.$selection.on('click', function (evt) {
      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on(
      'click',
      '.select2-selection__choice__remove',
      function (evt) {
        // Ignore the event if it is disabled
        if (self.isDisabled()) {
          return;
        }

        var $remove = $(this);
        var $selection = $remove.parent();

        var data = Utils.GetData($selection[0], 'data');

        self.trigger('unselect', {
          originalEvent: evt,
          data: data
        });
      }
    );
  };

  MultipleSelection.prototype.clear = function () {
    var $rendered = this.$selection.find('.select2-selection__rendered');
    $rendered.empty();
    $rendered.removeAttr('title');
  };

  MultipleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  MultipleSelection.prototype.selectionContainer = function () {
    var $container = $(
      '<li class="select2-selection__choice">' +
        '<span class="select2-selection__choice__remove" role="presentation">' +
          '&times;' +
        '</span>' +
      '</li>'
    );

    return $container;
  };

  MultipleSelection.prototype.update = function (data) {
    this.clear();

    if (data.length === 0) {
      return;
    }

    var $selections = [];

    for (var d = 0; d < data.length; d++) {
      var selection = data[d];

      var $selection = this.selectionContainer();
      var formatted = this.display(selection, $selection);

      $selection.append(formatted);

      var title = selection.title || selection.text;

      if (title) {
        $selection.attr('title', title);
      }

      Utils.StoreData($selection[0], 'data', selection);

      $selections.push($selection);
    }

    var $rendered = this.$selection.find('.select2-selection__rendered');

    Utils.appendMany($rendered, $selections);
  };

  return MultipleSelection;
});

S2.define('select2/selection/placeholder',[
  '../utils'
], function (Utils) {
  function Placeholder (decorated, $element, options) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options);
  }

  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
    var $placeholder = this.selectionContainer();

    $placeholder.html(this.display(placeholder));
    $placeholder.addClass('select2-selection__placeholder')
                .removeClass('select2-selection__choice');

    return $placeholder;
  };

  Placeholder.prototype.update = function (decorated, data) {
    var singlePlaceholder = (
      data.length == 1 && data[0].id != this.placeholder.id
    );
    var multipleSelections = data.length > 1;

    if (multipleSelections || singlePlaceholder) {
      return decorated.call(this, data);
    }

    this.clear();

    var $placeholder = this.createPlaceholder(this.placeholder);

    this.$selection.find('.select2-selection__rendered').append($placeholder);
  };

  return Placeholder;
});

S2.define('select2/selection/allowClear',[
  'jquery',
  '../keys',
  '../utils'
], function ($, KEYS, Utils) {
  function AllowClear () { }

  AllowClear.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    if (this.placeholder == null) {
      if (this.options.get('debug') && window.console && console.error) {
        console.error(
          'Select2: The `allowClear` option should be used in combination ' +
          'with the `placeholder` option.'
        );
      }
    }

    this.$selection.on('mousedown', '.select2-selection__clear',
      function (evt) {
        self._handleClear(evt);
    });

    container.on('keypress', function (evt) {
      self._handleKeyboardClear(evt, container);
    });
  };

  AllowClear.prototype._handleClear = function (_, evt) {
    // Ignore the event if it is disabled
    if (this.isDisabled()) {
      return;
    }

    var $clear = this.$selection.find('.select2-selection__clear');

    // Ignore the event if nothing has been selected
    if ($clear.length === 0) {
      return;
    }

    evt.stopPropagation();

    var data = Utils.GetData($clear[0], 'data');

    var previousVal = this.$element.val();
    this.$element.val(this.placeholder.id);

    var unselectData = {
      data: data
    };
    this.trigger('clear', unselectData);
    if (unselectData.prevented) {
      this.$element.val(previousVal);
      return;
    }

    for (var d = 0; d < data.length; d++) {
      unselectData = {
        data: data[d]
      };

      // Trigger the `unselect` event, so people can prevent it from being
      // cleared.
      this.trigger('unselect', unselectData);

      // If the event was prevented, don't clear it out.
      if (unselectData.prevented) {
        this.$element.val(previousVal);
        return;
      }
    }

    this.$element.trigger('input').trigger('change');

    this.trigger('toggle', {});
  };

  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
    if (container.isOpen()) {
      return;
    }

    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
      this._handleClear(evt);
    }
  };

  AllowClear.prototype.update = function (decorated, data) {
    decorated.call(this, data);

    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
        data.length === 0) {
      return;
    }

    var removeAll = this.options.get('translations').get('removeAllItems');

    var $remove = $(
      '<span class="select2-selection__clear" title="' + removeAll() +'">' +
        '&times;' +
      '</span>'
    );
    Utils.StoreData($remove[0], 'data', data);

    this.$selection.find('.select2-selection__rendered').prepend($remove);
  };

  return AllowClear;
});

S2.define('select2/selection/search',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function Search (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  Search.prototype.render = function (decorated) {
    var $search = $(
      '<li class="select2-search select2-search--inline">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
        ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
      '</li>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    var $rendered = decorated.call(this);

    this._transferTabIndex();

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var resultsId = container.id + '-results';

    decorated.call(this, container, $container);

    container.on('open', function () {
      self.$search.attr('aria-controls', resultsId);
      self.$search.trigger('focus');
    });

    container.on('close', function () {
      self.$search.val('');
      self.$search.removeAttr('aria-controls');
      self.$search.removeAttr('aria-activedescendant');
      self.$search.trigger('focus');
    });

    container.on('enable', function () {
      self.$search.prop('disabled', false);

      self._transferTabIndex();
    });

    container.on('disable', function () {
      self.$search.prop('disabled', true);
    });

    container.on('focus', function (evt) {
      self.$search.trigger('focus');
    });

    container.on('results:focus', function (params) {
      if (params.data._resultId) {
        self.$search.attr('aria-activedescendant', params.data._resultId);
      } else {
        self.$search.removeAttr('aria-activedescendant');
      }
    });

    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
      evt.stopPropagation();

      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();

      var key = evt.which;

      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
        var $previousChoice = self.$searchContainer
          .prev('.select2-selection__choice');

        if ($previousChoice.length > 0) {
          var item = Utils.GetData($previousChoice[0], 'data');

          self.searchRemoveChoice(item);

          evt.preventDefault();
        }
      }
    });

    this.$selection.on('click', '.select2-search--inline', function (evt) {
      if (self.$search.val()) {
        evt.stopPropagation();
      }
    });

    // Try to detect the IE version should the `documentMode` property that
    // is stored on the document. This is only implemented in IE and is
    // slightly cleaner than doing a user agent check.
    // This property is not available in Edge, but Edge also doesn't have
    // this bug.
    var msie = document.documentMode;
    var disableInputEvents = msie && msie <= 11;

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$selection.on(
      'input.searchcheck',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents) {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        // Unbind the duplicated `keyup` event
        self.$selection.off('keyup.search');
      }
    );

    this.$selection.on(
      'keyup.search input.search',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents && evt.type === 'input') {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        var key = evt.which;

        // We can freely ignore events from modifier keys
        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
          return;
        }

        // Tabbing will be handled during the `keydown` phase
        if (key == KEYS.TAB) {
          return;
        }

        self.handleSearch(evt);
      }
    );
  };

  /**
   * This method will transfer the tabindex attribute from the rendered
   * selection to the search box. This allows for the search box to be used as
   * the primary focus instead of the selection container.
   *
   * @private
   */
  Search.prototype._transferTabIndex = function (decorated) {
    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
    this.$selection.attr('tabindex', '-1');
  };

  Search.prototype.createPlaceholder = function (decorated, placeholder) {
    this.$search.attr('placeholder', placeholder.text);
  };

  Search.prototype.update = function (decorated, data) {
    var searchHadFocus = this.$search[0] == document.activeElement;

    this.$search.attr('placeholder', '');

    decorated.call(this, data);

    this.$selection.find('.select2-selection__rendered')
                   .append(this.$searchContainer);

    this.resizeSearch();
    if (searchHadFocus) {
      this.$search.trigger('focus');
    }
  };

  Search.prototype.handleSearch = function () {
    this.resizeSearch();

    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.searchRemoveChoice = function (decorated, item) {
    this.trigger('unselect', {
      data: item
    });

    this.$search.val(item.text);
    this.handleSearch();
  };

  Search.prototype.resizeSearch = function () {
    this.$search.css('width', '25px');

    var width = '';

    if (this.$search.attr('placeholder') !== '') {
      width = this.$selection.find('.select2-selection__rendered').width();
    } else {
      var minimumWidth = this.$search.val().length + 1;

      width = (minimumWidth * 0.75) + 'em';
    }

    this.$search.css('width', width);
  };

  return Search;
});

S2.define('select2/selection/eventRelay',[
  'jquery'
], function ($) {
  function EventRelay () { }

  EventRelay.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var relayEvents = [
      'open', 'opening',
      'close', 'closing',
      'select', 'selecting',
      'unselect', 'unselecting',
      'clear', 'clearing'
    ];

    var preventableEvents = [
      'opening', 'closing', 'selecting', 'unselecting', 'clearing'
    ];

    decorated.call(this, container, $container);

    container.on('*', function (name, params) {
      // Ignore events that should not be relayed
      if ($.inArray(name, relayEvents) === -1) {
        return;
      }

      // The parameters should always be an object
      params = params || {};

      // Generate the jQuery event for the Select2 event
      var evt = $.Event('select2:' + name, {
        params: params
      });

      self.$element.trigger(evt);

      // Only handle preventable events if it was one
      if ($.inArray(name, preventableEvents) === -1) {
        return;
      }

      params.prevented = evt.isDefaultPrevented();
    });
  };

  return EventRelay;
});

S2.define('select2/translation',[
  'jquery',
  'require'
], function ($, require) {
  function Translation (dict) {
    this.dict = dict || {};
  }

  Translation.prototype.all = function () {
    return this.dict;
  };

  Translation.prototype.get = function (key) {
    return this.dict[key];
  };

  Translation.prototype.extend = function (translation) {
    this.dict = $.extend({}, translation.all(), this.dict);
  };

  // Static functions

  Translation._cache = {};

  Translation.loadPath = function (path) {
    if (!(path in Translation._cache)) {
      var translations = require(path);

      Translation._cache[path] = translations;
    }

    return new Translation(Translation._cache[path]);
  };

  return Translation;
});

S2.define('select2/diacritics',[

], function () {
  var diacritics = {
    '\u24B6': 'A',
    '\uFF21': 'A',
    '\u00C0': 'A',
    '\u00C1': 'A',
    '\u00C2': 'A',
    '\u1EA6': 'A',
    '\u1EA4': 'A',
    '\u1EAA': 'A',
    '\u1EA8': 'A',
    '\u00C3': 'A',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u1EB0': 'A',
    '\u1EAE': 'A',
    '\u1EB4': 'A',
    '\u1EB2': 'A',
    '\u0226': 'A',
    '\u01E0': 'A',
    '\u00C4': 'A',
    '\u01DE': 'A',
    '\u1EA2': 'A',
    '\u00C5': 'A',
    '\u01FA': 'A',
    '\u01CD': 'A',
    '\u0200': 'A',
    '\u0202': 'A',
    '\u1EA0': 'A',
    '\u1EAC': 'A',
    '\u1EB6': 'A',
    '\u1E00': 'A',
    '\u0104': 'A',
    '\u023A': 'A',
    '\u2C6F': 'A',
    '\uA732': 'AA',
    '\u00C6': 'AE',
    '\u01FC': 'AE',
    '\u01E2': 'AE',
    '\uA734': 'AO',
    '\uA736': 'AU',
    '\uA738': 'AV',
    '\uA73A': 'AV',
    '\uA73C': 'AY',
    '\u24B7': 'B',
    '\uFF22': 'B',
    '\u1E02': 'B',
    '\u1E04': 'B',
    '\u1E06': 'B',
    '\u0243': 'B',
    '\u0182': 'B',
    '\u0181': 'B',
    '\u24B8': 'C',
    '\uFF23': 'C',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010A': 'C',
    '\u010C': 'C',
    '\u00C7': 'C',
    '\u1E08': 'C',
    '\u0187': 'C',
    '\u023B': 'C',
    '\uA73E': 'C',
    '\u24B9': 'D',
    '\uFF24': 'D',
    '\u1E0A': 'D',
    '\u010E': 'D',
    '\u1E0C': 'D',
    '\u1E10': 'D',
    '\u1E12': 'D',
    '\u1E0E': 'D',
    '\u0110': 'D',
    '\u018B': 'D',
    '\u018A': 'D',
    '\u0189': 'D',
    '\uA779': 'D',
    '\u01F1': 'DZ',
    '\u01C4': 'DZ',
    '\u01F2': 'Dz',
    '\u01C5': 'Dz',
    '\u24BA': 'E',
    '\uFF25': 'E',
    '\u00C8': 'E',
    '\u00C9': 'E',
    '\u00CA': 'E',
    '\u1EC0': 'E',
    '\u1EBE': 'E',
    '\u1EC4': 'E',
    '\u1EC2': 'E',
    '\u1EBC': 'E',
    '\u0112': 'E',
    '\u1E14': 'E',
    '\u1E16': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u00CB': 'E',
    '\u1EBA': 'E',
    '\u011A': 'E',
    '\u0204': 'E',
    '\u0206': 'E',
    '\u1EB8': 'E',
    '\u1EC6': 'E',
    '\u0228': 'E',
    '\u1E1C': 'E',
    '\u0118': 'E',
    '\u1E18': 'E',
    '\u1E1A': 'E',
    '\u0190': 'E',
    '\u018E': 'E',
    '\u24BB': 'F',
    '\uFF26': 'F',
    '\u1E1E': 'F',
    '\u0191': 'F',
    '\uA77B': 'F',
    '\u24BC': 'G',
    '\uFF27': 'G',
    '\u01F4': 'G',
    '\u011C': 'G',
    '\u1E20': 'G',
    '\u011E': 'G',
    '\u0120': 'G',
    '\u01E6': 'G',
    '\u0122': 'G',
    '\u01E4': 'G',
    '\u0193': 'G',
    '\uA7A0': 'G',
    '\uA77D': 'G',
    '\uA77E': 'G',
    '\u24BD': 'H',
    '\uFF28': 'H',
    '\u0124': 'H',
    '\u1E22': 'H',
    '\u1E26': 'H',
    '\u021E': 'H',
    '\u1E24': 'H',
    '\u1E28': 'H',
    '\u1E2A': 'H',
    '\u0126': 'H',
    '\u2C67': 'H',
    '\u2C75': 'H',
    '\uA78D': 'H',
    '\u24BE': 'I',
    '\uFF29': 'I',
    '\u00CC': 'I',
    '\u00CD': 'I',
    '\u00CE': 'I',
    '\u0128': 'I',
    '\u012A': 'I',
    '\u012C': 'I',
    '\u0130': 'I',
    '\u00CF': 'I',
    '\u1E2E': 'I',
    '\u1EC8': 'I',
    '\u01CF': 'I',
    '\u0208': 'I',
    '\u020A': 'I',
    '\u1ECA': 'I',
    '\u012E': 'I',
    '\u1E2C': 'I',
    '\u0197': 'I',
    '\u24BF': 'J',
    '\uFF2A': 'J',
    '\u0134': 'J',
    '\u0248': 'J',
    '\u24C0': 'K',
    '\uFF2B': 'K',
    '\u1E30': 'K',
    '\u01E8': 'K',
    '\u1E32': 'K',
    '\u0136': 'K',
    '\u1E34': 'K',
    '\u0198': 'K',
    '\u2C69': 'K',
    '\uA740': 'K',
    '\uA742': 'K',
    '\uA744': 'K',
    '\uA7A2': 'K',
    '\u24C1': 'L',
    '\uFF2C': 'L',
    '\u013F': 'L',
    '\u0139': 'L',
    '\u013D': 'L',
    '\u1E36': 'L',
    '\u1E38': 'L',
    '\u013B': 'L',
    '\u1E3C': 'L',
    '\u1E3A': 'L',
    '\u0141': 'L',
    '\u023D': 'L',
    '\u2C62': 'L',
    '\u2C60': 'L',
    '\uA748': 'L',
    '\uA746': 'L',
    '\uA780': 'L',
    '\u01C7': 'LJ',
    '\u01C8': 'Lj',
    '\u24C2': 'M',
    '\uFF2D': 'M',
    '\u1E3E': 'M',
    '\u1E40': 'M',
    '\u1E42': 'M',
    '\u2C6E': 'M',
    '\u019C': 'M',
    '\u24C3': 'N',
    '\uFF2E': 'N',
    '\u01F8': 'N',
    '\u0143': 'N',
    '\u00D1': 'N',
    '\u1E44': 'N',
    '\u0147': 'N',
    '\u1E46': 'N',
    '\u0145': 'N',
    '\u1E4A': 'N',
    '\u1E48': 'N',
    '\u0220': 'N',
    '\u019D': 'N',
    '\uA790': 'N',
    '\uA7A4': 'N',
    '\u01CA': 'NJ',
    '\u01CB': 'Nj',
    '\u24C4': 'O',
    '\uFF2F': 'O',
    '\u00D2': 'O',
    '\u00D3': 'O',
    '\u00D4': 'O',
    '\u1ED2': 'O',
    '\u1ED0': 'O',
    '\u1ED6': 'O',
    '\u1ED4': 'O',
    '\u00D5': 'O',
    '\u1E4C': 'O',
    '\u022C': 'O',
    '\u1E4E': 'O',
    '\u014C': 'O',
    '\u1E50': 'O',
    '\u1E52': 'O',
    '\u014E': 'O',
    '\u022E': 'O',
    '\u0230': 'O',
    '\u00D6': 'O',
    '\u022A': 'O',
    '\u1ECE': 'O',
    '\u0150': 'O',
    '\u01D1': 'O',
    '\u020C': 'O',
    '\u020E': 'O',
    '\u01A0': 'O',
    '\u1EDC': 'O',
    '\u1EDA': 'O',
    '\u1EE0': 'O',
    '\u1EDE': 'O',
    '\u1EE2': 'O',
    '\u1ECC': 'O',
    '\u1ED8': 'O',
    '\u01EA': 'O',
    '\u01EC': 'O',
    '\u00D8': 'O',
    '\u01FE': 'O',
    '\u0186': 'O',
    '\u019F': 'O',
    '\uA74A': 'O',
    '\uA74C': 'O',
    '\u0152': 'OE',
    '\u01A2': 'OI',
    '\uA74E': 'OO',
    '\u0222': 'OU',
    '\u24C5': 'P',
    '\uFF30': 'P',
    '\u1E54': 'P',
    '\u1E56': 'P',
    '\u01A4': 'P',
    '\u2C63': 'P',
    '\uA750': 'P',
    '\uA752': 'P',
    '\uA754': 'P',
    '\u24C6': 'Q',
    '\uFF31': 'Q',
    '\uA756': 'Q',
    '\uA758': 'Q',
    '\u024A': 'Q',
    '\u24C7': 'R',
    '\uFF32': 'R',
    '\u0154': 'R',
    '\u1E58': 'R',
    '\u0158': 'R',
    '\u0210': 'R',
    '\u0212': 'R',
    '\u1E5A': 'R',
    '\u1E5C': 'R',
    '\u0156': 'R',
    '\u1E5E': 'R',
    '\u024C': 'R',
    '\u2C64': 'R',
    '\uA75A': 'R',
    '\uA7A6': 'R',
    '\uA782': 'R',
    '\u24C8': 'S',
    '\uFF33': 'S',
    '\u1E9E': 'S',
    '\u015A': 'S',
    '\u1E64': 'S',
    '\u015C': 'S',
    '\u1E60': 'S',
    '\u0160': 'S',
    '\u1E66': 'S',
    '\u1E62': 'S',
    '\u1E68': 'S',
    '\u0218': 'S',
    '\u015E': 'S',
    '\u2C7E': 'S',
    '\uA7A8': 'S',
    '\uA784': 'S',
    '\u24C9': 'T',
    '\uFF34': 'T',
    '\u1E6A': 'T',
    '\u0164': 'T',
    '\u1E6C': 'T',
    '\u021A': 'T',
    '\u0162': 'T',
    '\u1E70': 'T',
    '\u1E6E': 'T',
    '\u0166': 'T',
    '\u01AC': 'T',
    '\u01AE': 'T',
    '\u023E': 'T',
    '\uA786': 'T',
    '\uA728': 'TZ',
    '\u24CA': 'U',
    '\uFF35': 'U',
    '\u00D9': 'U',
    '\u00DA': 'U',
    '\u00DB': 'U',
    '\u0168': 'U',
    '\u1E78': 'U',
    '\u016A': 'U',
    '\u1E7A': 'U',
    '\u016C': 'U',
    '\u00DC': 'U',
    '\u01DB': 'U',
    '\u01D7': 'U',
    '\u01D5': 'U',
    '\u01D9': 'U',
    '\u1EE6': 'U',
    '\u016E': 'U',
    '\u0170': 'U',
    '\u01D3': 'U',
    '\u0214': 'U',
    '\u0216': 'U',
    '\u01AF': 'U',
    '\u1EEA': 'U',
    '\u1EE8': 'U',
    '\u1EEE': 'U',
    '\u1EEC': 'U',
    '\u1EF0': 'U',
    '\u1EE4': 'U',
    '\u1E72': 'U',
    '\u0172': 'U',
    '\u1E76': 'U',
    '\u1E74': 'U',
    '\u0244': 'U',
    '\u24CB': 'V',
    '\uFF36': 'V',
    '\u1E7C': 'V',
    '\u1E7E': 'V',
    '\u01B2': 'V',
    '\uA75E': 'V',
    '\u0245': 'V',
    '\uA760': 'VY',
    '\u24CC': 'W',
    '\uFF37': 'W',
    '\u1E80': 'W',
    '\u1E82': 'W',
    '\u0174': 'W',
    '\u1E86': 'W',
    '\u1E84': 'W',
    '\u1E88': 'W',
    '\u2C72': 'W',
    '\u24CD': 'X',
    '\uFF38': 'X',
    '\u1E8A': 'X',
    '\u1E8C': 'X',
    '\u24CE': 'Y',
    '\uFF39': 'Y',
    '\u1EF2': 'Y',
    '\u00DD': 'Y',
    '\u0176': 'Y',
    '\u1EF8': 'Y',
    '\u0232': 'Y',
    '\u1E8E': 'Y',
    '\u0178': 'Y',
    '\u1EF6': 'Y',
    '\u1EF4': 'Y',
    '\u01B3': 'Y',
    '\u024E': 'Y',
    '\u1EFE': 'Y',
    '\u24CF': 'Z',
    '\uFF3A': 'Z',
    '\u0179': 'Z',
    '\u1E90': 'Z',
    '\u017B': 'Z',
    '\u017D': 'Z',
    '\u1E92': 'Z',
    '\u1E94': 'Z',
    '\u01B5': 'Z',
    '\u0224': 'Z',
    '\u2C7F': 'Z',
    '\u2C6B': 'Z',
    '\uA762': 'Z',
    '\u24D0': 'a',
    '\uFF41': 'a',
    '\u1E9A': 'a',
    '\u00E0': 'a',
    '\u00E1': 'a',
    '\u00E2': 'a',
    '\u1EA7': 'a',
    '\u1EA5': 'a',
    '\u1EAB': 'a',
    '\u1EA9': 'a',
    '\u00E3': 'a',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u1EB1': 'a',
    '\u1EAF': 'a',
    '\u1EB5': 'a',
    '\u1EB3': 'a',
    '\u0227': 'a',
    '\u01E1': 'a',
    '\u00E4': 'a',
    '\u01DF': 'a',
    '\u1EA3': 'a',
    '\u00E5': 'a',
    '\u01FB': 'a',
    '\u01CE': 'a',
    '\u0201': 'a',
    '\u0203': 'a',
    '\u1EA1': 'a',
    '\u1EAD': 'a',
    '\u1EB7': 'a',
    '\u1E01': 'a',
    '\u0105': 'a',
    '\u2C65': 'a',
    '\u0250': 'a',
    '\uA733': 'aa',
    '\u00E6': 'ae',
    '\u01FD': 'ae',
    '\u01E3': 'ae',
    '\uA735': 'ao',
    '\uA737': 'au',
    '\uA739': 'av',
    '\uA73B': 'av',
    '\uA73D': 'ay',
    '\u24D1': 'b',
    '\uFF42': 'b',
    '\u1E03': 'b',
    '\u1E05': 'b',
    '\u1E07': 'b',
    '\u0180': 'b',
    '\u0183': 'b',
    '\u0253': 'b',
    '\u24D2': 'c',
    '\uFF43': 'c',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010B': 'c',
    '\u010D': 'c',
    '\u00E7': 'c',
    '\u1E09': 'c',
    '\u0188': 'c',
    '\u023C': 'c',
    '\uA73F': 'c',
    '\u2184': 'c',
    '\u24D3': 'd',
    '\uFF44': 'd',
    '\u1E0B': 'd',
    '\u010F': 'd',
    '\u1E0D': 'd',
    '\u1E11': 'd',
    '\u1E13': 'd',
    '\u1E0F': 'd',
    '\u0111': 'd',
    '\u018C': 'd',
    '\u0256': 'd',
    '\u0257': 'd',
    '\uA77A': 'd',
    '\u01F3': 'dz',
    '\u01C6': 'dz',
    '\u24D4': 'e',
    '\uFF45': 'e',
    '\u00E8': 'e',
    '\u00E9': 'e',
    '\u00EA': 'e',
    '\u1EC1': 'e',
    '\u1EBF': 'e',
    '\u1EC5': 'e',
    '\u1EC3': 'e',
    '\u1EBD': 'e',
    '\u0113': 'e',
    '\u1E15': 'e',
    '\u1E17': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u00EB': 'e',
    '\u1EBB': 'e',
    '\u011B': 'e',
    '\u0205': 'e',
    '\u0207': 'e',
    '\u1EB9': 'e',
    '\u1EC7': 'e',
    '\u0229': 'e',
    '\u1E1D': 'e',
    '\u0119': 'e',
    '\u1E19': 'e',
    '\u1E1B': 'e',
    '\u0247': 'e',
    '\u025B': 'e',
    '\u01DD': 'e',
    '\u24D5': 'f',
    '\uFF46': 'f',
    '\u1E1F': 'f',
    '\u0192': 'f',
    '\uA77C': 'f',
    '\u24D6': 'g',
    '\uFF47': 'g',
    '\u01F5': 'g',
    '\u011D': 'g',
    '\u1E21': 'g',
    '\u011F': 'g',
    '\u0121': 'g',
    '\u01E7': 'g',
    '\u0123': 'g',
    '\u01E5': 'g',
    '\u0260': 'g',
    '\uA7A1': 'g',
    '\u1D79': 'g',
    '\uA77F': 'g',
    '\u24D7': 'h',
    '\uFF48': 'h',
    '\u0125': 'h',
    '\u1E23': 'h',
    '\u1E27': 'h',
    '\u021F': 'h',
    '\u1E25': 'h',
    '\u1E29': 'h',
    '\u1E2B': 'h',
    '\u1E96': 'h',
    '\u0127': 'h',
    '\u2C68': 'h',
    '\u2C76': 'h',
    '\u0265': 'h',
    '\u0195': 'hv',
    '\u24D8': 'i',
    '\uFF49': 'i',
    '\u00EC': 'i',
    '\u00ED': 'i',
    '\u00EE': 'i',
    '\u0129': 'i',
    '\u012B': 'i',
    '\u012D': 'i',
    '\u00EF': 'i',
    '\u1E2F': 'i',
    '\u1EC9': 'i',
    '\u01D0': 'i',
    '\u0209': 'i',
    '\u020B': 'i',
    '\u1ECB': 'i',
    '\u012F': 'i',
    '\u1E2D': 'i',
    '\u0268': 'i',
    '\u0131': 'i',
    '\u24D9': 'j',
    '\uFF4A': 'j',
    '\u0135': 'j',
    '\u01F0': 'j',
    '\u0249': 'j',
    '\u24DA': 'k',
    '\uFF4B': 'k',
    '\u1E31': 'k',
    '\u01E9': 'k',
    '\u1E33': 'k',
    '\u0137': 'k',
    '\u1E35': 'k',
    '\u0199': 'k',
    '\u2C6A': 'k',
    '\uA741': 'k',
    '\uA743': 'k',
    '\uA745': 'k',
    '\uA7A3': 'k',
    '\u24DB': 'l',
    '\uFF4C': 'l',
    '\u0140': 'l',
    '\u013A': 'l',
    '\u013E': 'l',
    '\u1E37': 'l',
    '\u1E39': 'l',
    '\u013C': 'l',
    '\u1E3D': 'l',
    '\u1E3B': 'l',
    '\u017F': 'l',
    '\u0142': 'l',
    '\u019A': 'l',
    '\u026B': 'l',
    '\u2C61': 'l',
    '\uA749': 'l',
    '\uA781': 'l',
    '\uA747': 'l',
    '\u01C9': 'lj',
    '\u24DC': 'm',
    '\uFF4D': 'm',
    '\u1E3F': 'm',
    '\u1E41': 'm',
    '\u1E43': 'm',
    '\u0271': 'm',
    '\u026F': 'm',
    '\u24DD': 'n',
    '\uFF4E': 'n',
    '\u01F9': 'n',
    '\u0144': 'n',
    '\u00F1': 'n',
    '\u1E45': 'n',
    '\u0148': 'n',
    '\u1E47': 'n',
    '\u0146': 'n',
    '\u1E4B': 'n',
    '\u1E49': 'n',
    '\u019E': 'n',
    '\u0272': 'n',
    '\u0149': 'n',
    '\uA791': 'n',
    '\uA7A5': 'n',
    '\u01CC': 'nj',
    '\u24DE': 'o',
    '\uFF4F': 'o',
    '\u00F2': 'o',
    '\u00F3': 'o',
    '\u00F4': 'o',
    '\u1ED3': 'o',
    '\u1ED1': 'o',
    '\u1ED7': 'o',
    '\u1ED5': 'o',
    '\u00F5': 'o',
    '\u1E4D': 'o',
    '\u022D': 'o',
    '\u1E4F': 'o',
    '\u014D': 'o',
    '\u1E51': 'o',
    '\u1E53': 'o',
    '\u014F': 'o',
    '\u022F': 'o',
    '\u0231': 'o',
    '\u00F6': 'o',
    '\u022B': 'o',
    '\u1ECF': 'o',
    '\u0151': 'o',
    '\u01D2': 'o',
    '\u020D': 'o',
    '\u020F': 'o',
    '\u01A1': 'o',
    '\u1EDD': 'o',
    '\u1EDB': 'o',
    '\u1EE1': 'o',
    '\u1EDF': 'o',
    '\u1EE3': 'o',
    '\u1ECD': 'o',
    '\u1ED9': 'o',
    '\u01EB': 'o',
    '\u01ED': 'o',
    '\u00F8': 'o',
    '\u01FF': 'o',
    '\u0254': 'o',
    '\uA74B': 'o',
    '\uA74D': 'o',
    '\u0275': 'o',
    '\u0153': 'oe',
    '\u01A3': 'oi',
    '\u0223': 'ou',
    '\uA74F': 'oo',
    '\u24DF': 'p',
    '\uFF50': 'p',
    '\u1E55': 'p',
    '\u1E57': 'p',
    '\u01A5': 'p',
    '\u1D7D': 'p',
    '\uA751': 'p',
    '\uA753': 'p',
    '\uA755': 'p',
    '\u24E0': 'q',
    '\uFF51': 'q',
    '\u024B': 'q',
    '\uA757': 'q',
    '\uA759': 'q',
    '\u24E1': 'r',
    '\uFF52': 'r',
    '\u0155': 'r',
    '\u1E59': 'r',
    '\u0159': 'r',
    '\u0211': 'r',
    '\u0213': 'r',
    '\u1E5B': 'r',
    '\u1E5D': 'r',
    '\u0157': 'r',
    '\u1E5F': 'r',
    '\u024D': 'r',
    '\u027D': 'r',
    '\uA75B': 'r',
    '\uA7A7': 'r',
    '\uA783': 'r',
    '\u24E2': 's',
    '\uFF53': 's',
    '\u00DF': 's',
    '\u015B': 's',
    '\u1E65': 's',
    '\u015D': 's',
    '\u1E61': 's',
    '\u0161': 's',
    '\u1E67': 's',
    '\u1E63': 's',
    '\u1E69': 's',
    '\u0219': 's',
    '\u015F': 's',
    '\u023F': 's',
    '\uA7A9': 's',
    '\uA785': 's',
    '\u1E9B': 's',
    '\u24E3': 't',
    '\uFF54': 't',
    '\u1E6B': 't',
    '\u1E97': 't',
    '\u0165': 't',
    '\u1E6D': 't',
    '\u021B': 't',
    '\u0163': 't',
    '\u1E71': 't',
    '\u1E6F': 't',
    '\u0167': 't',
    '\u01AD': 't',
    '\u0288': 't',
    '\u2C66': 't',
    '\uA787': 't',
    '\uA729': 'tz',
    '\u24E4': 'u',
    '\uFF55': 'u',
    '\u00F9': 'u',
    '\u00FA': 'u',
    '\u00FB': 'u',
    '\u0169': 'u',
    '\u1E79': 'u',
    '\u016B': 'u',
    '\u1E7B': 'u',
    '\u016D': 'u',
    '\u00FC': 'u',
    '\u01DC': 'u',
    '\u01D8': 'u',
    '\u01D6': 'u',
    '\u01DA': 'u',
    '\u1EE7': 'u',
    '\u016F': 'u',
    '\u0171': 'u',
    '\u01D4': 'u',
    '\u0215': 'u',
    '\u0217': 'u',
    '\u01B0': 'u',
    '\u1EEB': 'u',
    '\u1EE9': 'u',
    '\u1EEF': 'u',
    '\u1EED': 'u',
    '\u1EF1': 'u',
    '\u1EE5': 'u',
    '\u1E73': 'u',
    '\u0173': 'u',
    '\u1E77': 'u',
    '\u1E75': 'u',
    '\u0289': 'u',
    '\u24E5': 'v',
    '\uFF56': 'v',
    '\u1E7D': 'v',
    '\u1E7F': 'v',
    '\u028B': 'v',
    '\uA75F': 'v',
    '\u028C': 'v',
    '\uA761': 'vy',
    '\u24E6': 'w',
    '\uFF57': 'w',
    '\u1E81': 'w',
    '\u1E83': 'w',
    '\u0175': 'w',
    '\u1E87': 'w',
    '\u1E85': 'w',
    '\u1E98': 'w',
    '\u1E89': 'w',
    '\u2C73': 'w',
    '\u24E7': 'x',
    '\uFF58': 'x',
    '\u1E8B': 'x',
    '\u1E8D': 'x',
    '\u24E8': 'y',
    '\uFF59': 'y',
    '\u1EF3': 'y',
    '\u00FD': 'y',
    '\u0177': 'y',
    '\u1EF9': 'y',
    '\u0233': 'y',
    '\u1E8F': 'y',
    '\u00FF': 'y',
    '\u1EF7': 'y',
    '\u1E99': 'y',
    '\u1EF5': 'y',
    '\u01B4': 'y',
    '\u024F': 'y',
    '\u1EFF': 'y',
    '\u24E9': 'z',
    '\uFF5A': 'z',
    '\u017A': 'z',
    '\u1E91': 'z',
    '\u017C': 'z',
    '\u017E': 'z',
    '\u1E93': 'z',
    '\u1E95': 'z',
    '\u01B6': 'z',
    '\u0225': 'z',
    '\u0240': 'z',
    '\u2C6C': 'z',
    '\uA763': 'z',
    '\u0386': '\u0391',
    '\u0388': '\u0395',
    '\u0389': '\u0397',
    '\u038A': '\u0399',
    '\u03AA': '\u0399',
    '\u038C': '\u039F',
    '\u038E': '\u03A5',
    '\u03AB': '\u03A5',
    '\u038F': '\u03A9',
    '\u03AC': '\u03B1',
    '\u03AD': '\u03B5',
    '\u03AE': '\u03B7',
    '\u03AF': '\u03B9',
    '\u03CA': '\u03B9',
    '\u0390': '\u03B9',
    '\u03CC': '\u03BF',
    '\u03CD': '\u03C5',
    '\u03CB': '\u03C5',
    '\u03B0': '\u03C5',
    '\u03CE': '\u03C9',
    '\u03C2': '\u03C3',
    '\u2019': '\''
  };

  return diacritics;
});

S2.define('select2/data/base',[
  '../utils'
], function (Utils) {
  function BaseAdapter ($element, options) {
    BaseAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(BaseAdapter, Utils.Observable);

  BaseAdapter.prototype.current = function (callback) {
    throw new Error('The `current` method must be defined in child classes.');
  };

  BaseAdapter.prototype.query = function (params, callback) {
    throw new Error('The `query` method must be defined in child classes.');
  };

  BaseAdapter.prototype.bind = function (container, $container) {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.destroy = function () {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.generateResultId = function (container, data) {
    var id = container.id + '-result-';

    id += Utils.generateChars(4);

    if (data.id != null) {
      id += '-' + data.id.toString();
    } else {
      id += '-' + Utils.generateChars(4);
    }
    return id;
  };

  return BaseAdapter;
});

S2.define('select2/data/select',[
  './base',
  '../utils',
  'jquery'
], function (BaseAdapter, Utils, $) {
  function SelectAdapter ($element, options) {
    this.$element = $element;
    this.options = options;

    SelectAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(SelectAdapter, BaseAdapter);

  SelectAdapter.prototype.current = function (callback) {
    var data = [];
    var self = this;

    this.$element.find(':selected').each(function () {
      var $option = $(this);

      var option = self.item($option);

      data.push(option);
    });

    callback(data);
  };

  SelectAdapter.prototype.select = function (data) {
    var self = this;

    data.selected = true;

    // If data.element is a DOM node, use it instead
    if ($(data.element).is('option')) {
      data.element.selected = true;

      this.$element.trigger('input').trigger('change');

      return;
    }

    if (this.$element.prop('multiple')) {
      this.current(function (currentData) {
        var val = [];

        data = [data];
        data.push.apply(data, currentData);

        for (var d = 0; d < data.length; d++) {
          var id = data[d].id;

          if ($.inArray(id, val) === -1) {
            val.push(id);
          }
        }

        self.$element.val(val);
        self.$element.trigger('input').trigger('change');
      });
    } else {
      var val = data.id;

      this.$element.val(val);
      this.$element.trigger('input').trigger('change');
    }
  };

  SelectAdapter.prototype.unselect = function (data) {
    var self = this;

    if (!this.$element.prop('multiple')) {
      return;
    }

    data.selected = false;

    if ($(data.element).is('option')) {
      data.element.selected = false;

      this.$element.trigger('input').trigger('change');

      return;
    }

    this.current(function (currentData) {
      var val = [];

      for (var d = 0; d < currentData.length; d++) {
        var id = currentData[d].id;

        if (id !== data.id && $.inArray(id, val) === -1) {
          val.push(id);
        }
      }

      self.$element.val(val);

      self.$element.trigger('input').trigger('change');
    });
  };

  SelectAdapter.prototype.bind = function (container, $container) {
    var self = this;

    this.container = container;

    container.on('select', function (params) {
      self.select(params.data);
    });

    container.on('unselect', function (params) {
      self.unselect(params.data);
    });
  };

  SelectAdapter.prototype.destroy = function () {
    // Remove anything added to child elements
    this.$element.find('*').each(function () {
      // Remove any custom data set by Select2
      Utils.RemoveData(this);
    });
  };

  SelectAdapter.prototype.query = function (params, callback) {
    var data = [];
    var self = this;

    var $options = this.$element.children();

    $options.each(function () {
      var $option = $(this);

      if (!$option.is('option') && !$option.is('optgroup')) {
        return;
      }

      var option = self.item($option);

      var matches = self.matches(params, option);

      if (matches !== null) {
        data.push(matches);
      }
    });

    callback({
      results: data
    });
  };

  SelectAdapter.prototype.addOptions = function ($options) {
    Utils.appendMany(this.$element, $options);
  };

  SelectAdapter.prototype.option = function (data) {
    var option;

    if (data.children) {
      option = document.createElement('optgroup');
      option.label = data.text;
    } else {
      option = document.createElement('option');

      if (option.textContent !== undefined) {
        option.textContent = data.text;
      } else {
        option.innerText = data.text;
      }
    }

    if (data.id !== undefined) {
      option.value = data.id;
    }

    if (data.disabled) {
      option.disabled = true;
    }

    if (data.selected) {
      option.selected = true;
    }

    if (data.title) {
      option.title = data.title;
    }

    var $option = $(option);

    var normalizedData = this._normalizeItem(data);
    normalizedData.element = option;

    // Override the option's data with the combined data
    Utils.StoreData(option, 'data', normalizedData);

    return $option;
  };

  SelectAdapter.prototype.item = function ($option) {
    var data = {};

    data = Utils.GetData($option[0], 'data');

    if (data != null) {
      return data;
    }

    if ($option.is('option')) {
      data = {
        id: $option.val(),
        text: $option.text(),
        disabled: $option.prop('disabled'),
        selected: $option.prop('selected'),
        title: $option.prop('title')
      };
    } else if ($option.is('optgroup')) {
      data = {
        text: $option.prop('label'),
        children: [],
        title: $option.prop('title')
      };

      var $children = $option.children('option');
      var children = [];

      for (var c = 0; c < $children.length; c++) {
        var $child = $($children[c]);

        var child = this.item($child);

        children.push(child);
      }

      data.children = children;
    }

    data = this._normalizeItem(data);
    data.element = $option[0];

    Utils.StoreData($option[0], 'data', data);

    return data;
  };

  SelectAdapter.prototype._normalizeItem = function (item) {
    if (item !== Object(item)) {
      item = {
        id: item,
        text: item
      };
    }

    item = $.extend({}, {
      text: ''
    }, item);

    var defaults = {
      selected: false,
      disabled: false
    };

    if (item.id != null) {
      item.id = item.id.toString();
    }

    if (item.text != null) {
      item.text = item.text.toString();
    }

    if (item._resultId == null && item.id && this.container != null) {
      item._resultId = this.generateResultId(this.container, item);
    }

    return $.extend({}, defaults, item);
  };

  SelectAdapter.prototype.matches = function (params, data) {
    var matcher = this.options.get('matcher');

    return matcher(params, data);
  };

  return SelectAdapter;
});

S2.define('select2/data/array',[
  './select',
  '../utils',
  'jquery'
], function (SelectAdapter, Utils, $) {
  function ArrayAdapter ($element, options) {
    this._dataToConvert = options.get('data') || [];

    ArrayAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(ArrayAdapter, SelectAdapter);

  ArrayAdapter.prototype.bind = function (container, $container) {
    ArrayAdapter.__super__.bind.call(this, container, $container);

    this.addOptions(this.convertToOptions(this._dataToConvert));
  };

  ArrayAdapter.prototype.select = function (data) {
    var $option = this.$element.find('option').filter(function (i, elm) {
      return elm.value == data.id.toString();
    });

    if ($option.length === 0) {
      $option = this.option(data);

      this.addOptions($option);
    }

    ArrayAdapter.__super__.select.call(this, data);
  };

  ArrayAdapter.prototype.convertToOptions = function (data) {
    var self = this;

    var $existing = this.$element.find('option');
    var existingIds = $existing.map(function () {
      return self.item($(this)).id;
    }).get();

    var $options = [];

    // Filter out all items except for the one passed in the argument
    function onlyItem (item) {
      return function () {
        return $(this).val() == item.id;
      };
    }

    for (var d = 0; d < data.length; d++) {
      var item = this._normalizeItem(data[d]);

      // Skip items which were pre-loaded, only merge the data
      if ($.inArray(item.id, existingIds) >= 0) {
        var $existingOption = $existing.filter(onlyItem(item));

        var existingData = this.item($existingOption);
        var newData = $.extend(true, {}, item, existingData);

        var $newOption = this.option(newData);

        $existingOption.replaceWith($newOption);

        continue;
      }

      var $option = this.option(item);

      if (item.children) {
        var $children = this.convertToOptions(item.children);

        Utils.appendMany($option, $children);
      }

      $options.push($option);
    }

    return $options;
  };

  return ArrayAdapter;
});

S2.define('select2/data/ajax',[
  './array',
  '../utils',
  'jquery'
], function (ArrayAdapter, Utils, $) {
  function AjaxAdapter ($element, options) {
    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

    if (this.ajaxOptions.processResults != null) {
      this.processResults = this.ajaxOptions.processResults;
    }

    AjaxAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(AjaxAdapter, ArrayAdapter);

  AjaxAdapter.prototype._applyDefaults = function (options) {
    var defaults = {
      data: function (params) {
        return $.extend({}, params, {
          q: params.term
        });
      },
      transport: function (params, success, failure) {
        var $request = $.ajax(params);

        $request.then(success);
        $request.fail(failure);

        return $request;
      }
    };

    return $.extend({}, defaults, options, true);
  };

  AjaxAdapter.prototype.processResults = function (results) {
    return results;
  };

  AjaxAdapter.prototype.query = function (params, callback) {
    var matches = [];
    var self = this;

    if (this._request != null) {
      // JSONP requests cannot always be aborted
      if ($.isFunction(this._request.abort)) {
        this._request.abort();
      }

      this._request = null;
    }

    var options = $.extend({
      type: 'GET'
    }, this.ajaxOptions);

    if (typeof options.url === 'function') {
      options.url = options.url.call(this.$element, params);
    }

    if (typeof options.data === 'function') {
      options.data = options.data.call(this.$element, params);
    }

    function request () {
      var $request = options.transport(options, function (data) {
        var results = self.processResults(data, params);

        if (self.options.get('debug') && window.console && console.error) {
          // Check to make sure that the response included a `results` key.
          if (!results || !results.results || !$.isArray(results.results)) {
            console.error(
              'Select2: The AJAX results did not return an array in the ' +
              '`results` key of the response.'
            );
          }
        }

        callback(results);
      }, function () {
        // Attempt to detect if a request was aborted
        // Only works if the transport exposes a status property
        if ('status' in $request &&
            ($request.status === 0 || $request.status === '0')) {
          return;
        }

        self.trigger('results:message', {
          message: 'errorLoading'
        });
      });

      self._request = $request;
    }

    if (this.ajaxOptions.delay && params.term != null) {
      if (this._queryTimeout) {
        window.clearTimeout(this._queryTimeout);
      }

      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
    } else {
      request();
    }
  };

  return AjaxAdapter;
});

S2.define('select2/data/tags',[
  'jquery'
], function ($) {
  function Tags (decorated, $element, options) {
    var tags = options.get('tags');

    var createTag = options.get('createTag');

    if (createTag !== undefined) {
      this.createTag = createTag;
    }

    var insertTag = options.get('insertTag');

    if (insertTag !== undefined) {
        this.insertTag = insertTag;
    }

    decorated.call(this, $element, options);

    if ($.isArray(tags)) {
      for (var t = 0; t < tags.length; t++) {
        var tag = tags[t];
        var item = this._normalizeItem(tag);

        var $option = this.option(item);

        this.$element.append($option);
      }
    }
  }

  Tags.prototype.query = function (decorated, params, callback) {
    var self = this;

    this._removeOldTags();

    if (params.term == null || params.page != null) {
      decorated.call(this, params, callback);
      return;
    }

    function wrapper (obj, child) {
      var data = obj.results;

      for (var i = 0; i < data.length; i++) {
        var option = data[i];

        var checkChildren = (
          option.children != null &&
          !wrapper({
            results: option.children
          }, true)
        );

        var optionText = (option.text || '').toUpperCase();
        var paramsTerm = (params.term || '').toUpperCase();

        var checkText = optionText === paramsTerm;

        if (checkText || checkChildren) {
          if (child) {
            return false;
          }

          obj.data = data;
          callback(obj);

          return;
        }
      }

      if (child) {
        return true;
      }

      var tag = self.createTag(params);

      if (tag != null) {
        var $option = self.option(tag);
        $option.attr('data-select2-tag', true);

        self.addOptions([$option]);

        self.insertTag(data, tag);
      }

      obj.results = data;

      callback(obj);
    }

    decorated.call(this, params, wrapper);
  };

  Tags.prototype.createTag = function (decorated, params) {
    var term = $.trim(params.term);

    if (term === '') {
      return null;
    }

    return {
      id: term,
      text: term
    };
  };

  Tags.prototype.insertTag = function (_, data, tag) {
    data.unshift(tag);
  };

  Tags.prototype._removeOldTags = function (_) {
    var $options = this.$element.find('option[data-select2-tag]');

    $options.each(function () {
      if (this.selected) {
        return;
      }

      $(this).remove();
    });
  };

  return Tags;
});

S2.define('select2/data/tokenizer',[
  'jquery'
], function ($) {
  function Tokenizer (decorated, $element, options) {
    var tokenizer = options.get('tokenizer');

    if (tokenizer !== undefined) {
      this.tokenizer = tokenizer;
    }

    decorated.call(this, $element, options);
  }

  Tokenizer.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    this.$search =  container.dropdown.$search || container.selection.$search ||
      $container.find('.select2-search__field');
  };

  Tokenizer.prototype.query = function (decorated, params, callback) {
    var self = this;

    function createAndSelect (data) {
      // Normalize the data object so we can use it for checks
      var item = self._normalizeItem(data);

      // Check if the data object already exists as a tag
      // Select it if it doesn't
      var $existingOptions = self.$element.find('option').filter(function () {
        return $(this).val() === item.id;
      });

      // If an existing option wasn't found for it, create the option
      if (!$existingOptions.length) {
        var $option = self.option(item);
        $option.attr('data-select2-tag', true);

        self._removeOldTags();
        self.addOptions([$option]);
      }

      // Select the item, now that we know there is an option for it
      select(item);
    }

    function select (data) {
      self.trigger('select', {
        data: data
      });
    }

    params.term = params.term || '';

    var tokenData = this.tokenizer(params, this.options, createAndSelect);

    if (tokenData.term !== params.term) {
      // Replace the search term if we have the search box
      if (this.$search.length) {
        this.$search.val(tokenData.term);
        this.$search.trigger('focus');
      }

      params.term = tokenData.term;
    }

    decorated.call(this, params, callback);
  };

  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
    var separators = options.get('tokenSeparators') || [];
    var term = params.term;
    var i = 0;

    var createTag = this.createTag || function (params) {
      return {
        id: params.term,
        text: params.term
      };
    };

    while (i < term.length) {
      var termChar = term[i];

      if ($.inArray(termChar, separators) === -1) {
        i++;

        continue;
      }

      var part = term.substr(0, i);
      var partParams = $.extend({}, params, {
        term: part
      });

      var data = createTag(partParams);

      if (data == null) {
        i++;
        continue;
      }

      callback(data);

      // Reset the term to not include the tokenized portion
      term = term.substr(i + 1) || '';
      i = 0;
    }

    return {
      term: term
    };
  };

  return Tokenizer;
});

S2.define('select2/data/minimumInputLength',[

], function () {
  function MinimumInputLength (decorated, $e, options) {
    this.minimumInputLength = options.get('minimumInputLength');

    decorated.call(this, $e, options);
  }

  MinimumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (params.term.length < this.minimumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooShort',
        args: {
          minimum: this.minimumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MinimumInputLength;
});

S2.define('select2/data/maximumInputLength',[

], function () {
  function MaximumInputLength (decorated, $e, options) {
    this.maximumInputLength = options.get('maximumInputLength');

    decorated.call(this, $e, options);
  }

  MaximumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (this.maximumInputLength > 0 &&
        params.term.length > this.maximumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooLong',
        args: {
          maximum: this.maximumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MaximumInputLength;
});

S2.define('select2/data/maximumSelectionLength',[

], function (){
  function MaximumSelectionLength (decorated, $e, options) {
    this.maximumSelectionLength = options.get('maximumSelectionLength');

    decorated.call(this, $e, options);
  }

  MaximumSelectionLength.prototype.bind =
    function (decorated, container, $container) {
      var self = this;

      decorated.call(this, container, $container);

      container.on('select', function () {
        self._checkIfMaximumSelected();
      });
  };

  MaximumSelectionLength.prototype.query =
    function (decorated, params, callback) {
      var self = this;

      this._checkIfMaximumSelected(function () {
        decorated.call(self, params, callback);
      });
  };

  MaximumSelectionLength.prototype._checkIfMaximumSelected =
    function (_, successCallback) {
      var self = this;

      this.current(function (currentData) {
        var count = currentData != null ? currentData.length : 0;
        if (self.maximumSelectionLength > 0 &&
          count >= self.maximumSelectionLength) {
          self.trigger('results:message', {
            message: 'maximumSelected',
            args: {
              maximum: self.maximumSelectionLength
            }
          });
          return;
        }

        if (successCallback) {
          successCallback();
        }
      });
  };

  return MaximumSelectionLength;
});

S2.define('select2/dropdown',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Dropdown ($element, options) {
    this.$element = $element;
    this.options = options;

    Dropdown.__super__.constructor.call(this);
  }

  Utils.Extend(Dropdown, Utils.Observable);

  Dropdown.prototype.render = function () {
    var $dropdown = $(
      '<span class="select2-dropdown">' +
        '<span class="select2-results"></span>' +
      '</span>'
    );

    $dropdown.attr('dir', this.options.get('dir'));

    this.$dropdown = $dropdown;

    return $dropdown;
  };

  Dropdown.prototype.bind = function () {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.position = function ($dropdown, $container) {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.destroy = function () {
    // Remove the dropdown from the DOM
    this.$dropdown.remove();
  };

  return Dropdown;
});

S2.define('select2/dropdown/search',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function Search () { }

  Search.prototype.render = function (decorated) {
    var $rendered = decorated.call(this);

    var $search = $(
      '<span class="select2-search select2-search--dropdown">' +
        '<input class="select2-search__field" type="search" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
        ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
      '</span>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    $rendered.prepend($search);

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var resultsId = container.id + '-results';

    decorated.call(this, container, $container);

    this.$search.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();
    });

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$search.on('input', function (evt) {
      // Unbind the duplicated `keyup` event
      $(this).off('keyup');
    });

    this.$search.on('keyup input', function (evt) {
      self.handleSearch(evt);
    });

    container.on('open', function () {
      self.$search.attr('tabindex', 0);
      self.$search.attr('aria-controls', resultsId);

      self.$search.trigger('focus');

      window.setTimeout(function () {
        self.$search.trigger('focus');
      }, 0);
    });

    container.on('close', function () {
      self.$search.attr('tabindex', -1);
      self.$search.removeAttr('aria-controls');
      self.$search.removeAttr('aria-activedescendant');

      self.$search.val('');
      self.$search.trigger('blur');
    });

    container.on('focus', function () {
      if (!container.isOpen()) {
        self.$search.trigger('focus');
      }
    });

    container.on('results:all', function (params) {
      if (params.query.term == null || params.query.term === '') {
        var showSearch = self.showSearch(params);

        if (showSearch) {
          self.$searchContainer.removeClass('select2-search--hide');
        } else {
          self.$searchContainer.addClass('select2-search--hide');
        }
      }
    });

    container.on('results:focus', function (params) {
      if (params.data._resultId) {
        self.$search.attr('aria-activedescendant', params.data._resultId);
      } else {
        self.$search.removeAttr('aria-activedescendant');
      }
    });
  };

  Search.prototype.handleSearch = function (evt) {
    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.showSearch = function (_, params) {
    return true;
  };

  return Search;
});

S2.define('select2/dropdown/hidePlaceholder',[

], function () {
  function HidePlaceholder (decorated, $element, options, dataAdapter) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options, dataAdapter);
  }

  HidePlaceholder.prototype.append = function (decorated, data) {
    data.results = this.removePlaceholder(data.results);

    decorated.call(this, data);
  };

  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
    var modifiedData = data.slice(0);

    for (var d = data.length - 1; d >= 0; d--) {
      var item = data[d];

      if (this.placeholder.id === item.id) {
        modifiedData.splice(d, 1);
      }
    }

    return modifiedData;
  };

  return HidePlaceholder;
});

S2.define('select2/dropdown/infiniteScroll',[
  'jquery'
], function ($) {
  function InfiniteScroll (decorated, $element, options, dataAdapter) {
    this.lastParams = {};

    decorated.call(this, $element, options, dataAdapter);

    this.$loadingMore = this.createLoadingMore();
    this.loading = false;
  }

  InfiniteScroll.prototype.append = function (decorated, data) {
    this.$loadingMore.remove();
    this.loading = false;

    decorated.call(this, data);

    if (this.showLoadingMore(data)) {
      this.$results.append(this.$loadingMore);
      this.loadMoreIfNeeded();
    }
  };

  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('query', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    container.on('query:append', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));
  };

  InfiniteScroll.prototype.loadMoreIfNeeded = function () {
    var isLoadMoreVisible = $.contains(
      document.documentElement,
      this.$loadingMore[0]
    );

    if (this.loading || !isLoadMoreVisible) {
      return;
    }

    var currentOffset = this.$results.offset().top +
      this.$results.outerHeight(false);
    var loadingMoreOffset = this.$loadingMore.offset().top +
      this.$loadingMore.outerHeight(false);

    if (currentOffset + 50 >= loadingMoreOffset) {
      this.loadMore();
    }
  };

  InfiniteScroll.prototype.loadMore = function () {
    this.loading = true;

    var params = $.extend({}, {page: 1}, this.lastParams);

    params.page++;

    this.trigger('query:append', params);
  };

  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
    return data.pagination && data.pagination.more;
  };

  InfiniteScroll.prototype.createLoadingMore = function () {
    var $option = $(
      '<li ' +
      'class="select2-results__option select2-results__option--load-more"' +
      'role="option" aria-disabled="true"></li>'
    );

    var message = this.options.get('translations').get('loadingMore');

    $option.html(message(this.lastParams));

    return $option;
  };

  return InfiniteScroll;
});

S2.define('select2/dropdown/attachBody',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function AttachBody (decorated, $element, options) {
    this.$dropdownParent = $(options.get('dropdownParent') || document.body);

    decorated.call(this, $element, options);
  }

  AttachBody.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self._showDropdown();
      self._attachPositioningHandler(container);

      // Must bind after the results handlers to ensure correct sizing
      self._bindContainerResultHandlers(container);
    });

    container.on('close', function () {
      self._hideDropdown();
      self._detachPositioningHandler(container);
    });

    this.$dropdownContainer.on('mousedown', function (evt) {
      evt.stopPropagation();
    });
  };

  AttachBody.prototype.destroy = function (decorated) {
    decorated.call(this);

    this.$dropdownContainer.remove();
  };

  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
    // Clone all of the container classes
    $dropdown.attr('class', $container.attr('class'));

    $dropdown.removeClass('select2');
    $dropdown.addClass('select2-container--open');

    $dropdown.css({
      position: 'absolute',
      top: -999999
    });

    this.$container = $container;
  };

  AttachBody.prototype.render = function (decorated) {
    var $container = $('<span></span>');

    var $dropdown = decorated.call(this);
    $container.append($dropdown);

    this.$dropdownContainer = $container;

    return $container;
  };

  AttachBody.prototype._hideDropdown = function (decorated) {
    this.$dropdownContainer.detach();
  };

  AttachBody.prototype._bindContainerResultHandlers =
      function (decorated, container) {

    // These should only be bound once
    if (this._containerResultsHandlersBound) {
      return;
    }

    var self = this;

    container.on('results:all', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('results:append', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('results:message', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('select', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    container.on('unselect', function () {
      self._positionDropdown();
      self._resizeDropdown();
    });

    this._containerResultsHandlersBound = true;
  };

  AttachBody.prototype._attachPositioningHandler =
      function (decorated, container) {
    var self = this;

    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.each(function () {
      Utils.StoreData(this, 'select2-scroll-position', {
        x: $(this).scrollLeft(),
        y: $(this).scrollTop()
      });
    });

    $watchers.on(scrollEvent, function (ev) {
      var position = Utils.GetData(this, 'select2-scroll-position');
      $(this).scrollTop(position.y);
    });

    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
      function (e) {
      self._positionDropdown();
      self._resizeDropdown();
    });
  };

  AttachBody.prototype._detachPositioningHandler =
      function (decorated, container) {
    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.off(scrollEvent);

    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
  };

  AttachBody.prototype._positionDropdown = function () {
    var $window = $(window);

    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

    var newDirection = null;

    var offset = this.$container.offset();

    offset.bottom = offset.top + this.$container.outerHeight(false);

    var container = {
      height: this.$container.outerHeight(false)
    };

    container.top = offset.top;
    container.bottom = offset.top + container.height;

    var dropdown = {
      height: this.$dropdown.outerHeight(false)
    };

    var viewport = {
      top: $window.scrollTop(),
      bottom: $window.scrollTop() + $window.height()
    };

    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

    var css = {
      left: offset.left,
      top: container.bottom
    };

    // Determine what the parent element is to use for calculating the offset
    var $offsetParent = this.$dropdownParent;

    // For statically positioned elements, we need to get the element
    // that is determining the offset
    if ($offsetParent.css('position') === 'static') {
      $offsetParent = $offsetParent.offsetParent();
    }

    var parentOffset = {
      top: 0,
      left: 0
    };

    if (
      $.contains(document.body, $offsetParent[0]) ||
      $offsetParent[0].isConnected
      ) {
      parentOffset = $offsetParent.offset();
    }

    css.top -= parentOffset.top;
    css.left -= parentOffset.left;

    if (!isCurrentlyAbove && !isCurrentlyBelow) {
      newDirection = 'below';
    }

    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
      newDirection = 'above';
    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
      newDirection = 'below';
    }

    if (newDirection == 'above' ||
      (isCurrentlyAbove && newDirection !== 'below')) {
      css.top = container.top - parentOffset.top - dropdown.height;
    }

    if (newDirection != null) {
      this.$dropdown
        .removeClass('select2-dropdown--below select2-dropdown--above')
        .addClass('select2-dropdown--' + newDirection);
      this.$container
        .removeClass('select2-container--below select2-container--above')
        .addClass('select2-container--' + newDirection);
    }

    this.$dropdownContainer.css(css);
  };

  AttachBody.prototype._resizeDropdown = function () {
    var css = {
      width: this.$container.outerWidth(false) + 'px'
    };

    if (this.options.get('dropdownAutoWidth')) {
      css.minWidth = css.width;
      css.position = 'relative';
      css.width = 'auto';
    }

    this.$dropdown.css(css);
  };

  AttachBody.prototype._showDropdown = function (decorated) {
    this.$dropdownContainer.appendTo(this.$dropdownParent);

    this._positionDropdown();
    this._resizeDropdown();
  };

  return AttachBody;
});

S2.define('select2/dropdown/minimumResultsForSearch',[

], function () {
  function countResults (data) {
    var count = 0;

    for (var d = 0; d < data.length; d++) {
      var item = data[d];

      if (item.children) {
        count += countResults(item.children);
      } else {
        count++;
      }
    }

    return count;
  }

  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

    if (this.minimumResultsForSearch < 0) {
      this.minimumResultsForSearch = Infinity;
    }

    decorated.call(this, $element, options, dataAdapter);
  }

  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
    if (countResults(params.data.results) < this.minimumResultsForSearch) {
      return false;
    }

    return decorated.call(this, params);
  };

  return MinimumResultsForSearch;
});

S2.define('select2/dropdown/selectOnClose',[
  '../utils'
], function (Utils) {
  function SelectOnClose () { }

  SelectOnClose.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('close', function (params) {
      self._handleSelectOnClose(params);
    });
  };

  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
    if (params && params.originalSelect2Event != null) {
      var event = params.originalSelect2Event;

      // Don't select an item if the close event was triggered from a select or
      // unselect event
      if (event._type === 'select' || event._type === 'unselect') {
        return;
      }
    }

    var $highlightedResults = this.getHighlightedResults();

    // Only select highlighted results
    if ($highlightedResults.length < 1) {
      return;
    }

    var data = Utils.GetData($highlightedResults[0], 'data');

    // Don't re-select already selected resulte
    if (
      (data.element != null && data.element.selected) ||
      (data.element == null && data.selected)
    ) {
      return;
    }

    this.trigger('select', {
        data: data
    });
  };

  return SelectOnClose;
});

S2.define('select2/dropdown/closeOnSelect',[

], function () {
  function CloseOnSelect () { }

  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('select', function (evt) {
      self._selectTriggered(evt);
    });

    container.on('unselect', function (evt) {
      self._selectTriggered(evt);
    });
  };

  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
    var originalEvent = evt.originalEvent;

    // Don't close if the control key is being held
    if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {
      return;
    }

    this.trigger('close', {
      originalEvent: originalEvent,
      originalSelect2Event: evt
    });
  };

  return CloseOnSelect;
});

S2.define('select2/i18n/en',[],function () {
  // English
  return {
    errorLoading: function () {
      return 'The results could not be loaded.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Please delete ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Please enter ' + remainingChars + ' or more characters';

      return message;
    },
    loadingMore: function () {
      return 'Loading more results…';
    },
    maximumSelected: function (args) {
      var message = 'You can only select ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No results found';
    },
    searching: function () {
      return 'Searching…';
    },
    removeAllItems: function () {
      return 'Remove all items';
    }
  };
});

S2.define('select2/defaults',[
  'jquery',
  'require',

  './results',

  './selection/single',
  './selection/multiple',
  './selection/placeholder',
  './selection/allowClear',
  './selection/search',
  './selection/eventRelay',

  './utils',
  './translation',
  './diacritics',

  './data/select',
  './data/array',
  './data/ajax',
  './data/tags',
  './data/tokenizer',
  './data/minimumInputLength',
  './data/maximumInputLength',
  './data/maximumSelectionLength',

  './dropdown',
  './dropdown/search',
  './dropdown/hidePlaceholder',
  './dropdown/infiniteScroll',
  './dropdown/attachBody',
  './dropdown/minimumResultsForSearch',
  './dropdown/selectOnClose',
  './dropdown/closeOnSelect',

  './i18n/en'
], function ($, require,

             ResultsList,

             SingleSelection, MultipleSelection, Placeholder, AllowClear,
             SelectionSearch, EventRelay,

             Utils, Translation, DIACRITICS,

             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

             EnglishTranslation) {
  function Defaults () {
    this.reset();
  }

  Defaults.prototype.apply = function (options) {
    options = $.extend(true, {}, this.defaults, options);

    if (options.dataAdapter == null) {
      if (options.ajax != null) {
        options.dataAdapter = AjaxData;
      } else if (options.data != null) {
        options.dataAdapter = ArrayData;
      } else {
        options.dataAdapter = SelectData;
      }

      if (options.minimumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MinimumInputLength
        );
      }

      if (options.maximumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumInputLength
        );
      }

      if (options.maximumSelectionLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumSelectionLength
        );
      }

      if (options.tags) {
        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
      }

      if (options.tokenSeparators != null || options.tokenizer != null) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Tokenizer
        );
      }

      if (options.query != null) {
        var Query = require(options.amdBase + 'compat/query');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Query
        );
      }

      if (options.initSelection != null) {
        var InitSelection = require(options.amdBase + 'compat/initSelection');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          InitSelection
        );
      }
    }

    if (options.resultsAdapter == null) {
      options.resultsAdapter = ResultsList;

      if (options.ajax != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          InfiniteScroll
        );
      }

      if (options.placeholder != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          HidePlaceholder
        );
      }

      if (options.selectOnClose) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          SelectOnClose
        );
      }
    }

    if (options.dropdownAdapter == null) {
      if (options.multiple) {
        options.dropdownAdapter = Dropdown;
      } else {
        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

        options.dropdownAdapter = SearchableDropdown;
      }

      if (options.minimumResultsForSearch !== 0) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          MinimumResultsForSearch
        );
      }

      if (options.closeOnSelect) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          CloseOnSelect
        );
      }

      if (
        options.dropdownCssClass != null ||
        options.dropdownCss != null ||
        options.adaptDropdownCssClass != null
      ) {
        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          DropdownCSS
        );
      }

      options.dropdownAdapter = Utils.Decorate(
        options.dropdownAdapter,
        AttachBody
      );
    }

    if (options.selectionAdapter == null) {
      if (options.multiple) {
        options.selectionAdapter = MultipleSelection;
      } else {
        options.selectionAdapter = SingleSelection;
      }

      // Add the placeholder mixin if a placeholder was specified
      if (options.placeholder != null) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          Placeholder
        );
      }

      if (options.allowClear) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          AllowClear
        );
      }

      if (options.multiple) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          SelectionSearch
        );
      }

      if (
        options.containerCssClass != null ||
        options.containerCss != null ||
        options.adaptContainerCssClass != null
      ) {
        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          ContainerCSS
        );
      }

      options.selectionAdapter = Utils.Decorate(
        options.selectionAdapter,
        EventRelay
      );
    }

    // If the defaults were not previously applied from an element, it is
    // possible for the language option to have not been resolved
    options.language = this._resolveLanguage(options.language);

    // Always fall back to English since it will always be complete
    options.language.push('en');

    var uniqueLanguages = [];

    for (var l = 0; l < options.language.length; l++) {
      var language = options.language[l];

      if (uniqueLanguages.indexOf(language) === -1) {
        uniqueLanguages.push(language);
      }
    }

    options.language = uniqueLanguages;

    options.translations = this._processTranslations(
      options.language,
      options.debug
    );

    return options;
  };

  Defaults.prototype.reset = function () {
    function stripDiacritics (text) {
      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
      function match(a) {
        return DIACRITICS[a] || a;
      }

      return text.replace(/[^\u0000-\u007E]/g, match);
    }

    function matcher (params, data) {
      // Always return the object if there is nothing to compare
      if ($.trim(params.term) === '') {
        return data;
      }

      // Do a recursive check for options with children
      if (data.children && data.children.length > 0) {
        // Clone the data object if there are children
        // This is required as we modify the object to remove any non-matches
        var match = $.extend(true, {}, data);

        // Check each child of the option
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          var matches = matcher(params, child);

          // If there wasn't a match, remove the object in the array
          if (matches == null) {
            match.children.splice(c, 1);
          }
        }

        // If any children matched, return the new object
        if (match.children.length > 0) {
          return match;
        }

        // If there were no matching children, check just the plain object
        return matcher(params, match);
      }

      var original = stripDiacritics(data.text).toUpperCase();
      var term = stripDiacritics(params.term).toUpperCase();

      // Check if the text contains the term
      if (original.indexOf(term) > -1) {
        return data;
      }

      // If it doesn't contain the term, don't return anything
      return null;
    }

    this.defaults = {
      amdBase: './',
      amdLanguageBase: './i18n/',
      closeOnSelect: true,
      debug: false,
      dropdownAutoWidth: false,
      escapeMarkup: Utils.escapeMarkup,
      language: {},
      matcher: matcher,
      minimumInputLength: 0,
      maximumInputLength: 0,
      maximumSelectionLength: 0,
      minimumResultsForSearch: 0,
      selectOnClose: false,
      scrollAfterSelect: false,
      sorter: function (data) {
        return data;
      },
      templateResult: function (result) {
        return result.text;
      },
      templateSelection: function (selection) {
        return selection.text;
      },
      theme: 'default',
      width: 'resolve'
    };
  };

  Defaults.prototype.applyFromElement = function (options, $element) {
    var optionLanguage = options.language;
    var defaultLanguage = this.defaults.language;
    var elementLanguage = $element.prop('lang');
    var parentLanguage = $element.closest('[lang]').prop('lang');

    var languages = Array.prototype.concat.call(
      this._resolveLanguage(elementLanguage),
      this._resolveLanguage(optionLanguage),
      this._resolveLanguage(defaultLanguage),
      this._resolveLanguage(parentLanguage)
    );

    options.language = languages;

    return options;
  };

  Defaults.prototype._resolveLanguage = function (language) {
    if (!language) {
      return [];
    }

    if ($.isEmptyObject(language)) {
      return [];
    }

    if ($.isPlainObject(language)) {
      return [language];
    }

    var languages;

    if (!$.isArray(language)) {
      languages = [language];
    } else {
      languages = language;
    }

    var resolvedLanguages = [];

    for (var l = 0; l < languages.length; l++) {
      resolvedLanguages.push(languages[l]);

      if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {
        // Extract the region information if it is included
        var languageParts = languages[l].split('-');
        var baseLanguage = languageParts[0];

        resolvedLanguages.push(baseLanguage);
      }
    }

    return resolvedLanguages;
  };

  Defaults.prototype._processTranslations = function (languages, debug) {
    var translations = new Translation();

    for (var l = 0; l < languages.length; l++) {
      var languageData = new Translation();

      var language = languages[l];

      if (typeof language === 'string') {
        try {
          // Try to load it with the original name
          languageData = Translation.loadPath(language);
        } catch (e) {
          try {
            // If we couldn't load it, check if it wasn't the full path
            language = this.defaults.amdLanguageBase + language;
            languageData = Translation.loadPath(language);
          } catch (ex) {
            // The translation could not be loaded at all. Sometimes this is
            // because of a configuration problem, other times this can be
            // because of how Select2 helps load all possible translation files
            if (debug && window.console && console.warn) {
              console.warn(
                'Select2: The language file for "' + language + '" could ' +
                'not be automatically loaded. A fallback will be used instead.'
              );
            }
          }
        }
      } else if ($.isPlainObject(language)) {
        languageData = new Translation(language);
      } else {
        languageData = language;
      }

      translations.extend(languageData);
    }

    return translations;
  };

  Defaults.prototype.set = function (key, value) {
    var camelKey = $.camelCase(key);

    var data = {};
    data[camelKey] = value;

    var convertedData = Utils._convertData(data);

    $.extend(true, this.defaults, convertedData);
  };

  var defaults = new Defaults();

  return defaults;
});

S2.define('select2/options',[
  'require',
  'jquery',
  './defaults',
  './utils'
], function (require, $, Defaults, Utils) {
  function Options (options, $element) {
    this.options = options;

    if ($element != null) {
      this.fromElement($element);
    }

    if ($element != null) {
      this.options = Defaults.applyFromElement(this.options, $element);
    }

    this.options = Defaults.apply(this.options);

    if ($element && $element.is('input')) {
      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

      this.options.dataAdapter = Utils.Decorate(
        this.options.dataAdapter,
        InputCompat
      );
    }
  }

  Options.prototype.fromElement = function ($e) {
    var excludedData = ['select2'];

    if (this.options.multiple == null) {
      this.options.multiple = $e.prop('multiple');
    }

    if (this.options.disabled == null) {
      this.options.disabled = $e.prop('disabled');
    }

    if (this.options.dir == null) {
      if ($e.prop('dir')) {
        this.options.dir = $e.prop('dir');
      } else if ($e.closest('[dir]').prop('dir')) {
        this.options.dir = $e.closest('[dir]').prop('dir');
      } else {
        this.options.dir = 'ltr';
      }
    }

    $e.prop('disabled', this.options.disabled);
    $e.prop('multiple', this.options.multiple);

    if (Utils.GetData($e[0], 'select2Tags')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-select2-tags` attribute has been changed to ' +
          'use the `data-data` and `data-tags="true"` attributes and will be ' +
          'removed in future versions of Select2.'
        );
      }

      Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
      Utils.StoreData($e[0], 'tags', true);
    }

    if (Utils.GetData($e[0], 'ajaxUrl')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-ajax-url` attribute has been changed to ' +
          '`data-ajax--url` and support for the old attribute will be removed' +
          ' in future versions of Select2.'
        );
      }

      $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
      Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
    }

    var dataset = {};

    function upperCaseLetter(_, letter) {
      return letter.toUpperCase();
    }

    // Pre-load all of the attributes which are prefixed with `data-`
    for (var attr = 0; attr < $e[0].attributes.length; attr++) {
      var attributeName = $e[0].attributes[attr].name;
      var prefix = 'data-';

      if (attributeName.substr(0, prefix.length) == prefix) {
        // Get the contents of the attribute after `data-`
        var dataName = attributeName.substring(prefix.length);

        // Get the data contents from the consistent source
        // This is more than likely the jQuery data helper
        var dataValue = Utils.GetData($e[0], dataName);

        // camelCase the attribute name to match the spec
        var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);

        // Store the data attribute contents into the dataset since
        dataset[camelDataName] = dataValue;
      }
    }

    // Prefer the element's `dataset` attribute if it exists
    // jQuery 1.x does not correctly handle data attributes with multiple dashes
    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
      dataset = $.extend(true, {}, $e[0].dataset, dataset);
    }

    // Prefer our internal data cache if it exists
    var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);

    data = Utils._convertData(data);

    for (var key in data) {
      if ($.inArray(key, excludedData) > -1) {
        continue;
      }

      if ($.isPlainObject(this.options[key])) {
        $.extend(this.options[key], data[key]);
      } else {
        this.options[key] = data[key];
      }
    }

    return this;
  };

  Options.prototype.get = function (key) {
    return this.options[key];
  };

  Options.prototype.set = function (key, val) {
    this.options[key] = val;
  };

  return Options;
});

S2.define('select2/core',[
  'jquery',
  './options',
  './utils',
  './keys'
], function ($, Options, Utils, KEYS) {
  var Select2 = function ($element, options) {
    if (Utils.GetData($element[0], 'select2') != null) {
      Utils.GetData($element[0], 'select2').destroy();
    }

    this.$element = $element;

    this.id = this._generateId($element);

    options = options || {};

    this.options = new Options(options, $element);

    Select2.__super__.constructor.call(this);

    // Set up the tabindex

    var tabindex = $element.attr('tabindex') || 0;
    Utils.StoreData($element[0], 'old-tabindex', tabindex);
    $element.attr('tabindex', '-1');

    // Set up containers and adapters

    var DataAdapter = this.options.get('dataAdapter');
    this.dataAdapter = new DataAdapter($element, this.options);

    var $container = this.render();

    this._placeContainer($container);

    var SelectionAdapter = this.options.get('selectionAdapter');
    this.selection = new SelectionAdapter($element, this.options);
    this.$selection = this.selection.render();

    this.selection.position(this.$selection, $container);

    var DropdownAdapter = this.options.get('dropdownAdapter');
    this.dropdown = new DropdownAdapter($element, this.options);
    this.$dropdown = this.dropdown.render();

    this.dropdown.position(this.$dropdown, $container);

    var ResultsAdapter = this.options.get('resultsAdapter');
    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
    this.$results = this.results.render();

    this.results.position(this.$results, this.$dropdown);

    // Bind events

    var self = this;

    // Bind the container to all of the adapters
    this._bindAdapters();

    // Register any DOM event handlers
    this._registerDomEvents();

    // Register any internal event handlers
    this._registerDataEvents();
    this._registerSelectionEvents();
    this._registerDropdownEvents();
    this._registerResultsEvents();
    this._registerEvents();

    // Set the initial state
    this.dataAdapter.current(function (initialData) {
      self.trigger('selection:update', {
        data: initialData
      });
    });

    // Hide the original select
    $element.addClass('select2-hidden-accessible');
    $element.attr('aria-hidden', 'true');

    // Synchronize any monitored attributes
    this._syncAttributes();

    Utils.StoreData($element[0], 'select2', this);

    // Ensure backwards compatibility with $element.data('select2').
    $element.data('select2', this);
  };

  Utils.Extend(Select2, Utils.Observable);

  Select2.prototype._generateId = function ($element) {
    var id = '';

    if ($element.attr('id') != null) {
      id = $element.attr('id');
    } else if ($element.attr('name') != null) {
      id = $element.attr('name') + '-' + Utils.generateChars(2);
    } else {
      id = Utils.generateChars(4);
    }

    id = id.replace(/(:|\.|\[|\]|,)/g, '');
    id = 'select2-' + id;

    return id;
  };

  Select2.prototype._placeContainer = function ($container) {
    $container.insertAfter(this.$element);

    var width = this._resolveWidth(this.$element, this.options.get('width'));

    if (width != null) {
      $container.css('width', width);
    }
  };

  Select2.prototype._resolveWidth = function ($element, method) {
    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

    if (method == 'resolve') {
      var styleWidth = this._resolveWidth($element, 'style');

      if (styleWidth != null) {
        return styleWidth;
      }

      return this._resolveWidth($element, 'element');
    }

    if (method == 'element') {
      var elementWidth = $element.outerWidth(false);

      if (elementWidth <= 0) {
        return 'auto';
      }

      return elementWidth + 'px';
    }

    if (method == 'style') {
      var style = $element.attr('style');

      if (typeof(style) !== 'string') {
        return null;
      }

      var attrs = style.split(';');

      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
        var attr = attrs[i].replace(/\s/g, '');
        var matches = attr.match(WIDTH);

        if (matches !== null && matches.length >= 1) {
          return matches[1];
        }
      }

      return null;
    }

    if (method == 'computedstyle') {
      var computedStyle = window.getComputedStyle($element[0]);

      return computedStyle.width;
    }

    return method;
  };

  Select2.prototype._bindAdapters = function () {
    this.dataAdapter.bind(this, this.$container);
    this.selection.bind(this, this.$container);

    this.dropdown.bind(this, this.$container);
    this.results.bind(this, this.$container);
  };

  Select2.prototype._registerDomEvents = function () {
    var self = this;

    this.$element.on('change.select2', function () {
      self.dataAdapter.current(function (data) {
        self.trigger('selection:update', {
          data: data
        });
      });
    });

    this.$element.on('focus.select2', function (evt) {
      self.trigger('focus', evt);
    });

    this._syncA = Utils.bind(this._syncAttributes, this);
    this._syncS = Utils.bind(this._syncSubtree, this);

    if (this.$element[0].attachEvent) {
      this.$element[0].attachEvent('onpropertychange', this._syncA);
    }

    var observer = window.MutationObserver ||
      window.WebKitMutationObserver ||
      window.MozMutationObserver
    ;

    if (observer != null) {
      this._observer = new observer(function (mutations) {
        self._syncA();
        self._syncS(null, mutations);
      });
      this._observer.observe(this.$element[0], {
        attributes: true,
        childList: true,
        subtree: false
      });
    } else if (this.$element[0].addEventListener) {
      this.$element[0].addEventListener(
        'DOMAttrModified',
        self._syncA,
        false
      );
      this.$element[0].addEventListener(
        'DOMNodeInserted',
        self._syncS,
        false
      );
      this.$element[0].addEventListener(
        'DOMNodeRemoved',
        self._syncS,
        false
      );
    }
  };

  Select2.prototype._registerDataEvents = function () {
    var self = this;

    this.dataAdapter.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerSelectionEvents = function () {
    var self = this;
    var nonRelayEvents = ['toggle', 'focus'];

    this.selection.on('toggle', function () {
      self.toggleDropdown();
    });

    this.selection.on('focus', function (params) {
      self.focus(params);
    });

    this.selection.on('*', function (name, params) {
      if ($.inArray(name, nonRelayEvents) !== -1) {
        return;
      }

      self.trigger(name, params);
    });
  };

  Select2.prototype._registerDropdownEvents = function () {
    var self = this;

    this.dropdown.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerResultsEvents = function () {
    var self = this;

    this.results.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerEvents = function () {
    var self = this;

    this.on('open', function () {
      self.$container.addClass('select2-container--open');
    });

    this.on('close', function () {
      self.$container.removeClass('select2-container--open');
    });

    this.on('enable', function () {
      self.$container.removeClass('select2-container--disabled');
    });

    this.on('disable', function () {
      self.$container.addClass('select2-container--disabled');
    });

    this.on('blur', function () {
      self.$container.removeClass('select2-container--focus');
    });

    this.on('query', function (params) {
      if (!self.isOpen()) {
        self.trigger('open', {});
      }

      this.dataAdapter.query(params, function (data) {
        self.trigger('results:all', {
          data: data,
          query: params
        });
      });
    });

    this.on('query:append', function (params) {
      this.dataAdapter.query(params, function (data) {
        self.trigger('results:append', {
          data: data,
          query: params
        });
      });
    });

    this.on('keypress', function (evt) {
      var key = evt.which;

      if (self.isOpen()) {
        if (key === KEYS.ESC || key === KEYS.TAB ||
            (key === KEYS.UP && evt.altKey)) {
          self.close(evt);

          evt.preventDefault();
        } else if (key === KEYS.ENTER) {
          self.trigger('results:select', {});

          evt.preventDefault();
        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
          self.trigger('results:toggle', {});

          evt.preventDefault();
        } else if (key === KEYS.UP) {
          self.trigger('results:previous', {});

          evt.preventDefault();
        } else if (key === KEYS.DOWN) {
          self.trigger('results:next', {});

          evt.preventDefault();
        }
      } else {
        if (key === KEYS.ENTER || key === KEYS.SPACE ||
            (key === KEYS.DOWN && evt.altKey)) {
          self.open();

          evt.preventDefault();
        }
      }
    });
  };

  Select2.prototype._syncAttributes = function () {
    this.options.set('disabled', this.$element.prop('disabled'));

    if (this.isDisabled()) {
      if (this.isOpen()) {
        this.close();
      }

      this.trigger('disable', {});
    } else {
      this.trigger('enable', {});
    }
  };

  Select2.prototype._isChangeMutation = function (evt, mutations) {
    var changed = false;
    var self = this;

    // Ignore any mutation events raised for elements that aren't options or
    // optgroups. This handles the case when the select element is destroyed
    if (
      evt && evt.target && (
        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
      )
    ) {
      return;
    }

    if (!mutations) {
      // If mutation events aren't supported, then we can only assume that the
      // change affected the selections
      changed = true;
    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
      for (var n = 0; n < mutations.addedNodes.length; n++) {
        var node = mutations.addedNodes[n];

        if (node.selected) {
          changed = true;
        }
      }
    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
      changed = true;
    } else if ($.isArray(mutations)) {
      $.each(mutations, function(evt, mutation) {
        if (self._isChangeMutation(evt, mutation)) {
          // We've found a change mutation.
          // Let's escape from the loop and continue
          changed = true;
          return false;
        }
      });
    }
    return changed;
  };

  Select2.prototype._syncSubtree = function (evt, mutations) {
    var changed = this._isChangeMutation(evt, mutations);
    var self = this;

    // Only re-pull the data if we think there is a change
    if (changed) {
      this.dataAdapter.current(function (currentData) {
        self.trigger('selection:update', {
          data: currentData
        });
      });
    }
  };

  /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */
  Select2.prototype.trigger = function (name, args) {
    var actualTrigger = Select2.__super__.trigger;
    var preTriggerMap = {
      'open': 'opening',
      'close': 'closing',
      'select': 'selecting',
      'unselect': 'unselecting',
      'clear': 'clearing'
    };

    if (args === undefined) {
      args = {};
    }

    if (name in preTriggerMap) {
      var preTriggerName = preTriggerMap[name];
      var preTriggerArgs = {
        prevented: false,
        name: name,
        args: args
      };

      actualTrigger.call(this, preTriggerName, preTriggerArgs);

      if (preTriggerArgs.prevented) {
        args.prevented = true;

        return;
      }
    }

    actualTrigger.call(this, name, args);
  };

  Select2.prototype.toggleDropdown = function () {
    if (this.isDisabled()) {
      return;
    }

    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };

  Select2.prototype.open = function () {
    if (this.isOpen()) {
      return;
    }

    if (this.isDisabled()) {
      return;
    }

    this.trigger('query', {});
  };

  Select2.prototype.close = function (evt) {
    if (!this.isOpen()) {
      return;
    }

    this.trigger('close', { originalEvent : evt });
  };

  /**
   * Helper method to abstract the "enabled" (not "disabled") state of this
   * object.
   *
   * @return {true} if the instance is not disabled.
   * @return {false} if the instance is disabled.
   */
  Select2.prototype.isEnabled = function () {
    return !this.isDisabled();
  };

  /**
   * Helper method to abstract the "disabled" state of this object.
   *
   * @return {true} if the disabled option is true.
   * @return {false} if the disabled option is false.
   */
  Select2.prototype.isDisabled = function () {
    return this.options.get('disabled');
  };

  Select2.prototype.isOpen = function () {
    return this.$container.hasClass('select2-container--open');
  };

  Select2.prototype.hasFocus = function () {
    return this.$container.hasClass('select2-container--focus');
  };

  Select2.prototype.focus = function (data) {
    // No need to re-trigger focus events if we are already focused
    if (this.hasFocus()) {
      return;
    }

    this.$container.addClass('select2-container--focus');
    this.trigger('focus', {});
  };

  Select2.prototype.enable = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("enable")` method has been deprecated and will' +
        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
        ' instead.'
      );
    }

    if (args == null || args.length === 0) {
      args = [true];
    }

    var disabled = !args[0];

    this.$element.prop('disabled', disabled);
  };

  Select2.prototype.data = function () {
    if (this.options.get('debug') &&
        arguments.length > 0 && window.console && console.warn) {
      console.warn(
        'Select2: Data can no longer be set using `select2("data")`. You ' +
        'should consider setting the value instead using `$element.val()`.'
      );
    }

    var data = [];

    this.dataAdapter.current(function (currentData) {
      data = currentData;
    });

    return data;
  };

  Select2.prototype.val = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("val")` method has been deprecated and will be' +
        ' removed in later Select2 versions. Use $element.val() instead.'
      );
    }

    if (args == null || args.length === 0) {
      return this.$element.val();
    }

    var newVal = args[0];

    if ($.isArray(newVal)) {
      newVal = $.map(newVal, function (obj) {
        return obj.toString();
      });
    }

    this.$element.val(newVal).trigger('input').trigger('change');
  };

  Select2.prototype.destroy = function () {
    this.$container.remove();

    if (this.$element[0].detachEvent) {
      this.$element[0].detachEvent('onpropertychange', this._syncA);
    }

    if (this._observer != null) {
      this._observer.disconnect();
      this._observer = null;
    } else if (this.$element[0].removeEventListener) {
      this.$element[0]
        .removeEventListener('DOMAttrModified', this._syncA, false);
      this.$element[0]
        .removeEventListener('DOMNodeInserted', this._syncS, false);
      this.$element[0]
        .removeEventListener('DOMNodeRemoved', this._syncS, false);
    }

    this._syncA = null;
    this._syncS = null;

    this.$element.off('.select2');
    this.$element.attr('tabindex',
    Utils.GetData(this.$element[0], 'old-tabindex'));

    this.$element.removeClass('select2-hidden-accessible');
    this.$element.attr('aria-hidden', 'false');
    Utils.RemoveData(this.$element[0]);
    this.$element.removeData('select2');

    this.dataAdapter.destroy();
    this.selection.destroy();
    this.dropdown.destroy();
    this.results.destroy();

    this.dataAdapter = null;
    this.selection = null;
    this.dropdown = null;
    this.results = null;
  };

  Select2.prototype.render = function () {
    var $container = $(
      '<span class="select2 select2-container">' +
        '<span class="selection"></span>' +
        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
      '</span>'
    );

    $container.attr('dir', this.options.get('dir'));

    this.$container = $container;

    this.$container.addClass('select2-container--' + this.options.get('theme'));

    Utils.StoreData($container[0], 'element', this.$element);

    return $container;
  };

  return Select2;
});

S2.define('jquery-mousewheel',[
  'jquery'
], function ($) {
  // Used to shim jQuery.mousewheel for non-full builds.
  return $;
});

S2.define('jquery.select2',[
  'jquery',
  'jquery-mousewheel',

  './select2/core',
  './select2/defaults',
  './select2/utils'
], function ($, _, Select2, Defaults, Utils) {
  if ($.fn.select2 == null) {
    // All methods that should return the element
    var thisMethods = ['open', 'close', 'destroy'];

    $.fn.select2 = function (options) {
      options = options || {};

      if (typeof options === 'object') {
        this.each(function () {
          var instanceOptions = $.extend(true, {}, options);

          var instance = new Select2($(this), instanceOptions);
        });

        return this;
      } else if (typeof options === 'string') {
        var ret;
        var args = Array.prototype.slice.call(arguments, 1);

        this.each(function () {
          var instance = Utils.GetData(this, 'select2');

          if (instance == null && window.console && console.error) {
            console.error(
              'The select2(\'' + options + '\') method was called on an ' +
              'element that is not using Select2.'
            );
          }

          ret = instance[options].apply(instance, args);
        });

        // Check if we should be returning `this`
        if ($.inArray(options, thisMethods) > -1) {
          return this;
        }

        return ret;
      } else {
        throw new Error('Invalid arguments for Select2: ' + options);
      }
    };
  }

  if ($.fn.select2.defaults == null) {
    $.fn.select2.defaults = Defaults;
  }

  return Select2;
});

  // Return the AMD loader configuration so it can be used outside of this file
  return {
    define: S2.define,
    require: S2.require
  };
}());

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
}));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/af.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/af.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // English
  return {
    errorLoading: function () {
      return 'Die resultate kon nie gelaai word nie.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Verwyders asseblief ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Voer asseblief ' + remainingChars + ' of meer karakters';

      return message;
    },
    loadingMore: function () {
      return 'Meer resultate word gelaai…';
    },
    maximumSelected: function (args) {
      var message = 'Kies asseblief net ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'Geen resultate gevind';
    },
    searching: function () {
      return 'Besig…';
    },
    removeAllItems: function () {
      return 'Verwyder alle items';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ar.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ar.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Arabic
  return {
    errorLoading: function () {
      return 'لا يمكن تحميل النتائج';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'الرجاء حذف ' + overChars + ' عناصر';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'الرجاء إضافة ' + remainingChars + ' عناصر';
    },
    loadingMore: function () {
      return 'جاري تحميل نتائج إضافية...';
    },
    maximumSelected: function (args) {
      return 'تستطيع إختيار ' + args.maximum + ' بنود فقط';
    },
    noResults: function () {
      return 'لم يتم العثور على أي نتائج';
    },
    searching: function () {
      return 'جاري البحث…';
    },
     removeAllItems: function () {
      return 'قم بإزالة كل العناصر';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/az.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/az.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Azerbaijani
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return overChars + ' simvol silin';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return remainingChars + ' simvol daxil edin';
    },
    loadingMore: function () {
      return 'Daha çox nəticə yüklənir…';
    },
    maximumSelected: function (args) {
      return 'Sadəcə ' + args.maximum + ' element seçə bilərsiniz';
    },
    noResults: function () {
      return 'Nəticə tapılmadı';
    },
    searching: function () {
      return 'Axtarılır…';
    },
     removeAllItems: function () {
      return 'Bütün elementləri sil';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/bg.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/bg.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Bulgarian
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Моля въведете с ' + overChars + ' по-малко символ';

      if (overChars > 1) {
        message += 'a';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Моля въведете още ' + remainingChars + ' символ';

      if (remainingChars > 1) {
        message += 'a';
      }

      return message;
    },
    loadingMore: function () {
      return 'Зареждат се още…';
    },
    maximumSelected: function (args) {
      var message = 'Можете да направите до ' + args.maximum + ' ';

      if (args.maximum > 1) {
        message += 'избора';
      } else {
        message += 'избор';
      }

      return message;
    },
    noResults: function () {
      return 'Няма намерени съвпадения';
    },
    searching: function () {
      return 'Търсене…';
    },
    removeAllItems: function () {
      return 'Премахнете всички елементи';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/bn.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/bn.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    // Bangla
    return {
      errorLoading: function () {
        return 'ফলাফলগুলি লোড করা যায়নি।';
      },
      inputTooLong: function (args) {
        var overChars = args.input.length - args.maximum;
  
        var message = 'অনুগ্রহ করে ' + overChars + ' টি অক্ষর মুছে দিন।';
  
        if (overChars != 1) {
          message = 'অনুগ্রহ করে ' + overChars + ' টি অক্ষর মুছে দিন।';
        }
  
        return message;
      },
      inputTooShort: function (args) {
        var remainingChars = args.minimum - args.input.length;
  
        var message = remainingChars + ' টি অক্ষর অথবা অধিক অক্ষর লিখুন।';
  
        return message;
      },
      loadingMore: function () {
        return 'আরো ফলাফল লোড হচ্ছে ...';
      },
      maximumSelected: function (args) {
        var message = args.maximum + ' টি আইটেম নির্বাচন করতে পারবেন।';
  
        if (args.maximum != 1) {
          message = args.maximum + ' টি আইটেম নির্বাচন করতে পারবেন।';
        }
  
        return message;
      },
      noResults: function () {
        return 'কোন ফলাফল পাওয়া যায়নি।';
      },
      searching: function () {
        return 'অনুসন্ধান করা হচ্ছে ...';
      }
    };
  }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  

/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/bs.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/bs.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Bosnian
  function ending (count, one, some, many) {
    if (count % 10 == 1 && count % 100 != 11) {
      return one;
    }

    if (count % 10 >= 2 && count % 10 <= 4 &&
      (count % 100 < 12 || count % 100 > 14)) {
        return some;
    }

    return many;
  }

  return {
    errorLoading: function () {
      return 'Preuzimanje nije uspijelo.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Obrišite ' + overChars + ' simbol';

      message += ending(overChars, '', 'a', 'a');

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Ukucajte bar još ' + remainingChars + ' simbol';

      message += ending(remainingChars, '', 'a', 'a');

      return message;
    },
    loadingMore: function () {
      return 'Preuzimanje još rezultata…';
    },
    maximumSelected: function (args) {
      var message = 'Možete izabrati samo ' + args.maximum + ' stavk';

      message += ending(args.maximum, 'u', 'e', 'i');

      return message;
    },
    noResults: function () {
      return 'Ništa nije pronađeno';
    },
    searching: function () {
      return 'Pretraga…';
    },
    removeAllItems: function () {
      return 'Uklonite sve stavke';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ca.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ca.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Catalan
  return {
    errorLoading: function () {
      return 'La càrrega ha fallat';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Si us plau, elimina ' + overChars + ' car';

      if (overChars == 1) {
        message += 'àcter';
      } else {
        message += 'àcters';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Si us plau, introdueix ' + remainingChars + ' car';

      if (remainingChars == 1) {
        message += 'àcter';
      } else {
        message += 'àcters';
      }

      return message;
    },
    loadingMore: function () {
      return 'Carregant més resultats…';
    },
    maximumSelected: function (args) {
      var message = 'Només es pot seleccionar ' + args.maximum + ' element';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No s\'han trobat resultats';
    },
    searching: function () {
      return 'Cercant…';
    },
    removeAllItems: function () {
      return 'Treu tots els elements';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/cs.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/cs.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Czech
  function small (count, masc) {
    switch(count) {
      case 2:
        return masc ? 'dva' : 'dvě';
      case 3:
        return 'tři';
      case 4:
        return 'čtyři';
    }
    return '';
  }
  return {
    errorLoading: function () {
      return 'Výsledky nemohly být načteny.';
    },
    inputTooLong: function (args) {
      var n = args.input.length - args.maximum;

      if (n == 1) {
        return 'Prosím, zadejte o jeden znak méně.';
      } else if (n <= 4) {
        return 'Prosím, zadejte o ' + small(n, true) + ' znaky méně.';
      } else {
        return 'Prosím, zadejte o ' + n + ' znaků méně.';
      }
    },
    inputTooShort: function (args) {
      var n = args.minimum - args.input.length;

      if (n == 1) {
        return 'Prosím, zadejte ještě jeden znak.';
      } else if (n <= 4) {
        return 'Prosím, zadejte ještě další ' + small(n, true) + ' znaky.';
      } else {
        return 'Prosím, zadejte ještě dalších ' + n + ' znaků.';
      }
    },
    loadingMore: function () {
      return 'Načítají se další výsledky…';
    },
    maximumSelected: function (args) {
      var n = args.maximum;

      if (n == 1) {
        return 'Můžete zvolit jen jednu položku.';
      } else if (n <= 4) {
        return 'Můžete zvolit maximálně ' + small(n, false) + ' položky.';
      } else {
        return 'Můžete zvolit maximálně ' + n + ' položek.';
      }
    },
    noResults: function () {
      return 'Nenalezeny žádné položky.';
    },
    searching: function () {
      return 'Vyhledávání…';
    },
    removeAllItems: function () {
      return 'Odstraňte všechny položky';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/da.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/da.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Danish
  return {
    errorLoading: function () {
      return 'Resultaterne kunne ikke indlæses.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Angiv venligst ' + overChars + ' tegn mindre';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Angiv venligst ' + remainingChars + ' tegn mere';
    },
    loadingMore: function () {
      return 'Indlæser flere resultater…';
    },
    maximumSelected: function (args) {
      var message = 'Du kan kun vælge ' + args.maximum + ' emne';

      if (args.maximum != 1) {
        message += 'r';
      }

      return message;
    },
    noResults: function () {
      return 'Ingen resultater fundet';
    },
    searching: function () {
      return 'Søger…';
    },
    removeAllItems: function () {
      return 'Fjern alle elementer';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/de.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/de.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // German
  return {
    errorLoading: function () {
      return 'Die Ergebnisse konnten nicht geladen werden.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Bitte ' + overChars + ' Zeichen weniger eingeben';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Bitte ' + remainingChars + ' Zeichen mehr eingeben';
    },
    loadingMore: function () {
      return 'Lade mehr Ergebnisse…';
    },
    maximumSelected: function (args) {
      var message = 'Sie können nur ' + args.maximum + ' Element';

      if (args.maximum != 1) {
        message += 'e';
      }

      message += ' auswählen';

      return message;
    },
    noResults: function () {
      return 'Keine Übereinstimmungen gefunden';
    },
    searching: function () {
      return 'Suche…';
    },
    removeAllItems: function () {
      return 'Entferne alle Elemente';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/dsb.js":
/*!*********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/dsb.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Lower Sorbian
  var charsWords = ['znamuško', 'znamušce', 'znamuška','znamuškow'];
  var itemsWords = ['zapisk', 'zapiska', 'zapiski','zapiskow'];

  var pluralWord = function pluralWord(numberOfChars, words) {
    if (numberOfChars === 1) {
        return words[0];
    } else if (numberOfChars === 2) {
      return words[1];
    }  else if (numberOfChars > 2 && numberOfChars <= 4) {
      return words[2];
    } else if (numberOfChars >= 5) {
      return words[3];
    }
  };
  
  return {
    errorLoading: function () {
      return 'Wuslědki njejsu se dali zacytaś.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Pšosym lašuj ' + overChars + ' ' + 
        pluralWord(overChars, charsWords);
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;
      
      return 'Pšosym zapódaj nanejmjenjej ' + remainingChars + ' ' +
        pluralWord(remainingChars, charsWords);
    },
    loadingMore: function () {
      return 'Dalšne wuslědki se zacytaju…';
    },
    maximumSelected: function (args) {
      return 'Móžoš jano ' + args.maximum + ' ' +
        pluralWord(args.maximum, itemsWords) + 'wubraś.';
    },
    noResults: function () {
      return 'Žedne wuslědki namakane';
    },
    searching: function () {
      return 'Pyta se…';
    },
    removeAllItems: function () {
      // To DO : in Lower Sorbian.
      return 'Remove all items';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/el.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/el.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Greek (el)
  return {
    errorLoading: function () {
      return 'Τα αποτελέσματα δεν μπόρεσαν να φορτώσουν.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Παρακαλώ διαγράψτε ' + overChars + ' χαρακτήρ';

      if (overChars == 1) {
        message += 'α';
      }
      if (overChars != 1) {
        message += 'ες';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Παρακαλώ συμπληρώστε ' + remainingChars +
        ' ή περισσότερους χαρακτήρες';

      return message;
    },
    loadingMore: function () {
      return 'Φόρτωση περισσότερων αποτελεσμάτων…';
    },
    maximumSelected: function (args) {
      var message = 'Μπορείτε να επιλέξετε μόνο ' + args.maximum + ' επιλογ';

      if (args.maximum == 1) {
        message += 'ή';
      }

      if (args.maximum != 1) {
        message += 'ές';
      }

      return message;
    },
    noResults: function () {
      return 'Δεν βρέθηκαν αποτελέσματα';
    },
    searching: function () {
      return 'Αναζήτηση…';
    },
    removeAllItems: function () {
      return 'Καταργήστε όλα τα στοιχεία';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/en.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/en.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // English
  return {
    errorLoading: function () {
      return 'The results could not be loaded.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Please delete ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Please enter ' + remainingChars + ' or more characters';

      return message;
    },
    loadingMore: function () {
      return 'Loading more results…';
    },
    maximumSelected: function (args) {
      var message = 'You can only select ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No results found';
    },
    searching: function () {
      return 'Searching…';
    },
    removeAllItems: function () {
      return 'Remove all items';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/es.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/es.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Spanish
  return {
    errorLoading: function () {
      return 'No se pudieron cargar los resultados';
    },
    inputTooLong: function (args) {
      var remainingChars = args.input.length - args.maximum;

      var message = 'Por favor, elimine ' + remainingChars + ' car';

      if (remainingChars == 1) {
        message += 'ácter';
      } else {
        message += 'acteres';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Por favor, introduzca ' + remainingChars + ' car';

      if (remainingChars == 1) {
        message += 'ácter';
      } else {
        message += 'acteres';
      }

      return message;
    },
    loadingMore: function () {
      return 'Cargando más resultados…';
    },
    maximumSelected: function (args) {
      var message = 'Sólo puede seleccionar ' + args.maximum + ' elemento';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No se encontraron resultados';
    },
    searching: function () {
      return 'Buscando…';
    },
    removeAllItems: function () {
      return 'Eliminar todos los elementos';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/et.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/et.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Estonian
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Sisesta ' + overChars + ' täht';

      if (overChars != 1) {
        message += 'e';
      }

      message += ' vähem';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Sisesta ' + remainingChars + ' täht';

      if (remainingChars != 1) {
        message += 'e';
      }

      message += ' rohkem';

      return message;
    },
    loadingMore: function () {
      return 'Laen tulemusi…';
    },
    maximumSelected: function (args) {
      var message = 'Saad vaid ' + args.maximum + ' tulemus';

      if (args.maximum == 1) {
        message += 'e';
      } else {
        message += 't';
      }

      message += ' valida';

      return message;
    },
    noResults: function () {
      return 'Tulemused puuduvad';
    },
    searching: function () {
      return 'Otsin…';
    },
    removeAllItems: function () {
      return 'Eemalda kõik esemed';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/eu.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/eu.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Basque
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Idatzi ';

      if (overChars == 1) {
        message += 'karaktere bat';
      } else {
        message += overChars + ' karaktere';
      }

      message += ' gutxiago';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Idatzi ';

      if (remainingChars == 1) {
        message += 'karaktere bat';
      } else {
        message += remainingChars + ' karaktere';
      }

      message += ' gehiago';

      return message;
    },
    loadingMore: function () {
      return 'Emaitza gehiago kargatzen…';
    },
    maximumSelected: function (args) {
      if (args.maximum === 1) {
        return 'Elementu bakarra hauta dezakezu';
      } else {
        return args.maximum + ' elementu hauta ditzakezu soilik';
      }
    },
    noResults: function () {
      return 'Ez da bat datorrenik aurkitu';
    },
    searching: function () {
      return 'Bilatzen…';
    },
    removeAllItems: function () {
      return 'Kendu elementu guztiak';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/fa.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/fa.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/* jshint -W100 */
/* jslint maxlen: 86 */
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Farsi (Persian)
  return {
    errorLoading: function () {
      return 'امکان بارگذاری نتایج وجود ندارد.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'لطفاً ' + overChars + ' کاراکتر را حذف نمایید';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'لطفاً تعداد ' + remainingChars + ' کاراکتر یا بیشتر وارد نمایید';

      return message;
    },
    loadingMore: function () {
      return 'در حال بارگذاری نتایج بیشتر...';
    },
    maximumSelected: function (args) {
      var message = 'شما تنها می‌توانید ' + args.maximum + ' آیتم را انتخاب نمایید';

      return message;
    },
    noResults: function () {
      return 'هیچ نتیجه‌ای یافت نشد';
    },
    searching: function () {
      return 'در حال جستجو...';
    },
    removeAllItems: function () {
      return 'همه موارد را حذف کنید';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/fi.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/fi.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Finnish
  return {
    errorLoading: function () {
      return 'Tuloksia ei saatu ladattua.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Ole hyvä ja anna ' + overChars + ' merkkiä vähemmän';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Ole hyvä ja anna ' + remainingChars + ' merkkiä lisää';
    },
    loadingMore: function () {
      return 'Ladataan lisää tuloksia…';
    },
    maximumSelected: function (args) {
      return 'Voit valita ainoastaan ' + args.maximum + ' kpl';
    },
    noResults: function () {
      return 'Ei tuloksia';
    },
    searching: function () {
      return 'Haetaan…';
    },
    removeAllItems: function () {
      return 'Poista kaikki kohteet';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/fr.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/fr.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // French
  return {
    errorLoading: function () {
      return 'Les résultats ne peuvent pas être chargés.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Supprimez ' + overChars + ' caractère' +
        ((overChars > 1) ? 's' : '');
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Saisissez au moins ' + remainingChars + ' caractère' +
        ((remainingChars > 1) ? 's' : '');
    },
    loadingMore: function () {
      return 'Chargement de résultats supplémentaires…';
    },
    maximumSelected: function (args) {
      return 'Vous pouvez seulement sélectionner ' + args.maximum +
        ' élément' + ((args.maximum > 1) ? 's' : '');
    },
    noResults: function () {
      return 'Aucun résultat trouvé';
    },
    searching: function () {
      return 'Recherche en cours…';
    },
    removeAllItems: function () {
      return 'Supprimer tous les éléments';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/gl.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/gl.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Galician
  return {
    errorLoading: function () {
      return 'Non foi posíbel cargar os resultados.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      if (overChars === 1) {
        return 'Elimine un carácter';
      }
      return 'Elimine ' + overChars + ' caracteres';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      if (remainingChars === 1) {
        return 'Engada un carácter';
      }
      return 'Engada ' + remainingChars + ' caracteres';
    },
    loadingMore: function () {
      return 'Cargando máis resultados…';
    },
    maximumSelected: function (args) {
      if (args.maximum === 1) {
        return 'Só pode seleccionar un elemento';
      }
      return 'Só pode seleccionar ' + args.maximum + ' elementos';
    },
    noResults: function () {
      return 'Non se atoparon resultados';
    },
    searching: function () {
      return 'Buscando…';
    },
    removeAllItems: function () {
      return 'Elimina todos os elementos';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/he.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/he.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Hebrew
  return {
    errorLoading: function () {
      return 'שגיאה בטעינת התוצאות';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'נא למחוק ';

      if (overChars === 1) {
        message += 'תו אחד';
      } else {
        message += overChars + ' תווים';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'נא להכניס ';

      if (remainingChars === 1) {
        message += 'תו אחד';
      } else {
        message += remainingChars + ' תווים';
      }

      message += ' או יותר';

      return message;
    },
    loadingMore: function () {
      return 'טוען תוצאות נוספות…';
    },
    maximumSelected: function (args) {
      var message = 'באפשרותך לבחור עד ';

      if (args.maximum === 1) {
        message += 'פריט אחד';
      } else {
        message += args.maximum + ' פריטים';
      }

      return message;
    },
    noResults: function () {
      return 'לא נמצאו תוצאות';
    },
    searching: function () {
      return 'מחפש…';
    },
    removeAllItems: function () {
      return 'הסר את כל הפריטים';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/hi.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/hi.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Hindi
  return {
    errorLoading: function () {
      return 'परिणामों को लोड नहीं किया जा सका।';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message =  overChars + ' अक्षर को हटा दें';

      if (overChars > 1) {
        message = overChars + ' अक्षरों को हटा दें ';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'कृपया ' + remainingChars + ' या अधिक अक्षर दर्ज करें';

      return message;
    },
    loadingMore: function () {
      return 'अधिक परिणाम लोड हो रहे है...';
    },
    maximumSelected: function (args) {
      var message = 'आप केवल ' + args.maximum + ' आइटम का चयन कर सकते हैं';
      return message;
    },
    noResults: function () {
      return 'कोई परिणाम नहीं मिला';
    },
    searching: function () {
      return 'खोज रहा है...';
    },
    removeAllItems: function () {
      return 'सभी वस्तुओं को हटा दें';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/hr.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/hr.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Croatian
  function character (n) {
    var message = ' ' + n + ' znak';

    if (n % 10 < 5 && n % 10 > 0 && (n % 100 < 5 || n % 100 > 19)) {
      if (n % 10 > 1) {
        message += 'a';
      }
    } else {
      message += 'ova';
    }

    return message;
  }

  return {
    errorLoading: function () {
      return 'Preuzimanje nije uspjelo.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Unesite ' + character(overChars);
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Unesite još ' + character(remainingChars);
    },
    loadingMore: function () {
      return 'Učitavanje rezultata…';
    },
    maximumSelected: function (args) {
      return 'Maksimalan broj odabranih stavki je ' + args.maximum;
    },
    noResults: function () {
      return 'Nema rezultata';
    },
    searching: function () {
      return 'Pretraga…';
    },
    removeAllItems: function () {
      return 'Ukloni sve stavke';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/hsb.js":
/*!*********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/hsb.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Upper Sorbian
  var charsWords = ['znamješko', 'znamješce', 'znamješka','znamješkow'];
  var itemsWords = ['zapisk', 'zapiskaj', 'zapiski','zapiskow'];

  var pluralWord = function pluralWord(numberOfChars, words) {
    if (numberOfChars === 1) {
        return words[0];
    } else if (numberOfChars === 2) {
      return words[1];
    }  else if (numberOfChars > 2 && numberOfChars <= 4) {
      return words[2];
    } else if (numberOfChars >= 5) {
      return words[3];
    }
  };
  
  return {
    errorLoading: function () {
      return 'Wuslědki njedachu so začitać.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Prošu zhašej ' + overChars + ' ' + 
        pluralWord(overChars, charsWords);
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;
      
      return 'Prošu zapodaj znajmjeńša ' + remainingChars + ' ' +
        pluralWord(remainingChars, charsWords);
    },
    loadingMore: function () {
      return 'Dalše wuslědki so začitaja…';
    },
    maximumSelected: function (args) {
      return 'Móžeš jenož ' + args.maximum + ' ' +
        pluralWord(args.maximum, itemsWords) + 'wubrać';
    },
    noResults: function () {
      return 'Žane wuslědki namakane';
    },
    searching: function () {
      return 'Pyta so…';
    },
    removeAllItems: function () {
      // To DO : in Upper Sorbian.
      return 'Remove all items';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/hu.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/hu.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Hungarian
  return {
    errorLoading: function () {
      return 'Az eredmények betöltése nem sikerült.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Túl hosszú. ' + overChars + ' karakterrel több, mint kellene.';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Túl rövid. Még ' + remainingChars + ' karakter hiányzik.';
    },
    loadingMore: function () {
      return 'Töltés…';
    },
    maximumSelected: function (args) {
      return 'Csak ' + args.maximum + ' elemet lehet kiválasztani.';
    },
    noResults: function () {
      return 'Nincs találat.';
    },
    searching: function () {
      return 'Keresés…';
    },
    removeAllItems: function () {
      return 'Távolítson el minden elemet';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/hy.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/hy.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Armenian
  return {
    errorLoading: function () {
      return 'Արդյունքները հնարավոր չէ բեռնել։';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Խնդրում ենք հեռացնել ' + overChars + ' նշան';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Խնդրում ենք մուտքագրել ' + remainingChars +
        ' կամ ավել նշաններ';

      return message;
    },
    loadingMore: function () {
      return 'Բեռնվում են նոր արդյունքներ․․․';
    },
    maximumSelected: function (args) {
      var message = 'Դուք կարող եք ընտրել առավելագույնը ' + args.maximum +
        ' կետ';

      return message;
    },
    noResults: function () {
      return 'Արդյունքներ չեն գտնվել';
    },
    searching: function () {
      return 'Որոնում․․․';
    },
    removeAllItems: function () {
      return 'Հեռացնել բոլոր տարրերը';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/id.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/id.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Indonesian
  return {
    errorLoading: function () {
      return 'Data tidak boleh diambil.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Hapuskan ' + overChars + ' huruf';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Masukkan ' + remainingChars + ' huruf lagi';
    },
    loadingMore: function () {
      return 'Mengambil data…';
    },
    maximumSelected: function (args) {
      return 'Anda hanya dapat memilih ' + args.maximum + ' pilihan';
    },
    noResults: function () {
      return 'Tidak ada data yang sesuai';
    },
    searching: function () {
      return 'Mencari…';
    },
    removeAllItems: function () {
      return 'Hapus semua item';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/is.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/is.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Icelandic
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Vinsamlegast styttið texta um ' + overChars + ' staf';

      if (overChars <= 1) {
        return message;
      }

      return message + 'i';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Vinsamlegast skrifið ' + remainingChars + ' staf';

      if (remainingChars > 1) {
        message += 'i';
      }

      message += ' í viðbót';

      return message;
    },
    loadingMore: function () {
      return 'Sæki fleiri niðurstöður…';
    },
    maximumSelected: function (args) {
      return 'Þú getur aðeins valið ' + args.maximum + ' atriði';
    },
    noResults: function () {
      return 'Ekkert fannst';
    },
    searching: function () {
      return 'Leita…';
    },
    removeAllItems: function () {
      return 'Fjarlægðu öll atriði';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/it.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/it.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Italian
  return {
    errorLoading: function () {
      return 'I risultati non possono essere caricati.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Per favore cancella ' + overChars + ' caratter';

      if (overChars !== 1) {
        message += 'i';
      } else {
        message += 'e';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Per favore inserisci ' +remainingChars+ ' o più caratteri';

      return message;
    },
    loadingMore: function () {
      return 'Caricando più risultati…';
    },
    maximumSelected: function (args) {
      var message = 'Puoi selezionare solo ' + args.maximum + ' element';

      if (args.maximum !== 1) {
        message += 'i';
      } else {
        message += 'o';
      }

      return message;
    },
    noResults: function () {
      return 'Nessun risultato trovato';
    },
    searching: function () {
      return 'Sto cercando…';
    },
    removeAllItems: function () {
      return 'Rimuovi tutti gli oggetti';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ja.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ja.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Japanese
  return {
    errorLoading: function () {
      return '結果が読み込まれませんでした';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = overChars + ' 文字を削除してください';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = '少なくとも ' + remainingChars + ' 文字を入力してください';

      return message;
    },
    loadingMore: function () {
      return '読み込み中…';
    },
    maximumSelected: function (args) {
      var message = args.maximum + ' 件しか選択できません';

      return message;
    },
    noResults: function () {
      return '対象が見つかりません';
    },
    searching: function () {
      return '検索しています…';
    },
    removeAllItems: function () {
      return 'すべてのアイテムを削除';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ka.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ka.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Georgian
  return {
    errorLoading: function () {
      return 'მონაცემების ჩატვირთვა შეუძლებელია.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'გთხოვთ აკრიფეთ ' + overChars + ' სიმბოლოთი ნაკლები';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'გთხოვთ აკრიფეთ ' + remainingChars + ' სიმბოლო ან მეტი';

      return message;
    },
    loadingMore: function () {
      return 'მონაცემების ჩატვირთვა…';
    },
    maximumSelected: function (args) {
      var message = 'თქვენ შეგიძლიათ აირჩიოთ არაუმეტეს ' + args.maximum +
        ' ელემენტი';

      return message;
    },
    noResults: function () {
      return 'რეზულტატი არ მოიძებნა';
    },
    searching: function () {
      return 'ძიება…';
    },
    removeAllItems: function () {
      return 'ამოიღე ყველა ელემენტი';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/km.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/km.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Khmer
  return {
    errorLoading: function () {
      return 'មិនអាចទាញយកទិន្នន័យ';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'សូមលុបចេញ  ' + overChars + ' អក្សរ';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'សូមបញ្ចូល' + remainingChars + ' អក្សរ រឺ ច្រើនជាងនេះ';

      return message;
    },
    loadingMore: function () {
      return 'កំពុងទាញយកទិន្នន័យបន្ថែម...';
    },
    maximumSelected: function (args) {
      var message = 'អ្នកអាចជ្រើសរើសបានតែ ' + args.maximum + ' ជម្រើសប៉ុណ្ណោះ';

      return message;
    },
    noResults: function () {
      return 'មិនមានលទ្ធផល';
    },
    searching: function () {
      return 'កំពុងស្វែងរក...';
    },
    removeAllItems: function () {
      return 'លុបធាតុទាំងអស់';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ko.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ko.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Korean
  return {
    errorLoading: function () {
      return '결과를 불러올 수 없습니다.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = '너무 깁니다. ' + overChars + ' 글자 지워주세요.';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = '너무 짧습니다. ' + remainingChars + ' 글자 더 입력해주세요.';

      return message;
    },
    loadingMore: function () {
      return '불러오는 중…';
    },
    maximumSelected: function (args) {
      var message = '최대 ' + args.maximum + '개까지만 선택 가능합니다.';

      return message;
    },
    noResults: function () {
      return '결과가 없습니다.';
    },
    searching: function () {
      return '검색 중…';
    },
    removeAllItems: function () {
      return '모든 항목 삭제';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/lt.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/lt.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // rules from
  // http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#lt
  function ending(count, one, few, other) {
    if (count % 10 === 1 && (count % 100 < 11 || count % 100 > 19)) {
      return one;
    } else if (
      (count % 10 >= 2 && count % 10 <= 9) &&
      (count % 100 < 11 || count % 100 > 19)) {
      return few;
    } else {
      return other;
    }
  }

  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Pašalinkite ' + overChars + ' simbol';

      message += ending(overChars, 'į', 'ius', 'ių');

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Įrašykite dar ' + remainingChars + ' simbol';

      message += ending(remainingChars, 'į', 'ius', 'ių');

      return message;
    },
    loadingMore: function () {
      return 'Kraunama daugiau rezultatų…';
    },
    maximumSelected: function (args) {
      var message = 'Jūs galite pasirinkti tik ' + args.maximum + ' element';

      message += ending(args.maximum, 'ą', 'us', 'ų');

      return message;
    },
    noResults: function () {
      return 'Atitikmenų nerasta';
    },
    searching: function () {
      return 'Ieškoma…';
    },
    removeAllItems: function () {
      return 'Pašalinti visus elementus';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/lv.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/lv.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Latvian
  function ending (count, eleven, singular, other) {
    if (count === 11) {
      return eleven;
    }

    if (count % 10 === 1) {
      return singular;
    }

    return other;
  }

  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Lūdzu ievadiet par  ' + overChars;

      message += ' simbol' + ending(overChars, 'iem', 'u', 'iem');

      return message + ' mazāk';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Lūdzu ievadiet vēl ' + remainingChars;

      message += ' simbol' + ending(remainingChars, 'us', 'u', 'us');

      return message;
    },
    loadingMore: function () {
      return 'Datu ielāde…';
    },
    maximumSelected: function (args) {
      var message = 'Jūs varat izvēlēties ne vairāk kā ' + args.maximum;

      message += ' element' + ending(args.maximum, 'us', 'u', 'us');

      return message;
    },
    noResults: function () {
      return 'Sakritību nav';
    },
    searching: function () {
      return 'Meklēšana…';
    },
    removeAllItems: function () {
      return 'Noņemt visus vienumus';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/mk.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/mk.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Macedonian
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Ве молиме внесете ' + args.maximum + ' помалку карактер';

      if (args.maximum !== 1) {
        message += 'и';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Ве молиме внесете уште ' + args.maximum + ' карактер';

      if (args.maximum !== 1) {
        message += 'и';
      }

      return message;
    },
    loadingMore: function () {
      return 'Вчитување резултати…';
    },
    maximumSelected: function (args) {
      var message = 'Можете да изберете само ' + args.maximum + ' ставк';

      if (args.maximum === 1) {
        message += 'а';
      } else {
        message += 'и';
      }

      return message;
    },
    noResults: function () {
      return 'Нема пронајдено совпаѓања';
    },
    searching: function () {
      return 'Пребарување…';
    },
    removeAllItems: function () {
      return 'Отстрани ги сите предмети';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ms.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ms.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Malay
  return {
    errorLoading: function () {
      return 'Keputusan tidak berjaya dimuatkan.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Sila hapuskan ' + overChars + ' aksara';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Sila masukkan ' + remainingChars + ' atau lebih aksara';
    },
    loadingMore: function () {
      return 'Sedang memuatkan keputusan…';
    },
    maximumSelected: function (args) {
      return 'Anda hanya boleh memilih ' + args.maximum + ' pilihan';
    },
    noResults: function () {
      return 'Tiada padanan yang ditemui';
    },
    searching: function () {
      return 'Mencari…';
    },
    removeAllItems: function () {
      return 'Keluarkan semua item';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/nb.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/nb.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Norwegian (Bokmål)
  return {
    errorLoading: function () {
      return 'Kunne ikke hente resultater.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Vennligst fjern ' + overChars + ' tegn';
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      return 'Vennligst skriv inn ' + remainingChars + ' tegn til';
    },
    loadingMore: function () {
      return 'Laster flere resultater…';
    },
    maximumSelected: function (args) {
      return 'Du kan velge maks ' + args.maximum + ' elementer';
    },
    noResults: function () {
      return 'Ingen treff';
    },
    searching: function () {
      return 'Søker…';
    },
    removeAllItems: function () {
      return 'Fjern alle elementer';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ne.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ne.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    // Nepali
    return {
      errorLoading: function () {
        return 'नतिजाहरु देखाउन सकिएन।';
      },
      inputTooLong: function (args) {
        var overChars = args.input.length - args.maximum;

        var message = 'कृपया ' + overChars + ' अक्षर मेटाउनुहोस्।';

        if (overChars != 1) {
          message += 'कृपया ' + overChars + ' अक्षरहरु मेटाउनुहोस्।';
        }

        return message;
      },
      inputTooShort: function (args) {
        var remainingChars = args.minimum - args.input.length;

        var message = 'कृपया बाँकी रहेका ' + remainingChars +
          ' वा अरु धेरै अक्षरहरु भर्नुहोस्।';

        return message;
      },
      loadingMore: function () {
        return 'अरु नतिजाहरु भरिँदैछन् …';
      },
      maximumSelected: function (args) {
        var message = 'तँपाई ' + args.maximum +
          ' वस्तु मात्र छान्न पाउँनुहुन्छ।';

        if (args.maximum != 1) {
          message = 'तँपाई ' + args.maximum +
            ' वस्तुहरु मात्र छान्न पाउँनुहुन्छ।';
        }

        return message;
      },
      noResults: function () {
        return 'कुनै पनि नतिजा भेटिएन।';
      },
      searching: function () {
        return 'खोजि हुँदैछ…';
      }
    };
  }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/nl.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/nl.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Dutch
  return {
    errorLoading: function () {
      return 'De resultaten konden niet worden geladen.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Gelieve ' + overChars + ' karakters te verwijderen';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Gelieve ' + remainingChars +
        ' of meer karakters in te voeren';

      return message;
    },
    loadingMore: function () {
      return 'Meer resultaten laden…';
    },
    maximumSelected: function (args) {
      var verb = args.maximum == 1 ? 'kan' : 'kunnen';
      var message = 'Er ' + verb + ' maar ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }
      message += ' worden geselecteerd';

      return message;
    },
    noResults: function () {
      return 'Geen resultaten gevonden…';
    },
    searching: function () {
      return 'Zoeken…';
    },
    removeAllItems: function () {
      return 'Verwijder alle items';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/pl.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/pl.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Polish
  var charsWords = ['znak', 'znaki', 'znaków'];
  var itemsWords = ['element', 'elementy', 'elementów'];

  var pluralWord = function pluralWord(numberOfChars, words) {
    if (numberOfChars === 1) {
        return words[0];
    } else if (numberOfChars > 1 && numberOfChars <= 4) {
      return words[1];
    } else if (numberOfChars >= 5) {
      return words[2];
    }
  };
  
  return {
    errorLoading: function () {
      return 'Nie można załadować wyników.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      return 'Usuń ' + overChars + ' ' + pluralWord(overChars, charsWords);
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;
      
      return 'Podaj przynajmniej ' + remainingChars + ' ' +
        pluralWord(remainingChars, charsWords);
    },
    loadingMore: function () {
      return 'Trwa ładowanie…';
    },
    maximumSelected: function (args) {
      return 'Możesz zaznaczyć tylko ' + args.maximum + ' ' +
        pluralWord(args.maximum, itemsWords);
    },
    noResults: function () {
      return 'Brak wyników';
    },
    searching: function () {
      return 'Trwa wyszukiwanie…';
    },
    removeAllItems: function () {
      return 'Usuń wszystkie przedmioty';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ps.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ps.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/* jslint maxlen: 87 */
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Pashto (پښتو)
  return {
    errorLoading: function () {
      return 'پايلي نه سي ترلاسه کېدای';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'د مهربانۍ لمخي ' + overChars + ' توری ړنګ کړئ';

      if (overChars != 1) {
        message = message.replace('توری', 'توري');
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'لږ تر لږه ' + remainingChars + ' يا ډېر توري وليکئ';

      return message;
    },
    loadingMore: function () {
      return 'نوري پايلي ترلاسه کيږي...';
    },
    maximumSelected: function (args) {
      var message = 'تاسو يوازي ' + args.maximum + ' قلم په نښه کولای سی';

      if (args.maximum != 1) {
        message = message.replace('قلم', 'قلمونه');
      }

      return message;
    },
    noResults: function () {
      return 'پايلي و نه موندل سوې';
    },
    searching: function () {
      return 'لټول کيږي...';
    },
    removeAllItems: function () {
      return 'ټول توکي لرې کړئ';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/pt-BR.js":
/*!***********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/pt-BR.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Brazilian Portuguese
  return {
    errorLoading: function () {
      return 'Os resultados não puderam ser carregados.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Apague ' + overChars + ' caracter';

      if (overChars != 1) {
        message += 'es';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Digite ' + remainingChars + ' ou mais caracteres';

      return message;
    },
    loadingMore: function () {
      return 'Carregando mais resultados…';
    },
    maximumSelected: function (args) {
      var message = 'Você só pode selecionar ' + args.maximum + ' ite';

      if (args.maximum == 1) {
        message += 'm';
      } else {
        message += 'ns';
      }

      return message;
    },
    noResults: function () {
      return 'Nenhum resultado encontrado';
    },
    searching: function () {
      return 'Buscando…';
    },
    removeAllItems: function () {
      return 'Remover todos os itens';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/pt.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/pt.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // European Portuguese
  return {
    errorLoading: function () {
      return 'Os resultados não puderam ser carregados.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Por favor apague ' + overChars + ' ';

      message += overChars != 1 ? 'caracteres' : 'caractere';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Introduza ' + remainingChars + ' ou mais caracteres';

      return message;
    },
    loadingMore: function () {
      return 'A carregar mais resultados…';
    },
    maximumSelected: function (args) {
      var message = 'Apenas pode seleccionar ' + args.maximum + ' ';

      message += args.maximum != 1 ? 'itens' : 'item';

      return message;
    },
    noResults: function () {
      return 'Sem resultados';
    },
    searching: function () {
      return 'A procurar…';
    },
    removeAllItems: function () {
      return 'Remover todos os itens';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ro.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ro.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Romanian
  return {
    errorLoading: function () {
      return 'Rezultatele nu au putut fi incărcate.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Vă rugăm să ștergeți' + overChars + ' caracter';

      if (overChars !== 1) {
        message += 'e';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Vă rugăm să introduceți ' + remainingChars +
        ' sau mai multe caractere';

      return message;
    },
    loadingMore: function () {
      return 'Se încarcă mai multe rezultate…';
    },
    maximumSelected: function (args) {
      var message = 'Aveți voie să selectați cel mult ' + args.maximum;
      message += ' element';

      if (args.maximum !== 1) {
        message += 'e';
      }

      return message;
    },
    noResults: function () {
      return 'Nu au fost găsite rezultate';
    },
    searching: function () {
      return 'Căutare…';
    },
    removeAllItems: function () {
      return 'Eliminați toate elementele';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/ru.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/ru.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Russian
  function ending (count, one, couple, more) {
    if (count % 10 < 5 && count % 10 > 0 &&
        count % 100 < 5 || count % 100 > 20) {
      if (count % 10 > 1) {
        return couple;
      }
    } else {
      return more;
    }

    return one;
  }

  return {
    errorLoading: function () {
      return 'Невозможно загрузить результаты';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Пожалуйста, введите на ' + overChars + ' символ';

      message += ending(overChars, '', 'a', 'ов');

      message += ' меньше';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Пожалуйста, введите ещё хотя бы ' + remainingChars +
        ' символ';

      message += ending(remainingChars, '', 'a', 'ов');

      return message;
    },
    loadingMore: function () {
      return 'Загрузка данных…';
    },
    maximumSelected: function (args) {
      var message = 'Вы можете выбрать не более ' + args.maximum + ' элемент';

      message += ending(args.maximum, '', 'a', 'ов');

      return message;
    },
    noResults: function () {
      return 'Совпадений не найдено';
    },
    searching: function () {
      return 'Поиск…';
    },
    removeAllItems: function () {
      return 'Удалить все элементы';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/sk.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/sk.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Slovak

  // use text for the numbers 2 through 4
  var smallNumbers = {
    2: function (masc) { return (masc ? 'dva' : 'dve'); },
    3: function () { return 'tri'; },
    4: function () { return 'štyri'; }
  };

  return {
    errorLoading: function () {
      return 'Výsledky sa nepodarilo načítať.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      if (overChars == 1) {
        return 'Prosím, zadajte o jeden znak menej';
      } else if (overChars >= 2 && overChars <= 4) {
        return 'Prosím, zadajte o ' + smallNumbers[overChars](true) +
          ' znaky menej';
      } else {
        return 'Prosím, zadajte o ' + overChars + ' znakov menej';
      }
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      if (remainingChars == 1) {
        return 'Prosím, zadajte ešte jeden znak';
      } else if (remainingChars <= 4) {
        return 'Prosím, zadajte ešte ďalšie ' +
          smallNumbers[remainingChars](true) + ' znaky';
      } else {
        return 'Prosím, zadajte ešte ďalších ' + remainingChars + ' znakov';
      }
    },
    loadingMore: function () {
      return 'Načítanie ďalších výsledkov…';
    },
    maximumSelected: function (args) {
      if (args.maximum == 1) {
        return 'Môžete zvoliť len jednu položku';
      } else if (args.maximum >= 2 && args.maximum <= 4) {
        return 'Môžete zvoliť najviac ' + smallNumbers[args.maximum](false) +
          ' položky';
      } else {
        return 'Môžete zvoliť najviac ' + args.maximum + ' položiek';
      }
    },
    noResults: function () {
      return 'Nenašli sa žiadne položky';
    },
    searching: function () {
      return 'Vyhľadávanie…';
    },
    removeAllItems: function () {
      return 'Odstráňte všetky položky';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/sl.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/sl.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Slovene
  return {
    errorLoading: function () {
      return 'Zadetkov iskanja ni bilo mogoče naložiti.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Prosim zbrišite ' + overChars + ' znak';

      if (overChars == 2) {
        message += 'a';
      } else if (overChars != 1) {
        message += 'e';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Prosim vpišite še ' + remainingChars + ' znak';

      if (remainingChars == 2) {
        message += 'a';
      } else if (remainingChars != 1) {
        message += 'e';
      }

      return message;
    },
    loadingMore: function () {
      return 'Nalagam več zadetkov…';
    },
    maximumSelected: function (args) {
      var message = 'Označite lahko največ ' + args.maximum + ' predmet';

      if (args.maximum == 2) {
        message += 'a';
      } else if (args.maximum != 1) {
        message += 'e';
      }

      return message;
    },
    noResults: function () {
      return 'Ni zadetkov.';
    },
    searching: function () {
      return 'Iščem…';
    },
    removeAllItems: function () {
      return 'Odstranite vse elemente';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/sq.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/sq.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Albanian
  return {
    errorLoading: function () {
      return 'Rezultatet nuk mund të ngarkoheshin.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Të lutem fshi ' + overChars + ' karakter';

      if (overChars != 1) {
        message += 'e';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Të lutem shkruaj ' + remainingChars + 
          ' ose më shumë karaktere';

      return message;
    },
    loadingMore: function () {
      return 'Duke ngarkuar më shumë rezultate…';
    },
    maximumSelected: function (args) {
      var message = 'Mund të zgjedhësh vetëm ' + args.maximum + ' element';

      if (args.maximum != 1) {
        message += 'e';
      }

      return message;
    },
    noResults: function () {
      return 'Nuk u gjet asnjë rezultat';
    },
    searching: function () {
      return 'Duke kërkuar…';
    },
    removeAllItems: function () {
      return 'Hiq të gjitha sendet';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/sr-Cyrl.js":
/*!*************************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/sr-Cyrl.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Serbian Cyrilic
  function ending (count, one, some, many) {
    if (count % 10 == 1 && count % 100 != 11) {
      return one;
    }

    if (count % 10 >= 2 && count % 10 <= 4 &&
      (count % 100 < 12 || count % 100 > 14)) {
        return some;
    }

    return many;
  }

  return {
    errorLoading: function () {
      return 'Преузимање није успело.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Обришите ' + overChars + ' симбол';

      message += ending(overChars, '', 'а', 'а');

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Укуцајте бар још ' + remainingChars + ' симбол';

      message += ending(remainingChars, '', 'а', 'а');

      return message;
    },
    loadingMore: function () {
      return 'Преузимање још резултата…';
    },
    maximumSelected: function (args) {
      var message = 'Можете изабрати само ' + args.maximum + ' ставк';

      message += ending(args.maximum, 'у', 'е', 'и');

      return message;
    },
    noResults: function () {
      return 'Ништа није пронађено';
    },
    searching: function () {
      return 'Претрага…';
    },
    removeAllItems: function () {
      return 'Уклоните све ставке';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/sr.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/sr.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Serbian
  function ending (count, one, some, many) {
    if (count % 10 == 1 && count % 100 != 11) {
      return one;
    }

    if (count % 10 >= 2 && count % 10 <= 4 &&
      (count % 100 < 12 || count % 100 > 14)) {
        return some;
    }

    return many;
  }

  return {
    errorLoading: function () {
      return 'Preuzimanje nije uspelo.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Obrišite ' + overChars + ' simbol';

      message += ending(overChars, '', 'a', 'a');

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Ukucajte bar još ' + remainingChars + ' simbol';

      message += ending(remainingChars, '', 'a', 'a');

      return message;
    },
    loadingMore: function () {
      return 'Preuzimanje još rezultata…';
    },
    maximumSelected: function (args) {
      var message = 'Možete izabrati samo ' + args.maximum + ' stavk';

      message += ending(args.maximum, 'u', 'e', 'i');

      return message;
    },
    noResults: function () {
      return 'Ništa nije pronađeno';
    },
    searching: function () {
      return 'Pretraga…';
    },
    removeAllItems: function () {
      return 'Уклоните све ставке';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/sv.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/sv.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Swedish
  return {
    errorLoading: function () {
      return 'Resultat kunde inte laddas.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Vänligen sudda ut ' + overChars + ' tecken';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Vänligen skriv in ' + remainingChars +
                    ' eller fler tecken';

      return message;
    },
    loadingMore: function () {
      return 'Laddar fler resultat…';
    },
    maximumSelected: function (args) {
      var message = 'Du kan max välja ' + args.maximum + ' element';

      return message;
    },
    noResults: function () {
      return 'Inga träffar';
    },
    searching: function () {
      return 'Söker…';
    },
    removeAllItems: function () {
      return 'Ta bort alla objekt';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/th.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/th.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Thai
  return {
    errorLoading: function () {
      return 'ไม่สามารถค้นข้อมูลได้';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'โปรดลบออก ' + overChars + ' ตัวอักษร';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'โปรดพิมพ์เพิ่มอีก ' + remainingChars + ' ตัวอักษร';

      return message;
    },
    loadingMore: function () {
      return 'กำลังค้นข้อมูลเพิ่ม…';
    },
    maximumSelected: function (args) {
      var message = 'คุณสามารถเลือกได้ไม่เกิน ' + args.maximum + ' รายการ';

      return message;
    },
    noResults: function () {
      return 'ไม่พบข้อมูล';
    },
    searching: function () {
      return 'กำลังค้นข้อมูล…';
    },
    removeAllItems: function () {
      return 'ลบรายการทั้งหมด';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/tk.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/tk.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Turkmen
  return {
    errorLoading: function (){
      return 'Netije ýüklenmedi.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = overChars + ' harp bozuň.';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Ýene-de iň az ' + remainingChars + ' harp ýazyň.';

      return message;
    },
    loadingMore: function () {
      return 'Köpräk netije görkezilýär…';
    },
    maximumSelected: function (args) {
      var message = 'Diňe ' + args.maximum + ' sanysyny saýlaň.';

      return message;
    },
    noResults: function () {
      return 'Netije tapylmady.';
    },
    searching: function () {
      return 'Gözlenýär…';
    },
    removeAllItems: function () {
      // TO DO : add in turkmen,
      return 'Remove all items';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/tr.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/tr.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Turkish
  return {
    errorLoading: function (){
      return 'Sonuç yüklenemedi';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = overChars + ' karakter daha girmelisiniz';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'En az ' + remainingChars + ' karakter daha girmelisiniz';

      return message;
    },
    loadingMore: function () {
      return 'Daha fazla…';
    },
    maximumSelected: function (args) {
      var message = 'Sadece ' + args.maximum + ' seçim yapabilirsiniz';

      return message;
    },
    noResults: function () {
      return 'Sonuç bulunamadı';
    },
    searching: function () {
      return 'Aranıyor…';
    },
    removeAllItems: function () {     
      return 'Tüm öğeleri kaldır';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/uk.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/uk.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Ukrainian
  function ending (count, one, couple, more) {
    if (count % 100 > 10 && count % 100 < 15) {
      return more;
    }
    if (count % 10 === 1) {
      return one;
    }
    if (count % 10 > 1 && count % 10 < 5) {
      return couple;
    }
    return more;
  }

  return {
    errorLoading: function () {
      return 'Неможливо завантажити результати';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;
      return 'Будь ласка, видаліть ' + overChars + ' ' +
        ending(args.maximum, 'літеру', 'літери', 'літер');
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;
      return 'Будь ласка, введіть ' + remainingChars + ' або більше літер';
    },
    loadingMore: function () {
      return 'Завантаження інших результатів…';
    },
    maximumSelected: function (args) {
      return 'Ви можете вибрати лише ' + args.maximum + ' ' +
        ending(args.maximum, 'пункт', 'пункти', 'пунктів');
    },
    noResults: function () {
      return 'Нічого не знайдено';
    },
    searching: function () {
      return 'Пошук…';
    },
    removeAllItems: function () {     
      return 'Видалити всі елементи';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/vi.js":
/*!********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/vi.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Vietnamese
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Vui lòng xóa bớt ' + overChars + ' ký tự';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Vui lòng nhập thêm từ ' + remainingChars +
                    ' ký tự trở lên';

      return message;
    },
    loadingMore: function () {
      return 'Đang lấy thêm kết quả…';
    },
    maximumSelected: function (args) {
      var message = 'Chỉ có thể chọn được ' + args.maximum + ' lựa chọn';

      return message;
    },
    noResults: function () {
      return 'Không tìm thấy kết quả';
    },
    searching: function () {
      return 'Đang tìm…';
    },
    removeAllItems: function () {
      return 'Xóa tất cả các mục';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/zh-CN.js":
/*!***********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/zh-CN.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Chinese (Simplified)
  return {
    errorLoading: function () {
      return '无法载入结果。';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = '请删除' + overChars + '个字符';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = '请再输入至少' + remainingChars + '个字符';

      return message;
    },
    loadingMore: function () {
      return '载入更多结果…';
    },
    maximumSelected: function (args) {
      var message = '最多只能选择' + args.maximum + '个项目';

      return message;
    },
    noResults: function () {
      return '未找到结果';
    },
    searching: function () {
      return '搜索中…';
    },
    removeAllItems: function () {     
      return '删除所有项目';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/select2/src/js/select2/i18n/zh-TW.js":
/*!***********************************************************!*\
  !*** ./node_modules/select2/src/js/select2/i18n/zh-TW.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  // Chinese (Traditional)
  return {
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = '請刪掉' + overChars + '個字元';

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = '請再輸入' + remainingChars + '個字元';

      return message;
    },
    loadingMore: function () {
      return '載入中…';
    },
    maximumSelected: function (args) {
      var message = '你只能選擇最多' + args.maximum + '項';

      return message;
    },
    noResults: function () {
      return '沒有找到相符的項目';
    },
    searching: function () {
      return '搜尋中…';
    },
    removeAllItems: function () {     
      return '刪除所有項目';
    }
  };
}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createVersion = exports.createUppercaseE = exports.createUppercasePi = exports.createI = exports.createSQRT2 = exports.createSQRT1_2 = exports.createLOG10E = exports.createLOG2E = exports.createLN10 = exports.createLN2 = exports.createPhi = exports.createE = exports.createTau = exports.createPi = exports.createNaN = exports.createInfinity = exports.createNull = exports.createFalse = exports.createTrue = void 0;

var _factory = __webpack_require__(/*! ./utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _version = __webpack_require__(/*! ./version.js */ "./node_modules/mathjs/lib/cjs/version.js");

var _constants = __webpack_require__(/*! ./utils/bignumber/constants.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/constants.js");

var _index = __webpack_require__(/*! ./plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var createTrue = /* #__PURE__ */(0, _factory.factory)('true', [], function () {
  return true;
});
exports.createTrue = createTrue;
var createFalse = /* #__PURE__ */(0, _factory.factory)('false', [], function () {
  return false;
});
exports.createFalse = createFalse;
var createNull = /* #__PURE__ */(0, _factory.factory)('null', [], function () {
  return null;
});
exports.createNull = createNull;
var createInfinity = /* #__PURE__ */recreateFactory('Infinity', ['config', '?BigNumber'], function (_ref) {
  var config = _ref.config,
      BigNumber = _ref.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
});
exports.createInfinity = createInfinity;
var createNaN = /* #__PURE__ */recreateFactory('NaN', ['config', '?BigNumber'], function (_ref2) {
  var config = _ref2.config,
      BigNumber = _ref2.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
});
exports.createNaN = createNaN;
var createPi = /* #__PURE__ */recreateFactory('pi', ['config', '?BigNumber'], function (_ref3) {
  var config = _ref3.config,
      BigNumber = _ref3.BigNumber;
  return config.number === 'BigNumber' ? (0, _constants.createBigNumberPi)(BigNumber) : _index.pi;
});
exports.createPi = createPi;
var createTau = /* #__PURE__ */recreateFactory('tau', ['config', '?BigNumber'], function (_ref4) {
  var config = _ref4.config,
      BigNumber = _ref4.BigNumber;
  return config.number === 'BigNumber' ? (0, _constants.createBigNumberTau)(BigNumber) : _index.tau;
});
exports.createTau = createTau;
var createE = /* #__PURE__ */recreateFactory('e', ['config', '?BigNumber'], function (_ref5) {
  var config = _ref5.config,
      BigNumber = _ref5.BigNumber;
  return config.number === 'BigNumber' ? (0, _constants.createBigNumberE)(BigNumber) : _index.e;
}); // golden ratio, (1+sqrt(5))/2

exports.createE = createE;
var createPhi = /* #__PURE__ */recreateFactory('phi', ['config', '?BigNumber'], function (_ref6) {
  var config = _ref6.config,
      BigNumber = _ref6.BigNumber;
  return config.number === 'BigNumber' ? (0, _constants.createBigNumberPhi)(BigNumber) : _index.phi;
});
exports.createPhi = createPhi;
var createLN2 = /* #__PURE__ */recreateFactory('LN2', ['config', '?BigNumber'], function (_ref7) {
  var config = _ref7.config,
      BigNumber = _ref7.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
});
exports.createLN2 = createLN2;
var createLN10 = /* #__PURE__ */recreateFactory('LN10', ['config', '?BigNumber'], function (_ref8) {
  var config = _ref8.config,
      BigNumber = _ref8.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
});
exports.createLN10 = createLN10;
var createLOG2E = /* #__PURE__ */recreateFactory('LOG2E', ['config', '?BigNumber'], function (_ref9) {
  var config = _ref9.config,
      BigNumber = _ref9.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
});
exports.createLOG2E = createLOG2E;
var createLOG10E = /* #__PURE__ */recreateFactory('LOG10E', ['config', '?BigNumber'], function (_ref10) {
  var config = _ref10.config,
      BigNumber = _ref10.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
});
exports.createLOG10E = createLOG10E;
var createSQRT1_2 = /* #__PURE__ */recreateFactory( // eslint-disable-line camelcase
'SQRT1_2', ['config', '?BigNumber'], function (_ref11) {
  var config = _ref11.config,
      BigNumber = _ref11.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
});
exports.createSQRT1_2 = createSQRT1_2;
var createSQRT2 = /* #__PURE__ */recreateFactory('SQRT2', ['config', '?BigNumber'], function (_ref12) {
  var config = _ref12.config,
      BigNumber = _ref12.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
});
exports.createSQRT2 = createSQRT2;
var createI = /* #__PURE__ */recreateFactory('i', ['Complex'], function (_ref13) {
  var Complex = _ref13.Complex;
  return Complex.I;
}); // for backward compatibility with v5

exports.createI = createI;
var createUppercasePi = /* #__PURE__ */(0, _factory.factory)('PI', ['pi'], function (_ref14) {
  var pi = _ref14.pi;
  return pi;
});
exports.createUppercasePi = createUppercasePi;
var createUppercaseE = /* #__PURE__ */(0, _factory.factory)('E', ['e'], function (_ref15) {
  var e = _ref15.e;
  return e;
});
exports.createUppercaseE = createUppercaseE;
var createVersion = /* #__PURE__ */(0, _factory.factory)('version', [], function () {
  return _version.version;
}); // helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?

exports.createVersion = createVersion;

function recreateFactory(name, dependencies, create) {
  return (0, _factory.factory)(name, dependencies, create, {
    recreateOnConfigChange: true
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/core/config.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/core/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DEFAULT_CONFIG = void 0;
var DEFAULT_CONFIG = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  epsilon: 1e-12,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: 'Matrix',
  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
  number: 'number',
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: false,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/core/create.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/core/create.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = create;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js"));

__webpack_require__(/*! ./../utils/polyfills.js */ "./node_modules/mathjs/lib/cjs/utils/polyfills.js");

var _object = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var emitter = _interopRequireWildcard(__webpack_require__(/*! ./../utils/emitter.js */ "./node_modules/mathjs/lib/cjs/utils/emitter.js"));

var _import = __webpack_require__(/*! ./function/import.js */ "./node_modules/mathjs/lib/cjs/core/function/import.js");

var _config = __webpack_require__(/*! ./function/config.js */ "./node_modules/mathjs/lib/cjs/core/function/config.js");

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _ArgumentsError = __webpack_require__(/*! ../error/ArgumentsError.js */ "./node_modules/mathjs/lib/cjs/error/ArgumentsError.js");

var _DimensionError = __webpack_require__(/*! ../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _IndexError = __webpack_require__(/*! ../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

var _config2 = __webpack_require__(/*! ./config.js */ "./node_modules/mathjs/lib/cjs/core/config.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Create a mathjs instance from given factory functions and optionally config
 *
 * Usage:
 *
 *     const mathjs1 = create({ createAdd, createMultiply, ...})
 *     const config = { number: 'BigNumber' }
 *     const mathjs2 = create(all, config)
 *
 * @param {Object} [factories] An object with factory functions
 *                             The object can contain nested objects,
 *                             all nested objects will be flattened.
 * @param {Object} [config]    Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */
function create(factories, config) {
  var configInternal = (0, _extends2["default"])({}, _config2.DEFAULT_CONFIG, config); // simple test for ES5 support

  if (typeof Object.create !== 'function') {
    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
  } // create the mathjs instance


  var math = emitter.mixin({
    // only here for backward compatibility for legacy factory functions
    isNumber: _is.isNumber,
    isComplex: _is.isComplex,
    isBigNumber: _is.isBigNumber,
    isFraction: _is.isFraction,
    isUnit: _is.isUnit,
    isString: _is.isString,
    isArray: _is.isArray,
    isMatrix: _is.isMatrix,
    isCollection: _is.isCollection,
    isDenseMatrix: _is.isDenseMatrix,
    isSparseMatrix: _is.isSparseMatrix,
    isRange: _is.isRange,
    isIndex: _is.isIndex,
    isBoolean: _is.isBoolean,
    isResultSet: _is.isResultSet,
    isHelp: _is.isHelp,
    isFunction: _is.isFunction,
    isDate: _is.isDate,
    isRegExp: _is.isRegExp,
    isObject: _is.isObject,
    isNull: _is.isNull,
    isUndefined: _is.isUndefined,
    isAccessorNode: _is.isAccessorNode,
    isArrayNode: _is.isArrayNode,
    isAssignmentNode: _is.isAssignmentNode,
    isBlockNode: _is.isBlockNode,
    isConditionalNode: _is.isConditionalNode,
    isConstantNode: _is.isConstantNode,
    isFunctionAssignmentNode: _is.isFunctionAssignmentNode,
    isFunctionNode: _is.isFunctionNode,
    isIndexNode: _is.isIndexNode,
    isNode: _is.isNode,
    isObjectNode: _is.isObjectNode,
    isOperatorNode: _is.isOperatorNode,
    isParenthesisNode: _is.isParenthesisNode,
    isRangeNode: _is.isRangeNode,
    isSymbolNode: _is.isSymbolNode,
    isChain: _is.isChain
  }); // load config function and apply provided config

  math.config = (0, _config.configFactory)(configInternal, math.emit);
  math.expression = {
    transform: {},
    mathWithTransform: {
      config: math.config
    }
  }; // cached factories and instances used by function load

  var legacyFactories = [];
  var legacyInstances = [];
  /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {Function} factory
   * @returns {*}
   */

  function load(factory) {
    if ((0, _factory.isFactory)(factory)) {
      return factory(math);
    }

    var firstProperty = factory[Object.keys(factory)[0]];

    if ((0, _factory.isFactory)(firstProperty)) {
      return firstProperty(math);
    }

    if (!(0, _object.isLegacyFactory)(factory)) {
      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);
      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
    }

    var index = legacyFactories.indexOf(factory);
    var instance;

    if (index === -1) {
      // doesn't yet exist
      if (factory.math === true) {
        // pass with math namespace
        instance = factory.factory(math.type, configInternal, load, math.typed, math);
      } else {
        instance = factory.factory(math.type, configInternal, load, math.typed);
      } // append to the cache


      legacyFactories.push(factory);
      legacyInstances.push(instance);
    } else {
      // already existing function, return the cached instance
      instance = legacyInstances[index];
    }

    return instance;
  }

  var importedFactories = {}; // load the import function

  function lazyTyped() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return math.typed.apply(math.typed, args);
  }

  var internalImport = (0, _import.importFactory)(lazyTyped, load, math, importedFactories);
  math["import"] = internalImport; // listen for changes in config, import all functions again when changed
  // TODO: move this listener into the import function?

  math.on('config', function () {
    (0, _object.values)(importedFactories).forEach(function (factory) {
      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {
        // FIXME: only re-create when the current instance is the same as was initially created
        // FIXME: delete the functions/constants before importing them again?
        internalImport(factory, {
          override: true
        });
      }
    });
  }); // the create function exposed on the mathjs instance is bound to
  // the factory functions passed before

  math.create = create.bind(null, factories); // export factory function

  math.factory = _factory.factory; // import the factory functions like createAdd as an array instead of object,
  // else they will get a different naming (`createAdd` instead of `add`).

  math["import"]((0, _object.values)((0, _object.deepFlatten)(factories)));
  math.ArgumentsError = _ArgumentsError.ArgumentsError;
  math.DimensionError = _DimensionError.DimensionError;
  math.IndexError = _IndexError.IndexError;
  return math;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/core/function/config.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/core/function/config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.configFactory = configFactory;
exports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _config2 = __webpack_require__(/*! ../config.js */ "./node_modules/mathjs/lib/cjs/core/config.js");

var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

exports.MATRIX_OPTIONS = MATRIX_OPTIONS;
var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

exports.NUMBER_OPTIONS = NUMBER_OPTIONS;

function configFactory(config, emit) {
  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */
  function _config(options) {
    if (options) {
      var prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options

      validateOption(options, 'matrix', MATRIX_OPTIONS);
      validateOption(options, 'number', NUMBER_OPTIONS); // merge options

      (0, _object.deepExtend)(config, options);
      var curr = (0, _object.mapObject)(config, _object.clone);
      var changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event

      emit('config', curr, prev, changes);
      return curr;
    } else {
      return (0, _object.mapObject)(config, _object.clone);
    }
  } // attach the valid options to the function so they can be extended


  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function

  Object.keys(_config2.DEFAULT_CONFIG).forEach(function (key) {
    Object.defineProperty(_config, key, {
      get: function get() {
        return config[key];
      },
      enumerable: true,
      configurable: true
    });
  });
  return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */


function contains(array, item) {
  return array.indexOf(item) !== -1;
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */


function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains(values, options[name])) {
    // unknown value
    console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". ' + 'Available options: ' + values.map(function (value) {
      return JSON.stringify(value);
    }).join(', ') + '.');
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/core/function/import.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/core/function/import.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.importFactory = importFactory;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _ArgumentsError = __webpack_require__(/*! ../../error/ArgumentsError.js */ "./node_modules/mathjs/lib/cjs/error/ArgumentsError.js");

function importFactory(typed, load, math, importedFactories) {
  /**
   * Import functions from an object or a module.
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *    math.import(functions)
   *    math.import(functions, options)
   *
   * Where:
   *
   * - `functions: Object`
   *   An object with functions or factories to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    import { create, all } from 'mathjs'
   *    import * as numbers from 'numbers'
   *
   *    // create a mathjs instance
   *    const math = create(all)
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!'
   *      }
   *    })
   *
   *    // use the imported function and variable
   *    math.myvalue * 2               // 84
   *    math.hello('user')             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(numbers, {wrap: true})
   *
   *    math.fibonacci(7) // returns 13
   *
   * @param {Object | Array} functions  Object with functions to be imported.
   * @param {Object} [options]          Import options.
   */
  function mathImport(functions, options) {
    var num = arguments.length;

    if (num !== 1 && num !== 2) {
      throw new _ArgumentsError.ArgumentsError('import', num, 1, 2);
    }

    if (!options) {
      options = {};
    }

    function flattenImports(flatValues, value, name) {
      if (Array.isArray(value)) {
        value.forEach(function (item) {
          return flattenImports(flatValues, item);
        });
      } else if ((0, _typeof2["default"])(value) === 'object') {
        for (var _name in value) {
          if ((0, _object.hasOwnProperty)(value, _name)) {
            flattenImports(flatValues, value[_name], _name);
          }
        }
      } else if ((0, _factory.isFactory)(value) || name !== undefined) {
        var flatName = (0, _factory.isFactory)(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' : value.fn : name; // we allow importing the same function twice if it points to the same implementation

        if ((0, _object.hasOwnProperty)(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {
          throw new Error('Cannot import "' + flatName + '" twice');
        }

        flatValues[flatName] = value;
      } else {
        if (!options.silent) {
          throw new TypeError('Factory, Object, or Array expected');
        }
      }
    }

    var flatValues = {};
    flattenImports(flatValues, functions);

    for (var name in flatValues) {
      if ((0, _object.hasOwnProperty)(flatValues, name)) {
        // console.log('import', name)
        var value = flatValues[name];

        if ((0, _factory.isFactory)(value)) {
          // we ignore name here and enforce the name of the factory
          // maybe at some point we do want to allow overriding it
          // in that case we can implement an option overrideFactoryNames: true
          _importFactory(value, options);
        } else if (isSupportedType(value)) {
          _import(name, value, options);
        } else {
          if (!options.silent) {
            throw new TypeError('Factory, Object, or Array expected');
          }
        }
      }
    }
  }
  /**
   * Add a property to the math namespace
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */


  function _import(name, value, options) {
    // TODO: refactor this function, it's to complicated and contains duplicate code
    if (options.wrap && typeof value === 'function') {
      // create a wrapper around the function
      value = _wrap(value);
    } // turn a plain function with a typed-function signature into a typed-function


    if (hasTypedFunctionSignature(value)) {
      value = typed(name, (0, _defineProperty2["default"])({}, value.signature, value));
    }

    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
      if (options.override) {
        // give the typed function the right name
        value = typed(name, value.signatures);
      } else {
        // merge the existing and typed function
        value = typed(math[name], value);
      }

      math[name] = value;
      delete importedFactories[name];

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (math[name] === undefined || options.override) {
      math[name] = value;
      delete importedFactories[name];

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (!options.silent) {
      throw new Error('Cannot import "' + name + '": already exists');
    }
  }

  function _importTransform(name, value) {
    if (value && typeof value.transform === 'function') {
      math.expression.transform[name] = value.transform;

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value.transform;
      }
    } else {
      // remove existing transform
      delete math.expression.transform[name];

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value;
      }
    }
  }

  function _deleteTransform(name) {
    delete math.expression.transform[name];

    if (allowedInExpressions(name)) {
      math.expression.mathWithTransform[name] = math[name];
    } else {
      delete math.expression.mathWithTransform[name];
    }
  }
  /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */


  function _wrap(fn) {
    var wrapper = function wrapper() {
      var args = [];

      for (var i = 0, len = arguments.length; i < len; i++) {
        var arg = arguments[i];
        args[i] = arg && arg.valueOf();
      }

      return fn.apply(math, args);
    };

    if (fn.transform) {
      wrapper.transform = fn.transform;
    }

    return wrapper;
  }
  /**
   * Import an instance of a factory into math.js
   * @param {function(scope: object)} factory
   * @param {Object} options  See import for a description of the options
   * @param {string} [name=factory.name] Optional custom name
   * @private
   */


  function _importFactory(factory, options) {
    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;

    if ((0, _array.contains)(name, '.')) {
      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));
    }

    var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;
    var existingTransform = (name in math.expression.transform);
    var existing = (0, _object.hasOwnProperty)(namespace, name) ? namespace[name] : undefined;

    var resolver = function resolver() {
      // collect all dependencies, handle finding both functions and classes and other special cases
      var dependencies = {};
      factory.dependencies.map(_factory.stripOptionalNotation).forEach(function (dependency) {
        if ((0, _array.contains)(dependency, '.')) {
          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));
        }

        if (dependency === 'math') {
          dependencies.math = math;
        } else if (dependency === 'mathWithTransform') {
          dependencies.mathWithTransform = math.expression.mathWithTransform;
        } else if (dependency === 'classes') {
          // special case for json reviver
          dependencies.classes = math;
        } else {
          dependencies[dependency] = math[dependency];
        }
      });
      var instance = /* #__PURE__ */factory(dependencies);

      if (instance && typeof instance.transform === 'function') {
        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
      }

      if (existing === undefined || options.override) {
        return instance;
      }

      if (isTypedFunction(existing) && isTypedFunction(instance)) {
        // merge the existing and new typed function
        return typed(existing, instance);
      }

      if (options.silent) {
        // keep existing, ignore imported function
        return existing;
      } else {
        throw new Error('Cannot import "' + name + '": already exists');
      }
    }; // TODO: add unit test with non-lazy factory


    if (!factory.meta || factory.meta.lazy !== false) {
      (0, _object.lazy)(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          (0, _object.lazy)(math.expression.mathWithTransform, name, function () {
            return namespace[name];
          });
        }
      }
    } else {
      namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          (0, _object.lazy)(math.expression.mathWithTransform, name, function () {
            return namespace[name];
          });
        }
      }
    } // TODO: improve factories, store a list with imports instead which can be re-played


    importedFactories[name] = factory;
    math.emit('import', name, resolver);
  }
  /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */


  function isSupportedType(object) {
    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || (0, _is.isUnit)(object) || (0, _is.isComplex)(object) || (0, _is.isBigNumber)(object) || (0, _is.isFraction)(object) || (0, _is.isMatrix)(object) || Array.isArray(object);
  }
  /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */


  function isTypedFunction(fn) {
    return typeof fn === 'function' && (0, _typeof2["default"])(fn.signatures) === 'object';
  }

  function hasTypedFunctionSignature(fn) {
    return typeof fn === 'function' && typeof fn.signature === 'string';
  }

  function allowedInExpressions(name) {
    return !(0, _object.hasOwnProperty)(unsafe, name);
  }

  function factoryAllowedInExpressions(factory) {
    return factory.fn.indexOf('.') === -1 && // FIXME: make checking on path redundant, check on meta data instead
    !(0, _object.hasOwnProperty)(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);
  }

  function isTransformFunctionFactory(factory) {
    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;
  } // namespaces and functions not available in the parser for safety reasons


  var unsafe = {
    expression: true,
    type: true,
    docs: true,
    error: true,
    json: true,
    chain: true // chain method not supported. Note that there is a unit chain too.

  };
  return mathImport;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/core/function/typed.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/core/function/typed.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTyped = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _typedFunction = _interopRequireDefault(__webpack_require__(/*! typed-function */ "./node_modules/typed-function/typed-function.js"));

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _map = __webpack_require__(/*! ../../utils/map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */
// returns a new instance of typed-function
var _createTyped2 = function _createTyped() {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  _createTyped2 = _typedFunction["default"].create;
  return _typedFunction["default"];
};

var dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
/**
 * Factory function for creating a new typed instance
 * @param {Object} dependencies   Object with data types like Complex and BigNumber
 * @returns {Function}
 */

var createTyped = /* #__PURE__ */(0, _factory.factory)('typed', dependencies, function createTyped(_ref) {
  var BigNumber = _ref.BigNumber,
      Complex = _ref.Complex,
      DenseMatrix = _ref.DenseMatrix,
      Fraction = _ref.Fraction;

  // TODO: typed-function must be able to silently ignore signatures with unknown data types
  // get a new instance of typed-function
  var typed = _createTyped2(); // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).


  typed.types = [{
    name: 'number',
    test: _is.isNumber
  }, {
    name: 'Complex',
    test: _is.isComplex
  }, {
    name: 'BigNumber',
    test: _is.isBigNumber
  }, {
    name: 'Fraction',
    test: _is.isFraction
  }, {
    name: 'Unit',
    test: _is.isUnit
  }, {
    name: 'string',
    test: _is.isString
  }, {
    name: 'Chain',
    test: _is.isChain
  }, {
    name: 'Array',
    test: _is.isArray
  }, {
    name: 'Matrix',
    test: _is.isMatrix
  }, {
    name: 'DenseMatrix',
    test: _is.isDenseMatrix
  }, {
    name: 'SparseMatrix',
    test: _is.isSparseMatrix
  }, {
    name: 'Range',
    test: _is.isRange
  }, {
    name: 'Index',
    test: _is.isIndex
  }, {
    name: 'boolean',
    test: _is.isBoolean
  }, {
    name: 'ResultSet',
    test: _is.isResultSet
  }, {
    name: 'Help',
    test: _is.isHelp
  }, {
    name: 'function',
    test: _is.isFunction
  }, {
    name: 'Date',
    test: _is.isDate
  }, {
    name: 'RegExp',
    test: _is.isRegExp
  }, {
    name: 'null',
    test: _is.isNull
  }, {
    name: 'undefined',
    test: _is.isUndefined
  }, {
    name: 'AccessorNode',
    test: _is.isAccessorNode
  }, {
    name: 'ArrayNode',
    test: _is.isArrayNode
  }, {
    name: 'AssignmentNode',
    test: _is.isAssignmentNode
  }, {
    name: 'BlockNode',
    test: _is.isBlockNode
  }, {
    name: 'ConditionalNode',
    test: _is.isConditionalNode
  }, {
    name: 'ConstantNode',
    test: _is.isConstantNode
  }, {
    name: 'FunctionNode',
    test: _is.isFunctionNode
  }, {
    name: 'FunctionAssignmentNode',
    test: _is.isFunctionAssignmentNode
  }, {
    name: 'IndexNode',
    test: _is.isIndexNode
  }, {
    name: 'Node',
    test: _is.isNode
  }, {
    name: 'ObjectNode',
    test: _is.isObjectNode
  }, {
    name: 'OperatorNode',
    test: _is.isOperatorNode
  }, {
    name: 'ParenthesisNode',
    test: _is.isParenthesisNode
  }, {
    name: 'RangeNode',
    test: _is.isRangeNode
  }, {
    name: 'SymbolNode',
    test: _is.isSymbolNode
  }, {
    name: 'Map',
    test: _map.isMap
  }, {
    name: 'Object',
    test: _is.isObject
  } // order 'Object' last, it matches on other classes too
  ];
  typed.conversions = [{
    from: 'number',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      } // note: conversion from number to BigNumber can fail if x has >15 digits


      if ((0, _number.digits)(x) > 15) {
        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
      }

      return new BigNumber(x);
    }
  }, {
    from: 'number',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x, 0);
    }
  }, {
    from: 'number',
    to: 'string',
    convert: function convert(x) {
      return x + '';
    }
  }, {
    from: 'BigNumber',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.toNumber(), 0);
    }
  }, {
    from: 'Fraction',
    to: 'BigNumber',
    convert: function convert(x) {
      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
    }
  }, {
    from: 'Fraction',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.valueOf(), 0);
    }
  }, {
    from: 'number',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      var f = new Fraction(x);

      if (f.valueOf() !== x) {
        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
      }

      return f;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: 'string',
    to: 'number',
    convert: function convert(x) {
      var n = Number(x);

      if (isNaN(n)) {
        throw new Error('Cannot convert "' + x + '" to a number');
      }

      return n;
    }
  }, {
    from: 'string',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      try {
        return new BigNumber(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to BigNumber');
      }
    }
  }, {
    from: 'string',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      try {
        return new Fraction(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Fraction');
      }
    }
  }, {
    from: 'string',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      try {
        return new Complex(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Complex');
      }
    }
  }, {
    from: 'boolean',
    to: 'number',
    convert: function convert(x) {
      return +x;
    }
  }, {
    from: 'boolean',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      return new BigNumber(+x);
    }
  }, {
    from: 'boolean',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      return new Fraction(+x);
    }
  }, {
    from: 'boolean',
    to: 'string',
    convert: function convert(x) {
      return String(x);
    }
  }, {
    from: 'Array',
    to: 'Matrix',
    convert: function convert(array) {
      if (!DenseMatrix) {
        throwNoMatrix();
      }

      return new DenseMatrix(array);
    }
  }, {
    from: 'Matrix',
    to: 'Array',
    convert: function convert(matrix) {
      return matrix.valueOf();
    }
  }];
  return typed;
});
exports.createTyped = createTyped;

function throwNoBignumber(x) {
  throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
}

function throwNoComplex(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
}

function throwNoMatrix() {
  throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
}

function throwNoFraction(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/allFactoriesAny.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/allFactoriesAny.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.all = void 0;

var allFactories = _interopRequireWildcard(__webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// creating all factories here in a separate file is needed to get tree-shaking working
var all = allFactories;
exports.all = all;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/configReadonly.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/configReadonly.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.config = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js"));

var _config = __webpack_require__(/*! ../core/config.js */ "./node_modules/mathjs/lib/cjs/core/config.js");

var _config2 = __webpack_require__(/*! ../core/function/config.js */ "./node_modules/mathjs/lib/cjs/core/function/config.js");

// create a read-only version of config
var config = /* #__PURE__ */function config(options) {
  if (options) {
    throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
  }

  return Object.freeze(_config.DEFAULT_CONFIG);
};

exports.config = config;
(0, _extends2["default"])(config, _config.DEFAULT_CONFIG, {
  MATRIX_OPTIONS: _config2.MATRIX_OPTIONS,
  NUMBER_OPTIONS: _config2.NUMBER_OPTIONS
});

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny.generated.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny.generated.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "typedDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTypedGenerated.typedDependencies;
  }
}));
Object.defineProperty(exports, "ResultSetDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesResultSetGenerated.ResultSetDependencies;
  }
}));
Object.defineProperty(exports, "BigNumberDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBigNumberClassGenerated.BigNumberDependencies;
  }
}));
Object.defineProperty(exports, "ComplexDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesComplexClassGenerated.ComplexDependencies;
  }
}));
Object.defineProperty(exports, "FractionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFractionClassGenerated.FractionDependencies;
  }
}));
Object.defineProperty(exports, "RangeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRangeClassGenerated.RangeDependencies;
  }
}));
Object.defineProperty(exports, "MatrixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMatrixClassGenerated.MatrixDependencies;
  }
}));
Object.defineProperty(exports, "DenseMatrixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies;
  }
}));
Object.defineProperty(exports, "cloneDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCloneGenerated.cloneDependencies;
  }
}));
Object.defineProperty(exports, "isIntegerDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsIntegerGenerated.isIntegerDependencies;
  }
}));
Object.defineProperty(exports, "isNegativeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsNegativeGenerated.isNegativeDependencies;
  }
}));
Object.defineProperty(exports, "isNumericDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsNumericGenerated.isNumericDependencies;
  }
}));
Object.defineProperty(exports, "hasNumericValueDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesHasNumericValueGenerated.hasNumericValueDependencies;
  }
}));
Object.defineProperty(exports, "isPositiveDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsPositiveGenerated.isPositiveDependencies;
  }
}));
Object.defineProperty(exports, "isZeroDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsZeroGenerated.isZeroDependencies;
  }
}));
Object.defineProperty(exports, "isNaNDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsNaNGenerated.isNaNDependencies;
  }
}));
Object.defineProperty(exports, "typeOfDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTypeOfGenerated.typeOfDependencies;
  }
}));
Object.defineProperty(exports, "equalScalarDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEqualScalarGenerated.equalScalarDependencies;
  }
}));
Object.defineProperty(exports, "SparseMatrixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies;
  }
}));
Object.defineProperty(exports, "numberDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNumberGenerated.numberDependencies;
  }
}));
Object.defineProperty(exports, "stringDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesStringGenerated.stringDependencies;
  }
}));
Object.defineProperty(exports, "booleanDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBooleanGenerated.booleanDependencies;
  }
}));
Object.defineProperty(exports, "bignumberDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBignumberGenerated.bignumberDependencies;
  }
}));
Object.defineProperty(exports, "complexDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesComplexGenerated.complexDependencies;
  }
}));
Object.defineProperty(exports, "fractionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFractionGenerated.fractionDependencies;
  }
}));
Object.defineProperty(exports, "matrixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMatrixGenerated.matrixDependencies;
  }
}));
Object.defineProperty(exports, "matrixFromFunctionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMatrixFromFunctionGenerated.matrixFromFunctionDependencies;
  }
}));
Object.defineProperty(exports, "matrixFromRowsDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMatrixFromRowsGenerated.matrixFromRowsDependencies;
  }
}));
Object.defineProperty(exports, "matrixFromColumnsDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMatrixFromColumnsGenerated.matrixFromColumnsDependencies;
  }
}));
Object.defineProperty(exports, "splitUnitDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSplitUnitGenerated.splitUnitDependencies;
  }
}));
Object.defineProperty(exports, "unaryMinusDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUnaryMinusGenerated.unaryMinusDependencies;
  }
}));
Object.defineProperty(exports, "unaryPlusDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUnaryPlusGenerated.unaryPlusDependencies;
  }
}));
Object.defineProperty(exports, "absDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAbsGenerated.absDependencies;
  }
}));
Object.defineProperty(exports, "applyDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesApplyGenerated.applyDependencies;
  }
}));
Object.defineProperty(exports, "addScalarDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAddScalarGenerated.addScalarDependencies;
  }
}));
Object.defineProperty(exports, "cbrtDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCbrtGenerated.cbrtDependencies;
  }
}));
Object.defineProperty(exports, "ceilDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCeilGenerated.ceilDependencies;
  }
}));
Object.defineProperty(exports, "cubeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCubeGenerated.cubeDependencies;
  }
}));
Object.defineProperty(exports, "expDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesExpGenerated.expDependencies;
  }
}));
Object.defineProperty(exports, "expm1Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesExpm1Generated.expm1Dependencies;
  }
}));
Object.defineProperty(exports, "fixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFixGenerated.fixDependencies;
  }
}));
Object.defineProperty(exports, "floorDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFloorGenerated.floorDependencies;
  }
}));
Object.defineProperty(exports, "gcdDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesGcdGenerated.gcdDependencies;
  }
}));
Object.defineProperty(exports, "lcmDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLcmGenerated.lcmDependencies;
  }
}));
Object.defineProperty(exports, "log10Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLog10Generated.log10Dependencies;
  }
}));
Object.defineProperty(exports, "log2Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLog2Generated.log2Dependencies;
  }
}));
Object.defineProperty(exports, "modDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesModGenerated.modDependencies;
  }
}));
Object.defineProperty(exports, "multiplyScalarDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies;
  }
}));
Object.defineProperty(exports, "multiplyDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMultiplyGenerated.multiplyDependencies;
  }
}));
Object.defineProperty(exports, "nthRootDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNthRootGenerated.nthRootDependencies;
  }
}));
Object.defineProperty(exports, "signDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSignGenerated.signDependencies;
  }
}));
Object.defineProperty(exports, "sqrtDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSqrtGenerated.sqrtDependencies;
  }
}));
Object.defineProperty(exports, "squareDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSquareGenerated.squareDependencies;
  }
}));
Object.defineProperty(exports, "subtractDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSubtractGenerated.subtractDependencies;
  }
}));
Object.defineProperty(exports, "xgcdDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesXgcdGenerated.xgcdDependencies;
  }
}));
Object.defineProperty(exports, "dotMultiplyDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDotMultiplyGenerated.dotMultiplyDependencies;
  }
}));
Object.defineProperty(exports, "bitAndDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBitAndGenerated.bitAndDependencies;
  }
}));
Object.defineProperty(exports, "bitNotDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBitNotGenerated.bitNotDependencies;
  }
}));
Object.defineProperty(exports, "bitOrDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBitOrGenerated.bitOrDependencies;
  }
}));
Object.defineProperty(exports, "bitXorDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBitXorGenerated.bitXorDependencies;
  }
}));
Object.defineProperty(exports, "argDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesArgGenerated.argDependencies;
  }
}));
Object.defineProperty(exports, "conjDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesConjGenerated.conjDependencies;
  }
}));
Object.defineProperty(exports, "imDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesImGenerated.imDependencies;
  }
}));
Object.defineProperty(exports, "reDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesReGenerated.reDependencies;
  }
}));
Object.defineProperty(exports, "notDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNotGenerated.notDependencies;
  }
}));
Object.defineProperty(exports, "orDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesOrGenerated.orDependencies;
  }
}));
Object.defineProperty(exports, "xorDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesXorGenerated.xorDependencies;
  }
}));
Object.defineProperty(exports, "concatDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesConcatGenerated.concatDependencies;
  }
}));
Object.defineProperty(exports, "columnDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesColumnGenerated.columnDependencies;
  }
}));
Object.defineProperty(exports, "countDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCountGenerated.countDependencies;
  }
}));
Object.defineProperty(exports, "crossDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCrossGenerated.crossDependencies;
  }
}));
Object.defineProperty(exports, "diagDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDiagGenerated.diagDependencies;
  }
}));
Object.defineProperty(exports, "filterDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFilterGenerated.filterDependencies;
  }
}));
Object.defineProperty(exports, "flattenDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFlattenGenerated.flattenDependencies;
  }
}));
Object.defineProperty(exports, "forEachDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesForEachGenerated.forEachDependencies;
  }
}));
Object.defineProperty(exports, "getMatrixDataTypeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesGetMatrixDataTypeGenerated.getMatrixDataTypeDependencies;
  }
}));
Object.defineProperty(exports, "identityDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIdentityGenerated.identityDependencies;
  }
}));
Object.defineProperty(exports, "kronDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesKronGenerated.kronDependencies;
  }
}));
Object.defineProperty(exports, "mapDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMapGenerated.mapDependencies;
  }
}));
Object.defineProperty(exports, "diffDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDiffGenerated.diffDependencies;
  }
}));
Object.defineProperty(exports, "onesDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesOnesGenerated.onesDependencies;
  }
}));
Object.defineProperty(exports, "rangeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRangeGenerated.rangeDependencies;
  }
}));
Object.defineProperty(exports, "reshapeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesReshapeGenerated.reshapeDependencies;
  }
}));
Object.defineProperty(exports, "resizeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesResizeGenerated.resizeDependencies;
  }
}));
Object.defineProperty(exports, "rotateDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRotateGenerated.rotateDependencies;
  }
}));
Object.defineProperty(exports, "rotationMatrixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRotationMatrixGenerated.rotationMatrixDependencies;
  }
}));
Object.defineProperty(exports, "rowDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRowGenerated.rowDependencies;
  }
}));
Object.defineProperty(exports, "sizeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSizeGenerated.sizeDependencies;
  }
}));
Object.defineProperty(exports, "squeezeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSqueezeGenerated.squeezeDependencies;
  }
}));
Object.defineProperty(exports, "subsetDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSubsetGenerated.subsetDependencies;
  }
}));
Object.defineProperty(exports, "transposeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTransposeGenerated.transposeDependencies;
  }
}));
Object.defineProperty(exports, "ctransposeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCtransposeGenerated.ctransposeDependencies;
  }
}));
Object.defineProperty(exports, "zerosDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesZerosGenerated.zerosDependencies;
  }
}));
Object.defineProperty(exports, "erfDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesErfGenerated.erfDependencies;
  }
}));
Object.defineProperty(exports, "modeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesModeGenerated.modeDependencies;
  }
}));
Object.defineProperty(exports, "prodDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesProdGenerated.prodDependencies;
  }
}));
Object.defineProperty(exports, "formatDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFormatGenerated.formatDependencies;
  }
}));
Object.defineProperty(exports, "binDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBinGenerated.binDependencies;
  }
}));
Object.defineProperty(exports, "octDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesOctGenerated.octDependencies;
  }
}));
Object.defineProperty(exports, "hexDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesHexGenerated.hexDependencies;
  }
}));
Object.defineProperty(exports, "printDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPrintGenerated.printDependencies;
  }
}));
Object.defineProperty(exports, "toDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesToGenerated.toDependencies;
  }
}));
Object.defineProperty(exports, "isPrimeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIsPrimeGenerated.isPrimeDependencies;
  }
}));
Object.defineProperty(exports, "numericDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNumericGenerated.numericDependencies;
  }
}));
Object.defineProperty(exports, "divideScalarDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDivideScalarGenerated.divideScalarDependencies;
  }
}));
Object.defineProperty(exports, "powDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPowGenerated.powDependencies;
  }
}));
Object.defineProperty(exports, "roundDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRoundGenerated.roundDependencies;
  }
}));
Object.defineProperty(exports, "logDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLogGenerated.logDependencies;
  }
}));
Object.defineProperty(exports, "log1pDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLog1pGenerated.log1pDependencies;
  }
}));
Object.defineProperty(exports, "nthRootsDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNthRootsGenerated.nthRootsDependencies;
  }
}));
Object.defineProperty(exports, "dotPowDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDotPowGenerated.dotPowDependencies;
  }
}));
Object.defineProperty(exports, "dotDivideDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDotDivideGenerated.dotDivideDependencies;
  }
}));
Object.defineProperty(exports, "lsolveDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLsolveGenerated.lsolveDependencies;
  }
}));
Object.defineProperty(exports, "usolveDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUsolveGenerated.usolveDependencies;
  }
}));
Object.defineProperty(exports, "lsolveAllDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLsolveAllGenerated.lsolveAllDependencies;
  }
}));
Object.defineProperty(exports, "usolveAllDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUsolveAllGenerated.usolveAllDependencies;
  }
}));
Object.defineProperty(exports, "leftShiftDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLeftShiftGenerated.leftShiftDependencies;
  }
}));
Object.defineProperty(exports, "rightArithShiftDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRightArithShiftGenerated.rightArithShiftDependencies;
  }
}));
Object.defineProperty(exports, "rightLogShiftDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRightLogShiftGenerated.rightLogShiftDependencies;
  }
}));
Object.defineProperty(exports, "andDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAndGenerated.andDependencies;
  }
}));
Object.defineProperty(exports, "compareDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCompareGenerated.compareDependencies;
  }
}));
Object.defineProperty(exports, "compareNaturalDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCompareNaturalGenerated.compareNaturalDependencies;
  }
}));
Object.defineProperty(exports, "compareTextDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCompareTextGenerated.compareTextDependencies;
  }
}));
Object.defineProperty(exports, "equalDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEqualGenerated.equalDependencies;
  }
}));
Object.defineProperty(exports, "equalTextDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEqualTextGenerated.equalTextDependencies;
  }
}));
Object.defineProperty(exports, "smallerDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSmallerGenerated.smallerDependencies;
  }
}));
Object.defineProperty(exports, "smallerEqDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSmallerEqGenerated.smallerEqDependencies;
  }
}));
Object.defineProperty(exports, "largerDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLargerGenerated.largerDependencies;
  }
}));
Object.defineProperty(exports, "largerEqDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLargerEqGenerated.largerEqDependencies;
  }
}));
Object.defineProperty(exports, "deepEqualDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDeepEqualGenerated.deepEqualDependencies;
  }
}));
Object.defineProperty(exports, "unequalDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUnequalGenerated.unequalDependencies;
  }
}));
Object.defineProperty(exports, "partitionSelectDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPartitionSelectGenerated.partitionSelectDependencies;
  }
}));
Object.defineProperty(exports, "sortDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSortGenerated.sortDependencies;
  }
}));
Object.defineProperty(exports, "maxDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMaxGenerated.maxDependencies;
  }
}));
Object.defineProperty(exports, "minDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMinGenerated.minDependencies;
  }
}));
Object.defineProperty(exports, "ImmutableDenseMatrixDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesImmutableDenseMatrixClassGenerated.ImmutableDenseMatrixDependencies;
  }
}));
Object.defineProperty(exports, "IndexDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIndexClassGenerated.IndexDependencies;
  }
}));
Object.defineProperty(exports, "FibonacciHeapDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFibonacciHeapClassGenerated.FibonacciHeapDependencies;
  }
}));
Object.defineProperty(exports, "SpaDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSpaClassGenerated.SpaDependencies;
  }
}));
Object.defineProperty(exports, "UnitDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUnitClassGenerated.UnitDependencies;
  }
}));
Object.defineProperty(exports, "unitDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUnitFunctionGenerated.unitDependencies;
  }
}));
Object.defineProperty(exports, "sparseDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSparseGenerated.sparseDependencies;
  }
}));
Object.defineProperty(exports, "createUnitDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCreateUnitGenerated.createUnitDependencies;
  }
}));
Object.defineProperty(exports, "acosDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAcosGenerated.acosDependencies;
  }
}));
Object.defineProperty(exports, "acoshDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAcoshGenerated.acoshDependencies;
  }
}));
Object.defineProperty(exports, "acotDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAcotGenerated.acotDependencies;
  }
}));
Object.defineProperty(exports, "acothDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAcothGenerated.acothDependencies;
  }
}));
Object.defineProperty(exports, "acscDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAcscGenerated.acscDependencies;
  }
}));
Object.defineProperty(exports, "acschDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAcschGenerated.acschDependencies;
  }
}));
Object.defineProperty(exports, "asecDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAsecGenerated.asecDependencies;
  }
}));
Object.defineProperty(exports, "asechDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAsechGenerated.asechDependencies;
  }
}));
Object.defineProperty(exports, "asinDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAsinGenerated.asinDependencies;
  }
}));
Object.defineProperty(exports, "asinhDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAsinhGenerated.asinhDependencies;
  }
}));
Object.defineProperty(exports, "atanDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAtanGenerated.atanDependencies;
  }
}));
Object.defineProperty(exports, "atan2Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAtan2Generated.atan2Dependencies;
  }
}));
Object.defineProperty(exports, "atanhDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAtanhGenerated.atanhDependencies;
  }
}));
Object.defineProperty(exports, "cosDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCosGenerated.cosDependencies;
  }
}));
Object.defineProperty(exports, "coshDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCoshGenerated.coshDependencies;
  }
}));
Object.defineProperty(exports, "cotDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCotGenerated.cotDependencies;
  }
}));
Object.defineProperty(exports, "cothDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCothGenerated.cothDependencies;
  }
}));
Object.defineProperty(exports, "cscDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCscGenerated.cscDependencies;
  }
}));
Object.defineProperty(exports, "cschDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCschGenerated.cschDependencies;
  }
}));
Object.defineProperty(exports, "secDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSecGenerated.secDependencies;
  }
}));
Object.defineProperty(exports, "sechDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSechGenerated.sechDependencies;
  }
}));
Object.defineProperty(exports, "sinDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSinGenerated.sinDependencies;
  }
}));
Object.defineProperty(exports, "sinhDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSinhGenerated.sinhDependencies;
  }
}));
Object.defineProperty(exports, "tanDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTanGenerated.tanDependencies;
  }
}));
Object.defineProperty(exports, "tanhDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTanhGenerated.tanhDependencies;
  }
}));
Object.defineProperty(exports, "setCartesianDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetCartesianGenerated.setCartesianDependencies;
  }
}));
Object.defineProperty(exports, "setDifferenceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetDifferenceGenerated.setDifferenceDependencies;
  }
}));
Object.defineProperty(exports, "setDistinctDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetDistinctGenerated.setDistinctDependencies;
  }
}));
Object.defineProperty(exports, "setIntersectDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetIntersectGenerated.setIntersectDependencies;
  }
}));
Object.defineProperty(exports, "setIsSubsetDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetIsSubsetGenerated.setIsSubsetDependencies;
  }
}));
Object.defineProperty(exports, "setMultiplicityDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetMultiplicityGenerated.setMultiplicityDependencies;
  }
}));
Object.defineProperty(exports, "setPowersetDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetPowersetGenerated.setPowersetDependencies;
  }
}));
Object.defineProperty(exports, "setSizeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetSizeGenerated.setSizeDependencies;
  }
}));
Object.defineProperty(exports, "setSymDifferenceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetSymDifferenceGenerated.setSymDifferenceDependencies;
  }
}));
Object.defineProperty(exports, "setUnionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSetUnionGenerated.setUnionDependencies;
  }
}));
Object.defineProperty(exports, "addDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAddGenerated.addDependencies;
  }
}));
Object.defineProperty(exports, "hypotDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesHypotGenerated.hypotDependencies;
  }
}));
Object.defineProperty(exports, "normDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNormGenerated.normDependencies;
  }
}));
Object.defineProperty(exports, "dotDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDotGenerated.dotDependencies;
  }
}));
Object.defineProperty(exports, "traceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTraceGenerated.traceDependencies;
  }
}));
Object.defineProperty(exports, "indexDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIndexGenerated.indexDependencies;
  }
}));
Object.defineProperty(exports, "NodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNodeGenerated.NodeDependencies;
  }
}));
Object.defineProperty(exports, "AccessorNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAccessorNodeGenerated.AccessorNodeDependencies;
  }
}));
Object.defineProperty(exports, "ArrayNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesArrayNodeGenerated.ArrayNodeDependencies;
  }
}));
Object.defineProperty(exports, "AssignmentNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAssignmentNodeGenerated.AssignmentNodeDependencies;
  }
}));
Object.defineProperty(exports, "BlockNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBlockNodeGenerated.BlockNodeDependencies;
  }
}));
Object.defineProperty(exports, "ConditionalNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesConditionalNodeGenerated.ConditionalNodeDependencies;
  }
}));
Object.defineProperty(exports, "ConstantNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesConstantNodeGenerated.ConstantNodeDependencies;
  }
}));
Object.defineProperty(exports, "FunctionAssignmentNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFunctionAssignmentNodeGenerated.FunctionAssignmentNodeDependencies;
  }
}));
Object.defineProperty(exports, "IndexNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIndexNodeGenerated.IndexNodeDependencies;
  }
}));
Object.defineProperty(exports, "ObjectNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesObjectNodeGenerated.ObjectNodeDependencies;
  }
}));
Object.defineProperty(exports, "OperatorNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesOperatorNodeGenerated.OperatorNodeDependencies;
  }
}));
Object.defineProperty(exports, "ParenthesisNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesParenthesisNodeGenerated.ParenthesisNodeDependencies;
  }
}));
Object.defineProperty(exports, "RangeNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRangeNodeGenerated.RangeNodeDependencies;
  }
}));
Object.defineProperty(exports, "RelationalNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRelationalNodeGenerated.RelationalNodeDependencies;
  }
}));
Object.defineProperty(exports, "SymbolNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSymbolNodeGenerated.SymbolNodeDependencies;
  }
}));
Object.defineProperty(exports, "FunctionNodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFunctionNodeGenerated.FunctionNodeDependencies;
  }
}));
Object.defineProperty(exports, "parseDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesParseGenerated.parseDependencies;
  }
}));
Object.defineProperty(exports, "compileDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCompileGenerated.compileDependencies;
  }
}));
Object.defineProperty(exports, "evaluateDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEvaluateGenerated.evaluateDependencies;
  }
}));
Object.defineProperty(exports, "ParserDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesParserClassGenerated.ParserDependencies;
  }
}));
Object.defineProperty(exports, "parserDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesParserGenerated.parserDependencies;
  }
}));
Object.defineProperty(exports, "lupDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLupGenerated.lupDependencies;
  }
}));
Object.defineProperty(exports, "qrDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesQrGenerated.qrDependencies;
  }
}));
Object.defineProperty(exports, "sluDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSluGenerated.sluDependencies;
  }
}));
Object.defineProperty(exports, "lusolveDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLusolveGenerated.lusolveDependencies;
  }
}));
Object.defineProperty(exports, "HelpDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesHelpClassGenerated.HelpDependencies;
  }
}));
Object.defineProperty(exports, "ChainDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesChainClassGenerated.ChainDependencies;
  }
}));
Object.defineProperty(exports, "helpDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesHelpGenerated.helpDependencies;
  }
}));
Object.defineProperty(exports, "chainDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesChainGenerated.chainDependencies;
  }
}));
Object.defineProperty(exports, "detDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDetGenerated.detDependencies;
  }
}));
Object.defineProperty(exports, "invDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesInvGenerated.invDependencies;
  }
}));
Object.defineProperty(exports, "eigsDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEigsGenerated.eigsDependencies;
  }
}));
Object.defineProperty(exports, "expmDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesExpmGenerated.expmDependencies;
  }
}));
Object.defineProperty(exports, "sqrtmDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSqrtmGenerated.sqrtmDependencies;
  }
}));
Object.defineProperty(exports, "divideDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDivideGenerated.divideDependencies;
  }
}));
Object.defineProperty(exports, "distanceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDistanceGenerated.distanceDependencies;
  }
}));
Object.defineProperty(exports, "intersectDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIntersectGenerated.intersectDependencies;
  }
}));
Object.defineProperty(exports, "sumDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSumGenerated.sumDependencies;
  }
}));
Object.defineProperty(exports, "meanDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMeanGenerated.meanDependencies;
  }
}));
Object.defineProperty(exports, "medianDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMedianGenerated.medianDependencies;
  }
}));
Object.defineProperty(exports, "madDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMadGenerated.madDependencies;
  }
}));
Object.defineProperty(exports, "varianceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesVarianceGenerated.varianceDependencies;
  }
}));
Object.defineProperty(exports, "quantileSeqDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesQuantileSeqGenerated.quantileSeqDependencies;
  }
}));
Object.defineProperty(exports, "stdDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesStdGenerated.stdDependencies;
  }
}));
Object.defineProperty(exports, "combinationsDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCombinationsGenerated.combinationsDependencies;
  }
}));
Object.defineProperty(exports, "combinationsWithRepDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCombinationsWithRepGenerated.combinationsWithRepDependencies;
  }
}));
Object.defineProperty(exports, "gammaDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesGammaGenerated.gammaDependencies;
  }
}));
Object.defineProperty(exports, "factorialDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFactorialGenerated.factorialDependencies;
  }
}));
Object.defineProperty(exports, "kldivergenceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesKldivergenceGenerated.kldivergenceDependencies;
  }
}));
Object.defineProperty(exports, "multinomialDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMultinomialGenerated.multinomialDependencies;
  }
}));
Object.defineProperty(exports, "permutationsDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPermutationsGenerated.permutationsDependencies;
  }
}));
Object.defineProperty(exports, "pickRandomDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPickRandomGenerated.pickRandomDependencies;
  }
}));
Object.defineProperty(exports, "randomDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRandomGenerated.randomDependencies;
  }
}));
Object.defineProperty(exports, "randomIntDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRandomIntGenerated.randomIntDependencies;
  }
}));
Object.defineProperty(exports, "stirlingS2Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesStirlingS2Generated.stirlingS2Dependencies;
  }
}));
Object.defineProperty(exports, "bellNumbersDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBellNumbersGenerated.bellNumbersDependencies;
  }
}));
Object.defineProperty(exports, "catalanDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCatalanGenerated.catalanDependencies;
  }
}));
Object.defineProperty(exports, "compositionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCompositionGenerated.compositionDependencies;
  }
}));
Object.defineProperty(exports, "simplifyDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSimplifyGenerated.simplifyDependencies;
  }
}));
Object.defineProperty(exports, "derivativeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDerivativeGenerated.derivativeDependencies;
  }
}));
Object.defineProperty(exports, "rationalizeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRationalizeGenerated.rationalizeDependencies;
  }
}));
Object.defineProperty(exports, "reviverDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesReviverGenerated.reviverDependencies;
  }
}));
Object.defineProperty(exports, "replacerDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesReplacerGenerated.replacerDependencies;
  }
}));
Object.defineProperty(exports, "eDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEGenerated.eDependencies;
  }
}));
Object.defineProperty(exports, "EDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUppercaseEGenerated.EDependencies;
  }
}));
Object.defineProperty(exports, "falseDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFalseGenerated.falseDependencies;
  }
}));
Object.defineProperty(exports, "iDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIGenerated.iDependencies;
  }
}));
Object.defineProperty(exports, "InfinityDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesInfinityGenerated.InfinityDependencies;
  }
}));
Object.defineProperty(exports, "LN10Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLN10Generated.LN10Dependencies;
  }
}));
Object.defineProperty(exports, "LN2Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLN2Generated.LN2Dependencies;
  }
}));
Object.defineProperty(exports, "LOG10EDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLOG10EGenerated.LOG10EDependencies;
  }
}));
Object.defineProperty(exports, "LOG2EDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLOG2EGenerated.LOG2EDependencies;
  }
}));
Object.defineProperty(exports, "NaNDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNaNGenerated.NaNDependencies;
  }
}));
Object.defineProperty(exports, "nullDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNullGenerated.nullDependencies;
  }
}));
Object.defineProperty(exports, "phiDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPhiGenerated.phiDependencies;
  }
}));
Object.defineProperty(exports, "piDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPiGenerated.piDependencies;
  }
}));
Object.defineProperty(exports, "PIDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesUppercasePiGenerated.PIDependencies;
  }
}));
Object.defineProperty(exports, "SQRT1_2Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSQRT1_2Generated.SQRT1_2Dependencies;
  }
}));
Object.defineProperty(exports, "SQRT2Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSQRT2Generated.SQRT2Dependencies;
  }
}));
Object.defineProperty(exports, "tauDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTauGenerated.tauDependencies;
  }
}));
Object.defineProperty(exports, "trueDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesTrueGenerated.trueDependencies;
  }
}));
Object.defineProperty(exports, "versionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesVersionGenerated.versionDependencies;
  }
}));
Object.defineProperty(exports, "atomicMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAtomicMassGenerated.atomicMassDependencies;
  }
}));
Object.defineProperty(exports, "avogadroDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesAvogadroGenerated.avogadroDependencies;
  }
}));
Object.defineProperty(exports, "bohrMagnetonDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBohrMagnetonGenerated.bohrMagnetonDependencies;
  }
}));
Object.defineProperty(exports, "bohrRadiusDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBohrRadiusGenerated.bohrRadiusDependencies;
  }
}));
Object.defineProperty(exports, "boltzmannDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesBoltzmannGenerated.boltzmannDependencies;
  }
}));
Object.defineProperty(exports, "classicalElectronRadiusDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesClassicalElectronRadiusGenerated.classicalElectronRadiusDependencies;
  }
}));
Object.defineProperty(exports, "conductanceQuantumDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesConductanceQuantumGenerated.conductanceQuantumDependencies;
  }
}));
Object.defineProperty(exports, "coulombDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesCoulombGenerated.coulombDependencies;
  }
}));
Object.defineProperty(exports, "deuteronMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDeuteronMassGenerated.deuteronMassDependencies;
  }
}));
Object.defineProperty(exports, "efimovFactorDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesEfimovFactorGenerated.efimovFactorDependencies;
  }
}));
Object.defineProperty(exports, "electricConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesElectricConstantGenerated.electricConstantDependencies;
  }
}));
Object.defineProperty(exports, "electronMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesElectronMassGenerated.electronMassDependencies;
  }
}));
Object.defineProperty(exports, "elementaryChargeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesElementaryChargeGenerated.elementaryChargeDependencies;
  }
}));
Object.defineProperty(exports, "faradayDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFaradayGenerated.faradayDependencies;
  }
}));
Object.defineProperty(exports, "fermiCouplingDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFermiCouplingGenerated.fermiCouplingDependencies;
  }
}));
Object.defineProperty(exports, "fineStructureDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFineStructureGenerated.fineStructureDependencies;
  }
}));
Object.defineProperty(exports, "firstRadiationDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFirstRadiationGenerated.firstRadiationDependencies;
  }
}));
Object.defineProperty(exports, "gasConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesGasConstantGenerated.gasConstantDependencies;
  }
}));
Object.defineProperty(exports, "gravitationConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesGravitationConstantGenerated.gravitationConstantDependencies;
  }
}));
Object.defineProperty(exports, "gravityDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesGravityGenerated.gravityDependencies;
  }
}));
Object.defineProperty(exports, "hartreeEnergyDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesHartreeEnergyGenerated.hartreeEnergyDependencies;
  }
}));
Object.defineProperty(exports, "inverseConductanceQuantumDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesInverseConductanceQuantumGenerated.inverseConductanceQuantumDependencies;
  }
}));
Object.defineProperty(exports, "klitzingDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesKlitzingGenerated.klitzingDependencies;
  }
}));
Object.defineProperty(exports, "loschmidtDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesLoschmidtGenerated.loschmidtDependencies;
  }
}));
Object.defineProperty(exports, "magneticConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMagneticConstantGenerated.magneticConstantDependencies;
  }
}));
Object.defineProperty(exports, "magneticFluxQuantumDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMagneticFluxQuantumGenerated.magneticFluxQuantumDependencies;
  }
}));
Object.defineProperty(exports, "molarMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMolarMassGenerated.molarMassDependencies;
  }
}));
Object.defineProperty(exports, "molarMassC12Dependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMolarMassC12Generated.molarMassC12Dependencies;
  }
}));
Object.defineProperty(exports, "molarPlanckConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMolarPlanckConstantGenerated.molarPlanckConstantDependencies;
  }
}));
Object.defineProperty(exports, "molarVolumeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMolarVolumeGenerated.molarVolumeDependencies;
  }
}));
Object.defineProperty(exports, "neutronMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNeutronMassGenerated.neutronMassDependencies;
  }
}));
Object.defineProperty(exports, "nuclearMagnetonDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesNuclearMagnetonGenerated.nuclearMagnetonDependencies;
  }
}));
Object.defineProperty(exports, "planckChargeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPlanckChargeGenerated.planckChargeDependencies;
  }
}));
Object.defineProperty(exports, "planckConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPlanckConstantGenerated.planckConstantDependencies;
  }
}));
Object.defineProperty(exports, "planckLengthDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPlanckLengthGenerated.planckLengthDependencies;
  }
}));
Object.defineProperty(exports, "planckMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPlanckMassGenerated.planckMassDependencies;
  }
}));
Object.defineProperty(exports, "planckTemperatureDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPlanckTemperatureGenerated.planckTemperatureDependencies;
  }
}));
Object.defineProperty(exports, "planckTimeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesPlanckTimeGenerated.planckTimeDependencies;
  }
}));
Object.defineProperty(exports, "protonMassDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesProtonMassGenerated.protonMassDependencies;
  }
}));
Object.defineProperty(exports, "quantumOfCirculationDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesQuantumOfCirculationGenerated.quantumOfCirculationDependencies;
  }
}));
Object.defineProperty(exports, "reducedPlanckConstantDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesReducedPlanckConstantGenerated.reducedPlanckConstantDependencies;
  }
}));
Object.defineProperty(exports, "rydbergDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRydbergGenerated.rydbergDependencies;
  }
}));
Object.defineProperty(exports, "sackurTetrodeDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSackurTetrodeGenerated.sackurTetrodeDependencies;
  }
}));
Object.defineProperty(exports, "secondRadiationDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSecondRadiationGenerated.secondRadiationDependencies;
  }
}));
Object.defineProperty(exports, "speedOfLightDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSpeedOfLightGenerated.speedOfLightDependencies;
  }
}));
Object.defineProperty(exports, "stefanBoltzmannDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesStefanBoltzmannGenerated.stefanBoltzmannDependencies;
  }
}));
Object.defineProperty(exports, "thomsonCrossSectionDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesThomsonCrossSectionGenerated.thomsonCrossSectionDependencies;
  }
}));
Object.defineProperty(exports, "vacuumImpedanceDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesVacuumImpedanceGenerated.vacuumImpedanceDependencies;
  }
}));
Object.defineProperty(exports, "weakMixingAngleDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesWeakMixingAngleGenerated.weakMixingAngleDependencies;
  }
}));
Object.defineProperty(exports, "wienDisplacementDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesWienDisplacementGenerated.wienDisplacementDependencies;
  }
}));
Object.defineProperty(exports, "applyTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesApplyTransformGenerated.applyTransformDependencies;
  }
}));
Object.defineProperty(exports, "columnTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesColumnTransformGenerated.columnTransformDependencies;
  }
}));
Object.defineProperty(exports, "filterTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesFilterTransformGenerated.filterTransformDependencies;
  }
}));
Object.defineProperty(exports, "forEachTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesForEachTransformGenerated.forEachTransformDependencies;
  }
}));
Object.defineProperty(exports, "indexTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesIndexTransformGenerated.indexTransformDependencies;
  }
}));
Object.defineProperty(exports, "mapTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMapTransformGenerated.mapTransformDependencies;
  }
}));
Object.defineProperty(exports, "maxTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMaxTransformGenerated.maxTransformDependencies;
  }
}));
Object.defineProperty(exports, "meanTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMeanTransformGenerated.meanTransformDependencies;
  }
}));
Object.defineProperty(exports, "minTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesMinTransformGenerated.minTransformDependencies;
  }
}));
Object.defineProperty(exports, "rangeTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRangeTransformGenerated.rangeTransformDependencies;
  }
}));
Object.defineProperty(exports, "rowTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesRowTransformGenerated.rowTransformDependencies;
  }
}));
Object.defineProperty(exports, "subsetTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSubsetTransformGenerated.subsetTransformDependencies;
  }
}));
Object.defineProperty(exports, "concatTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesConcatTransformGenerated.concatTransformDependencies;
  }
}));
Object.defineProperty(exports, "diffTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesDiffTransformGenerated.diffTransformDependencies;
  }
}));
Object.defineProperty(exports, "stdTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesStdTransformGenerated.stdTransformDependencies;
  }
}));
Object.defineProperty(exports, "sumTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesSumTransformGenerated.sumTransformDependencies;
  }
}));
Object.defineProperty(exports, "varianceTransformDependencies", ({
  enumerable: true,
  get: function get() {
    return _dependenciesVarianceTransformGenerated.varianceTransformDependencies;
  }
}));
Object.defineProperty(exports, "all", ({
  enumerable: true,
  get: function get() {
    return _allFactoriesAny.all;
  }
}));

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesResultSetGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesResultSet.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResultSet.generated.js");

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _dependenciesRangeClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRangeClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeClass.generated.js");

var _dependenciesMatrixClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesCloneGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesClone.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesClone.generated.js");

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesIsNegativeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsNegative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js");

var _dependenciesIsNumericGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js");

var _dependenciesHasNumericValueGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesHasNumericValue.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHasNumericValue.generated.js");

var _dependenciesIsPositiveGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsPositive.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPositive.generated.js");

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesIsNaNGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsNaN.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js");

var _dependenciesTypeOfGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTypeOf.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTypeOf.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _dependenciesStringGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesString.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesString.generated.js");

var _dependenciesBooleanGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBoolean.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBoolean.generated.js");

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesComplexGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesComplex.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplex.generated.js");

var _dependenciesFractionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFraction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMatrixFromFunctionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMatrixFromFunction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromFunction.generated.js");

var _dependenciesMatrixFromRowsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMatrixFromRows.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromRows.generated.js");

var _dependenciesMatrixFromColumnsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMatrixFromColumns.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromColumns.generated.js");

var _dependenciesSplitUnitGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSplitUnit.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSplitUnit.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _dependenciesUnaryPlusGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUnaryPlus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryPlus.generated.js");

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesApplyGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesApply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApply.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesCbrtGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCbrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCbrt.generated.js");

var _dependenciesCeilGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCeil.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCeil.generated.js");

var _dependenciesCubeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCube.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCube.generated.js");

var _dependenciesExpGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesExp.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExp.generated.js");

var _dependenciesExpm1Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesExpm1.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExpm1.generated.js");

var _dependenciesFixGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFix.generated.js");

var _dependenciesFloorGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFloor.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFloor.generated.js");

var _dependenciesGcdGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesGcd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGcd.generated.js");

var _dependenciesLcmGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLcm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLcm.generated.js");

var _dependenciesLog10Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesLog10.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog10.generated.js");

var _dependenciesLog2Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesLog2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog2.generated.js");

var _dependenciesModGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMod.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMod.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesNthRootGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNthRoot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNthRoot.generated.js");

var _dependenciesSignGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSign.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSign.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesSquareGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSquare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSquare.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesXgcdGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesXgcd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesXgcd.generated.js");

var _dependenciesDotMultiplyGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDotMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotMultiply.generated.js");

var _dependenciesBitAndGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBitAnd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitAnd.generated.js");

var _dependenciesBitNotGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBitNot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitNot.generated.js");

var _dependenciesBitOrGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBitOr.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitOr.generated.js");

var _dependenciesBitXorGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBitXor.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitXor.generated.js");

var _dependenciesArgGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesArg.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArg.generated.js");

var _dependenciesConjGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesConj.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js");

var _dependenciesImGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIm.generated.js");

var _dependenciesReGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRe.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRe.generated.js");

var _dependenciesNotGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNot.generated.js");

var _dependenciesOrGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesOr.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOr.generated.js");

var _dependenciesXorGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesXor.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesXor.generated.js");

var _dependenciesConcatGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesConcat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcat.generated.js");

var _dependenciesColumnGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesColumn.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumn.generated.js");

var _dependenciesCountGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCount.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCount.generated.js");

var _dependenciesCrossGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCross.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCross.generated.js");

var _dependenciesDiagGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDiag.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiag.generated.js");

var _dependenciesFilterGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFilter.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFilter.generated.js");

var _dependenciesFlattenGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFlatten.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js");

var _dependenciesForEachGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesForEach.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesForEach.generated.js");

var _dependenciesGetMatrixDataTypeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesGetMatrixDataType.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js");

var _dependenciesIdentityGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIdentity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js");

var _dependenciesKronGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesKron.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKron.generated.js");

var _dependenciesMapGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMap.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMap.generated.js");

var _dependenciesDiffGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDiff.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiff.generated.js");

var _dependenciesOnesGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesOnes.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOnes.generated.js");

var _dependenciesRangeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRange.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js");

var _dependenciesReshapeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesReshape.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReshape.generated.js");

var _dependenciesResizeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesResize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResize.generated.js");

var _dependenciesRotateGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRotate.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotate.generated.js");

var _dependenciesRotationMatrixGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRotationMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotationMatrix.generated.js");

var _dependenciesRowGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRow.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSqueezeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSqueeze.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqueeze.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTransposeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTranspose.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTranspose.generated.js");

var _dependenciesCtransposeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCtranspose.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCtranspose.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _dependenciesErfGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesErf.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesErf.generated.js");

var _dependenciesModeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMode.generated.js");

var _dependenciesProdGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesProd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProd.generated.js");

var _dependenciesFormatGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFormat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js");

var _dependenciesBinGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBin.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBin.generated.js");

var _dependenciesOctGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesOct.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOct.generated.js");

var _dependenciesHexGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesHex.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHex.generated.js");

var _dependenciesPrintGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPrint.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPrint.generated.js");

var _dependenciesToGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTo.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTo.generated.js");

var _dependenciesIsPrimeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIsPrime.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPrime.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesRoundGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRound.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRound.generated.js");

var _dependenciesLogGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLog.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog.generated.js");

var _dependenciesLog1pGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLog1p.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog1p.generated.js");

var _dependenciesNthRootsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNthRoots.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNthRoots.generated.js");

var _dependenciesDotPowGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDotPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotPow.generated.js");

var _dependenciesDotDivideGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDotDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotDivide.generated.js");

var _dependenciesLsolveGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLsolve.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolve.generated.js");

var _dependenciesUsolveGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUsolve.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolve.generated.js");

var _dependenciesLsolveAllGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLsolveAll.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolveAll.generated.js");

var _dependenciesUsolveAllGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUsolveAll.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolveAll.generated.js");

var _dependenciesLeftShiftGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLeftShift.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLeftShift.generated.js");

var _dependenciesRightArithShiftGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRightArithShift.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRightArithShift.generated.js");

var _dependenciesRightLogShiftGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRightLogShift.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRightLogShift.generated.js");

var _dependenciesAndGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAnd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAnd.generated.js");

var _dependenciesCompareGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCompare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesCompareTextGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCompareText.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareText.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesEqualTextGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesEqualText.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualText.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSmallerEqGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSmallerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmallerEq.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesLargerEqGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLargerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLargerEq.generated.js");

var _dependenciesDeepEqualGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDeepEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDeepEqual.generated.js");

var _dependenciesUnequalGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUnequal.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnequal.generated.js");

var _dependenciesPartitionSelectGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPartitionSelect.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPartitionSelect.generated.js");

var _dependenciesSortGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSort.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSort.generated.js");

var _dependenciesMaxGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMax.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMax.generated.js");

var _dependenciesMinGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMin.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMin.generated.js");

var _dependenciesImmutableDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js");

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesFibonacciHeapClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFibonacciHeapClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js");

var _dependenciesSpaClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSpaClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpaClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _dependenciesUnitFunctionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUnitFunction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitFunction.generated.js");

var _dependenciesSparseGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSparse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparse.generated.js");

var _dependenciesCreateUnitGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCreateUnit.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCreateUnit.generated.js");

var _dependenciesAcosGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAcos.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcos.generated.js");

var _dependenciesAcoshGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAcosh.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcosh.generated.js");

var _dependenciesAcotGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAcot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcot.generated.js");

var _dependenciesAcothGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAcoth.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcoth.generated.js");

var _dependenciesAcscGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAcsc.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcsc.generated.js");

var _dependenciesAcschGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAcsch.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcsch.generated.js");

var _dependenciesAsecGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAsec.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsec.generated.js");

var _dependenciesAsechGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAsech.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsech.generated.js");

var _dependenciesAsinGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAsin.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsin.generated.js");

var _dependenciesAsinhGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAsinh.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsinh.generated.js");

var _dependenciesAtanGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAtan.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan.generated.js");

var _dependenciesAtan2Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesAtan2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan2.generated.js");

var _dependenciesAtanhGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAtanh.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtanh.generated.js");

var _dependenciesCosGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCos.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCos.generated.js");

var _dependenciesCoshGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCosh.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCosh.generated.js");

var _dependenciesCotGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCot.generated.js");

var _dependenciesCothGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCoth.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCoth.generated.js");

var _dependenciesCscGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCsc.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCsc.generated.js");

var _dependenciesCschGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCsch.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCsch.generated.js");

var _dependenciesSecGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSec.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSec.generated.js");

var _dependenciesSechGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSech.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSech.generated.js");

var _dependenciesSinGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSin.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSin.generated.js");

var _dependenciesSinhGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSinh.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSinh.generated.js");

var _dependenciesTanGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTan.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTan.generated.js");

var _dependenciesTanhGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTanh.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTanh.generated.js");

var _dependenciesSetCartesianGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetCartesian.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetCartesian.generated.js");

var _dependenciesSetDifferenceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetDifference.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDifference.generated.js");

var _dependenciesSetDistinctGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetDistinct.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDistinct.generated.js");

var _dependenciesSetIntersectGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetIntersect.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIntersect.generated.js");

var _dependenciesSetIsSubsetGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetIsSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIsSubset.generated.js");

var _dependenciesSetMultiplicityGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetMultiplicity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js");

var _dependenciesSetPowersetGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetPowerset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetPowerset.generated.js");

var _dependenciesSetSizeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSize.generated.js");

var _dependenciesSetSymDifferenceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetSymDifference.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSymDifference.generated.js");

var _dependenciesSetUnionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSetUnion.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetUnion.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesHypotGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesHypot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHypot.generated.js");

var _dependenciesNormGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNorm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNorm.generated.js");

var _dependenciesDotGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDot.generated.js");

var _dependenciesTraceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTrace.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTrace.generated.js");

var _dependenciesIndexGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIndex.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndex.generated.js");

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesAccessorNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAccessorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAccessorNode.generated.js");

var _dependenciesArrayNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesArrayNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArrayNode.generated.js");

var _dependenciesAssignmentNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAssignmentNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAssignmentNode.generated.js");

var _dependenciesBlockNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBlockNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBlockNode.generated.js");

var _dependenciesConditionalNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesConditionalNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConditionalNode.generated.js");

var _dependenciesConstantNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesConstantNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js");

var _dependenciesFunctionAssignmentNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFunctionAssignmentNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js");

var _dependenciesIndexNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIndexNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexNode.generated.js");

var _dependenciesObjectNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesObjectNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesObjectNode.generated.js");

var _dependenciesOperatorNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesOperatorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js");

var _dependenciesParenthesisNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesParenthesisNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js");

var _dependenciesRangeNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRangeNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeNode.generated.js");

var _dependenciesRelationalNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRelationalNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRelationalNode.generated.js");

var _dependenciesSymbolNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSymbolNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js");

var _dependenciesFunctionNodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFunctionNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js");

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _dependenciesCompileGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCompile.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompile.generated.js");

var _dependenciesEvaluateGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesEvaluate.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEvaluate.generated.js");

var _dependenciesParserClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesParserClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParserClass.generated.js");

var _dependenciesParserGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesParser.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParser.generated.js");

var _dependenciesLupGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLup.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLup.generated.js");

var _dependenciesQrGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesQr.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQr.generated.js");

var _dependenciesSluGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSlu.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSlu.generated.js");

var _dependenciesLusolveGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLusolve.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLusolve.generated.js");

var _dependenciesHelpClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesHelpClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelpClass.generated.js");

var _dependenciesChainClassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesChainClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChainClass.generated.js");

var _dependenciesHelpGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesHelp.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelp.generated.js");

var _dependenciesChainGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesChain.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChain.generated.js");

var _dependenciesDetGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDet.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDet.generated.js");

var _dependenciesInvGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesInv.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js");

var _dependenciesEigsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesEigs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEigs.generated.js");

var _dependenciesExpmGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesExpm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExpm.generated.js");

var _dependenciesSqrtmGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSqrtm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrtm.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesDistanceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDistance.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDistance.generated.js");

var _dependenciesIntersectGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIntersect.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIntersect.generated.js");

var _dependenciesSumGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSum.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSum.generated.js");

var _dependenciesMeanGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMean.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMean.generated.js");

var _dependenciesMedianGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMedian.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMedian.generated.js");

var _dependenciesMadGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMad.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMad.generated.js");

var _dependenciesVarianceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesVariance.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVariance.generated.js");

var _dependenciesQuantileSeqGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesQuantileSeq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQuantileSeq.generated.js");

var _dependenciesStdGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesStd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStd.generated.js");

var _dependenciesCombinationsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCombinations.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinations.generated.js");

var _dependenciesCombinationsWithRepGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCombinationsWithRep.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinationsWithRep.generated.js");

var _dependenciesGammaGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesGamma.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGamma.generated.js");

var _dependenciesFactorialGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFactorial.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFactorial.generated.js");

var _dependenciesKldivergenceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesKldivergence.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKldivergence.generated.js");

var _dependenciesMultinomialGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMultinomial.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultinomial.generated.js");

var _dependenciesPermutationsGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPermutations.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPermutations.generated.js");

var _dependenciesPickRandomGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPickRandom.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPickRandom.generated.js");

var _dependenciesRandomGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRandom.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRandom.generated.js");

var _dependenciesRandomIntGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRandomInt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRandomInt.generated.js");

var _dependenciesStirlingS2Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesStirlingS2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStirlingS2.generated.js");

var _dependenciesBellNumbersGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBellNumbers.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBellNumbers.generated.js");

var _dependenciesCatalanGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCatalan.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCatalan.generated.js");

var _dependenciesCompositionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesComposition.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComposition.generated.js");

var _dependenciesSimplifyGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSimplify.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSimplify.generated.js");

var _dependenciesDerivativeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDerivative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDerivative.generated.js");

var _dependenciesRationalizeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRationalize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRationalize.generated.js");

var _dependenciesReviverGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesReviver.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReviver.generated.js");

var _dependenciesReplacerGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesReplacer.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReplacer.generated.js");

var _dependenciesEGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesE.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesE.generated.js");

var _dependenciesUppercaseEGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUppercaseE.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUppercaseE.generated.js");

var _dependenciesFalseGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFalse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFalse.generated.js");

var _dependenciesIGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesI.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesI.generated.js");

var _dependenciesInfinityGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesInfinity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInfinity.generated.js");

var _dependenciesLN10Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesLN10.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLN10.generated.js");

var _dependenciesLN2Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesLN2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLN2.generated.js");

var _dependenciesLOG10EGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLOG10E.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLOG10E.generated.js");

var _dependenciesLOG2EGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLOG2E.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLOG2E.generated.js");

var _dependenciesNaNGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNaN.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNaN.generated.js");

var _dependenciesNullGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNull.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNull.generated.js");

var _dependenciesPhiGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPhi.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPhi.generated.js");

var _dependenciesPiGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPi.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPi.generated.js");

var _dependenciesUppercasePiGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesUppercasePi.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUppercasePi.generated.js");

var _dependenciesSQRT1_2Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesSQRT1_2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSQRT1_2.generated.js");

var _dependenciesSQRT2Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesSQRT2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSQRT2.generated.js");

var _dependenciesTauGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTau.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTau.generated.js");

var _dependenciesTrueGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesTrue.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTrue.generated.js");

var _dependenciesVersionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesVersion.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVersion.generated.js");

var _dependenciesAtomicMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAtomicMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtomicMass.generated.js");

var _dependenciesAvogadroGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesAvogadro.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAvogadro.generated.js");

var _dependenciesBohrMagnetonGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBohrMagneton.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBohrMagneton.generated.js");

var _dependenciesBohrRadiusGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBohrRadius.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBohrRadius.generated.js");

var _dependenciesBoltzmannGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesBoltzmann.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBoltzmann.generated.js");

var _dependenciesClassicalElectronRadiusGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesClassicalElectronRadius.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js");

var _dependenciesConductanceQuantumGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesConductanceQuantum.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js");

var _dependenciesCoulombGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesCoulomb.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCoulomb.generated.js");

var _dependenciesDeuteronMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDeuteronMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDeuteronMass.generated.js");

var _dependenciesEfimovFactorGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesEfimovFactor.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEfimovFactor.generated.js");

var _dependenciesElectricConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesElectricConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElectricConstant.generated.js");

var _dependenciesElectronMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesElectronMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElectronMass.generated.js");

var _dependenciesElementaryChargeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesElementaryCharge.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElementaryCharge.generated.js");

var _dependenciesFaradayGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFaraday.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFaraday.generated.js");

var _dependenciesFermiCouplingGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFermiCoupling.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFermiCoupling.generated.js");

var _dependenciesFineStructureGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFineStructure.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFineStructure.generated.js");

var _dependenciesFirstRadiationGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFirstRadiation.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFirstRadiation.generated.js");

var _dependenciesGasConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesGasConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGasConstant.generated.js");

var _dependenciesGravitationConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesGravitationConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGravitationConstant.generated.js");

var _dependenciesGravityGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesGravity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGravity.generated.js");

var _dependenciesHartreeEnergyGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesHartreeEnergy.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js");

var _dependenciesInverseConductanceQuantumGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesInverseConductanceQuantum.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js");

var _dependenciesKlitzingGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesKlitzing.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKlitzing.generated.js");

var _dependenciesLoschmidtGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesLoschmidt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLoschmidt.generated.js");

var _dependenciesMagneticConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMagneticConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMagneticConstant.generated.js");

var _dependenciesMagneticFluxQuantumGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMagneticFluxQuantum.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js");

var _dependenciesMolarMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMolarMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarMass.generated.js");

var _dependenciesMolarMassC12Generated = __webpack_require__(/*! ./dependenciesAny/dependenciesMolarMassC12.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarMassC12.generated.js");

var _dependenciesMolarPlanckConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMolarPlanckConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js");

var _dependenciesMolarVolumeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMolarVolume.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarVolume.generated.js");

var _dependenciesNeutronMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNeutronMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNeutronMass.generated.js");

var _dependenciesNuclearMagnetonGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesNuclearMagneton.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js");

var _dependenciesPlanckChargeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPlanckCharge.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckCharge.generated.js");

var _dependenciesPlanckConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPlanckConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckConstant.generated.js");

var _dependenciesPlanckLengthGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPlanckLength.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckLength.generated.js");

var _dependenciesPlanckMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPlanckMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckMass.generated.js");

var _dependenciesPlanckTemperatureGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPlanckTemperature.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js");

var _dependenciesPlanckTimeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesPlanckTime.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckTime.generated.js");

var _dependenciesProtonMassGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesProtonMass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProtonMass.generated.js");

var _dependenciesQuantumOfCirculationGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesQuantumOfCirculation.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js");

var _dependenciesReducedPlanckConstantGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesReducedPlanckConstant.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js");

var _dependenciesRydbergGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRydberg.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRydberg.generated.js");

var _dependenciesSackurTetrodeGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSackurTetrode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSackurTetrode.generated.js");

var _dependenciesSecondRadiationGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSecondRadiation.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSecondRadiation.generated.js");

var _dependenciesSpeedOfLightGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSpeedOfLight.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js");

var _dependenciesStefanBoltzmannGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesStefanBoltzmann.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js");

var _dependenciesThomsonCrossSectionGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesThomsonCrossSection.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js");

var _dependenciesVacuumImpedanceGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesVacuumImpedance.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js");

var _dependenciesWeakMixingAngleGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesWeakMixingAngle.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js");

var _dependenciesWienDisplacementGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesWienDisplacement.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesWienDisplacement.generated.js");

var _dependenciesApplyTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesApplyTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApplyTransform.generated.js");

var _dependenciesColumnTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesColumnTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumnTransform.generated.js");

var _dependenciesFilterTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesFilterTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFilterTransform.generated.js");

var _dependenciesForEachTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesForEachTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesForEachTransform.generated.js");

var _dependenciesIndexTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesIndexTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexTransform.generated.js");

var _dependenciesMapTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMapTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMapTransform.generated.js");

var _dependenciesMaxTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMaxTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMaxTransform.generated.js");

var _dependenciesMeanTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMeanTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMeanTransform.generated.js");

var _dependenciesMinTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesMinTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMinTransform.generated.js");

var _dependenciesRangeTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRangeTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeTransform.generated.js");

var _dependenciesRowTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesRowTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRowTransform.generated.js");

var _dependenciesSubsetTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSubsetTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubsetTransform.generated.js");

var _dependenciesConcatTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesConcatTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcatTransform.generated.js");

var _dependenciesDiffTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesDiffTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiffTransform.generated.js");

var _dependenciesStdTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesStdTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStdTransform.generated.js");

var _dependenciesSumTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesSumTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSumTransform.generated.js");

var _dependenciesVarianceTransformGenerated = __webpack_require__(/*! ./dependenciesAny/dependenciesVarianceTransform.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVarianceTransform.generated.js");

var _allFactoriesAny = __webpack_require__(/*! ./allFactoriesAny.js */ "./node_modules/mathjs/lib/cjs/entry/allFactoriesAny.js");

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.absDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var absDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAbs: _factoriesAny.createAbs
};
exports.absDependencies = absDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAccessorNode.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAccessorNode.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AccessorNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var AccessorNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  createAccessorNode: _factoriesAny.createAccessorNode
};
exports.AccessorNodeDependencies = AccessorNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcos.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcos.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acosDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acosDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAcos: _factoriesAny.createAcos
};
exports.acosDependencies = acosDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcosh.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcosh.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acoshDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acoshDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAcosh: _factoriesAny.createAcosh
};
exports.acoshDependencies = acoshDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcot.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcot.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acotDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acotDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAcot: _factoriesAny.createAcot
};
exports.acotDependencies = acotDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcoth.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcoth.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acothDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acothDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAcoth: _factoriesAny.createAcoth
};
exports.acothDependencies = acothDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcsc.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcsc.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acscDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acscDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAcsc: _factoriesAny.createAcsc
};
exports.acscDependencies = acscDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcsch.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAcsch.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acschDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acschDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAcsch: _factoriesAny.createAcsch
};
exports.acschDependencies = acschDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var addDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAdd: _factoriesAny.createAdd
};
exports.addDependencies = addDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addScalarDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var addScalarDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAddScalar: _factoriesAny.createAddScalar
};
exports.addScalarDependencies = addScalarDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAnd.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAnd.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.andDependencies = void 0;

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesNotGenerated = __webpack_require__(/*! ./dependenciesNot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNot.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var andDependencies = {
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  notDependencies: _dependenciesNotGenerated.notDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  zerosDependencies: _dependenciesZerosGenerated.zerosDependencies,
  createAnd: _factoriesAny.createAnd
};
exports.andDependencies = andDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApply.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApply.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.applyDependencies = void 0;

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var applyDependencies = {
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createApply: _factoriesAny.createApply
};
exports.applyDependencies = applyDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApplyTransform.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApplyTransform.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.applyTransformDependencies = void 0;

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var applyTransformDependencies = {
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createApplyTransform: _factoriesAny.createApplyTransform
};
exports.applyTransformDependencies = applyTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArg.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArg.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.argDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var argDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createArg: _factoriesAny.createArg
};
exports.argDependencies = argDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArrayNode.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArrayNode.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ArrayNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ArrayNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createArrayNode: _factoriesAny.createArrayNode
};
exports.ArrayNodeDependencies = ArrayNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsec.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsec.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asecDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asecDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAsec: _factoriesAny.createAsec
};
exports.asecDependencies = asecDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsech.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsech.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asechDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asechDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAsech: _factoriesAny.createAsech
};
exports.asechDependencies = asechDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsin.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsin.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asinDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asinDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAsin: _factoriesAny.createAsin
};
exports.asinDependencies = asinDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsinh.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAsinh.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asinhDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asinhDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAsinh: _factoriesAny.createAsinh
};
exports.asinhDependencies = asinhDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAssignmentNode.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAssignmentNode.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AssignmentNodeDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var AssignmentNodeDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  createAssignmentNode: _factoriesAny.createAssignmentNode
};
exports.AssignmentNodeDependencies = AssignmentNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atanDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atanDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAtan: _factoriesAny.createAtan
};
exports.atanDependencies = atanDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan2.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan2.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atan2Dependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atan2Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAtan2: _factoriesAny.createAtan2
};
exports.atan2Dependencies = atan2Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtanh.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtanh.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atanhDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atanhDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createAtanh: _factoriesAny.createAtanh
};
exports.atanhDependencies = atanhDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtomicMass.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtomicMass.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atomicMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atomicMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createAtomicMass: _factoriesAny.createAtomicMass
};
exports.atomicMassDependencies = atomicMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAvogadro.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAvogadro.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.avogadroDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var avogadroDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createAvogadro: _factoriesAny.createAvogadro
};
exports.avogadroDependencies = avogadroDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBellNumbers.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBellNumbers.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bellNumbersDependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesIsNegativeGenerated = __webpack_require__(/*! ./dependenciesIsNegative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js");

var _dependenciesStirlingS2Generated = __webpack_require__(/*! ./dependenciesStirlingS2.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStirlingS2.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bellNumbersDependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegativeGenerated.isNegativeDependencies,
  stirlingS2Dependencies: _dependenciesStirlingS2Generated.stirlingS2Dependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBellNumbers: _factoriesAny.createBellNumbers
};
exports.bellNumbersDependencies = bellNumbersDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BigNumberDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var BigNumberDependencies = {
  createBigNumberClass: _factoriesAny.createBigNumberClass
};
exports.BigNumberDependencies = BigNumberDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bignumberDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bignumberDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBignumber: _factoriesAny.createBignumber
};
exports.bignumberDependencies = bignumberDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBin.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBin.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.binDependencies = void 0;

var _dependenciesFormatGenerated = __webpack_require__(/*! ./dependenciesFormat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var binDependencies = {
  formatDependencies: _dependenciesFormatGenerated.formatDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBin: _factoriesAny.createBin
};
exports.binDependencies = binDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitAnd.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitAnd.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitAndDependencies = void 0;

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitAndDependencies = {
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBitAnd: _factoriesAny.createBitAnd
};
exports.bitAndDependencies = bitAndDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitNot.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitNot.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitNotDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitNotDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBitNot: _factoriesAny.createBitNot
};
exports.bitNotDependencies = bitNotDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitOr.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitOr.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitOrDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitOrDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBitOr: _factoriesAny.createBitOr
};
exports.bitOrDependencies = bitOrDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitXor.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBitXor.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitXorDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitXorDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBitXor: _factoriesAny.createBitXor
};
exports.bitXorDependencies = bitXorDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBlockNode.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBlockNode.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BlockNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesResultSetGenerated = __webpack_require__(/*! ./dependenciesResultSet.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResultSet.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var BlockNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  ResultSetDependencies: _dependenciesResultSetGenerated.ResultSetDependencies,
  createBlockNode: _factoriesAny.createBlockNode
};
exports.BlockNodeDependencies = BlockNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBohrMagneton.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBohrMagneton.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bohrMagnetonDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bohrMagnetonDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createBohrMagneton: _factoriesAny.createBohrMagneton
};
exports.bohrMagnetonDependencies = bohrMagnetonDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBohrRadius.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBohrRadius.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bohrRadiusDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bohrRadiusDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createBohrRadius: _factoriesAny.createBohrRadius
};
exports.bohrRadiusDependencies = bohrRadiusDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBoltzmann.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBoltzmann.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.boltzmannDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var boltzmannDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createBoltzmann: _factoriesAny.createBoltzmann
};
exports.boltzmannDependencies = boltzmannDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBoolean.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBoolean.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.booleanDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var booleanDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createBoolean: _factoriesAny.createBoolean
};
exports.booleanDependencies = booleanDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCatalan.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCatalan.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.catalanDependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesCombinationsGenerated = __webpack_require__(/*! ./dependenciesCombinations.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinations.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesIsNegativeGenerated = __webpack_require__(/*! ./dependenciesIsNegative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var catalanDependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  combinationsDependencies: _dependenciesCombinationsGenerated.combinationsDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegativeGenerated.isNegativeDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCatalan: _factoriesAny.createCatalan
};
exports.catalanDependencies = catalanDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCbrt.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCbrt.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cbrtDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _dependenciesIsNegativeGenerated = __webpack_require__(/*! ./dependenciesIsNegative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cbrtDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  FractionDependencies: _dependenciesFractionClassGenerated.FractionDependencies,
  isNegativeDependencies: _dependenciesIsNegativeGenerated.isNegativeDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createCbrt: _factoriesAny.createCbrt
};
exports.cbrtDependencies = cbrtDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCeil.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCeil.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ceilDependencies = void 0;

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesRoundGenerated = __webpack_require__(/*! ./dependenciesRound.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRound.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ceilDependencies = {
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  roundDependencies: _dependenciesRoundGenerated.roundDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCeil: _factoriesAny.createCeil
};
exports.ceilDependencies = ceilDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChain.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChain.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.chainDependencies = void 0;

var _dependenciesChainClassGenerated = __webpack_require__(/*! ./dependenciesChainClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChainClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var chainDependencies = {
  ChainDependencies: _dependenciesChainClassGenerated.ChainDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createChain: _factoriesAny.createChain
};
exports.chainDependencies = chainDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChainClass.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesChainClass.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ChainDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ChainDependencies = {
  createChainClass: _factoriesAny.createChainClass
};
exports.ChainDependencies = ChainDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.classicalElectronRadiusDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var classicalElectronRadiusDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createClassicalElectronRadius: _factoriesAny.createClassicalElectronRadius
};
exports.classicalElectronRadiusDependencies = classicalElectronRadiusDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesClone.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesClone.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cloneDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cloneDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createClone: _factoriesAny.createClone
};
exports.cloneDependencies = cloneDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumn.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumn.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.columnDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesRangeGenerated = __webpack_require__(/*! ./dependenciesRange.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var columnDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  rangeDependencies: _dependenciesRangeGenerated.rangeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createColumn: _factoriesAny.createColumn
};
exports.columnDependencies = columnDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumnTransform.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumnTransform.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.columnTransformDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesRangeGenerated = __webpack_require__(/*! ./dependenciesRange.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var columnTransformDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  rangeDependencies: _dependenciesRangeGenerated.rangeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createColumnTransform: _factoriesAny.createColumnTransform
};
exports.columnTransformDependencies = columnTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinations.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinations.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combinationsDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var combinationsDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCombinations: _factoriesAny.createCombinations
};
exports.combinationsDependencies = combinationsDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinationsWithRep.generated.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinationsWithRep.generated.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combinationsWithRepDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var combinationsWithRepDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCombinationsWithRep: _factoriesAny.createCombinationsWithRep
};
exports.combinationsWithRepDependencies = combinationsWithRepDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compareDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compareDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  FractionDependencies: _dependenciesFractionClassGenerated.FractionDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCompare: _factoriesAny.createCompare
};
exports.compareDependencies = compareDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compareNaturalDependencies = void 0;

var _dependenciesCompareGenerated = __webpack_require__(/*! ./dependenciesCompare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compareNaturalDependencies = {
  compareDependencies: _dependenciesCompareGenerated.compareDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCompareNatural: _factoriesAny.createCompareNatural
};
exports.compareNaturalDependencies = compareNaturalDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareText.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareText.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compareTextDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compareTextDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCompareText: _factoriesAny.createCompareText
};
exports.compareTextDependencies = compareTextDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompile.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompile.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compileDependencies = void 0;

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compileDependencies = {
  parseDependencies: _dependenciesParseGenerated.parseDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCompile: _factoriesAny.createCompile
};
exports.compileDependencies = compileDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplex.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplex.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.complexDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var complexDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createComplex: _factoriesAny.createComplex
};
exports.complexDependencies = complexDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ComplexDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ComplexDependencies = {
  createComplexClass: _factoriesAny.createComplexClass
};
exports.ComplexDependencies = ComplexDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComposition.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComposition.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compositionDependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesCombinationsGenerated = __webpack_require__(/*! ./dependenciesCombinations.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinations.generated.js");

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesIsNegativeGenerated = __webpack_require__(/*! ./dependenciesIsNegative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js");

var _dependenciesIsPositiveGenerated = __webpack_require__(/*! ./dependenciesIsPositive.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPositive.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compositionDependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  combinationsDependencies: _dependenciesCombinationsGenerated.combinationsDependencies,
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegativeGenerated.isNegativeDependencies,
  isPositiveDependencies: _dependenciesIsPositiveGenerated.isPositiveDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createComposition: _factoriesAny.createComposition
};
exports.compositionDependencies = compositionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcat.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcat.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concatDependencies = void 0;

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var concatDependencies = {
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createConcat: _factoriesAny.createConcat
};
exports.concatDependencies = concatDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcatTransform.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcatTransform.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concatTransformDependencies = void 0;

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var concatTransformDependencies = {
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createConcatTransform: _factoriesAny.createConcatTransform
};
exports.concatTransformDependencies = concatTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConditionalNode.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConditionalNode.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ConditionalNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ConditionalNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createConditionalNode: _factoriesAny.createConditionalNode
};
exports.ConditionalNodeDependencies = ConditionalNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.conductanceQuantumDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var conductanceQuantumDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createConductanceQuantum: _factoriesAny.createConductanceQuantum
};
exports.conductanceQuantumDependencies = conductanceQuantumDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.conjDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var conjDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createConj: _factoriesAny.createConj
};
exports.conjDependencies = conjDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ConstantNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ConstantNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createConstantNode: _factoriesAny.createConstantNode
};
exports.ConstantNodeDependencies = ConstantNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCos.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCos.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cosDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cosDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCos: _factoriesAny.createCos
};
exports.cosDependencies = cosDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCosh.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCosh.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.coshDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var coshDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCosh: _factoriesAny.createCosh
};
exports.coshDependencies = coshDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCot.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCot.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cotDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cotDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCot: _factoriesAny.createCot
};
exports.cotDependencies = cotDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCoth.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCoth.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cothDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cothDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCoth: _factoriesAny.createCoth
};
exports.cothDependencies = cothDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCoulomb.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCoulomb.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.coulombDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var coulombDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createCoulomb: _factoriesAny.createCoulomb
};
exports.coulombDependencies = coulombDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCount.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCount.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.countDependencies = void 0;

var _dependenciesProdGenerated = __webpack_require__(/*! ./dependenciesProd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProd.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var countDependencies = {
  prodDependencies: _dependenciesProdGenerated.prodDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCount: _factoriesAny.createCount
};
exports.countDependencies = countDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCreateUnit.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCreateUnit.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnitDependencies = void 0;

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var createUnitDependencies = {
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCreateUnit: _factoriesAny.createCreateUnit
};
exports.createUnitDependencies = createUnitDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCross.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCross.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.crossDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var crossDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCross: _factoriesAny.createCross
};
exports.crossDependencies = crossDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCsc.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCsc.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cscDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cscDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCsc: _factoriesAny.createCsc
};
exports.cscDependencies = cscDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCsch.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCsch.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cschDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cschDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCsch: _factoriesAny.createCsch
};
exports.cschDependencies = cschDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCtranspose.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCtranspose.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ctransposeDependencies = void 0;

var _dependenciesConjGenerated = __webpack_require__(/*! ./dependenciesConj.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js");

var _dependenciesTransposeGenerated = __webpack_require__(/*! ./dependenciesTranspose.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTranspose.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ctransposeDependencies = {
  conjDependencies: _dependenciesConjGenerated.conjDependencies,
  transposeDependencies: _dependenciesTransposeGenerated.transposeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCtranspose: _factoriesAny.createCtranspose
};
exports.ctransposeDependencies = ctransposeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCube.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCube.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cubeDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cubeDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createCube: _factoriesAny.createCube
};
exports.cubeDependencies = cubeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDeepEqual.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDeepEqual.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.deepEqualDependencies = void 0;

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var deepEqualDependencies = {
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDeepEqual: _factoriesAny.createDeepEqual
};
exports.deepEqualDependencies = deepEqualDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DenseMatrixDependencies = void 0;

var _dependenciesMatrixClassGenerated = __webpack_require__(/*! ./dependenciesMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var DenseMatrixDependencies = {
  MatrixDependencies: _dependenciesMatrixClassGenerated.MatrixDependencies,
  createDenseMatrixClass: _factoriesAny.createDenseMatrixClass
};
exports.DenseMatrixDependencies = DenseMatrixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDerivative.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDerivative.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.derivativeDependencies = void 0;

var _dependenciesConstantNodeGenerated = __webpack_require__(/*! ./dependenciesConstantNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js");

var _dependenciesFunctionNodeGenerated = __webpack_require__(/*! ./dependenciesFunctionNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js");

var _dependenciesOperatorNodeGenerated = __webpack_require__(/*! ./dependenciesOperatorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js");

var _dependenciesParenthesisNodeGenerated = __webpack_require__(/*! ./dependenciesParenthesisNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js");

var _dependenciesSymbolNodeGenerated = __webpack_require__(/*! ./dependenciesSymbolNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _dependenciesSimplifyGenerated = __webpack_require__(/*! ./dependenciesSimplify.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSimplify.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var derivativeDependencies = {
  ConstantNodeDependencies: _dependenciesConstantNodeGenerated.ConstantNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNodeGenerated.FunctionNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNodeGenerated.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNodeGenerated.ParenthesisNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNodeGenerated.SymbolNodeDependencies,
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  isZeroDependencies: _dependenciesIsZeroGenerated.isZeroDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  parseDependencies: _dependenciesParseGenerated.parseDependencies,
  simplifyDependencies: _dependenciesSimplifyGenerated.simplifyDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDerivative: _factoriesAny.createDerivative
};
exports.derivativeDependencies = derivativeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDet.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDet.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.detDependencies = void 0;

var _dependenciesLupGenerated = __webpack_require__(/*! ./dependenciesLup.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLup.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var detDependencies = {
  lupDependencies: _dependenciesLupGenerated.lupDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createDet: _factoriesAny.createDet
};
exports.detDependencies = detDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDeuteronMass.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDeuteronMass.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.deuteronMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var deuteronMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createDeuteronMass: _factoriesAny.createDeuteronMass
};
exports.deuteronMassDependencies = deuteronMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiag.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiag.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.diagDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var diagDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDiag: _factoriesAny.createDiag
};
exports.diagDependencies = diagDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiff.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiff.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.diffDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var diffDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  numberDependencies: _dependenciesNumberGenerated.numberDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDiff: _factoriesAny.createDiff
};
exports.diffDependencies = diffDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiffTransform.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiffTransform.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.diffTransformDependencies = void 0;

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var diffTransformDependencies = {
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  numberDependencies: _dependenciesNumberGenerated.numberDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDiffTransform: _factoriesAny.createDiffTransform
};
exports.diffTransformDependencies = diffTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDistance.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDistance.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.distanceDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var distanceDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createDistance: _factoriesAny.createDistance
};
exports.distanceDependencies = distanceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.divideDependencies = void 0;

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesInvGenerated = __webpack_require__(/*! ./dependenciesInv.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var divideDependencies = {
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  invDependencies: _dependenciesInvGenerated.invDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDivide: _factoriesAny.createDivide
};
exports.divideDependencies = divideDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.divideScalarDependencies = void 0;

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var divideScalarDependencies = {
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDivideScalar: _factoriesAny.createDivideScalar
};
exports.divideScalarDependencies = divideScalarDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDot.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDot.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotDependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesConjGenerated = __webpack_require__(/*! ./dependenciesConj.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotDependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  conjDependencies: _dependenciesConjGenerated.conjDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDot: _factoriesAny.createDot
};
exports.dotDependencies = dotDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotDivide.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotDivide.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotDivideDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotDivideDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDotDivide: _factoriesAny.createDotDivide
};
exports.dotDivideDependencies = dotDivideDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotMultiply.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotMultiply.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotMultiplyDependencies = void 0;

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotMultiplyDependencies = {
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDotMultiply: _factoriesAny.createDotMultiply
};
exports.dotMultiplyDependencies = dotMultiplyDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotPow.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotPow.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotPowDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotPowDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createDotPow: _factoriesAny.createDotPow
};
exports.dotPowDependencies = dotPowDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesE.generated.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesE.generated.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.eDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var eDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createE: _factoriesAny.createE
};
exports.eDependencies = eDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEfimovFactor.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEfimovFactor.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.efimovFactorDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var efimovFactorDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createEfimovFactor: _factoriesAny.createEfimovFactor
};
exports.efimovFactorDependencies = efimovFactorDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEigs.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEigs.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.eigsDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesAtanGenerated = __webpack_require__(/*! ./dependenciesAtan.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAtan.generated.js");

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesColumnGenerated = __webpack_require__(/*! ./dependenciesColumn.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesColumn.generated.js");

var _dependenciesComplexGenerated = __webpack_require__(/*! ./dependenciesComplex.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplex.generated.js");

var _dependenciesCosGenerated = __webpack_require__(/*! ./dependenciesCos.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCos.generated.js");

var _dependenciesDiagGenerated = __webpack_require__(/*! ./dependenciesDiag.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDiag.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesDotGenerated = __webpack_require__(/*! ./dependenciesDot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDot.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesFlattenGenerated = __webpack_require__(/*! ./dependenciesFlatten.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js");

var _dependenciesImGenerated = __webpack_require__(/*! ./dependenciesIm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIm.generated.js");

var _dependenciesInvGenerated = __webpack_require__(/*! ./dependenciesInv.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMatrixFromColumnsGenerated = __webpack_require__(/*! ./dependenciesMatrixFromColumns.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromColumns.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _dependenciesQrGenerated = __webpack_require__(/*! ./dependenciesQr.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQr.generated.js");

var _dependenciesReGenerated = __webpack_require__(/*! ./dependenciesRe.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRe.generated.js");

var _dependenciesSinGenerated = __webpack_require__(/*! ./dependenciesSin.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSin.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUsolveGenerated = __webpack_require__(/*! ./dependenciesUsolve.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolve.generated.js");

var _dependenciesUsolveAllGenerated = __webpack_require__(/*! ./dependenciesUsolveAll.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolveAll.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var eigsDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  atanDependencies: _dependenciesAtanGenerated.atanDependencies,
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  columnDependencies: _dependenciesColumnGenerated.columnDependencies,
  complexDependencies: _dependenciesComplexGenerated.complexDependencies,
  cosDependencies: _dependenciesCosGenerated.cosDependencies,
  diagDependencies: _dependenciesDiagGenerated.diagDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  dotDependencies: _dependenciesDotGenerated.dotDependencies,
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  flattenDependencies: _dependenciesFlattenGenerated.flattenDependencies,
  imDependencies: _dependenciesImGenerated.imDependencies,
  invDependencies: _dependenciesInvGenerated.invDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  matrixFromColumnsDependencies: _dependenciesMatrixFromColumnsGenerated.matrixFromColumnsDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  numberDependencies: _dependenciesNumberGenerated.numberDependencies,
  qrDependencies: _dependenciesQrGenerated.qrDependencies,
  reDependencies: _dependenciesReGenerated.reDependencies,
  sinDependencies: _dependenciesSinGenerated.sinDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  usolveDependencies: _dependenciesUsolveGenerated.usolveDependencies,
  usolveAllDependencies: _dependenciesUsolveAllGenerated.usolveAllDependencies,
  createEigs: _factoriesAny.createEigs
};
exports.eigsDependencies = eigsDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElectricConstant.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElectricConstant.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.electricConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var electricConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createElectricConstant: _factoriesAny.createElectricConstant
};
exports.electricConstantDependencies = electricConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElectronMass.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElectronMass.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.electronMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var electronMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createElectronMass: _factoriesAny.createElectronMass
};
exports.electronMassDependencies = electronMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElementaryCharge.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesElementaryCharge.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.elementaryChargeDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var elementaryChargeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createElementaryCharge: _factoriesAny.createElementaryCharge
};
exports.elementaryChargeDependencies = elementaryChargeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.equalDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var equalDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createEqual: _factoriesAny.createEqual
};
exports.equalDependencies = equalDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.equalScalarDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var equalScalarDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createEqualScalar: _factoriesAny.createEqualScalar
};
exports.equalScalarDependencies = equalScalarDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualText.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualText.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.equalTextDependencies = void 0;

var _dependenciesCompareTextGenerated = __webpack_require__(/*! ./dependenciesCompareText.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareText.generated.js");

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var equalTextDependencies = {
  compareTextDependencies: _dependenciesCompareTextGenerated.compareTextDependencies,
  isZeroDependencies: _dependenciesIsZeroGenerated.isZeroDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createEqualText: _factoriesAny.createEqualText
};
exports.equalTextDependencies = equalTextDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesErf.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesErf.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.erfDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var erfDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createErf: _factoriesAny.createErf
};
exports.erfDependencies = erfDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEvaluate.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEvaluate.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.evaluateDependencies = void 0;

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var evaluateDependencies = {
  parseDependencies: _dependenciesParseGenerated.parseDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createEvaluate: _factoriesAny.createEvaluate
};
exports.evaluateDependencies = evaluateDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExp.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExp.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.expDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var expDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createExp: _factoriesAny.createExp
};
exports.expDependencies = expDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExpm.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExpm.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.expmDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesIdentityGenerated = __webpack_require__(/*! ./dependenciesIdentity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js");

var _dependenciesInvGenerated = __webpack_require__(/*! ./dependenciesInv.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var expmDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  identityDependencies: _dependenciesIdentityGenerated.identityDependencies,
  invDependencies: _dependenciesInvGenerated.invDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createExpm: _factoriesAny.createExpm
};
exports.expmDependencies = expmDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExpm1.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesExpm1.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.expm1Dependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var expm1Dependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createExpm1: _factoriesAny.createExpm1
};
exports.expm1Dependencies = expm1Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFactorial.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFactorial.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.factorialDependencies = void 0;

var _dependenciesGammaGenerated = __webpack_require__(/*! ./dependenciesGamma.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGamma.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var factorialDependencies = {
  gammaDependencies: _dependenciesGammaGenerated.gammaDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFactorial: _factoriesAny.createFactorial
};
exports.factorialDependencies = factorialDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFalse.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFalse.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.falseDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var falseDependencies = {
  createFalse: _factoriesAny.createFalse
};
exports.falseDependencies = falseDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFaraday.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFaraday.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.faradayDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var faradayDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createFaraday: _factoriesAny.createFaraday
};
exports.faradayDependencies = faradayDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFermiCoupling.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFermiCoupling.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fermiCouplingDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fermiCouplingDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createFermiCoupling: _factoriesAny.createFermiCoupling
};
exports.fermiCouplingDependencies = fermiCouplingDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FibonacciHeapDependencies = void 0;

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FibonacciHeapDependencies = {
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  createFibonacciHeapClass: _factoriesAny.createFibonacciHeapClass
};
exports.FibonacciHeapDependencies = FibonacciHeapDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFilter.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFilter.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.filterDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var filterDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFilter: _factoriesAny.createFilter
};
exports.filterDependencies = filterDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFilterTransform.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFilterTransform.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.filterTransformDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var filterTransformDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFilterTransform: _factoriesAny.createFilterTransform
};
exports.filterTransformDependencies = filterTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFineStructure.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFineStructure.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fineStructureDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fineStructureDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createFineStructure: _factoriesAny.createFineStructure
};
exports.fineStructureDependencies = fineStructureDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFirstRadiation.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFirstRadiation.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.firstRadiationDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var firstRadiationDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createFirstRadiation: _factoriesAny.createFirstRadiation
};
exports.firstRadiationDependencies = firstRadiationDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFix.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFix.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fixDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesCeilGenerated = __webpack_require__(/*! ./dependenciesCeil.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCeil.generated.js");

var _dependenciesFloorGenerated = __webpack_require__(/*! ./dependenciesFloor.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFloor.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fixDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  ceilDependencies: _dependenciesCeilGenerated.ceilDependencies,
  floorDependencies: _dependenciesFloorGenerated.floorDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFix: _factoriesAny.createFix
};
exports.fixDependencies = fixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.flattenDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var flattenDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFlatten: _factoriesAny.createFlatten
};
exports.flattenDependencies = flattenDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFloor.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFloor.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.floorDependencies = void 0;

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesRoundGenerated = __webpack_require__(/*! ./dependenciesRound.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRound.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var floorDependencies = {
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  roundDependencies: _dependenciesRoundGenerated.roundDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFloor: _factoriesAny.createFloor
};
exports.floorDependencies = floorDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesForEach.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesForEach.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.forEachDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var forEachDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createForEach: _factoriesAny.createForEach
};
exports.forEachDependencies = forEachDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesForEachTransform.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesForEachTransform.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.forEachTransformDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var forEachTransformDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createForEachTransform: _factoriesAny.createForEachTransform
};
exports.forEachTransformDependencies = forEachTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.formatDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var formatDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFormat: _factoriesAny.createFormat
};
exports.formatDependencies = formatDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fractionDependencies = void 0;

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fractionDependencies = {
  FractionDependencies: _dependenciesFractionClassGenerated.FractionDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFraction: _factoriesAny.createFraction
};
exports.fractionDependencies = fractionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FractionDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FractionDependencies = {
  createFractionClass: _factoriesAny.createFractionClass
};
exports.FractionDependencies = FractionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FunctionAssignmentNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FunctionAssignmentNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createFunctionAssignmentNode: _factoriesAny.createFunctionAssignmentNode
};
exports.FunctionAssignmentNodeDependencies = FunctionAssignmentNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FunctionNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesSymbolNodeGenerated = __webpack_require__(/*! ./dependenciesSymbolNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FunctionNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNodeGenerated.SymbolNodeDependencies,
  createFunctionNode: _factoriesAny.createFunctionNode
};
exports.FunctionNodeDependencies = FunctionNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGamma.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGamma.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gammaDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gammaDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createGamma: _factoriesAny.createGamma
};
exports.gammaDependencies = gammaDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGasConstant.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGasConstant.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gasConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gasConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createGasConstant: _factoriesAny.createGasConstant
};
exports.gasConstantDependencies = gasConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGcd.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGcd.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gcdDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gcdDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createGcd: _factoriesAny.createGcd
};
exports.gcdDependencies = gcdDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getMatrixDataTypeDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var getMatrixDataTypeDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createGetMatrixDataType: _factoriesAny.createGetMatrixDataType
};
exports.getMatrixDataTypeDependencies = getMatrixDataTypeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGravitationConstant.generated.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGravitationConstant.generated.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gravitationConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gravitationConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createGravitationConstant: _factoriesAny.createGravitationConstant
};
exports.gravitationConstantDependencies = gravitationConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGravity.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesGravity.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gravityDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gravityDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createGravity: _factoriesAny.createGravity
};
exports.gravityDependencies = gravityDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hartreeEnergyDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hartreeEnergyDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createHartreeEnergy: _factoriesAny.createHartreeEnergy
};
exports.hartreeEnergyDependencies = hartreeEnergyDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHasNumericValue.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHasNumericValue.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hasNumericValueDependencies = void 0;

var _dependenciesIsNumericGenerated = __webpack_require__(/*! ./dependenciesIsNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hasNumericValueDependencies = {
  isNumericDependencies: _dependenciesIsNumericGenerated.isNumericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createHasNumericValue: _factoriesAny.createHasNumericValue
};
exports.hasNumericValueDependencies = hasNumericValueDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelp.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelp.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.helpDependencies = void 0;

var _dependenciesHelpClassGenerated = __webpack_require__(/*! ./dependenciesHelpClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelpClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var helpDependencies = {
  HelpDependencies: _dependenciesHelpClassGenerated.HelpDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createHelp: _factoriesAny.createHelp
};
exports.helpDependencies = helpDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelpClass.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHelpClass.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.HelpDependencies = void 0;

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var HelpDependencies = {
  parseDependencies: _dependenciesParseGenerated.parseDependencies,
  createHelpClass: _factoriesAny.createHelpClass
};
exports.HelpDependencies = HelpDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHex.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHex.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hexDependencies = void 0;

var _dependenciesFormatGenerated = __webpack_require__(/*! ./dependenciesFormat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hexDependencies = {
  formatDependencies: _dependenciesFormatGenerated.formatDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createHex: _factoriesAny.createHex
};
exports.hexDependencies = hexDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHypot.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesHypot.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hypotDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesIsPositiveGenerated = __webpack_require__(/*! ./dependenciesIsPositive.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPositive.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hypotDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  isPositiveDependencies: _dependenciesIsPositiveGenerated.isPositiveDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createHypot: _factoriesAny.createHypot
};
exports.hypotDependencies = hypotDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesI.generated.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesI.generated.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.iDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var iDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  createI: _factoriesAny.createI
};
exports.iDependencies = iDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.identityDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var identityDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIdentity: _factoriesAny.createIdentity
};
exports.identityDependencies = identityDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIm.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIm.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.imDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var imDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIm: _factoriesAny.createIm
};
exports.imDependencies = imDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ImmutableDenseMatrixDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ImmutableDenseMatrixDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  createImmutableDenseMatrixClass: _factoriesAny.createImmutableDenseMatrixClass
};
exports.ImmutableDenseMatrixDependencies = ImmutableDenseMatrixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndex.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndex.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.indexDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var indexDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIndex: _factoriesAny.createIndex
};
exports.indexDependencies = indexDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.IndexDependencies = void 0;

var _dependenciesImmutableDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesImmutableDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var IndexDependencies = {
  ImmutableDenseMatrixDependencies: _dependenciesImmutableDenseMatrixClassGenerated.ImmutableDenseMatrixDependencies,
  createIndexClass: _factoriesAny.createIndexClass
};
exports.IndexDependencies = IndexDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexNode.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexNode.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.IndexNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _dependenciesRangeClassGenerated = __webpack_require__(/*! ./dependenciesRangeClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeClass.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var IndexNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  RangeDependencies: _dependenciesRangeClassGenerated.RangeDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  createIndexNode: _factoriesAny.createIndexNode
};
exports.IndexNodeDependencies = IndexNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexTransform.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexTransform.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.indexTransformDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var indexTransformDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  createIndexTransform: _factoriesAny.createIndexTransform
};
exports.indexTransformDependencies = indexTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInfinity.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInfinity.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InfinityDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var InfinityDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createInfinity: _factoriesAny.createInfinity
};
exports.InfinityDependencies = InfinityDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIntersect.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIntersect.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.intersectDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesFlattenGenerated = __webpack_require__(/*! ./dependenciesFlatten.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var intersectDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  flattenDependencies: _dependenciesFlattenGenerated.flattenDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIntersect: _factoriesAny.createIntersect
};
exports.intersectDependencies = intersectDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.invDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDetGenerated = __webpack_require__(/*! ./dependenciesDet.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDet.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesIdentityGenerated = __webpack_require__(/*! ./dependenciesIdentity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var invDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  detDependencies: _dependenciesDetGenerated.detDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  identityDependencies: _dependenciesIdentityGenerated.identityDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createInv: _factoriesAny.createInv
};
exports.invDependencies = invDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.inverseConductanceQuantumDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var inverseConductanceQuantumDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createInverseConductanceQuantum: _factoriesAny.createInverseConductanceQuantum
};
exports.inverseConductanceQuantumDependencies = inverseConductanceQuantumDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isIntegerDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isIntegerDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsInteger: _factoriesAny.createIsInteger
};
exports.isIntegerDependencies = isIntegerDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNaNDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isNaNDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsNaN: _factoriesAny.createIsNaN
};
exports.isNaNDependencies = isNaNDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNegativeDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isNegativeDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsNegative: _factoriesAny.createIsNegative
};
exports.isNegativeDependencies = isNegativeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNumericDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isNumericDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsNumeric: _factoriesAny.createIsNumeric
};
exports.isNumericDependencies = isNumericDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPositive.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPositive.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isPositiveDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isPositiveDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsPositive: _factoriesAny.createIsPositive
};
exports.isPositiveDependencies = isPositiveDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPrime.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPrime.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isPrimeDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isPrimeDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsPrime: _factoriesAny.createIsPrime
};
exports.isPrimeDependencies = isPrimeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isZeroDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isZeroDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createIsZero: _factoriesAny.createIsZero
};
exports.isZeroDependencies = isZeroDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKldivergence.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKldivergence.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.kldivergenceDependencies = void 0;

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesDotDivideGenerated = __webpack_require__(/*! ./dependenciesDotDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDotDivide.generated.js");

var _dependenciesIsNumericGenerated = __webpack_require__(/*! ./dependenciesIsNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js");

var _dependenciesLogGenerated = __webpack_require__(/*! ./dependenciesLog.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSumGenerated = __webpack_require__(/*! ./dependenciesSum.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSum.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var kldivergenceDependencies = {
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  dotDivideDependencies: _dependenciesDotDivideGenerated.dotDivideDependencies,
  isNumericDependencies: _dependenciesIsNumericGenerated.isNumericDependencies,
  logDependencies: _dependenciesLogGenerated.logDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  sumDependencies: _dependenciesSumGenerated.sumDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createKldivergence: _factoriesAny.createKldivergence
};
exports.kldivergenceDependencies = kldivergenceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKlitzing.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKlitzing.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.klitzingDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var klitzingDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createKlitzing: _factoriesAny.createKlitzing
};
exports.klitzingDependencies = klitzingDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKron.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesKron.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.kronDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var kronDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createKron: _factoriesAny.createKron
};
exports.kronDependencies = kronDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLN10.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLN10.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LN10Dependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LN10Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createLN10: _factoriesAny.createLN10
};
exports.LN10Dependencies = LN10Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLN2.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLN2.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LN2Dependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LN2Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createLN2: _factoriesAny.createLN2
};
exports.LN2Dependencies = LN2Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLOG10E.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLOG10E.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LOG10EDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LOG10EDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createLOG10E: _factoriesAny.createLOG10E
};
exports.LOG10EDependencies = LOG10EDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLOG2E.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLOG2E.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LOG2EDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LOG2EDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createLOG2E: _factoriesAny.createLOG2E
};
exports.LOG2EDependencies = LOG2EDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.largerDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var largerDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLarger: _factoriesAny.createLarger
};
exports.largerDependencies = largerDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLargerEq.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLargerEq.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.largerEqDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var largerEqDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLargerEq: _factoriesAny.createLargerEq
};
exports.largerEqDependencies = largerEqDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLcm.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLcm.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lcmDependencies = void 0;

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lcmDependencies = {
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLcm: _factoriesAny.createLcm
};
exports.lcmDependencies = lcmDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLeftShift.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLeftShift.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.leftShiftDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var leftShiftDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  zerosDependencies: _dependenciesZerosGenerated.zerosDependencies,
  createLeftShift: _factoriesAny.createLeftShift
};
exports.leftShiftDependencies = leftShiftDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.logDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var logDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLog: _factoriesAny.createLog
};
exports.logDependencies = logDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog10.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog10.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.log10Dependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var log10Dependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLog10: _factoriesAny.createLog10
};
exports.log10Dependencies = log10Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog1p.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog1p.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.log1pDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesLogGenerated = __webpack_require__(/*! ./dependenciesLog.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var log1pDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  logDependencies: _dependenciesLogGenerated.logDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLog1p: _factoriesAny.createLog1p
};
exports.log1pDependencies = log1pDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog2.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLog2.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.log2Dependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var log2Dependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLog2: _factoriesAny.createLog2
};
exports.log2Dependencies = log2Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLoschmidt.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLoschmidt.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.loschmidtDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var loschmidtDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createLoschmidt: _factoriesAny.createLoschmidt
};
exports.loschmidtDependencies = loschmidtDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolve.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolve.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lsolveDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lsolveDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLsolve: _factoriesAny.createLsolve
};
exports.lsolveDependencies = lsolveDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolveAll.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolveAll.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lsolveAllDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lsolveAllDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createLsolveAll: _factoriesAny.createLsolveAll
};
exports.lsolveAllDependencies = lsolveAllDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLup.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLup.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lupDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesSpaClassGenerated = __webpack_require__(/*! ./dependenciesSpaClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpaClass.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lupDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  SpaDependencies: _dependenciesSpaClassGenerated.SpaDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createLup: _factoriesAny.createLup
};
exports.lupDependencies = lupDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLusolve.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLusolve.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lusolveDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesLsolveGenerated = __webpack_require__(/*! ./dependenciesLsolve.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLsolve.generated.js");

var _dependenciesLupGenerated = __webpack_require__(/*! ./dependenciesLup.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLup.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesSluGenerated = __webpack_require__(/*! ./dependenciesSlu.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSlu.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUsolveGenerated = __webpack_require__(/*! ./dependenciesUsolve.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolve.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lusolveDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  lsolveDependencies: _dependenciesLsolveGenerated.lsolveDependencies,
  lupDependencies: _dependenciesLupGenerated.lupDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  sluDependencies: _dependenciesSluGenerated.sluDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  usolveDependencies: _dependenciesUsolveGenerated.usolveDependencies,
  createLusolve: _factoriesAny.createLusolve
};
exports.lusolveDependencies = lusolveDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMad.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMad.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.madDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesMapGenerated = __webpack_require__(/*! ./dependenciesMap.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMap.generated.js");

var _dependenciesMedianGenerated = __webpack_require__(/*! ./dependenciesMedian.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMedian.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var madDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  mapDependencies: _dependenciesMapGenerated.mapDependencies,
  medianDependencies: _dependenciesMedianGenerated.medianDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMad: _factoriesAny.createMad
};
exports.madDependencies = madDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMagneticConstant.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMagneticConstant.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.magneticConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var magneticConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createMagneticConstant: _factoriesAny.createMagneticConstant
};
exports.magneticConstantDependencies = magneticConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.magneticFluxQuantumDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var magneticFluxQuantumDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createMagneticFluxQuantum: _factoriesAny.createMagneticFluxQuantum
};
exports.magneticFluxQuantumDependencies = magneticFluxQuantumDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMap.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMap.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mapDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var mapDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMap: _factoriesAny.createMap
};
exports.mapDependencies = mapDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMapTransform.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMapTransform.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mapTransformDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var mapTransformDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMapTransform: _factoriesAny.createMapTransform
};
exports.mapTransformDependencies = mapTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixClassGenerated = __webpack_require__(/*! ./dependenciesMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixClass.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var matrixDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  MatrixDependencies: _dependenciesMatrixClassGenerated.MatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMatrix: _factoriesAny.createMatrix
};
exports.matrixDependencies = matrixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixClass.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixClass.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MatrixDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var MatrixDependencies = {
  createMatrixClass: _factoriesAny.createMatrixClass
};
exports.MatrixDependencies = MatrixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromColumns.generated.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromColumns.generated.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixFromColumnsDependencies = void 0;

var _dependenciesFlattenGenerated = __webpack_require__(/*! ./dependenciesFlatten.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var matrixFromColumnsDependencies = {
  flattenDependencies: _dependenciesFlattenGenerated.flattenDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMatrixFromColumns: _factoriesAny.createMatrixFromColumns
};
exports.matrixFromColumnsDependencies = matrixFromColumnsDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromFunction.generated.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromFunction.generated.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixFromFunctionDependencies = void 0;

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var matrixFromFunctionDependencies = {
  isZeroDependencies: _dependenciesIsZeroGenerated.isZeroDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMatrixFromFunction: _factoriesAny.createMatrixFromFunction
};
exports.matrixFromFunctionDependencies = matrixFromFunctionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromRows.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixFromRows.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixFromRowsDependencies = void 0;

var _dependenciesFlattenGenerated = __webpack_require__(/*! ./dependenciesFlatten.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFlatten.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var matrixFromRowsDependencies = {
  flattenDependencies: _dependenciesFlattenGenerated.flattenDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMatrixFromRows: _factoriesAny.createMatrixFromRows
};
exports.matrixFromRowsDependencies = matrixFromRowsDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMax.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMax.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.maxDependencies = void 0;

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var maxDependencies = {
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMax: _factoriesAny.createMax
};
exports.maxDependencies = maxDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMaxTransform.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMaxTransform.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.maxTransformDependencies = void 0;

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var maxTransformDependencies = {
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMaxTransform: _factoriesAny.createMaxTransform
};
exports.maxTransformDependencies = maxTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMean.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMean.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.meanDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var meanDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMean: _factoriesAny.createMean
};
exports.meanDependencies = meanDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMeanTransform.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMeanTransform.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.meanTransformDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var meanTransformDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMeanTransform: _factoriesAny.createMeanTransform
};
exports.meanTransformDependencies = meanTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMedian.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMedian.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.medianDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesCompareGenerated = __webpack_require__(/*! ./dependenciesCompare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesPartitionSelectGenerated = __webpack_require__(/*! ./dependenciesPartitionSelect.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPartitionSelect.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var medianDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  compareDependencies: _dependenciesCompareGenerated.compareDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  partitionSelectDependencies: _dependenciesPartitionSelectGenerated.partitionSelectDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMedian: _factoriesAny.createMedian
};
exports.medianDependencies = medianDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMin.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMin.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.minDependencies = void 0;

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var minDependencies = {
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMin: _factoriesAny.createMin
};
exports.minDependencies = minDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMinTransform.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMinTransform.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.minTransformDependencies = void 0;

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var minTransformDependencies = {
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMinTransform: _factoriesAny.createMinTransform
};
exports.minTransformDependencies = minTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMod.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMod.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.modDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var modDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMod: _factoriesAny.createMod
};
exports.modDependencies = modDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMode.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMode.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.modeDependencies = void 0;

var _dependenciesIsNaNGenerated = __webpack_require__(/*! ./dependenciesIsNaN.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js");

var _dependenciesIsNumericGenerated = __webpack_require__(/*! ./dependenciesIsNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var modeDependencies = {
  isNaNDependencies: _dependenciesIsNaNGenerated.isNaNDependencies,
  isNumericDependencies: _dependenciesIsNumericGenerated.isNumericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMode: _factoriesAny.createMode
};
exports.modeDependencies = modeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarMass.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarMass.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.molarMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createMolarMass: _factoriesAny.createMolarMass
};
exports.molarMassDependencies = molarMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarMassC12.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarMassC12.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.molarMassC12Dependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarMassC12Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createMolarMassC12: _factoriesAny.createMolarMassC12
};
exports.molarMassC12Dependencies = molarMassC12Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.molarPlanckConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarPlanckConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createMolarPlanckConstant: _factoriesAny.createMolarPlanckConstant
};
exports.molarPlanckConstantDependencies = molarPlanckConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarVolume.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMolarVolume.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.molarVolumeDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarVolumeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createMolarVolume: _factoriesAny.createMolarVolume
};
exports.molarVolumeDependencies = molarVolumeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultinomial.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultinomial.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.multinomialDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesFactorialGenerated = __webpack_require__(/*! ./dependenciesFactorial.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFactorial.generated.js");

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesIsPositiveGenerated = __webpack_require__(/*! ./dependenciesIsPositive.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsPositive.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var multinomialDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  factorialDependencies: _dependenciesFactorialGenerated.factorialDependencies,
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  isPositiveDependencies: _dependenciesIsPositiveGenerated.isPositiveDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMultinomial: _factoriesAny.createMultinomial
};
exports.multinomialDependencies = multinomialDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.multiplyDependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDotGenerated = __webpack_require__(/*! ./dependenciesDot.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDot.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var multiplyDependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  dotDependencies: _dependenciesDotGenerated.dotDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMultiply: _factoriesAny.createMultiply
};
exports.multiplyDependencies = multiplyDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.multiplyScalarDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var multiplyScalarDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createMultiplyScalar: _factoriesAny.createMultiplyScalar
};
exports.multiplyScalarDependencies = multiplyScalarDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNaN.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNaN.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NaNDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var NaNDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createNaN: _factoriesAny.createNaN
};
exports.NaNDependencies = NaNDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNeutronMass.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNeutronMass.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.neutronMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var neutronMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createNeutronMass: _factoriesAny.createNeutronMass
};
exports.neutronMassDependencies = neutronMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NodeDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var NodeDependencies = {
  createNode: _factoriesAny.createNode
};
exports.NodeDependencies = NodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNorm.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNorm.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.normDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesConjGenerated = __webpack_require__(/*! ./dependenciesConj.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js");

var _dependenciesCtransposeGenerated = __webpack_require__(/*! ./dependenciesCtranspose.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCtranspose.generated.js");

var _dependenciesEigsGenerated = __webpack_require__(/*! ./dependenciesEigs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEigs.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var normDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  conjDependencies: _dependenciesConjGenerated.conjDependencies,
  ctransposeDependencies: _dependenciesCtransposeGenerated.ctransposeDependencies,
  eigsDependencies: _dependenciesEigsGenerated.eigsDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createNorm: _factoriesAny.createNorm
};
exports.normDependencies = normDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNot.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNot.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.notDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var notDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createNot: _factoriesAny.createNot
};
exports.notDependencies = notDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNthRoot.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNthRoot.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nthRootDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nthRootDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createNthRoot: _factoriesAny.createNthRoot
};
exports.nthRootDependencies = nthRootDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNthRoots.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNthRoots.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nthRootsDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nthRootsDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createNthRoots: _factoriesAny.createNthRoots
};
exports.nthRootsDependencies = nthRootsDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nuclearMagnetonDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nuclearMagnetonDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createNuclearMagneton: _factoriesAny.createNuclearMagneton
};
exports.nuclearMagnetonDependencies = nuclearMagnetonDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNull.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNull.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nullDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nullDependencies = {
  createNull: _factoriesAny.createNull
};
exports.nullDependencies = nullDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.numberDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var numberDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createNumber: _factoriesAny.createNumber
};
exports.numberDependencies = numberDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.numericDependencies = void 0;

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesFractionGenerated = __webpack_require__(/*! ./dependenciesFraction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var numericDependencies = {
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  fractionDependencies: _dependenciesFractionGenerated.fractionDependencies,
  numberDependencies: _dependenciesNumberGenerated.numberDependencies,
  createNumeric: _factoriesAny.createNumeric
};
exports.numericDependencies = numericDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesObjectNode.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesObjectNode.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ObjectNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ObjectNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createObjectNode: _factoriesAny.createObjectNode
};
exports.ObjectNodeDependencies = ObjectNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOct.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOct.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.octDependencies = void 0;

var _dependenciesFormatGenerated = __webpack_require__(/*! ./dependenciesFormat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var octDependencies = {
  formatDependencies: _dependenciesFormatGenerated.formatDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createOct: _factoriesAny.createOct
};
exports.octDependencies = octDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOnes.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOnes.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.onesDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var onesDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createOnes: _factoriesAny.createOnes
};
exports.onesDependencies = onesDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.OperatorNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var OperatorNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createOperatorNode: _factoriesAny.createOperatorNode
};
exports.OperatorNodeDependencies = OperatorNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOr.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOr.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.orDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var orDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createOr: _factoriesAny.createOr
};
exports.orDependencies = orDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ParenthesisNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ParenthesisNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createParenthesisNode: _factoriesAny.createParenthesisNode
};
exports.ParenthesisNodeDependencies = ParenthesisNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseDependencies = void 0;

var _dependenciesAccessorNodeGenerated = __webpack_require__(/*! ./dependenciesAccessorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAccessorNode.generated.js");

var _dependenciesArrayNodeGenerated = __webpack_require__(/*! ./dependenciesArrayNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesArrayNode.generated.js");

var _dependenciesAssignmentNodeGenerated = __webpack_require__(/*! ./dependenciesAssignmentNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAssignmentNode.generated.js");

var _dependenciesBlockNodeGenerated = __webpack_require__(/*! ./dependenciesBlockNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBlockNode.generated.js");

var _dependenciesConditionalNodeGenerated = __webpack_require__(/*! ./dependenciesConditionalNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConditionalNode.generated.js");

var _dependenciesConstantNodeGenerated = __webpack_require__(/*! ./dependenciesConstantNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js");

var _dependenciesFunctionAssignmentNodeGenerated = __webpack_require__(/*! ./dependenciesFunctionAssignmentNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js");

var _dependenciesFunctionNodeGenerated = __webpack_require__(/*! ./dependenciesFunctionNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js");

var _dependenciesIndexNodeGenerated = __webpack_require__(/*! ./dependenciesIndexNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexNode.generated.js");

var _dependenciesObjectNodeGenerated = __webpack_require__(/*! ./dependenciesObjectNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesObjectNode.generated.js");

var _dependenciesOperatorNodeGenerated = __webpack_require__(/*! ./dependenciesOperatorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js");

var _dependenciesParenthesisNodeGenerated = __webpack_require__(/*! ./dependenciesParenthesisNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js");

var _dependenciesRangeNodeGenerated = __webpack_require__(/*! ./dependenciesRangeNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeNode.generated.js");

var _dependenciesRelationalNodeGenerated = __webpack_require__(/*! ./dependenciesRelationalNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRelationalNode.generated.js");

var _dependenciesSymbolNodeGenerated = __webpack_require__(/*! ./dependenciesSymbolNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var parseDependencies = {
  AccessorNodeDependencies: _dependenciesAccessorNodeGenerated.AccessorNodeDependencies,
  ArrayNodeDependencies: _dependenciesArrayNodeGenerated.ArrayNodeDependencies,
  AssignmentNodeDependencies: _dependenciesAssignmentNodeGenerated.AssignmentNodeDependencies,
  BlockNodeDependencies: _dependenciesBlockNodeGenerated.BlockNodeDependencies,
  ConditionalNodeDependencies: _dependenciesConditionalNodeGenerated.ConditionalNodeDependencies,
  ConstantNodeDependencies: _dependenciesConstantNodeGenerated.ConstantNodeDependencies,
  FunctionAssignmentNodeDependencies: _dependenciesFunctionAssignmentNodeGenerated.FunctionAssignmentNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNodeGenerated.FunctionNodeDependencies,
  IndexNodeDependencies: _dependenciesIndexNodeGenerated.IndexNodeDependencies,
  ObjectNodeDependencies: _dependenciesObjectNodeGenerated.ObjectNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNodeGenerated.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNodeGenerated.ParenthesisNodeDependencies,
  RangeNodeDependencies: _dependenciesRangeNodeGenerated.RangeNodeDependencies,
  RelationalNodeDependencies: _dependenciesRelationalNodeGenerated.RelationalNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNodeGenerated.SymbolNodeDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createParse: _factoriesAny.createParse
};
exports.parseDependencies = parseDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParser.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParser.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parserDependencies = void 0;

var _dependenciesParserClassGenerated = __webpack_require__(/*! ./dependenciesParserClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParserClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var parserDependencies = {
  ParserDependencies: _dependenciesParserClassGenerated.ParserDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createParser: _factoriesAny.createParser
};
exports.parserDependencies = parserDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParserClass.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParserClass.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ParserDependencies = void 0;

var _dependenciesEvaluateGenerated = __webpack_require__(/*! ./dependenciesEvaluate.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEvaluate.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ParserDependencies = {
  evaluateDependencies: _dependenciesEvaluateGenerated.evaluateDependencies,
  createParserClass: _factoriesAny.createParserClass
};
exports.ParserDependencies = ParserDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPartitionSelect.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPartitionSelect.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.partitionSelectDependencies = void 0;

var _dependenciesCompareGenerated = __webpack_require__(/*! ./dependenciesCompare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js");

var _dependenciesIsNaNGenerated = __webpack_require__(/*! ./dependenciesIsNaN.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js");

var _dependenciesIsNumericGenerated = __webpack_require__(/*! ./dependenciesIsNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var partitionSelectDependencies = {
  compareDependencies: _dependenciesCompareGenerated.compareDependencies,
  isNaNDependencies: _dependenciesIsNaNGenerated.isNaNDependencies,
  isNumericDependencies: _dependenciesIsNumericGenerated.isNumericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createPartitionSelect: _factoriesAny.createPartitionSelect
};
exports.partitionSelectDependencies = partitionSelectDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPermutations.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPermutations.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.permutationsDependencies = void 0;

var _dependenciesFactorialGenerated = __webpack_require__(/*! ./dependenciesFactorial.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFactorial.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var permutationsDependencies = {
  factorialDependencies: _dependenciesFactorialGenerated.factorialDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createPermutations: _factoriesAny.createPermutations
};
exports.permutationsDependencies = permutationsDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPhi.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPhi.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.phiDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var phiDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createPhi: _factoriesAny.createPhi
};
exports.phiDependencies = phiDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPi.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPi.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.piDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var piDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createPi: _factoriesAny.createPi
};
exports.piDependencies = piDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPickRandom.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPickRandom.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.pickRandomDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var pickRandomDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createPickRandom: _factoriesAny.createPickRandom
};
exports.pickRandomDependencies = pickRandomDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckCharge.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckCharge.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.planckChargeDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckChargeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createPlanckCharge: _factoriesAny.createPlanckCharge
};
exports.planckChargeDependencies = planckChargeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckConstant.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckConstant.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.planckConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createPlanckConstant: _factoriesAny.createPlanckConstant
};
exports.planckConstantDependencies = planckConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckLength.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckLength.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.planckLengthDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckLengthDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createPlanckLength: _factoriesAny.createPlanckLength
};
exports.planckLengthDependencies = planckLengthDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckMass.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckMass.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.planckMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createPlanckMass: _factoriesAny.createPlanckMass
};
exports.planckMassDependencies = planckMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.planckTemperatureDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckTemperatureDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createPlanckTemperature: _factoriesAny.createPlanckTemperature
};
exports.planckTemperatureDependencies = planckTemperatureDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckTime.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPlanckTime.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.planckTimeDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckTimeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createPlanckTime: _factoriesAny.createPlanckTime
};
exports.planckTimeDependencies = planckTimeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.powDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesFractionGenerated = __webpack_require__(/*! ./dependenciesFraction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js");

var _dependenciesIdentityGenerated = __webpack_require__(/*! ./dependenciesIdentity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var powDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  fractionDependencies: _dependenciesFractionGenerated.fractionDependencies,
  identityDependencies: _dependenciesIdentityGenerated.identityDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  numberDependencies: _dependenciesNumberGenerated.numberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createPow: _factoriesAny.createPow
};
exports.powDependencies = powDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPrint.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPrint.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.printDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var printDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createPrint: _factoriesAny.createPrint
};
exports.printDependencies = printDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProd.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProd.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.prodDependencies = void 0;

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var prodDependencies = {
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createProd: _factoriesAny.createProd
};
exports.prodDependencies = prodDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProtonMass.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesProtonMass.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.protonMassDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var protonMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createProtonMass: _factoriesAny.createProtonMass
};
exports.protonMassDependencies = protonMassDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQr.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQr.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.qrDependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesComplexGenerated = __webpack_require__(/*! ./dependenciesComplex.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplex.generated.js");

var _dependenciesConjGenerated = __webpack_require__(/*! ./dependenciesConj.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConj.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesIdentityGenerated = __webpack_require__(/*! ./dependenciesIdentity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js");

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSignGenerated = __webpack_require__(/*! ./dependenciesSign.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSign.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var qrDependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  complexDependencies: _dependenciesComplexGenerated.complexDependencies,
  conjDependencies: _dependenciesConjGenerated.conjDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  identityDependencies: _dependenciesIdentityGenerated.identityDependencies,
  isZeroDependencies: _dependenciesIsZeroGenerated.isZeroDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  signDependencies: _dependenciesSignGenerated.signDependencies,
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  zerosDependencies: _dependenciesZerosGenerated.zerosDependencies,
  createQr: _factoriesAny.createQr
};
exports.qrDependencies = qrDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQuantileSeq.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQuantileSeq.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.quantileSeqDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesCompareGenerated = __webpack_require__(/*! ./dependenciesCompare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesPartitionSelectGenerated = __webpack_require__(/*! ./dependenciesPartitionSelect.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPartitionSelect.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var quantileSeqDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  compareDependencies: _dependenciesCompareGenerated.compareDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  partitionSelectDependencies: _dependenciesPartitionSelectGenerated.partitionSelectDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createQuantileSeq: _factoriesAny.createQuantileSeq
};
exports.quantileSeqDependencies = quantileSeqDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.quantumOfCirculationDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var quantumOfCirculationDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createQuantumOfCirculation: _factoriesAny.createQuantumOfCirculation
};
exports.quantumOfCirculationDependencies = quantumOfCirculationDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRandom.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRandom.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.randomDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var randomDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRandom: _factoriesAny.createRandom
};
exports.randomDependencies = randomDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRandomInt.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRandomInt.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.randomIntDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var randomIntDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRandomInt: _factoriesAny.createRandomInt
};
exports.randomIntDependencies = randomIntDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rangeDependencies = void 0;

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesLargerEqGenerated = __webpack_require__(/*! ./dependenciesLargerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLargerEq.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSmallerEqGenerated = __webpack_require__(/*! ./dependenciesSmallerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmallerEq.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rangeDependencies = {
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  largerEqDependencies: _dependenciesLargerEqGenerated.largerEqDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  smallerEqDependencies: _dependenciesSmallerEqGenerated.smallerEqDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRange: _factoriesAny.createRange
};
exports.rangeDependencies = rangeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeClass.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeClass.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RangeDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var RangeDependencies = {
  createRangeClass: _factoriesAny.createRangeClass
};
exports.RangeDependencies = RangeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeNode.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeNode.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RangeNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var RangeNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createRangeNode: _factoriesAny.createRangeNode
};
exports.RangeNodeDependencies = RangeNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeTransform.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRangeTransform.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rangeTransformDependencies = void 0;

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesLargerEqGenerated = __webpack_require__(/*! ./dependenciesLargerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLargerEq.generated.js");

var _dependenciesSmallerGenerated = __webpack_require__(/*! ./dependenciesSmaller.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js");

var _dependenciesSmallerEqGenerated = __webpack_require__(/*! ./dependenciesSmallerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmallerEq.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rangeTransformDependencies = {
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  largerEqDependencies: _dependenciesLargerEqGenerated.largerEqDependencies,
  smallerDependencies: _dependenciesSmallerGenerated.smallerDependencies,
  smallerEqDependencies: _dependenciesSmallerEqGenerated.smallerEqDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRangeTransform: _factoriesAny.createRangeTransform
};
exports.rangeTransformDependencies = rangeTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRationalize.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRationalize.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rationalizeDependencies = void 0;

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesFractionGenerated = __webpack_require__(/*! ./dependenciesFraction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js");

var _dependenciesConstantNodeGenerated = __webpack_require__(/*! ./dependenciesConstantNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js");

var _dependenciesFunctionNodeGenerated = __webpack_require__(/*! ./dependenciesFunctionNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js");

var _dependenciesOperatorNodeGenerated = __webpack_require__(/*! ./dependenciesOperatorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js");

var _dependenciesParenthesisNodeGenerated = __webpack_require__(/*! ./dependenciesParenthesisNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js");

var _dependenciesSymbolNodeGenerated = __webpack_require__(/*! ./dependenciesSymbolNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesSimplifyGenerated = __webpack_require__(/*! ./dependenciesSimplify.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSimplify.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rationalizeDependencies = {
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  fractionDependencies: _dependenciesFractionGenerated.fractionDependencies,
  ConstantNodeDependencies: _dependenciesConstantNodeGenerated.ConstantNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNodeGenerated.FunctionNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNodeGenerated.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNodeGenerated.ParenthesisNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNodeGenerated.SymbolNodeDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  isZeroDependencies: _dependenciesIsZeroGenerated.isZeroDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  parseDependencies: _dependenciesParseGenerated.parseDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  simplifyDependencies: _dependenciesSimplifyGenerated.simplifyDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRationalize: _factoriesAny.createRationalize
};
exports.rationalizeDependencies = rationalizeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRe.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRe.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRe: _factoriesAny.createRe
};
exports.reDependencies = reDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reducedPlanckConstantDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reducedPlanckConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createReducedPlanckConstant: _factoriesAny.createReducedPlanckConstant
};
exports.reducedPlanckConstantDependencies = reducedPlanckConstantDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRelationalNode.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRelationalNode.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RelationalNodeDependencies = void 0;

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var RelationalNodeDependencies = {
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createRelationalNode: _factoriesAny.createRelationalNode
};
exports.RelationalNodeDependencies = RelationalNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReplacer.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReplacer.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.replacerDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var replacerDependencies = {
  createReplacer: _factoriesAny.createReplacer
};
exports.replacerDependencies = replacerDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReshape.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReshape.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reshapeDependencies = void 0;

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reshapeDependencies = {
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createReshape: _factoriesAny.createReshape
};
exports.reshapeDependencies = reshapeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResize.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResize.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.resizeDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var resizeDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  createResize: _factoriesAny.createResize
};
exports.resizeDependencies = resizeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResultSet.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesResultSet.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ResultSetDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ResultSetDependencies = {
  createResultSet: _factoriesAny.createResultSet
};
exports.ResultSetDependencies = ResultSetDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReviver.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesReviver.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reviverDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reviverDependencies = {
  createReviver: _factoriesAny.createReviver
};
exports.reviverDependencies = reviverDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRightArithShift.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRightArithShift.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rightArithShiftDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rightArithShiftDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  zerosDependencies: _dependenciesZerosGenerated.zerosDependencies,
  createRightArithShift: _factoriesAny.createRightArithShift
};
exports.rightArithShiftDependencies = rightArithShiftDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRightLogShift.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRightLogShift.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rightLogShiftDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rightLogShiftDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  zerosDependencies: _dependenciesZerosGenerated.zerosDependencies,
  createRightLogShift: _factoriesAny.createRightLogShift
};
exports.rightLogShiftDependencies = rightLogShiftDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotate.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotate.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rotateDependencies = void 0;

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesRotationMatrixGenerated = __webpack_require__(/*! ./dependenciesRotationMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotationMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rotateDependencies = {
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  rotationMatrixDependencies: _dependenciesRotationMatrixGenerated.rotationMatrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRotate: _factoriesAny.createRotate
};
exports.rotateDependencies = rotateDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotationMatrix.generated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRotationMatrix.generated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rotationMatrixDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesCosGenerated = __webpack_require__(/*! ./dependenciesCos.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCos.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesNormGenerated = __webpack_require__(/*! ./dependenciesNorm.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNorm.generated.js");

var _dependenciesSinGenerated = __webpack_require__(/*! ./dependenciesSin.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSin.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rotationMatrixDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  cosDependencies: _dependenciesCosGenerated.cosDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  normDependencies: _dependenciesNormGenerated.normDependencies,
  sinDependencies: _dependenciesSinGenerated.sinDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createRotationMatrix: _factoriesAny.createRotationMatrix
};
exports.rotationMatrixDependencies = rotationMatrixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRound.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRound.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.roundDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesZerosGenerated = __webpack_require__(/*! ./dependenciesZeros.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var roundDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  zerosDependencies: _dependenciesZerosGenerated.zerosDependencies,
  createRound: _factoriesAny.createRound
};
exports.roundDependencies = roundDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRow.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRow.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rowDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesRangeGenerated = __webpack_require__(/*! ./dependenciesRange.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rowDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  rangeDependencies: _dependenciesRangeGenerated.rangeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRow: _factoriesAny.createRow
};
exports.rowDependencies = rowDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRowTransform.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRowTransform.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rowTransformDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesRangeGenerated = __webpack_require__(/*! ./dependenciesRange.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRange.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rowTransformDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  rangeDependencies: _dependenciesRangeGenerated.rangeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createRowTransform: _factoriesAny.createRowTransform
};
exports.rowTransformDependencies = rowTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRydberg.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRydberg.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rydbergDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rydbergDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createRydberg: _factoriesAny.createRydberg
};
exports.rydbergDependencies = rydbergDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSQRT1_2.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSQRT1_2.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SQRT1_2Dependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
// eslint-disable-line camelcase
var SQRT1_2Dependencies = {
  // eslint-disable-line camelcase
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createSQRT1_2: _factoriesAny.createSQRT1_2
};
exports.SQRT1_2Dependencies = SQRT1_2Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSQRT2.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSQRT2.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SQRT2Dependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SQRT2Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createSQRT2: _factoriesAny.createSQRT2
};
exports.SQRT2Dependencies = SQRT2Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSackurTetrode.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSackurTetrode.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sackurTetrodeDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sackurTetrodeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createSackurTetrode: _factoriesAny.createSackurTetrode
};
exports.sackurTetrodeDependencies = sackurTetrodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSec.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSec.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.secDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var secDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSec: _factoriesAny.createSec
};
exports.secDependencies = secDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSech.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSech.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sechDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sechDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSech: _factoriesAny.createSech
};
exports.sechDependencies = sechDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSecondRadiation.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSecondRadiation.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.secondRadiationDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var secondRadiationDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createSecondRadiation: _factoriesAny.createSecondRadiation
};
exports.secondRadiationDependencies = secondRadiationDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetCartesian.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetCartesian.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setCartesianDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setCartesianDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetCartesian: _factoriesAny.createSetCartesian
};
exports.setCartesianDependencies = setCartesianDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDifference.generated.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDifference.generated.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setDifferenceDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setDifferenceDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetDifference: _factoriesAny.createSetDifference
};
exports.setDifferenceDependencies = setDifferenceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDistinct.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDistinct.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setDistinctDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setDistinctDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetDistinct: _factoriesAny.createSetDistinct
};
exports.setDistinctDependencies = setDistinctDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIntersect.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIntersect.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setIntersectDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setIntersectDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetIntersect: _factoriesAny.createSetIntersect
};
exports.setIntersectDependencies = setIntersectDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIsSubset.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIsSubset.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setIsSubsetDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setIsSubsetDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetIsSubset: _factoriesAny.createSetIsSubset
};
exports.setIsSubsetDependencies = setIsSubsetDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setMultiplicityDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setMultiplicityDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetMultiplicity: _factoriesAny.createSetMultiplicity
};
exports.setMultiplicityDependencies = setMultiplicityDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetPowerset.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetPowerset.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setPowersetDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setPowersetDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetPowerset: _factoriesAny.createSetPowerset
};
exports.setPowersetDependencies = setPowersetDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSize.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSize.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setSizeDependencies = void 0;

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setSizeDependencies = {
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetSize: _factoriesAny.createSetSize
};
exports.setSizeDependencies = setSizeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSymDifference.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSymDifference.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setSymDifferenceDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesConcatGenerated = __webpack_require__(/*! ./dependenciesConcat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcat.generated.js");

var _dependenciesSetDifferenceGenerated = __webpack_require__(/*! ./dependenciesSetDifference.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetDifference.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setSymDifferenceDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  concatDependencies: _dependenciesConcatGenerated.concatDependencies,
  setDifferenceDependencies: _dependenciesSetDifferenceGenerated.setDifferenceDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetSymDifference: _factoriesAny.createSetSymDifference
};
exports.setSymDifferenceDependencies = setSymDifferenceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetUnion.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetUnion.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setUnionDependencies = void 0;

var _dependenciesIndexClassGenerated = __webpack_require__(/*! ./dependenciesIndexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIndexClass.generated.js");

var _dependenciesConcatGenerated = __webpack_require__(/*! ./dependenciesConcat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConcat.generated.js");

var _dependenciesSetIntersectGenerated = __webpack_require__(/*! ./dependenciesSetIntersect.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetIntersect.generated.js");

var _dependenciesSetSymDifferenceGenerated = __webpack_require__(/*! ./dependenciesSetSymDifference.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSetSymDifference.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSubsetGenerated = __webpack_require__(/*! ./dependenciesSubset.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setUnionDependencies = {
  IndexDependencies: _dependenciesIndexClassGenerated.IndexDependencies,
  concatDependencies: _dependenciesConcatGenerated.concatDependencies,
  setIntersectDependencies: _dependenciesSetIntersectGenerated.setIntersectDependencies,
  setSymDifferenceDependencies: _dependenciesSetSymDifferenceGenerated.setSymDifferenceDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  subsetDependencies: _dependenciesSubsetGenerated.subsetDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSetUnion: _factoriesAny.createSetUnion
};
exports.setUnionDependencies = setUnionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSign.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSign.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.signDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _dependenciesComplexGenerated = __webpack_require__(/*! ./dependenciesComplex.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplex.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var signDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  FractionDependencies: _dependenciesFractionClassGenerated.FractionDependencies,
  complexDependencies: _dependenciesComplexGenerated.complexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSign: _factoriesAny.createSign
};
exports.signDependencies = signDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSimplify.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSimplify.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.simplifyDependencies = void 0;

var _dependenciesBignumberGenerated = __webpack_require__(/*! ./dependenciesBignumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBignumber.generated.js");

var _dependenciesFractionGenerated = __webpack_require__(/*! ./dependenciesFraction.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFraction.generated.js");

var _dependenciesConstantNodeGenerated = __webpack_require__(/*! ./dependenciesConstantNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesConstantNode.generated.js");

var _dependenciesFunctionNodeGenerated = __webpack_require__(/*! ./dependenciesFunctionNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFunctionNode.generated.js");

var _dependenciesOperatorNodeGenerated = __webpack_require__(/*! ./dependenciesOperatorNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesOperatorNode.generated.js");

var _dependenciesParenthesisNodeGenerated = __webpack_require__(/*! ./dependenciesParenthesisNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParenthesisNode.generated.js");

var _dependenciesSymbolNodeGenerated = __webpack_require__(/*! ./dependenciesSymbolNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesIsZeroGenerated = __webpack_require__(/*! ./dependenciesIsZero.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsZero.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesParseGenerated = __webpack_require__(/*! ./dependenciesParse.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesParse.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var simplifyDependencies = {
  bignumberDependencies: _dependenciesBignumberGenerated.bignumberDependencies,
  fractionDependencies: _dependenciesFractionGenerated.fractionDependencies,
  ConstantNodeDependencies: _dependenciesConstantNodeGenerated.ConstantNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNodeGenerated.FunctionNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNodeGenerated.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNodeGenerated.ParenthesisNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNodeGenerated.SymbolNodeDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  isZeroDependencies: _dependenciesIsZeroGenerated.isZeroDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  parseDependencies: _dependenciesParseGenerated.parseDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSimplify: _factoriesAny.createSimplify
};
exports.simplifyDependencies = simplifyDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSin.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSin.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sinDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sinDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSin: _factoriesAny.createSin
};
exports.sinDependencies = sinDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSinh.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSinh.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sinhDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sinhDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSinh: _factoriesAny.createSinh
};
exports.sinhDependencies = sinhDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sizeDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sizeDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSize: _factoriesAny.createSize
};
exports.sizeDependencies = sizeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSlu.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSlu.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sluDependencies = void 0;

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesLargerEqGenerated = __webpack_require__(/*! ./dependenciesLargerEq.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLargerEq.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTransposeGenerated = __webpack_require__(/*! ./dependenciesTranspose.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTranspose.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sluDependencies = {
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  largerEqDependencies: _dependenciesLargerEqGenerated.largerEqDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  transposeDependencies: _dependenciesTransposeGenerated.transposeDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSlu: _factoriesAny.createSlu
};
exports.sluDependencies = sluDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmaller.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.smallerDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var smallerDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSmaller: _factoriesAny.createSmaller
};
exports.smallerDependencies = smallerDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmallerEq.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSmallerEq.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.smallerEqDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var smallerEqDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSmallerEq: _factoriesAny.createSmallerEq
};
exports.smallerEqDependencies = smallerEqDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSort.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSort.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sortDependencies = void 0;

var _dependenciesCompareGenerated = __webpack_require__(/*! ./dependenciesCompare.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompare.generated.js");

var _dependenciesCompareNaturalGenerated = __webpack_require__(/*! ./dependenciesCompareNatural.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCompareNatural.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sortDependencies = {
  compareDependencies: _dependenciesCompareGenerated.compareDependencies,
  compareNaturalDependencies: _dependenciesCompareNaturalGenerated.compareNaturalDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSort: _factoriesAny.createSort
};
exports.sortDependencies = sortDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpaClass.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpaClass.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SpaDependencies = void 0;

var _dependenciesFibonacciHeapClassGenerated = __webpack_require__(/*! ./dependenciesFibonacciHeapClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SpaDependencies = {
  FibonacciHeapDependencies: _dependenciesFibonacciHeapClassGenerated.FibonacciHeapDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  createSpaClass: _factoriesAny.createSpaClass
};
exports.SpaDependencies = SpaDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparse.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparse.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sparseDependencies = void 0;

var _dependenciesSparseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesSparseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sparseDependencies = {
  SparseMatrixDependencies: _dependenciesSparseMatrixClassGenerated.SparseMatrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSparse: _factoriesAny.createSparse
};
exports.sparseDependencies = sparseDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SparseMatrixDependencies = void 0;

var _dependenciesMatrixClassGenerated = __webpack_require__(/*! ./dependenciesMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SparseMatrixDependencies = {
  MatrixDependencies: _dependenciesMatrixClassGenerated.MatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSparseMatrixClass: _factoriesAny.createSparseMatrixClass
};
exports.SparseMatrixDependencies = SparseMatrixDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.speedOfLightDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var speedOfLightDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createSpeedOfLight: _factoriesAny.createSpeedOfLight
};
exports.speedOfLightDependencies = speedOfLightDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSplitUnit.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSplitUnit.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.splitUnitDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var splitUnitDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSplitUnit: _factoriesAny.createSplitUnit
};
exports.splitUnitDependencies = splitUnitDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sqrtDependencies = void 0;

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sqrtDependencies = {
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSqrt: _factoriesAny.createSqrt
};
exports.sqrtDependencies = sqrtDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrtm.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrtm.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sqrtmDependencies = void 0;

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesIdentityGenerated = __webpack_require__(/*! ./dependenciesIdentity.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIdentity.generated.js");

var _dependenciesInvGenerated = __webpack_require__(/*! ./dependenciesInv.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesInv.generated.js");

var _dependenciesMaxGenerated = __webpack_require__(/*! ./dependenciesMax.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMax.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSizeGenerated = __webpack_require__(/*! ./dependenciesSize.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSize.generated.js");

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sqrtmDependencies = {
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addDependencies: _dependenciesAddGenerated.addDependencies,
  identityDependencies: _dependenciesIdentityGenerated.identityDependencies,
  invDependencies: _dependenciesInvGenerated.invDependencies,
  maxDependencies: _dependenciesMaxGenerated.maxDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  sizeDependencies: _dependenciesSizeGenerated.sizeDependencies,
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSqrtm: _factoriesAny.createSqrtm
};
exports.sqrtmDependencies = sqrtmDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSquare.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSquare.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.squareDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var squareDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSquare: _factoriesAny.createSquare
};
exports.squareDependencies = squareDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqueeze.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqueeze.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.squeezeDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var squeezeDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSqueeze: _factoriesAny.createSqueeze
};
exports.squeezeDependencies = squeezeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStd.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStd.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stdDependencies = void 0;

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesVarianceGenerated = __webpack_require__(/*! ./dependenciesVariance.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVariance.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stdDependencies = {
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  varianceDependencies: _dependenciesVarianceGenerated.varianceDependencies,
  createStd: _factoriesAny.createStd
};
exports.stdDependencies = stdDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStdTransform.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStdTransform.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stdTransformDependencies = void 0;

var _dependenciesSqrtGenerated = __webpack_require__(/*! ./dependenciesSqrt.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSqrt.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesVarianceGenerated = __webpack_require__(/*! ./dependenciesVariance.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVariance.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stdTransformDependencies = {
  sqrtDependencies: _dependenciesSqrtGenerated.sqrtDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  varianceDependencies: _dependenciesVarianceGenerated.varianceDependencies,
  createStdTransform: _factoriesAny.createStdTransform
};
exports.stdTransformDependencies = stdTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stefanBoltzmannDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stefanBoltzmannDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createStefanBoltzmann: _factoriesAny.createStefanBoltzmann
};
exports.stefanBoltzmannDependencies = stefanBoltzmannDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStirlingS2.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesStirlingS2.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stirlingS2Dependencies = void 0;

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesCombinationsGenerated = __webpack_require__(/*! ./dependenciesCombinations.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesCombinations.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesFactorialGenerated = __webpack_require__(/*! ./dependenciesFactorial.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFactorial.generated.js");

var _dependenciesIsIntegerGenerated = __webpack_require__(/*! ./dependenciesIsInteger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsInteger.generated.js");

var _dependenciesIsNegativeGenerated = __webpack_require__(/*! ./dependenciesIsNegative.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNegative.generated.js");

var _dependenciesLargerGenerated = __webpack_require__(/*! ./dependenciesLarger.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesLarger.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stirlingS2Dependencies = {
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  combinationsDependencies: _dependenciesCombinationsGenerated.combinationsDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  factorialDependencies: _dependenciesFactorialGenerated.factorialDependencies,
  isIntegerDependencies: _dependenciesIsIntegerGenerated.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegativeGenerated.isNegativeDependencies,
  largerDependencies: _dependenciesLargerGenerated.largerDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createStirlingS2: _factoriesAny.createStirlingS2
};
exports.stirlingS2Dependencies = stirlingS2Dependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesString.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesString.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stringDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stringDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createString: _factoriesAny.createString
};
exports.stringDependencies = stringDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubset.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subsetDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var subsetDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSubset: _factoriesAny.createSubset
};
exports.subsetDependencies = subsetDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubsetTransform.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubsetTransform.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subsetTransformDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var subsetTransformDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSubsetTransform: _factoriesAny.createSubsetTransform
};
exports.subsetTransformDependencies = subsetTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subtractDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _dependenciesUnaryMinusGenerated = __webpack_require__(/*! ./dependenciesUnaryMinus.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var subtractDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinusGenerated.unaryMinusDependencies,
  createSubtract: _factoriesAny.createSubtract
};
exports.subtractDependencies = subtractDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSum.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSum.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sumDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sumDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSum: _factoriesAny.createSum
};
exports.sumDependencies = sumDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSumTransform.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSumTransform.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sumTransformDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesNumericGenerated = __webpack_require__(/*! ./dependenciesNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumeric.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sumTransformDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  numericDependencies: _dependenciesNumericGenerated.numericDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createSumTransform: _factoriesAny.createSumTransform
};
exports.sumTransformDependencies = sumTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSymbolNode.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SymbolNodeDependencies = void 0;

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _dependenciesNodeGenerated = __webpack_require__(/*! ./dependenciesNode.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNode.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SymbolNodeDependencies = {
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  NodeDependencies: _dependenciesNodeGenerated.NodeDependencies,
  createSymbolNode: _factoriesAny.createSymbolNode
};
exports.SymbolNodeDependencies = SymbolNodeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTan.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTan.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tanDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var tanDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createTan: _factoriesAny.createTan
};
exports.tanDependencies = tanDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTanh.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTanh.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tanhDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var tanhDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createTanh: _factoriesAny.createTanh
};
exports.tanhDependencies = tanhDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTau.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTau.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tauDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var tauDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createTau: _factoriesAny.createTau
};
exports.tauDependencies = tauDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.thomsonCrossSectionDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var thomsonCrossSectionDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createThomsonCrossSection: _factoriesAny.createThomsonCrossSection
};
exports.thomsonCrossSectionDependencies = thomsonCrossSectionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTo.generated.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTo.generated.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var toDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createTo: _factoriesAny.createTo
};
exports.toDependencies = toDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTrace.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTrace.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.traceDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var traceDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createTrace: _factoriesAny.createTrace
};
exports.traceDependencies = traceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTranspose.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTranspose.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.transposeDependencies = void 0;

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var transposeDependencies = {
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createTranspose: _factoriesAny.createTranspose
};
exports.transposeDependencies = transposeDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTrue.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTrue.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.trueDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var trueDependencies = {
  createTrue: _factoriesAny.createTrue
};
exports.trueDependencies = trueDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTypeOf.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTypeOf.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.typeOfDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var typeOfDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createTypeOf: _factoriesAny.createTypeOf
};
exports.typeOfDependencies = typeOfDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.typedDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var typedDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  FractionDependencies: _dependenciesFractionClassGenerated.FractionDependencies,
  createTyped: _factoriesAny.createTyped
};
exports.typedDependencies = typedDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryMinus.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unaryMinusDependencies = void 0;

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unaryMinusDependencies = {
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createUnaryMinus: _factoriesAny.createUnaryMinus
};
exports.unaryMinusDependencies = unaryMinusDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryPlus.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnaryPlus.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unaryPlusDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unaryPlusDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createUnaryPlus: _factoriesAny.createUnaryPlus
};
exports.unaryPlusDependencies = unaryPlusDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnequal.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnequal.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unequalDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unequalDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createUnequal: _factoriesAny.createUnequal
};
exports.unequalDependencies = unequalDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UnitDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesComplexClassGenerated = __webpack_require__(/*! ./dependenciesComplexClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesComplexClass.generated.js");

var _dependenciesFractionClassGenerated = __webpack_require__(/*! ./dependenciesFractionClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFractionClass.generated.js");

var _dependenciesAbsGenerated = __webpack_require__(/*! ./dependenciesAbs.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAbs.generated.js");

var _dependenciesAddScalarGenerated = __webpack_require__(/*! ./dependenciesAddScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAddScalar.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualGenerated = __webpack_require__(/*! ./dependenciesEqual.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqual.generated.js");

var _dependenciesFixGenerated = __webpack_require__(/*! ./dependenciesFix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFix.generated.js");

var _dependenciesFormatGenerated = __webpack_require__(/*! ./dependenciesFormat.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesFormat.generated.js");

var _dependenciesIsNumericGenerated = __webpack_require__(/*! ./dependenciesIsNumeric.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNumeric.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesNumberGenerated = __webpack_require__(/*! ./dependenciesNumber.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesNumber.generated.js");

var _dependenciesPowGenerated = __webpack_require__(/*! ./dependenciesPow.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPow.generated.js");

var _dependenciesRoundGenerated = __webpack_require__(/*! ./dependenciesRound.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesRound.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var UnitDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClassGenerated.ComplexDependencies,
  FractionDependencies: _dependenciesFractionClassGenerated.FractionDependencies,
  absDependencies: _dependenciesAbsGenerated.absDependencies,
  addScalarDependencies: _dependenciesAddScalarGenerated.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalDependencies: _dependenciesEqualGenerated.equalDependencies,
  fixDependencies: _dependenciesFixGenerated.fixDependencies,
  formatDependencies: _dependenciesFormatGenerated.formatDependencies,
  isNumericDependencies: _dependenciesIsNumericGenerated.isNumericDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  numberDependencies: _dependenciesNumberGenerated.numberDependencies,
  powDependencies: _dependenciesPowGenerated.powDependencies,
  roundDependencies: _dependenciesRoundGenerated.roundDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  createUnitClass: _factoriesAny.createUnitClass
};
exports.UnitDependencies = UnitDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitFunction.generated.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitFunction.generated.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unitDependencies = void 0;

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unitDependencies = {
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createUnitFunction: _factoriesAny.createUnitFunction
};
exports.unitDependencies = unitDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUppercaseE.generated.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUppercaseE.generated.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.EDependencies = void 0;

var _dependenciesEGenerated = __webpack_require__(/*! ./dependenciesE.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesE.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var EDependencies = {
  eDependencies: _dependenciesEGenerated.eDependencies,
  createUppercaseE: _factoriesAny.createUppercaseE
};
exports.EDependencies = EDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUppercasePi.generated.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUppercasePi.generated.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.PIDependencies = void 0;

var _dependenciesPiGenerated = __webpack_require__(/*! ./dependenciesPi.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesPi.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var PIDependencies = {
  piDependencies: _dependenciesPiGenerated.piDependencies,
  createUppercasePi: _factoriesAny.createUppercasePi
};
exports.PIDependencies = PIDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolve.generated.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolve.generated.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.usolveDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var usolveDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createUsolve: _factoriesAny.createUsolve
};
exports.usolveDependencies = usolveDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolveAll.generated.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUsolveAll.generated.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.usolveAllDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesDivideScalarGenerated = __webpack_require__(/*! ./dependenciesDivideScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivideScalar.generated.js");

var _dependenciesEqualScalarGenerated = __webpack_require__(/*! ./dependenciesEqualScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesEqualScalar.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesMultiplyScalarGenerated = __webpack_require__(/*! ./dependenciesMultiplyScalar.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var usolveAllDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalarGenerated.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalarGenerated.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalarGenerated.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createUsolveAll: _factoriesAny.createUsolveAll
};
exports.usolveAllDependencies = usolveAllDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.vacuumImpedanceDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var vacuumImpedanceDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createVacuumImpedance: _factoriesAny.createVacuumImpedance
};
exports.vacuumImpedanceDependencies = vacuumImpedanceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVariance.generated.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVariance.generated.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.varianceDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesApplyGenerated = __webpack_require__(/*! ./dependenciesApply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApply.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesIsNaNGenerated = __webpack_require__(/*! ./dependenciesIsNaN.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var varianceDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  applyDependencies: _dependenciesApplyGenerated.applyDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  isNaNDependencies: _dependenciesIsNaNGenerated.isNaNDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createVariance: _factoriesAny.createVariance
};
exports.varianceDependencies = varianceDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVarianceTransform.generated.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVarianceTransform.generated.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.varianceTransformDependencies = void 0;

var _dependenciesAddGenerated = __webpack_require__(/*! ./dependenciesAdd.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesAdd.generated.js");

var _dependenciesApplyGenerated = __webpack_require__(/*! ./dependenciesApply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesApply.generated.js");

var _dependenciesDivideGenerated = __webpack_require__(/*! ./dependenciesDivide.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDivide.generated.js");

var _dependenciesIsNaNGenerated = __webpack_require__(/*! ./dependenciesIsNaN.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesIsNaN.generated.js");

var _dependenciesMultiplyGenerated = __webpack_require__(/*! ./dependenciesMultiply.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMultiply.generated.js");

var _dependenciesSubtractGenerated = __webpack_require__(/*! ./dependenciesSubtract.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesSubtract.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var varianceTransformDependencies = {
  addDependencies: _dependenciesAddGenerated.addDependencies,
  applyDependencies: _dependenciesApplyGenerated.applyDependencies,
  divideDependencies: _dependenciesDivideGenerated.divideDependencies,
  isNaNDependencies: _dependenciesIsNaNGenerated.isNaNDependencies,
  multiplyDependencies: _dependenciesMultiplyGenerated.multiplyDependencies,
  subtractDependencies: _dependenciesSubtractGenerated.subtractDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createVarianceTransform: _factoriesAny.createVarianceTransform
};
exports.varianceTransformDependencies = varianceTransformDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVersion.generated.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesVersion.generated.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.versionDependencies = void 0;

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var versionDependencies = {
  createVersion: _factoriesAny.createVersion
};
exports.versionDependencies = versionDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.weakMixingAngleDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var weakMixingAngleDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  createWeakMixingAngle: _factoriesAny.createWeakMixingAngle
};
exports.weakMixingAngleDependencies = weakMixingAngleDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesWienDisplacement.generated.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesWienDisplacement.generated.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.wienDisplacementDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesUnitClassGenerated = __webpack_require__(/*! ./dependenciesUnitClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesUnitClass.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var wienDisplacementDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClassGenerated.UnitDependencies,
  createWienDisplacement: _factoriesAny.createWienDisplacement
};
exports.wienDisplacementDependencies = wienDisplacementDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesXgcd.generated.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesXgcd.generated.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.xgcdDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var xgcdDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createXgcd: _factoriesAny.createXgcd
};
exports.xgcdDependencies = xgcdDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesXor.generated.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesXor.generated.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.xorDependencies = void 0;

var _dependenciesDenseMatrixClassGenerated = __webpack_require__(/*! ./dependenciesDenseMatrixClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var xorDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClassGenerated.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createXor: _factoriesAny.createXor
};
exports.xorDependencies = xorDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesZeros.generated.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.zerosDependencies = void 0;

var _dependenciesBigNumberClassGenerated = __webpack_require__(/*! ./dependenciesBigNumberClass.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesBigNumberClass.generated.js");

var _dependenciesMatrixGenerated = __webpack_require__(/*! ./dependenciesMatrix.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesMatrix.generated.js");

var _dependenciesTypedGenerated = __webpack_require__(/*! ./dependenciesTyped.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny/dependenciesTyped.generated.js");

var _factoriesAny = __webpack_require__(/*! ../../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var zerosDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClassGenerated.BigNumberDependencies,
  matrixDependencies: _dependenciesMatrixGenerated.matrixDependencies,
  typedDependencies: _dependenciesTypedGenerated.typedDependencies,
  createZeros: _factoriesAny.createZeros
};
exports.zerosDependencies = zerosDependencies;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/impureFunctionsAny.generated.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/impureFunctionsAny.generated.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "docs", ({
  enumerable: true,
  get: function get() {
    return _embeddedDocs.embeddedDocs;
  }
}));
exports.compile = exports.parser = exports.derivative = exports.help = exports.Parser = exports.rationalize = exports.simplify = exports.Help = exports.evaluate = exports.parse = exports.FunctionNode = exports.SymbolNode = exports.AssignmentNode = exports.IndexNode = exports.AccessorNode = exports.chain = exports.FunctionAssignmentNode = exports.RangeNode = exports.OperatorNode = exports.ConditionalNode = exports.reviver = exports.Chain = exports.RelationalNode = exports.ParenthesisNode = exports.ObjectNode = exports.ConstantNode = exports.BlockNode = exports.ArrayNode = exports.Node = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js"));

var _configReadonly = __webpack_require__(/*! ./configReadonly.js */ "./node_modules/mathjs/lib/cjs/entry/configReadonly.js");

var _factoriesAny = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

var _pureFunctionsAnyGenerated = __webpack_require__(/*! ./pureFunctionsAny.generated.js */ "./node_modules/mathjs/lib/cjs/entry/pureFunctionsAny.generated.js");

var _embeddedDocs = __webpack_require__(/*! ../expression/embeddedDocs/embeddedDocs.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/embeddedDocs.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var math = {}; // NOT pure!

var mathWithTransform = {}; // NOT pure!

var classes = {}; // NOT pure!

var Node = (0, _factoriesAny.createNode)({
  mathWithTransform: mathWithTransform
});
exports.Node = Node;
var ArrayNode = (0, _factoriesAny.createArrayNode)({
  Node: Node
});
exports.ArrayNode = ArrayNode;
var BlockNode = (0, _factoriesAny.createBlockNode)({
  Node: Node,
  ResultSet: _pureFunctionsAnyGenerated.ResultSet
});
exports.BlockNode = BlockNode;
var ConstantNode = (0, _factoriesAny.createConstantNode)({
  Node: Node
});
exports.ConstantNode = ConstantNode;
var ObjectNode = (0, _factoriesAny.createObjectNode)({
  Node: Node
});
exports.ObjectNode = ObjectNode;
var ParenthesisNode = (0, _factoriesAny.createParenthesisNode)({
  Node: Node
});
exports.ParenthesisNode = ParenthesisNode;
var RelationalNode = (0, _factoriesAny.createRelationalNode)({
  Node: Node
});
exports.RelationalNode = RelationalNode;
var Chain = (0, _factoriesAny.createChainClass)({
  math: math
});
exports.Chain = Chain;
var reviver = (0, _factoriesAny.createReviver)({
  classes: classes
});
exports.reviver = reviver;
var ConditionalNode = (0, _factoriesAny.createConditionalNode)({
  Node: Node
});
exports.ConditionalNode = ConditionalNode;
var OperatorNode = (0, _factoriesAny.createOperatorNode)({
  Node: Node
});
exports.OperatorNode = OperatorNode;
var RangeNode = (0, _factoriesAny.createRangeNode)({
  Node: Node
});
exports.RangeNode = RangeNode;
var FunctionAssignmentNode = (0, _factoriesAny.createFunctionAssignmentNode)({
  Node: Node,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.FunctionAssignmentNode = FunctionAssignmentNode;
var chain = (0, _factoriesAny.createChain)({
  Chain: Chain,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.chain = chain;
var AccessorNode = (0, _factoriesAny.createAccessorNode)({
  Node: Node,
  subset: _pureFunctionsAnyGenerated.subset
});
exports.AccessorNode = AccessorNode;
var IndexNode = (0, _factoriesAny.createIndexNode)({
  Node: Node,
  Range: _pureFunctionsAnyGenerated.Range,
  size: _pureFunctionsAnyGenerated.size
});
exports.IndexNode = IndexNode;
var AssignmentNode = (0, _factoriesAny.createAssignmentNode)({
  matrix: _pureFunctionsAnyGenerated.matrix,
  Node: Node,
  subset: _pureFunctionsAnyGenerated.subset
});
exports.AssignmentNode = AssignmentNode;
var SymbolNode = (0, _factoriesAny.createSymbolNode)({
  Unit: _pureFunctionsAnyGenerated.Unit,
  Node: Node,
  math: math
});
exports.SymbolNode = SymbolNode;
var FunctionNode = (0, _factoriesAny.createFunctionNode)({
  Node: Node,
  SymbolNode: SymbolNode,
  math: math
});
exports.FunctionNode = FunctionNode;
var parse = (0, _factoriesAny.createParse)({
  AccessorNode: AccessorNode,
  ArrayNode: ArrayNode,
  AssignmentNode: AssignmentNode,
  BlockNode: BlockNode,
  ConditionalNode: ConditionalNode,
  ConstantNode: ConstantNode,
  FunctionAssignmentNode: FunctionAssignmentNode,
  FunctionNode: FunctionNode,
  IndexNode: IndexNode,
  ObjectNode: ObjectNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  RangeNode: RangeNode,
  RelationalNode: RelationalNode,
  SymbolNode: SymbolNode,
  config: _configReadonly.config,
  numeric: _pureFunctionsAnyGenerated.numeric,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.parse = parse;
var evaluate = (0, _factoriesAny.createEvaluate)({
  parse: parse,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.evaluate = evaluate;
var Help = (0, _factoriesAny.createHelpClass)({
  parse: parse
});
exports.Help = Help;
var simplify = (0, _factoriesAny.createSimplify)({
  bignumber: _pureFunctionsAnyGenerated.bignumber,
  fraction: _pureFunctionsAnyGenerated.fraction,
  ConstantNode: ConstantNode,
  FunctionNode: FunctionNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  SymbolNode: SymbolNode,
  add: _pureFunctionsAnyGenerated.add,
  config: _configReadonly.config,
  divide: _pureFunctionsAnyGenerated.divide,
  equal: _pureFunctionsAnyGenerated.equal,
  isZero: _pureFunctionsAnyGenerated.isZero,
  mathWithTransform: mathWithTransform,
  multiply: _pureFunctionsAnyGenerated.multiply,
  parse: parse,
  pow: _pureFunctionsAnyGenerated.pow,
  subtract: _pureFunctionsAnyGenerated.subtract,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.simplify = simplify;
var rationalize = (0, _factoriesAny.createRationalize)({
  bignumber: _pureFunctionsAnyGenerated.bignumber,
  fraction: _pureFunctionsAnyGenerated.fraction,
  ConstantNode: ConstantNode,
  FunctionNode: FunctionNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  SymbolNode: SymbolNode,
  add: _pureFunctionsAnyGenerated.add,
  config: _configReadonly.config,
  divide: _pureFunctionsAnyGenerated.divide,
  equal: _pureFunctionsAnyGenerated.equal,
  isZero: _pureFunctionsAnyGenerated.isZero,
  mathWithTransform: mathWithTransform,
  multiply: _pureFunctionsAnyGenerated.multiply,
  parse: parse,
  pow: _pureFunctionsAnyGenerated.pow,
  simplify: simplify,
  subtract: _pureFunctionsAnyGenerated.subtract,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.rationalize = rationalize;
var Parser = (0, _factoriesAny.createParserClass)({
  evaluate: evaluate
});
exports.Parser = Parser;
var help = (0, _factoriesAny.createHelp)({
  Help: Help,
  mathWithTransform: mathWithTransform,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.help = help;
var derivative = (0, _factoriesAny.createDerivative)({
  ConstantNode: ConstantNode,
  FunctionNode: FunctionNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  SymbolNode: SymbolNode,
  config: _configReadonly.config,
  equal: _pureFunctionsAnyGenerated.equal,
  isZero: _pureFunctionsAnyGenerated.isZero,
  numeric: _pureFunctionsAnyGenerated.numeric,
  parse: parse,
  simplify: simplify,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.derivative = derivative;
var parser = (0, _factoriesAny.createParser)({
  Parser: Parser,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.parser = parser;
var compile = (0, _factoriesAny.createCompile)({
  parse: parse,
  typed: _pureFunctionsAnyGenerated.typed
});
exports.compile = compile;
(0, _extends2["default"])(math, {
  reviver: reviver,
  "false": _pureFunctionsAnyGenerated._false,
  "null": _pureFunctionsAnyGenerated._null,
  "true": _pureFunctionsAnyGenerated._true,
  replacer: _pureFunctionsAnyGenerated.replacer,
  i: _pureFunctionsAnyGenerated.i,
  LN10: _pureFunctionsAnyGenerated.LN10,
  LOG10E: _pureFunctionsAnyGenerated.LOG10E,
  NaN: _pureFunctionsAnyGenerated._NaN,
  pi: _pureFunctionsAnyGenerated.pi,
  SQRT1_2: _pureFunctionsAnyGenerated.SQRT1_2,
  tau: _pureFunctionsAnyGenerated.tau,
  efimovFactor: _pureFunctionsAnyGenerated.efimovFactor,
  fineStructure: _pureFunctionsAnyGenerated.fineStructure,
  sackurTetrode: _pureFunctionsAnyGenerated.sackurTetrode,
  weakMixingAngle: _pureFunctionsAnyGenerated.weakMixingAngle,
  e: _pureFunctionsAnyGenerated.e,
  Infinity: _pureFunctionsAnyGenerated._Infinity,
  LOG2E: _pureFunctionsAnyGenerated.LOG2E,
  'PI': _pureFunctionsAnyGenerated.pi,
  version: _pureFunctionsAnyGenerated.version,
  'E': _pureFunctionsAnyGenerated.e,
  phi: _pureFunctionsAnyGenerated.phi,
  typed: _pureFunctionsAnyGenerated.typed,
  isInteger: _pureFunctionsAnyGenerated.isInteger,
  isNumeric: _pureFunctionsAnyGenerated.isNumeric,
  isPositive: _pureFunctionsAnyGenerated.isPositive,
  isNaN: _pureFunctionsAnyGenerated.isNaN,
  equalScalar: _pureFunctionsAnyGenerated.equalScalar,
  number: _pureFunctionsAnyGenerated.number,
  "boolean": _pureFunctionsAnyGenerated["boolean"],
  complex: _pureFunctionsAnyGenerated.complex,
  splitUnit: _pureFunctionsAnyGenerated.splitUnit,
  unaryPlus: _pureFunctionsAnyGenerated.unaryPlus,
  apply: _pureFunctionsAnyGenerated.apply,
  cube: _pureFunctionsAnyGenerated.cube,
  expm1: _pureFunctionsAnyGenerated.expm1,
  log10: _pureFunctionsAnyGenerated.log10,
  multiplyScalar: _pureFunctionsAnyGenerated.multiplyScalar,
  sign: _pureFunctionsAnyGenerated.sign,
  square: _pureFunctionsAnyGenerated.square,
  bitNot: _pureFunctionsAnyGenerated.bitNot,
  arg: _pureFunctionsAnyGenerated.arg,
  im: _pureFunctionsAnyGenerated.im,
  not: _pureFunctionsAnyGenerated.not,
  filter: _pureFunctionsAnyGenerated.filter,
  forEach: _pureFunctionsAnyGenerated.forEach,
  map: _pureFunctionsAnyGenerated.map,
  erf: _pureFunctionsAnyGenerated.erf,
  format: _pureFunctionsAnyGenerated.format,
  oct: _pureFunctionsAnyGenerated.oct,
  print: _pureFunctionsAnyGenerated.print,
  isPrime: _pureFunctionsAnyGenerated.isPrime,
  acos: _pureFunctionsAnyGenerated.acos,
  acot: _pureFunctionsAnyGenerated.acot,
  acsc: _pureFunctionsAnyGenerated.acsc,
  asec: _pureFunctionsAnyGenerated.asec,
  asin: _pureFunctionsAnyGenerated.asin,
  atan: _pureFunctionsAnyGenerated.atan,
  atanh: _pureFunctionsAnyGenerated.atanh,
  cosh: _pureFunctionsAnyGenerated.cosh,
  coth: _pureFunctionsAnyGenerated.coth,
  csch: _pureFunctionsAnyGenerated.csch,
  sech: _pureFunctionsAnyGenerated.sech,
  sinh: _pureFunctionsAnyGenerated.sinh,
  tanh: _pureFunctionsAnyGenerated.tanh,
  chain: chain,
  combinations: _pureFunctionsAnyGenerated.combinations,
  pickRandom: _pureFunctionsAnyGenerated.pickRandom,
  randomInt: _pureFunctionsAnyGenerated.randomInt,
  LN2: _pureFunctionsAnyGenerated.LN2,
  clone: _pureFunctionsAnyGenerated.clone,
  hasNumericValue: _pureFunctionsAnyGenerated.hasNumericValue,
  typeOf: _pureFunctionsAnyGenerated.typeOf,
  string: _pureFunctionsAnyGenerated.string,
  fraction: _pureFunctionsAnyGenerated.fraction,
  unaryMinus: _pureFunctionsAnyGenerated.unaryMinus,
  addScalar: _pureFunctionsAnyGenerated.addScalar,
  exp: _pureFunctionsAnyGenerated.exp,
  log2: _pureFunctionsAnyGenerated.log2,
  sqrt: _pureFunctionsAnyGenerated.sqrt,
  conj: _pureFunctionsAnyGenerated.conj,
  getMatrixDataType: _pureFunctionsAnyGenerated.getMatrixDataType,
  mode: _pureFunctionsAnyGenerated.mode,
  bin: _pureFunctionsAnyGenerated.bin,
  acosh: _pureFunctionsAnyGenerated.acosh,
  acsch: _pureFunctionsAnyGenerated.acsch,
  asinh: _pureFunctionsAnyGenerated.asinh,
  cos: _pureFunctionsAnyGenerated.cos,
  csc: _pureFunctionsAnyGenerated.csc,
  sin: _pureFunctionsAnyGenerated.sin,
  combinationsWithRep: _pureFunctionsAnyGenerated.combinationsWithRep,
  random: _pureFunctionsAnyGenerated.random,
  SQRT2: _pureFunctionsAnyGenerated.SQRT2,
  isNegative: _pureFunctionsAnyGenerated.isNegative,
  matrix: _pureFunctionsAnyGenerated.matrix,
  abs: _pureFunctionsAnyGenerated.abs,
  gcd: _pureFunctionsAnyGenerated.gcd,
  mod: _pureFunctionsAnyGenerated.mod,
  nthRoot: _pureFunctionsAnyGenerated.nthRoot,
  xgcd: _pureFunctionsAnyGenerated.xgcd,
  bitAnd: _pureFunctionsAnyGenerated.bitAnd,
  bitXor: _pureFunctionsAnyGenerated.bitXor,
  or: _pureFunctionsAnyGenerated.or,
  concat: _pureFunctionsAnyGenerated.concat,
  diag: _pureFunctionsAnyGenerated.diag,
  identity: _pureFunctionsAnyGenerated.identity,
  ones: _pureFunctionsAnyGenerated.ones,
  reshape: _pureFunctionsAnyGenerated.reshape,
  size: _pureFunctionsAnyGenerated.size,
  subset: _pureFunctionsAnyGenerated.subset,
  zeros: _pureFunctionsAnyGenerated.zeros,
  hex: _pureFunctionsAnyGenerated.hex,
  round: _pureFunctionsAnyGenerated.round,
  leftShift: _pureFunctionsAnyGenerated.leftShift,
  rightLogShift: _pureFunctionsAnyGenerated.rightLogShift,
  compare: _pureFunctionsAnyGenerated.compare,
  compareText: _pureFunctionsAnyGenerated.compareText,
  smaller: _pureFunctionsAnyGenerated.smaller,
  larger: _pureFunctionsAnyGenerated.larger,
  unequal: _pureFunctionsAnyGenerated.unequal,
  sparse: _pureFunctionsAnyGenerated.sparse,
  acoth: _pureFunctionsAnyGenerated.acoth,
  atan2: _pureFunctionsAnyGenerated.atan2,
  sec: _pureFunctionsAnyGenerated.sec,
  add: _pureFunctionsAnyGenerated.add,
  dot: _pureFunctionsAnyGenerated.dot,
  composition: _pureFunctionsAnyGenerated.composition,
  isZero: _pureFunctionsAnyGenerated.isZero,
  matrixFromFunction: _pureFunctionsAnyGenerated.matrixFromFunction,
  cbrt: _pureFunctionsAnyGenerated.cbrt,
  floor: _pureFunctionsAnyGenerated.floor,
  multiply: _pureFunctionsAnyGenerated.multiply,
  dotMultiply: _pureFunctionsAnyGenerated.dotMultiply,
  re: _pureFunctionsAnyGenerated.re,
  flatten: _pureFunctionsAnyGenerated.flatten,
  resize: _pureFunctionsAnyGenerated.resize,
  squeeze: _pureFunctionsAnyGenerated.squeeze,
  to: _pureFunctionsAnyGenerated.to,
  pow: _pureFunctionsAnyGenerated.pow,
  dotPow: _pureFunctionsAnyGenerated.dotPow,
  rightArithShift: _pureFunctionsAnyGenerated.rightArithShift,
  compareNatural: _pureFunctionsAnyGenerated.compareNatural,
  equalText: _pureFunctionsAnyGenerated.equalText,
  largerEq: _pureFunctionsAnyGenerated.largerEq,
  partitionSelect: _pureFunctionsAnyGenerated.partitionSelect,
  asech: _pureFunctionsAnyGenerated.asech,
  tan: _pureFunctionsAnyGenerated.tan,
  setDifference: _pureFunctionsAnyGenerated.setDifference,
  setIntersect: _pureFunctionsAnyGenerated.setIntersect,
  setMultiplicity: _pureFunctionsAnyGenerated.setMultiplicity,
  setSize: _pureFunctionsAnyGenerated.setSize,
  trace: _pureFunctionsAnyGenerated.trace,
  quantileSeq: _pureFunctionsAnyGenerated.quantileSeq,
  gamma: _pureFunctionsAnyGenerated.gamma,
  bignumber: _pureFunctionsAnyGenerated.bignumber,
  matrixFromColumns: _pureFunctionsAnyGenerated.matrixFromColumns,
  lcm: _pureFunctionsAnyGenerated.lcm,
  bitOr: _pureFunctionsAnyGenerated.bitOr,
  kron: _pureFunctionsAnyGenerated.kron,
  transpose: _pureFunctionsAnyGenerated.transpose,
  numeric: _pureFunctionsAnyGenerated.numeric,
  and: _pureFunctionsAnyGenerated.and,
  smallerEq: _pureFunctionsAnyGenerated.smallerEq,
  sort: _pureFunctionsAnyGenerated.sort,
  min: _pureFunctionsAnyGenerated.min,
  cot: _pureFunctionsAnyGenerated.cot,
  setDistinct: _pureFunctionsAnyGenerated.setDistinct,
  setPowerset: _pureFunctionsAnyGenerated.setPowerset,
  index: _pureFunctionsAnyGenerated.index,
  sum: _pureFunctionsAnyGenerated.sum,
  factorial: _pureFunctionsAnyGenerated.factorial,
  permutations: _pureFunctionsAnyGenerated.permutations,
  matrixFromRows: _pureFunctionsAnyGenerated.matrixFromRows,
  subtract: _pureFunctionsAnyGenerated.subtract,
  cross: _pureFunctionsAnyGenerated.cross,
  range: _pureFunctionsAnyGenerated.range,
  row: _pureFunctionsAnyGenerated.row,
  prod: _pureFunctionsAnyGenerated.prod,
  equal: _pureFunctionsAnyGenerated.equal,
  max: _pureFunctionsAnyGenerated.max,
  setCartesian: _pureFunctionsAnyGenerated.setCartesian,
  setSymDifference: _pureFunctionsAnyGenerated.setSymDifference,
  ceil: _pureFunctionsAnyGenerated.ceil,
  xor: _pureFunctionsAnyGenerated.xor,
  count: _pureFunctionsAnyGenerated.count,
  ctranspose: _pureFunctionsAnyGenerated.ctranspose,
  deepEqual: _pureFunctionsAnyGenerated.deepEqual,
  setIsSubset: _pureFunctionsAnyGenerated.setIsSubset,
  fix: _pureFunctionsAnyGenerated.fix,
  diff: _pureFunctionsAnyGenerated.diff,
  divideScalar: _pureFunctionsAnyGenerated.divideScalar,
  nthRoots: _pureFunctionsAnyGenerated.nthRoots,
  lsolve: _pureFunctionsAnyGenerated.lsolve,
  lsolveAll: _pureFunctionsAnyGenerated.lsolveAll,
  setUnion: _pureFunctionsAnyGenerated.setUnion,
  lup: _pureFunctionsAnyGenerated.lup,
  slu: _pureFunctionsAnyGenerated.slu,
  det: _pureFunctionsAnyGenerated.det,
  distance: _pureFunctionsAnyGenerated.distance,
  stirlingS2: _pureFunctionsAnyGenerated.stirlingS2,
  catalan: _pureFunctionsAnyGenerated.catalan,
  column: _pureFunctionsAnyGenerated.column,
  log: _pureFunctionsAnyGenerated.log,
  dotDivide: _pureFunctionsAnyGenerated.dotDivide,
  usolveAll: _pureFunctionsAnyGenerated.usolveAll,
  hypot: _pureFunctionsAnyGenerated.hypot,
  qr: _pureFunctionsAnyGenerated.qr,
  inv: _pureFunctionsAnyGenerated.inv,
  expm: _pureFunctionsAnyGenerated.expm,
  divide: _pureFunctionsAnyGenerated.divide,
  mean: _pureFunctionsAnyGenerated.mean,
  variance: _pureFunctionsAnyGenerated.variance,
  kldivergence: _pureFunctionsAnyGenerated.kldivergence,
  bellNumbers: _pureFunctionsAnyGenerated.bellNumbers,
  log1p: _pureFunctionsAnyGenerated.log1p,
  createUnit: _pureFunctionsAnyGenerated.createUnit,
  sqrtm: _pureFunctionsAnyGenerated.sqrtm,
  median: _pureFunctionsAnyGenerated.median,
  std: _pureFunctionsAnyGenerated.std,
  atomicMass: _pureFunctionsAnyGenerated.atomicMass,
  bohrMagneton: _pureFunctionsAnyGenerated.bohrMagneton,
  boltzmann: _pureFunctionsAnyGenerated.boltzmann,
  conductanceQuantum: _pureFunctionsAnyGenerated.conductanceQuantum,
  deuteronMass: _pureFunctionsAnyGenerated.deuteronMass,
  electronMass: _pureFunctionsAnyGenerated.electronMass,
  faraday: _pureFunctionsAnyGenerated.faraday,
  firstRadiation: _pureFunctionsAnyGenerated.firstRadiation,
  gravitationConstant: _pureFunctionsAnyGenerated.gravitationConstant,
  hartreeEnergy: _pureFunctionsAnyGenerated.hartreeEnergy,
  klitzing: _pureFunctionsAnyGenerated.klitzing,
  magneticConstant: _pureFunctionsAnyGenerated.magneticConstant,
  molarMass: _pureFunctionsAnyGenerated.molarMass,
  molarPlanckConstant: _pureFunctionsAnyGenerated.molarPlanckConstant,
  neutronMass: _pureFunctionsAnyGenerated.neutronMass,
  planckCharge: _pureFunctionsAnyGenerated.planckCharge,
  planckLength: _pureFunctionsAnyGenerated.planckLength,
  planckTemperature: _pureFunctionsAnyGenerated.planckTemperature,
  protonMass: _pureFunctionsAnyGenerated.protonMass,
  reducedPlanckConstant: _pureFunctionsAnyGenerated.reducedPlanckConstant,
  secondRadiation: _pureFunctionsAnyGenerated.secondRadiation,
  stefanBoltzmann: _pureFunctionsAnyGenerated.stefanBoltzmann,
  vacuumImpedance: _pureFunctionsAnyGenerated.vacuumImpedance,
  usolve: _pureFunctionsAnyGenerated.usolve,
  lusolve: _pureFunctionsAnyGenerated.lusolve,
  eigs: _pureFunctionsAnyGenerated.eigs,
  mad: _pureFunctionsAnyGenerated.mad,
  avogadro: _pureFunctionsAnyGenerated.avogadro,
  classicalElectronRadius: _pureFunctionsAnyGenerated.classicalElectronRadius,
  electricConstant: _pureFunctionsAnyGenerated.electricConstant,
  fermiCoupling: _pureFunctionsAnyGenerated.fermiCoupling,
  gravity: _pureFunctionsAnyGenerated.gravity,
  loschmidt: _pureFunctionsAnyGenerated.loschmidt,
  molarMassC12: _pureFunctionsAnyGenerated.molarMassC12,
  nuclearMagneton: _pureFunctionsAnyGenerated.nuclearMagneton,
  planckMass: _pureFunctionsAnyGenerated.planckMass,
  quantumOfCirculation: _pureFunctionsAnyGenerated.quantumOfCirculation,
  speedOfLight: _pureFunctionsAnyGenerated.speedOfLight,
  wienDisplacement: _pureFunctionsAnyGenerated.wienDisplacement,
  unit: _pureFunctionsAnyGenerated.unit,
  parse: parse,
  evaluate: evaluate,
  intersect: _pureFunctionsAnyGenerated.intersect,
  simplify: simplify,
  rationalize: rationalize,
  coulomb: _pureFunctionsAnyGenerated.coulomb,
  gasConstant: _pureFunctionsAnyGenerated.gasConstant,
  magneticFluxQuantum: _pureFunctionsAnyGenerated.magneticFluxQuantum,
  planckConstant: _pureFunctionsAnyGenerated.planckConstant,
  rydberg: _pureFunctionsAnyGenerated.rydberg,
  norm: _pureFunctionsAnyGenerated.norm,
  help: help,
  derivative: derivative,
  elementaryCharge: _pureFunctionsAnyGenerated.elementaryCharge,
  molarVolume: _pureFunctionsAnyGenerated.molarVolume,
  thomsonCrossSection: _pureFunctionsAnyGenerated.thomsonCrossSection,
  rotationMatrix: _pureFunctionsAnyGenerated.rotationMatrix,
  parser: parser,
  bohrRadius: _pureFunctionsAnyGenerated.bohrRadius,
  planckTime: _pureFunctionsAnyGenerated.planckTime,
  rotate: _pureFunctionsAnyGenerated.rotate,
  multinomial: _pureFunctionsAnyGenerated.multinomial,
  compile: compile,
  inverseConductanceQuantum: _pureFunctionsAnyGenerated.inverseConductanceQuantum,
  config: _configReadonly.config
});
(0, _extends2["default"])(mathWithTransform, math, {
  apply: (0, _factoriesAny.createApplyTransform)({
    isInteger: _pureFunctionsAnyGenerated.isInteger,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  filter: (0, _factoriesAny.createFilterTransform)({
    typed: _pureFunctionsAnyGenerated.typed
  }),
  map: (0, _factoriesAny.createMapTransform)({
    typed: _pureFunctionsAnyGenerated.typed
  }),
  forEach: (0, _factoriesAny.createForEachTransform)({
    typed: _pureFunctionsAnyGenerated.typed
  }),
  subset: (0, _factoriesAny.createSubsetTransform)({
    matrix: _pureFunctionsAnyGenerated.matrix,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  index: (0, _factoriesAny.createIndexTransform)({
    Index: _pureFunctionsAnyGenerated.Index
  }),
  concat: (0, _factoriesAny.createConcatTransform)({
    isInteger: _pureFunctionsAnyGenerated.isInteger,
    matrix: _pureFunctionsAnyGenerated.matrix,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  max: (0, _factoriesAny.createMaxTransform)({
    config: _configReadonly.config,
    larger: _pureFunctionsAnyGenerated.larger,
    numeric: _pureFunctionsAnyGenerated.numeric,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  min: (0, _factoriesAny.createMinTransform)({
    config: _configReadonly.config,
    numeric: _pureFunctionsAnyGenerated.numeric,
    smaller: _pureFunctionsAnyGenerated.smaller,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  sum: (0, _factoriesAny.createSumTransform)({
    add: _pureFunctionsAnyGenerated.add,
    config: _configReadonly.config,
    numeric: _pureFunctionsAnyGenerated.numeric,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  column: (0, _factoriesAny.createColumnTransform)({
    Index: _pureFunctionsAnyGenerated.Index,
    matrix: _pureFunctionsAnyGenerated.matrix,
    range: _pureFunctionsAnyGenerated.range,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  range: (0, _factoriesAny.createRangeTransform)({
    bignumber: _pureFunctionsAnyGenerated.bignumber,
    matrix: _pureFunctionsAnyGenerated.matrix,
    config: _configReadonly.config,
    larger: _pureFunctionsAnyGenerated.larger,
    largerEq: _pureFunctionsAnyGenerated.largerEq,
    smaller: _pureFunctionsAnyGenerated.smaller,
    smallerEq: _pureFunctionsAnyGenerated.smallerEq,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  diff: (0, _factoriesAny.createDiffTransform)({
    bignumber: _pureFunctionsAnyGenerated.bignumber,
    matrix: _pureFunctionsAnyGenerated.matrix,
    number: _pureFunctionsAnyGenerated.number,
    subtract: _pureFunctionsAnyGenerated.subtract,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  row: (0, _factoriesAny.createRowTransform)({
    Index: _pureFunctionsAnyGenerated.Index,
    matrix: _pureFunctionsAnyGenerated.matrix,
    range: _pureFunctionsAnyGenerated.range,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  mean: (0, _factoriesAny.createMeanTransform)({
    add: _pureFunctionsAnyGenerated.add,
    divide: _pureFunctionsAnyGenerated.divide,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  variance: (0, _factoriesAny.createVarianceTransform)({
    add: _pureFunctionsAnyGenerated.add,
    apply: _pureFunctionsAnyGenerated.apply,
    divide: _pureFunctionsAnyGenerated.divide,
    isNaN: _pureFunctionsAnyGenerated.isNaN,
    multiply: _pureFunctionsAnyGenerated.multiply,
    subtract: _pureFunctionsAnyGenerated.subtract,
    typed: _pureFunctionsAnyGenerated.typed
  }),
  std: (0, _factoriesAny.createStdTransform)({
    sqrt: _pureFunctionsAnyGenerated.sqrt,
    typed: _pureFunctionsAnyGenerated.typed,
    variance: _pureFunctionsAnyGenerated.variance
  })
});
(0, _extends2["default"])(classes, {
  ResultSet: _pureFunctionsAnyGenerated.ResultSet,
  Complex: _pureFunctionsAnyGenerated.Complex,
  Range: _pureFunctionsAnyGenerated.Range,
  Node: Node,
  ArrayNode: ArrayNode,
  BlockNode: BlockNode,
  ConstantNode: ConstantNode,
  ObjectNode: ObjectNode,
  ParenthesisNode: ParenthesisNode,
  RelationalNode: RelationalNode,
  Chain: Chain,
  BigNumber: _pureFunctionsAnyGenerated.BigNumber,
  Matrix: _pureFunctionsAnyGenerated.Matrix,
  ConditionalNode: ConditionalNode,
  OperatorNode: OperatorNode,
  Fraction: _pureFunctionsAnyGenerated.Fraction,
  RangeNode: RangeNode,
  DenseMatrix: _pureFunctionsAnyGenerated.DenseMatrix,
  FunctionAssignmentNode: FunctionAssignmentNode,
  SparseMatrix: _pureFunctionsAnyGenerated.SparseMatrix,
  ImmutableDenseMatrix: _pureFunctionsAnyGenerated.ImmutableDenseMatrix,
  FibonacciHeap: _pureFunctionsAnyGenerated.FibonacciHeap,
  AccessorNode: AccessorNode,
  IndexNode: IndexNode,
  Index: _pureFunctionsAnyGenerated.Index,
  AssignmentNode: AssignmentNode,
  Spa: _pureFunctionsAnyGenerated.Spa,
  Unit: _pureFunctionsAnyGenerated.Unit,
  SymbolNode: SymbolNode,
  FunctionNode: FunctionNode,
  Help: Help,
  Parser: Parser
});
Chain.createProxy(math);

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/mainAny.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/mainAny.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var _exportNames = {
  config: true,
  IndexError: true,
  DimensionError: true,
  ArgumentsError: true,
  create: true,
  factory: true
};
Object.defineProperty(exports, "config", ({
  enumerable: true,
  get: function get() {
    return _configReadonly.config;
  }
}));
Object.defineProperty(exports, "IndexError", ({
  enumerable: true,
  get: function get() {
    return _IndexError.IndexError;
  }
}));
Object.defineProperty(exports, "DimensionError", ({
  enumerable: true,
  get: function get() {
    return _DimensionError.DimensionError;
  }
}));
Object.defineProperty(exports, "ArgumentsError", ({
  enumerable: true,
  get: function get() {
    return _ArgumentsError.ArgumentsError;
  }
}));
Object.defineProperty(exports, "create", ({
  enumerable: true,
  get: function get() {
    return _create.create;
  }
}));
Object.defineProperty(exports, "factory", ({
  enumerable: true,
  get: function get() {
    return _factory.factory;
  }
}));

var _configReadonly = __webpack_require__(/*! ./configReadonly.js */ "./node_modules/mathjs/lib/cjs/entry/configReadonly.js");

var _pureFunctionsAnyGenerated = __webpack_require__(/*! ./pureFunctionsAny.generated.js */ "./node_modules/mathjs/lib/cjs/entry/pureFunctionsAny.generated.js");

Object.keys(_pureFunctionsAnyGenerated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _pureFunctionsAnyGenerated[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _pureFunctionsAnyGenerated[key];
    }
  });
});

var _impureFunctionsAnyGenerated = __webpack_require__(/*! ./impureFunctionsAny.generated.js */ "./node_modules/mathjs/lib/cjs/entry/impureFunctionsAny.generated.js");

Object.keys(_impureFunctionsAnyGenerated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _impureFunctionsAnyGenerated[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _impureFunctionsAnyGenerated[key];
    }
  });
});

var _typeChecks = __webpack_require__(/*! ./typeChecks.js */ "./node_modules/mathjs/lib/cjs/entry/typeChecks.js");

Object.keys(_typeChecks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _typeChecks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _typeChecks[key];
    }
  });
});

var _IndexError = __webpack_require__(/*! ../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

var _DimensionError = __webpack_require__(/*! ../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _ArgumentsError = __webpack_require__(/*! ../error/ArgumentsError.js */ "./node_modules/mathjs/lib/cjs/error/ArgumentsError.js");

var _dependenciesAnyGenerated = __webpack_require__(/*! ./dependenciesAny.generated.js */ "./node_modules/mathjs/lib/cjs/entry/dependenciesAny.generated.js");

Object.keys(_dependenciesAnyGenerated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _dependenciesAnyGenerated[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _dependenciesAnyGenerated[key];
    }
  });
});

var _factoriesAny = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

Object.keys(_factoriesAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _factoriesAny[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _factoriesAny[key];
    }
  });
});

var _create = __webpack_require__(/*! ../core/create.js */ "./node_modules/mathjs/lib/cjs/core/create.js");

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/pureFunctionsAny.generated.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/pureFunctionsAny.generated.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrix = exports.SparseMatrix = exports.isNegative = exports.SQRT2 = exports.random = exports.combinationsWithRep = exports.sin = exports.csc = exports.cos = exports.asinh = exports.acsch = exports.acosh = exports.bin = exports.mode = exports.getMatrixDataType = exports.conj = exports.sqrt = exports.log2 = exports.exp = exports.addScalar = exports.unaryMinus = exports.fraction = exports.string = exports.typeOf = exports.hasNumericValue = exports.clone = exports.LN2 = exports.randomInt = exports.pickRandom = exports.combinations = exports.tanh = exports.sinh = exports.sech = exports.csch = exports.coth = exports.cosh = exports.atanh = exports.atan = exports.asin = exports.asec = exports.acsc = exports.acot = exports.acos = exports.isPrime = exports.print = exports.oct = exports.format = exports.erf = exports.map = exports.forEach = exports.filter = exports.not = exports.im = exports.arg = exports.bitNot = exports.square = exports.sign = exports.multiplyScalar = exports.log10 = exports.expm1 = exports.cube = exports.apply = exports.unaryPlus = exports.splitUnit = exports.complex = exports.boolean = exports.number = exports.equalScalar = exports.isNaN = exports.isPositive = exports.isNumeric = exports.isInteger = exports.typed = exports.phi = exports.DenseMatrix = exports.version = exports.LOG2E = exports._Infinity = exports.e = exports.Fraction = exports.weakMixingAngle = exports.sackurTetrode = exports.fineStructure = exports.efimovFactor = exports.tau = exports.SQRT1_2 = exports.pi = exports._NaN = exports.LOG10E = exports.LN10 = exports.i = exports.replacer = exports.Matrix = exports.BigNumber = exports._true = exports._null = exports._false = exports.Range = exports.Complex = exports.ResultSet = void 0;
exports.nthRoots = exports.divideScalar = exports.diff = exports.fix = exports.setIsSubset = exports.deepEqual = exports.ctranspose = exports.count = exports.xor = exports.ceil = exports.setSymDifference = exports.setCartesian = exports.max = exports.equal = exports.prod = exports.row = exports.range = exports.cross = exports.subtract = exports.matrixFromRows = exports.permutations = exports.factorial = exports.sum = exports.index = exports.setPowerset = exports.setDistinct = exports.cot = exports.min = exports.sort = exports.smallerEq = exports.and = exports.numeric = exports.transpose = exports.kron = exports.bitOr = exports.lcm = exports.matrixFromColumns = exports.bignumber = exports.gamma = exports.quantileSeq = exports.trace = exports.setSize = exports.setMultiplicity = exports.setIntersect = exports.setDifference = exports.tan = exports.asech = exports.Index = exports.partitionSelect = exports.largerEq = exports.equalText = exports.compareNatural = exports.rightArithShift = exports.dotPow = exports.pow = exports.to = exports.squeeze = exports.resize = exports.flatten = exports.re = exports.dotMultiply = exports.multiply = exports.floor = exports.cbrt = exports.matrixFromFunction = exports.isZero = exports.composition = exports.dot = exports.add = exports.sec = exports.atan2 = exports.acoth = exports.sparse = exports.FibonacciHeap = exports.ImmutableDenseMatrix = exports.unequal = exports.larger = exports.smaller = exports.compareText = exports.compare = exports.rightLogShift = exports.leftShift = exports.round = exports.hex = exports.zeros = exports.subset = exports.size = exports.reshape = exports.ones = exports.identity = exports.diag = exports.concat = exports.or = exports.bitXor = exports.bitAnd = exports.xgcd = exports.nthRoot = exports.mod = exports.gcd = exports.abs = void 0;
exports.inverseConductanceQuantum = exports.multinomial = exports.rotate = exports.planckTime = exports.bohrRadius = exports.rotationMatrix = exports.thomsonCrossSection = exports.molarVolume = exports.elementaryCharge = exports.norm = exports.rydberg = exports.planckConstant = exports.magneticFluxQuantum = exports.gasConstant = exports.coulomb = exports.intersect = exports.unit = exports.wienDisplacement = exports.speedOfLight = exports.quantumOfCirculation = exports.planckMass = exports.nuclearMagneton = exports.molarMassC12 = exports.loschmidt = exports.gravity = exports.fermiCoupling = exports.electricConstant = exports.classicalElectronRadius = exports.avogadro = exports.mad = exports.eigs = exports.lusolve = exports.usolve = exports.vacuumImpedance = exports.stefanBoltzmann = exports.secondRadiation = exports.reducedPlanckConstant = exports.protonMass = exports.planckTemperature = exports.planckLength = exports.planckCharge = exports.neutronMass = exports.molarPlanckConstant = exports.molarMass = exports.magneticConstant = exports.klitzing = exports.hartreeEnergy = exports.gravitationConstant = exports.firstRadiation = exports.faraday = exports.electronMass = exports.deuteronMass = exports.conductanceQuantum = exports.boltzmann = exports.bohrMagneton = exports.atomicMass = exports.std = exports.median = exports.sqrtm = exports.createUnit = exports.Unit = exports.log1p = exports.bellNumbers = exports.kldivergence = exports.variance = exports.mean = exports.divide = exports.expm = exports.inv = exports.qr = exports.hypot = exports.usolveAll = exports.dotDivide = exports.log = exports.column = exports.catalan = exports.stirlingS2 = exports.distance = exports.det = exports.slu = exports.lup = exports.setUnion = exports.Spa = exports.lsolveAll = exports.lsolve = void 0;

var _configReadonly = __webpack_require__(/*! ./configReadonly.js */ "./node_modules/mathjs/lib/cjs/entry/configReadonly.js");

var _factoriesAny = __webpack_require__(/*! ../factoriesAny.js */ "./node_modules/mathjs/lib/cjs/factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ResultSet = /* #__PURE__ */(0, _factoriesAny.createResultSet)({});
exports.ResultSet = ResultSet;
var Complex = /* #__PURE__ */(0, _factoriesAny.createComplexClass)({});
exports.Complex = Complex;
var Range = /* #__PURE__ */(0, _factoriesAny.createRangeClass)({});
exports.Range = Range;

var _false = /* #__PURE__ */(0, _factoriesAny.createFalse)({});

exports._false = _false;

var _null = /* #__PURE__ */(0, _factoriesAny.createNull)({});

exports._null = _null;

var _true = /* #__PURE__ */(0, _factoriesAny.createTrue)({});

exports._true = _true;
var BigNumber = /* #__PURE__ */(0, _factoriesAny.createBigNumberClass)({
  config: _configReadonly.config
});
exports.BigNumber = BigNumber;
var Matrix = /* #__PURE__ */(0, _factoriesAny.createMatrixClass)({});
exports.Matrix = Matrix;
var replacer = /* #__PURE__ */(0, _factoriesAny.createReplacer)({});
exports.replacer = replacer;
var i = /* #__PURE__ */(0, _factoriesAny.createI)({
  Complex: Complex
});
exports.i = i;
var LN10 = /* #__PURE__ */(0, _factoriesAny.createLN10)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.LN10 = LN10;
var LOG10E = /* #__PURE__ */(0, _factoriesAny.createLOG10E)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.LOG10E = LOG10E;

var _NaN = /* #__PURE__ */(0, _factoriesAny.createNaN)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});

exports._NaN = _NaN;
var pi = /* #__PURE__ */(0, _factoriesAny.createPi)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.pi = pi;
var SQRT1_2 = /* #__PURE__ */(0, _factoriesAny.createSQRT1_2)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.SQRT1_2 = SQRT1_2;
var tau = /* #__PURE__ */(0, _factoriesAny.createTau)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.tau = tau;
var efimovFactor = /* #__PURE__ */(0, _factoriesAny.createEfimovFactor)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.efimovFactor = efimovFactor;
var fineStructure = /* #__PURE__ */(0, _factoriesAny.createFineStructure)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.fineStructure = fineStructure;
var sackurTetrode = /* #__PURE__ */(0, _factoriesAny.createSackurTetrode)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.sackurTetrode = sackurTetrode;
var weakMixingAngle = /* #__PURE__ */(0, _factoriesAny.createWeakMixingAngle)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.weakMixingAngle = weakMixingAngle;
var Fraction = /* #__PURE__ */(0, _factoriesAny.createFractionClass)({});
exports.Fraction = Fraction;
var e = /* #__PURE__ */(0, _factoriesAny.createE)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.e = e;

var _Infinity = /* #__PURE__ */(0, _factoriesAny.createInfinity)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});

exports._Infinity = _Infinity;
var LOG2E = /* #__PURE__ */(0, _factoriesAny.createLOG2E)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.LOG2E = LOG2E;
var version = /* #__PURE__ */(0, _factoriesAny.createVersion)({});
exports.version = version;
var DenseMatrix = /* #__PURE__ */(0, _factoriesAny.createDenseMatrixClass)({
  Matrix: Matrix
});
exports.DenseMatrix = DenseMatrix;
var phi = /* #__PURE__ */(0, _factoriesAny.createPhi)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.phi = phi;
var typed = /* #__PURE__ */(0, _factoriesAny.createTyped)({
  BigNumber: BigNumber,
  Complex: Complex,
  DenseMatrix: DenseMatrix,
  Fraction: Fraction
});
exports.typed = typed;
var isInteger = /* #__PURE__ */(0, _factoriesAny.createIsInteger)({
  typed: typed
});
exports.isInteger = isInteger;
var isNumeric = /* #__PURE__ */(0, _factoriesAny.createIsNumeric)({
  typed: typed
});
exports.isNumeric = isNumeric;
var isPositive = /* #__PURE__ */(0, _factoriesAny.createIsPositive)({
  typed: typed
});
exports.isPositive = isPositive;
var isNaN = /* #__PURE__ */(0, _factoriesAny.createIsNaN)({
  typed: typed
});
exports.isNaN = isNaN;
var equalScalar = /* #__PURE__ */(0, _factoriesAny.createEqualScalar)({
  config: _configReadonly.config,
  typed: typed
});
exports.equalScalar = equalScalar;
var number = /* #__PURE__ */(0, _factoriesAny.createNumber)({
  typed: typed
});
exports.number = number;

var _boolean = /* #__PURE__ */(0, _factoriesAny.createBoolean)({
  typed: typed
});

exports.boolean = _boolean;
var complex = /* #__PURE__ */(0, _factoriesAny.createComplex)({
  Complex: Complex,
  typed: typed
});
exports.complex = complex;
var splitUnit = /* #__PURE__ */(0, _factoriesAny.createSplitUnit)({
  typed: typed
});
exports.splitUnit = splitUnit;
var unaryPlus = /* #__PURE__ */(0, _factoriesAny.createUnaryPlus)({
  BigNumber: BigNumber,
  config: _configReadonly.config,
  typed: typed
});
exports.unaryPlus = unaryPlus;
var apply = /* #__PURE__ */(0, _factoriesAny.createApply)({
  isInteger: isInteger,
  typed: typed
});
exports.apply = apply;
var cube = /* #__PURE__ */(0, _factoriesAny.createCube)({
  typed: typed
});
exports.cube = cube;
var expm1 = /* #__PURE__ */(0, _factoriesAny.createExpm1)({
  Complex: Complex,
  typed: typed
});
exports.expm1 = expm1;
var log10 = /* #__PURE__ */(0, _factoriesAny.createLog10)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.log10 = log10;
var multiplyScalar = /* #__PURE__ */(0, _factoriesAny.createMultiplyScalar)({
  typed: typed
});
exports.multiplyScalar = multiplyScalar;
var sign = /* #__PURE__ */(0, _factoriesAny.createSign)({
  BigNumber: BigNumber,
  Fraction: Fraction,
  complex: complex,
  typed: typed
});
exports.sign = sign;
var square = /* #__PURE__ */(0, _factoriesAny.createSquare)({
  typed: typed
});
exports.square = square;
var bitNot = /* #__PURE__ */(0, _factoriesAny.createBitNot)({
  typed: typed
});
exports.bitNot = bitNot;
var arg = /* #__PURE__ */(0, _factoriesAny.createArg)({
  typed: typed
});
exports.arg = arg;
var im = /* #__PURE__ */(0, _factoriesAny.createIm)({
  typed: typed
});
exports.im = im;
var not = /* #__PURE__ */(0, _factoriesAny.createNot)({
  typed: typed
});
exports.not = not;
var filter = /* #__PURE__ */(0, _factoriesAny.createFilter)({
  typed: typed
});
exports.filter = filter;
var forEach = /* #__PURE__ */(0, _factoriesAny.createForEach)({
  typed: typed
});
exports.forEach = forEach;
var map = /* #__PURE__ */(0, _factoriesAny.createMap)({
  typed: typed
});
exports.map = map;
var erf = /* #__PURE__ */(0, _factoriesAny.createErf)({
  typed: typed
});
exports.erf = erf;
var format = /* #__PURE__ */(0, _factoriesAny.createFormat)({
  typed: typed
});
exports.format = format;
var oct = /* #__PURE__ */(0, _factoriesAny.createOct)({
  format: format,
  typed: typed
});
exports.oct = oct;
var print = /* #__PURE__ */(0, _factoriesAny.createPrint)({
  typed: typed
});
exports.print = print;
var isPrime = /* #__PURE__ */(0, _factoriesAny.createIsPrime)({
  typed: typed
});
exports.isPrime = isPrime;
var acos = /* #__PURE__ */(0, _factoriesAny.createAcos)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.acos = acos;
var acot = /* #__PURE__ */(0, _factoriesAny.createAcot)({
  BigNumber: BigNumber,
  typed: typed
});
exports.acot = acot;
var acsc = /* #__PURE__ */(0, _factoriesAny.createAcsc)({
  BigNumber: BigNumber,
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.acsc = acsc;
var asec = /* #__PURE__ */(0, _factoriesAny.createAsec)({
  BigNumber: BigNumber,
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.asec = asec;
var asin = /* #__PURE__ */(0, _factoriesAny.createAsin)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.asin = asin;
var atan = /* #__PURE__ */(0, _factoriesAny.createAtan)({
  typed: typed
});
exports.atan = atan;
var atanh = /* #__PURE__ */(0, _factoriesAny.createAtanh)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.atanh = atanh;
var cosh = /* #__PURE__ */(0, _factoriesAny.createCosh)({
  typed: typed
});
exports.cosh = cosh;
var coth = /* #__PURE__ */(0, _factoriesAny.createCoth)({
  BigNumber: BigNumber,
  typed: typed
});
exports.coth = coth;
var csch = /* #__PURE__ */(0, _factoriesAny.createCsch)({
  BigNumber: BigNumber,
  typed: typed
});
exports.csch = csch;
var sech = /* #__PURE__ */(0, _factoriesAny.createSech)({
  BigNumber: BigNumber,
  typed: typed
});
exports.sech = sech;
var sinh = /* #__PURE__ */(0, _factoriesAny.createSinh)({
  typed: typed
});
exports.sinh = sinh;
var tanh = /* #__PURE__ */(0, _factoriesAny.createTanh)({
  typed: typed
});
exports.tanh = tanh;
var combinations = /* #__PURE__ */(0, _factoriesAny.createCombinations)({
  typed: typed
});
exports.combinations = combinations;
var pickRandom = /* #__PURE__ */(0, _factoriesAny.createPickRandom)({
  config: _configReadonly.config,
  typed: typed
});
exports.pickRandom = pickRandom;
var randomInt = /* #__PURE__ */(0, _factoriesAny.createRandomInt)({
  config: _configReadonly.config,
  typed: typed
});
exports.randomInt = randomInt;
var LN2 = /* #__PURE__ */(0, _factoriesAny.createLN2)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.LN2 = LN2;
var clone = /* #__PURE__ */(0, _factoriesAny.createClone)({
  typed: typed
});
exports.clone = clone;
var hasNumericValue = /* #__PURE__ */(0, _factoriesAny.createHasNumericValue)({
  isNumeric: isNumeric,
  typed: typed
});
exports.hasNumericValue = hasNumericValue;
var typeOf = /* #__PURE__ */(0, _factoriesAny.createTypeOf)({
  typed: typed
});
exports.typeOf = typeOf;
var string = /* #__PURE__ */(0, _factoriesAny.createString)({
  typed: typed
});
exports.string = string;
var fraction = /* #__PURE__ */(0, _factoriesAny.createFraction)({
  Fraction: Fraction,
  typed: typed
});
exports.fraction = fraction;
var unaryMinus = /* #__PURE__ */(0, _factoriesAny.createUnaryMinus)({
  typed: typed
});
exports.unaryMinus = unaryMinus;
var addScalar = /* #__PURE__ */(0, _factoriesAny.createAddScalar)({
  typed: typed
});
exports.addScalar = addScalar;
var exp = /* #__PURE__ */(0, _factoriesAny.createExp)({
  typed: typed
});
exports.exp = exp;
var log2 = /* #__PURE__ */(0, _factoriesAny.createLog2)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.log2 = log2;
var sqrt = /* #__PURE__ */(0, _factoriesAny.createSqrt)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.sqrt = sqrt;
var conj = /* #__PURE__ */(0, _factoriesAny.createConj)({
  typed: typed
});
exports.conj = conj;
var getMatrixDataType = /* #__PURE__ */(0, _factoriesAny.createGetMatrixDataType)({
  typed: typed
});
exports.getMatrixDataType = getMatrixDataType;
var mode = /* #__PURE__ */(0, _factoriesAny.createMode)({
  isNaN: isNaN,
  isNumeric: isNumeric,
  typed: typed
});
exports.mode = mode;
var bin = /* #__PURE__ */(0, _factoriesAny.createBin)({
  format: format,
  typed: typed
});
exports.bin = bin;
var acosh = /* #__PURE__ */(0, _factoriesAny.createAcosh)({
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.acosh = acosh;
var acsch = /* #__PURE__ */(0, _factoriesAny.createAcsch)({
  BigNumber: BigNumber,
  typed: typed
});
exports.acsch = acsch;
var asinh = /* #__PURE__ */(0, _factoriesAny.createAsinh)({
  typed: typed
});
exports.asinh = asinh;
var cos = /* #__PURE__ */(0, _factoriesAny.createCos)({
  typed: typed
});
exports.cos = cos;
var csc = /* #__PURE__ */(0, _factoriesAny.createCsc)({
  BigNumber: BigNumber,
  typed: typed
});
exports.csc = csc;
var sin = /* #__PURE__ */(0, _factoriesAny.createSin)({
  typed: typed
});
exports.sin = sin;
var combinationsWithRep = /* #__PURE__ */(0, _factoriesAny.createCombinationsWithRep)({
  typed: typed
});
exports.combinationsWithRep = combinationsWithRep;
var random = /* #__PURE__ */(0, _factoriesAny.createRandom)({
  config: _configReadonly.config,
  typed: typed
});
exports.random = random;
var SQRT2 = /* #__PURE__ */(0, _factoriesAny.createSQRT2)({
  BigNumber: BigNumber,
  config: _configReadonly.config
});
exports.SQRT2 = SQRT2;
var isNegative = /* #__PURE__ */(0, _factoriesAny.createIsNegative)({
  typed: typed
});
exports.isNegative = isNegative;
var SparseMatrix = /* #__PURE__ */(0, _factoriesAny.createSparseMatrixClass)({
  Matrix: Matrix,
  equalScalar: equalScalar,
  typed: typed
});
exports.SparseMatrix = SparseMatrix;
var matrix = /* #__PURE__ */(0, _factoriesAny.createMatrix)({
  DenseMatrix: DenseMatrix,
  Matrix: Matrix,
  SparseMatrix: SparseMatrix,
  typed: typed
});
exports.matrix = matrix;
var abs = /* #__PURE__ */(0, _factoriesAny.createAbs)({
  typed: typed
});
exports.abs = abs;
var gcd = /* #__PURE__ */(0, _factoriesAny.createGcd)({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.gcd = gcd;
var mod = /* #__PURE__ */(0, _factoriesAny.createMod)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.mod = mod;
var nthRoot = /* #__PURE__ */(0, _factoriesAny.createNthRoot)({
  BigNumber: BigNumber,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.nthRoot = nthRoot;
var xgcd = /* #__PURE__ */(0, _factoriesAny.createXgcd)({
  BigNumber: BigNumber,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.xgcd = xgcd;
var bitAnd = /* #__PURE__ */(0, _factoriesAny.createBitAnd)({
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.bitAnd = bitAnd;
var bitXor = /* #__PURE__ */(0, _factoriesAny.createBitXor)({
  DenseMatrix: DenseMatrix,
  matrix: matrix,
  typed: typed
});
exports.bitXor = bitXor;
var or = /* #__PURE__ */(0, _factoriesAny.createOr)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.or = or;
var concat = /* #__PURE__ */(0, _factoriesAny.createConcat)({
  isInteger: isInteger,
  matrix: matrix,
  typed: typed
});
exports.concat = concat;
var diag = /* #__PURE__ */(0, _factoriesAny.createDiag)({
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  matrix: matrix,
  typed: typed
});
exports.diag = diag;
var identity = /* #__PURE__ */(0, _factoriesAny.createIdentity)({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.identity = identity;
var ones = /* #__PURE__ */(0, _factoriesAny.createOnes)({
  BigNumber: BigNumber,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.ones = ones;
var reshape = /* #__PURE__ */(0, _factoriesAny.createReshape)({
  isInteger: isInteger,
  matrix: matrix,
  typed: typed
});
exports.reshape = reshape;
var size = /* #__PURE__ */(0, _factoriesAny.createSize)({
  matrix: matrix,
  config: _configReadonly.config,
  typed: typed
});
exports.size = size;
var subset = /* #__PURE__ */(0, _factoriesAny.createSubset)({
  matrix: matrix,
  typed: typed
});
exports.subset = subset;
var zeros = /* #__PURE__ */(0, _factoriesAny.createZeros)({
  BigNumber: BigNumber,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.zeros = zeros;
var hex = /* #__PURE__ */(0, _factoriesAny.createHex)({
  format: format,
  typed: typed
});
exports.hex = hex;
var round = /* #__PURE__ */(0, _factoriesAny.createRound)({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
exports.round = round;
var leftShift = /* #__PURE__ */(0, _factoriesAny.createLeftShift)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
exports.leftShift = leftShift;
var rightLogShift = /* #__PURE__ */(0, _factoriesAny.createRightLogShift)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
exports.rightLogShift = rightLogShift;
var compare = /* #__PURE__ */(0, _factoriesAny.createCompare)({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  Fraction: Fraction,
  config: _configReadonly.config,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.compare = compare;
var compareText = /* #__PURE__ */(0, _factoriesAny.createCompareText)({
  matrix: matrix,
  typed: typed
});
exports.compareText = compareText;
var smaller = /* #__PURE__ */(0, _factoriesAny.createSmaller)({
  DenseMatrix: DenseMatrix,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.smaller = smaller;
var larger = /* #__PURE__ */(0, _factoriesAny.createLarger)({
  DenseMatrix: DenseMatrix,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.larger = larger;
var unequal = /* #__PURE__ */(0, _factoriesAny.createUnequal)({
  DenseMatrix: DenseMatrix,
  config: _configReadonly.config,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.unequal = unequal;
var ImmutableDenseMatrix = /* #__PURE__ */(0, _factoriesAny.createImmutableDenseMatrixClass)({
  DenseMatrix: DenseMatrix,
  smaller: smaller
});
exports.ImmutableDenseMatrix = ImmutableDenseMatrix;
var FibonacciHeap = /* #__PURE__ */(0, _factoriesAny.createFibonacciHeapClass)({
  larger: larger,
  smaller: smaller
});
exports.FibonacciHeap = FibonacciHeap;
var sparse = /* #__PURE__ */(0, _factoriesAny.createSparse)({
  SparseMatrix: SparseMatrix,
  typed: typed
});
exports.sparse = sparse;
var acoth = /* #__PURE__ */(0, _factoriesAny.createAcoth)({
  BigNumber: BigNumber,
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.acoth = acoth;
var atan2 = /* #__PURE__ */(0, _factoriesAny.createAtan2)({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.atan2 = atan2;
var sec = /* #__PURE__ */(0, _factoriesAny.createSec)({
  BigNumber: BigNumber,
  typed: typed
});
exports.sec = sec;
var add = /* #__PURE__ */(0, _factoriesAny.createAdd)({
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  addScalar: addScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.add = add;
var dot = /* #__PURE__ */(0, _factoriesAny.createDot)({
  addScalar: addScalar,
  conj: conj,
  multiplyScalar: multiplyScalar,
  size: size,
  typed: typed
});
exports.dot = dot;
var composition = /* #__PURE__ */(0, _factoriesAny.createComposition)({
  addScalar: addScalar,
  combinations: combinations,
  isInteger: isInteger,
  isNegative: isNegative,
  isPositive: isPositive,
  larger: larger,
  typed: typed
});
exports.composition = composition;
var isZero = /* #__PURE__ */(0, _factoriesAny.createIsZero)({
  typed: typed
});
exports.isZero = isZero;
var matrixFromFunction = /* #__PURE__ */(0, _factoriesAny.createMatrixFromFunction)({
  isZero: isZero,
  matrix: matrix,
  typed: typed
});
exports.matrixFromFunction = matrixFromFunction;
var cbrt = /* #__PURE__ */(0, _factoriesAny.createCbrt)({
  BigNumber: BigNumber,
  Complex: Complex,
  Fraction: Fraction,
  config: _configReadonly.config,
  isNegative: isNegative,
  matrix: matrix,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.cbrt = cbrt;
var floor = /* #__PURE__ */(0, _factoriesAny.createFloor)({
  config: _configReadonly.config,
  equalScalar: equalScalar,
  matrix: matrix,
  round: round,
  typed: typed
});
exports.floor = floor;
var multiply = /* #__PURE__ */(0, _factoriesAny.createMultiply)({
  addScalar: addScalar,
  dot: dot,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  typed: typed
});
exports.multiply = multiply;
var dotMultiply = /* #__PURE__ */(0, _factoriesAny.createDotMultiply)({
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  typed: typed
});
exports.dotMultiply = dotMultiply;
var re = /* #__PURE__ */(0, _factoriesAny.createRe)({
  typed: typed
});
exports.re = re;
var flatten = /* #__PURE__ */(0, _factoriesAny.createFlatten)({
  matrix: matrix,
  typed: typed
});
exports.flatten = flatten;
var resize = /* #__PURE__ */(0, _factoriesAny.createResize)({
  config: _configReadonly.config,
  matrix: matrix
});
exports.resize = resize;
var squeeze = /* #__PURE__ */(0, _factoriesAny.createSqueeze)({
  matrix: matrix,
  typed: typed
});
exports.squeeze = squeeze;
var to = /* #__PURE__ */(0, _factoriesAny.createTo)({
  matrix: matrix,
  typed: typed
});
exports.to = to;
var pow = /* #__PURE__ */(0, _factoriesAny.createPow)({
  Complex: Complex,
  config: _configReadonly.config,
  fraction: fraction,
  identity: identity,
  matrix: matrix,
  multiply: multiply,
  number: number,
  typed: typed
});
exports.pow = pow;
var dotPow = /* #__PURE__ */(0, _factoriesAny.createDotPow)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  pow: pow,
  typed: typed
});
exports.dotPow = dotPow;
var rightArithShift = /* #__PURE__ */(0, _factoriesAny.createRightArithShift)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
exports.rightArithShift = rightArithShift;
var compareNatural = /* #__PURE__ */(0, _factoriesAny.createCompareNatural)({
  compare: compare,
  typed: typed
});
exports.compareNatural = compareNatural;
var equalText = /* #__PURE__ */(0, _factoriesAny.createEqualText)({
  compareText: compareText,
  isZero: isZero,
  typed: typed
});
exports.equalText = equalText;
var largerEq = /* #__PURE__ */(0, _factoriesAny.createLargerEq)({
  DenseMatrix: DenseMatrix,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.largerEq = largerEq;
var partitionSelect = /* #__PURE__ */(0, _factoriesAny.createPartitionSelect)({
  compare: compare,
  isNaN: isNaN,
  isNumeric: isNumeric,
  typed: typed
});
exports.partitionSelect = partitionSelect;
var Index = /* #__PURE__ */(0, _factoriesAny.createIndexClass)({
  ImmutableDenseMatrix: ImmutableDenseMatrix
});
exports.Index = Index;
var asech = /* #__PURE__ */(0, _factoriesAny.createAsech)({
  BigNumber: BigNumber,
  Complex: Complex,
  config: _configReadonly.config,
  typed: typed
});
exports.asech = asech;
var tan = /* #__PURE__ */(0, _factoriesAny.createTan)({
  typed: typed
});
exports.tan = tan;
var setDifference = /* #__PURE__ */(0, _factoriesAny.createSetDifference)({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setDifference = setDifference;
var setIntersect = /* #__PURE__ */(0, _factoriesAny.createSetIntersect)({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setIntersect = setIntersect;
var setMultiplicity = /* #__PURE__ */(0, _factoriesAny.createSetMultiplicity)({
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setMultiplicity = setMultiplicity;
var setSize = /* #__PURE__ */(0, _factoriesAny.createSetSize)({
  compareNatural: compareNatural,
  typed: typed
});
exports.setSize = setSize;
var trace = /* #__PURE__ */(0, _factoriesAny.createTrace)({
  add: add,
  matrix: matrix,
  typed: typed
});
exports.trace = trace;
var quantileSeq = /* #__PURE__ */(0, _factoriesAny.createQuantileSeq)({
  add: add,
  compare: compare,
  multiply: multiply,
  partitionSelect: partitionSelect,
  typed: typed
});
exports.quantileSeq = quantileSeq;
var gamma = /* #__PURE__ */(0, _factoriesAny.createGamma)({
  BigNumber: BigNumber,
  Complex: Complex,
  config: _configReadonly.config,
  multiplyScalar: multiplyScalar,
  pow: pow,
  typed: typed
});
exports.gamma = gamma;
var bignumber = /* #__PURE__ */(0, _factoriesAny.createBignumber)({
  BigNumber: BigNumber,
  typed: typed
});
exports.bignumber = bignumber;
var matrixFromColumns = /* #__PURE__ */(0, _factoriesAny.createMatrixFromColumns)({
  flatten: flatten,
  matrix: matrix,
  size: size,
  typed: typed
});
exports.matrixFromColumns = matrixFromColumns;
var lcm = /* #__PURE__ */(0, _factoriesAny.createLcm)({
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.lcm = lcm;
var bitOr = /* #__PURE__ */(0, _factoriesAny.createBitOr)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.bitOr = bitOr;
var kron = /* #__PURE__ */(0, _factoriesAny.createKron)({
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  typed: typed
});
exports.kron = kron;
var transpose = /* #__PURE__ */(0, _factoriesAny.createTranspose)({
  matrix: matrix,
  typed: typed
});
exports.transpose = transpose;
var numeric = /* #__PURE__ */(0, _factoriesAny.createNumeric)({
  bignumber: bignumber,
  fraction: fraction,
  number: number
});
exports.numeric = numeric;
var and = /* #__PURE__ */(0, _factoriesAny.createAnd)({
  equalScalar: equalScalar,
  matrix: matrix,
  not: not,
  typed: typed,
  zeros: zeros
});
exports.and = and;
var smallerEq = /* #__PURE__ */(0, _factoriesAny.createSmallerEq)({
  DenseMatrix: DenseMatrix,
  config: _configReadonly.config,
  matrix: matrix,
  typed: typed
});
exports.smallerEq = smallerEq;
var sort = /* #__PURE__ */(0, _factoriesAny.createSort)({
  compare: compare,
  compareNatural: compareNatural,
  matrix: matrix,
  typed: typed
});
exports.sort = sort;
var min = /* #__PURE__ */(0, _factoriesAny.createMin)({
  config: _configReadonly.config,
  numeric: numeric,
  smaller: smaller,
  typed: typed
});
exports.min = min;
var cot = /* #__PURE__ */(0, _factoriesAny.createCot)({
  BigNumber: BigNumber,
  typed: typed
});
exports.cot = cot;
var setDistinct = /* #__PURE__ */(0, _factoriesAny.createSetDistinct)({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setDistinct = setDistinct;
var setPowerset = /* #__PURE__ */(0, _factoriesAny.createSetPowerset)({
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setPowerset = setPowerset;
var index = /* #__PURE__ */(0, _factoriesAny.createIndex)({
  Index: Index,
  typed: typed
});
exports.index = index;
var sum = /* #__PURE__ */(0, _factoriesAny.createSum)({
  add: add,
  config: _configReadonly.config,
  numeric: numeric,
  typed: typed
});
exports.sum = sum;
var factorial = /* #__PURE__ */(0, _factoriesAny.createFactorial)({
  gamma: gamma,
  typed: typed
});
exports.factorial = factorial;
var permutations = /* #__PURE__ */(0, _factoriesAny.createPermutations)({
  factorial: factorial,
  typed: typed
});
exports.permutations = permutations;
var matrixFromRows = /* #__PURE__ */(0, _factoriesAny.createMatrixFromRows)({
  flatten: flatten,
  matrix: matrix,
  size: size,
  typed: typed
});
exports.matrixFromRows = matrixFromRows;
var subtract = /* #__PURE__ */(0, _factoriesAny.createSubtract)({
  DenseMatrix: DenseMatrix,
  addScalar: addScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.subtract = subtract;
var cross = /* #__PURE__ */(0, _factoriesAny.createCross)({
  matrix: matrix,
  multiply: multiply,
  subtract: subtract,
  typed: typed
});
exports.cross = cross;
var range = /* #__PURE__ */(0, _factoriesAny.createRange)({
  bignumber: bignumber,
  matrix: matrix,
  config: _configReadonly.config,
  larger: larger,
  largerEq: largerEq,
  smaller: smaller,
  smallerEq: smallerEq,
  typed: typed
});
exports.range = range;
var row = /* #__PURE__ */(0, _factoriesAny.createRow)({
  Index: Index,
  matrix: matrix,
  range: range,
  typed: typed
});
exports.row = row;
var prod = /* #__PURE__ */(0, _factoriesAny.createProd)({
  config: _configReadonly.config,
  multiplyScalar: multiplyScalar,
  numeric: numeric,
  typed: typed
});
exports.prod = prod;
var equal = /* #__PURE__ */(0, _factoriesAny.createEqual)({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.equal = equal;
var max = /* #__PURE__ */(0, _factoriesAny.createMax)({
  config: _configReadonly.config,
  larger: larger,
  numeric: numeric,
  typed: typed
});
exports.max = max;
var setCartesian = /* #__PURE__ */(0, _factoriesAny.createSetCartesian)({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setCartesian = setCartesian;
var setSymDifference = /* #__PURE__ */(0, _factoriesAny.createSetSymDifference)({
  Index: Index,
  concat: concat,
  setDifference: setDifference,
  size: size,
  subset: subset,
  typed: typed
});
exports.setSymDifference = setSymDifference;
var ceil = /* #__PURE__ */(0, _factoriesAny.createCeil)({
  config: _configReadonly.config,
  equalScalar: equalScalar,
  matrix: matrix,
  round: round,
  typed: typed
});
exports.ceil = ceil;
var xor = /* #__PURE__ */(0, _factoriesAny.createXor)({
  DenseMatrix: DenseMatrix,
  matrix: matrix,
  typed: typed
});
exports.xor = xor;
var count = /* #__PURE__ */(0, _factoriesAny.createCount)({
  prod: prod,
  size: size,
  typed: typed
});
exports.count = count;
var ctranspose = /* #__PURE__ */(0, _factoriesAny.createCtranspose)({
  conj: conj,
  transpose: transpose,
  typed: typed
});
exports.ctranspose = ctranspose;
var deepEqual = /* #__PURE__ */(0, _factoriesAny.createDeepEqual)({
  equal: equal,
  typed: typed
});
exports.deepEqual = deepEqual;
var setIsSubset = /* #__PURE__ */(0, _factoriesAny.createSetIsSubset)({
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
exports.setIsSubset = setIsSubset;
var fix = /* #__PURE__ */(0, _factoriesAny.createFix)({
  Complex: Complex,
  ceil: ceil,
  floor: floor,
  matrix: matrix,
  typed: typed
});
exports.fix = fix;
var diff = /* #__PURE__ */(0, _factoriesAny.createDiff)({
  matrix: matrix,
  number: number,
  subtract: subtract,
  typed: typed
});
exports.diff = diff;
var divideScalar = /* #__PURE__ */(0, _factoriesAny.createDivideScalar)({
  numeric: numeric,
  typed: typed
});
exports.divideScalar = divideScalar;
var nthRoots = /* #__PURE__ */(0, _factoriesAny.createNthRoots)({
  Complex: Complex,
  config: _configReadonly.config,
  divideScalar: divideScalar,
  typed: typed
});
exports.nthRoots = nthRoots;
var lsolve = /* #__PURE__ */(0, _factoriesAny.createLsolve)({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
exports.lsolve = lsolve;
var lsolveAll = /* #__PURE__ */(0, _factoriesAny.createLsolveAll)({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
exports.lsolveAll = lsolveAll;
var Spa = /* #__PURE__ */(0, _factoriesAny.createSpaClass)({
  FibonacciHeap: FibonacciHeap,
  addScalar: addScalar,
  equalScalar: equalScalar
});
exports.Spa = Spa;
var setUnion = /* #__PURE__ */(0, _factoriesAny.createSetUnion)({
  Index: Index,
  concat: concat,
  setIntersect: setIntersect,
  setSymDifference: setSymDifference,
  size: size,
  subset: subset,
  typed: typed
});
exports.setUnion = setUnion;
var lup = /* #__PURE__ */(0, _factoriesAny.createLup)({
  DenseMatrix: DenseMatrix,
  Spa: Spa,
  SparseMatrix: SparseMatrix,
  abs: abs,
  addScalar: addScalar,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  larger: larger,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.lup = lup;
var slu = /* #__PURE__ */(0, _factoriesAny.createSlu)({
  SparseMatrix: SparseMatrix,
  abs: abs,
  add: add,
  divideScalar: divideScalar,
  larger: larger,
  largerEq: largerEq,
  multiply: multiply,
  subtract: subtract,
  transpose: transpose,
  typed: typed
});
exports.slu = slu;
var det = /* #__PURE__ */(0, _factoriesAny.createDet)({
  lup: lup,
  matrix: matrix,
  multiply: multiply,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.det = det;
var distance = /* #__PURE__ */(0, _factoriesAny.createDistance)({
  abs: abs,
  addScalar: addScalar,
  divideScalar: divideScalar,
  multiplyScalar: multiplyScalar,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.distance = distance;
var stirlingS2 = /* #__PURE__ */(0, _factoriesAny.createStirlingS2)({
  addScalar: addScalar,
  combinations: combinations,
  divideScalar: divideScalar,
  factorial: factorial,
  isInteger: isInteger,
  isNegative: isNegative,
  larger: larger,
  multiplyScalar: multiplyScalar,
  pow: pow,
  subtract: subtract,
  typed: typed
});
exports.stirlingS2 = stirlingS2;
var catalan = /* #__PURE__ */(0, _factoriesAny.createCatalan)({
  addScalar: addScalar,
  combinations: combinations,
  divideScalar: divideScalar,
  isInteger: isInteger,
  isNegative: isNegative,
  multiplyScalar: multiplyScalar,
  typed: typed
});
exports.catalan = catalan;
var column = /* #__PURE__ */(0, _factoriesAny.createColumn)({
  Index: Index,
  matrix: matrix,
  range: range,
  typed: typed
});
exports.column = column;
var log = /* #__PURE__ */(0, _factoriesAny.createLog)({
  Complex: Complex,
  config: _configReadonly.config,
  divideScalar: divideScalar,
  typed: typed
});
exports.log = log;
var dotDivide = /* #__PURE__ */(0, _factoriesAny.createDotDivide)({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
exports.dotDivide = dotDivide;
var usolveAll = /* #__PURE__ */(0, _factoriesAny.createUsolveAll)({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
exports.usolveAll = usolveAll;
var hypot = /* #__PURE__ */(0, _factoriesAny.createHypot)({
  abs: abs,
  addScalar: addScalar,
  divideScalar: divideScalar,
  isPositive: isPositive,
  multiplyScalar: multiplyScalar,
  smaller: smaller,
  sqrt: sqrt,
  typed: typed
});
exports.hypot = hypot;
var qr = /* #__PURE__ */(0, _factoriesAny.createQr)({
  addScalar: addScalar,
  complex: complex,
  conj: conj,
  divideScalar: divideScalar,
  equal: equal,
  identity: identity,
  isZero: isZero,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  sign: sign,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus,
  zeros: zeros
});
exports.qr = qr;
var inv = /* #__PURE__ */(0, _factoriesAny.createInv)({
  abs: abs,
  addScalar: addScalar,
  det: det,
  divideScalar: divideScalar,
  identity: identity,
  matrix: matrix,
  multiply: multiply,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.inv = inv;
var expm = /* #__PURE__ */(0, _factoriesAny.createExpm)({
  abs: abs,
  add: add,
  identity: identity,
  inv: inv,
  multiply: multiply,
  typed: typed
});
exports.expm = expm;
var divide = /* #__PURE__ */(0, _factoriesAny.createDivide)({
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  inv: inv,
  matrix: matrix,
  multiply: multiply,
  typed: typed
});
exports.divide = divide;
var mean = /* #__PURE__ */(0, _factoriesAny.createMean)({
  add: add,
  divide: divide,
  typed: typed
});
exports.mean = mean;
var variance = /* #__PURE__ */(0, _factoriesAny.createVariance)({
  add: add,
  apply: apply,
  divide: divide,
  isNaN: isNaN,
  multiply: multiply,
  subtract: subtract,
  typed: typed
});
exports.variance = variance;
var kldivergence = /* #__PURE__ */(0, _factoriesAny.createKldivergence)({
  divide: divide,
  dotDivide: dotDivide,
  isNumeric: isNumeric,
  log: log,
  matrix: matrix,
  multiply: multiply,
  sum: sum,
  typed: typed
});
exports.kldivergence = kldivergence;
var bellNumbers = /* #__PURE__ */(0, _factoriesAny.createBellNumbers)({
  addScalar: addScalar,
  isInteger: isInteger,
  isNegative: isNegative,
  stirlingS2: stirlingS2,
  typed: typed
});
exports.bellNumbers = bellNumbers;
var log1p = /* #__PURE__ */(0, _factoriesAny.createLog1p)({
  Complex: Complex,
  config: _configReadonly.config,
  divideScalar: divideScalar,
  log: log,
  typed: typed
});
exports.log1p = log1p;
var Unit = /* #__PURE__ */(0, _factoriesAny.createUnitClass)({
  BigNumber: BigNumber,
  Complex: Complex,
  Fraction: Fraction,
  abs: abs,
  addScalar: addScalar,
  config: _configReadonly.config,
  divideScalar: divideScalar,
  equal: equal,
  fix: fix,
  format: format,
  isNumeric: isNumeric,
  multiplyScalar: multiplyScalar,
  number: number,
  pow: pow,
  round: round,
  subtract: subtract
});
exports.Unit = Unit;
var createUnit = /* #__PURE__ */(0, _factoriesAny.createCreateUnit)({
  Unit: Unit,
  typed: typed
});
exports.createUnit = createUnit;
var sqrtm = /* #__PURE__ */(0, _factoriesAny.createSqrtm)({
  abs: abs,
  add: add,
  identity: identity,
  inv: inv,
  max: max,
  multiply: multiply,
  size: size,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed
});
exports.sqrtm = sqrtm;
var median = /* #__PURE__ */(0, _factoriesAny.createMedian)({
  add: add,
  compare: compare,
  divide: divide,
  partitionSelect: partitionSelect,
  typed: typed
});
exports.median = median;
var std = /* #__PURE__ */(0, _factoriesAny.createStd)({
  sqrt: sqrt,
  typed: typed,
  variance: variance
});
exports.std = std;
var atomicMass = /* #__PURE__ */(0, _factoriesAny.createAtomicMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.atomicMass = atomicMass;
var bohrMagneton = /* #__PURE__ */(0, _factoriesAny.createBohrMagneton)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.bohrMagneton = bohrMagneton;
var boltzmann = /* #__PURE__ */(0, _factoriesAny.createBoltzmann)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.boltzmann = boltzmann;
var conductanceQuantum = /* #__PURE__ */(0, _factoriesAny.createConductanceQuantum)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.conductanceQuantum = conductanceQuantum;
var deuteronMass = /* #__PURE__ */(0, _factoriesAny.createDeuteronMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.deuteronMass = deuteronMass;
var electronMass = /* #__PURE__ */(0, _factoriesAny.createElectronMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.electronMass = electronMass;
var faraday = /* #__PURE__ */(0, _factoriesAny.createFaraday)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.faraday = faraday;
var firstRadiation = /* #__PURE__ */(0, _factoriesAny.createFirstRadiation)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.firstRadiation = firstRadiation;
var gravitationConstant = /* #__PURE__ */(0, _factoriesAny.createGravitationConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.gravitationConstant = gravitationConstant;
var hartreeEnergy = /* #__PURE__ */(0, _factoriesAny.createHartreeEnergy)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.hartreeEnergy = hartreeEnergy;
var klitzing = /* #__PURE__ */(0, _factoriesAny.createKlitzing)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.klitzing = klitzing;
var magneticConstant = /* #__PURE__ */(0, _factoriesAny.createMagneticConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.magneticConstant = magneticConstant;
var molarMass = /* #__PURE__ */(0, _factoriesAny.createMolarMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.molarMass = molarMass;
var molarPlanckConstant = /* #__PURE__ */(0, _factoriesAny.createMolarPlanckConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.molarPlanckConstant = molarPlanckConstant;
var neutronMass = /* #__PURE__ */(0, _factoriesAny.createNeutronMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.neutronMass = neutronMass;
var planckCharge = /* #__PURE__ */(0, _factoriesAny.createPlanckCharge)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.planckCharge = planckCharge;
var planckLength = /* #__PURE__ */(0, _factoriesAny.createPlanckLength)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.planckLength = planckLength;
var planckTemperature = /* #__PURE__ */(0, _factoriesAny.createPlanckTemperature)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.planckTemperature = planckTemperature;
var protonMass = /* #__PURE__ */(0, _factoriesAny.createProtonMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.protonMass = protonMass;
var reducedPlanckConstant = /* #__PURE__ */(0, _factoriesAny.createReducedPlanckConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.reducedPlanckConstant = reducedPlanckConstant;
var secondRadiation = /* #__PURE__ */(0, _factoriesAny.createSecondRadiation)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.secondRadiation = secondRadiation;
var stefanBoltzmann = /* #__PURE__ */(0, _factoriesAny.createStefanBoltzmann)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.stefanBoltzmann = stefanBoltzmann;
var vacuumImpedance = /* #__PURE__ */(0, _factoriesAny.createVacuumImpedance)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.vacuumImpedance = vacuumImpedance;
var usolve = /* #__PURE__ */(0, _factoriesAny.createUsolve)({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
exports.usolve = usolve;
var lusolve = /* #__PURE__ */(0, _factoriesAny.createLusolve)({
  DenseMatrix: DenseMatrix,
  lsolve: lsolve,
  lup: lup,
  matrix: matrix,
  slu: slu,
  typed: typed,
  usolve: usolve
});
exports.lusolve = lusolve;
var eigs = /* #__PURE__ */(0, _factoriesAny.createEigs)({
  abs: abs,
  add: add,
  addScalar: addScalar,
  atan: atan,
  bignumber: bignumber,
  column: column,
  complex: complex,
  config: _configReadonly.config,
  cos: cos,
  diag: diag,
  divideScalar: divideScalar,
  dot: dot,
  equal: equal,
  flatten: flatten,
  im: im,
  inv: inv,
  larger: larger,
  matrix: matrix,
  matrixFromColumns: matrixFromColumns,
  multiply: multiply,
  multiplyScalar: multiplyScalar,
  number: number,
  qr: qr,
  re: re,
  sin: sin,
  smaller: smaller,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed,
  usolve: usolve,
  usolveAll: usolveAll
});
exports.eigs = eigs;
var mad = /* #__PURE__ */(0, _factoriesAny.createMad)({
  abs: abs,
  map: map,
  median: median,
  subtract: subtract,
  typed: typed
});
exports.mad = mad;
var avogadro = /* #__PURE__ */(0, _factoriesAny.createAvogadro)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.avogadro = avogadro;
var classicalElectronRadius = /* #__PURE__ */(0, _factoriesAny.createClassicalElectronRadius)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.classicalElectronRadius = classicalElectronRadius;
var electricConstant = /* #__PURE__ */(0, _factoriesAny.createElectricConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.electricConstant = electricConstant;
var fermiCoupling = /* #__PURE__ */(0, _factoriesAny.createFermiCoupling)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.fermiCoupling = fermiCoupling;
var gravity = /* #__PURE__ */(0, _factoriesAny.createGravity)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.gravity = gravity;
var loschmidt = /* #__PURE__ */(0, _factoriesAny.createLoschmidt)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.loschmidt = loschmidt;
var molarMassC12 = /* #__PURE__ */(0, _factoriesAny.createMolarMassC12)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.molarMassC12 = molarMassC12;
var nuclearMagneton = /* #__PURE__ */(0, _factoriesAny.createNuclearMagneton)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.nuclearMagneton = nuclearMagneton;
var planckMass = /* #__PURE__ */(0, _factoriesAny.createPlanckMass)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.planckMass = planckMass;
var quantumOfCirculation = /* #__PURE__ */(0, _factoriesAny.createQuantumOfCirculation)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.quantumOfCirculation = quantumOfCirculation;
var speedOfLight = /* #__PURE__ */(0, _factoriesAny.createSpeedOfLight)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.speedOfLight = speedOfLight;
var wienDisplacement = /* #__PURE__ */(0, _factoriesAny.createWienDisplacement)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.wienDisplacement = wienDisplacement;
var unit = /* #__PURE__ */(0, _factoriesAny.createUnitFunction)({
  Unit: Unit,
  typed: typed
});
exports.unit = unit;
var intersect = /* #__PURE__ */(0, _factoriesAny.createIntersect)({
  abs: abs,
  add: add,
  addScalar: addScalar,
  config: _configReadonly.config,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  flatten: flatten,
  matrix: matrix,
  multiply: multiply,
  multiplyScalar: multiplyScalar,
  smaller: smaller,
  subtract: subtract,
  typed: typed
});
exports.intersect = intersect;
var coulomb = /* #__PURE__ */(0, _factoriesAny.createCoulomb)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.coulomb = coulomb;
var gasConstant = /* #__PURE__ */(0, _factoriesAny.createGasConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.gasConstant = gasConstant;
var magneticFluxQuantum = /* #__PURE__ */(0, _factoriesAny.createMagneticFluxQuantum)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.magneticFluxQuantum = magneticFluxQuantum;
var planckConstant = /* #__PURE__ */(0, _factoriesAny.createPlanckConstant)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.planckConstant = planckConstant;
var rydberg = /* #__PURE__ */(0, _factoriesAny.createRydberg)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.rydberg = rydberg;
var norm = /* #__PURE__ */(0, _factoriesAny.createNorm)({
  abs: abs,
  add: add,
  conj: conj,
  ctranspose: ctranspose,
  eigs: eigs,
  equalScalar: equalScalar,
  larger: larger,
  matrix: matrix,
  multiply: multiply,
  pow: pow,
  smaller: smaller,
  sqrt: sqrt,
  typed: typed
});
exports.norm = norm;
var elementaryCharge = /* #__PURE__ */(0, _factoriesAny.createElementaryCharge)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.elementaryCharge = elementaryCharge;
var molarVolume = /* #__PURE__ */(0, _factoriesAny.createMolarVolume)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.molarVolume = molarVolume;
var thomsonCrossSection = /* #__PURE__ */(0, _factoriesAny.createThomsonCrossSection)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.thomsonCrossSection = thomsonCrossSection;
var rotationMatrix = /* #__PURE__ */(0, _factoriesAny.createRotationMatrix)({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  addScalar: addScalar,
  config: _configReadonly.config,
  cos: cos,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  norm: norm,
  sin: sin,
  typed: typed,
  unaryMinus: unaryMinus
});
exports.rotationMatrix = rotationMatrix;
var bohrRadius = /* #__PURE__ */(0, _factoriesAny.createBohrRadius)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.bohrRadius = bohrRadius;
var planckTime = /* #__PURE__ */(0, _factoriesAny.createPlanckTime)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.planckTime = planckTime;
var rotate = /* #__PURE__ */(0, _factoriesAny.createRotate)({
  multiply: multiply,
  rotationMatrix: rotationMatrix,
  typed: typed
});
exports.rotate = rotate;
var multinomial = /* #__PURE__ */(0, _factoriesAny.createMultinomial)({
  add: add,
  divide: divide,
  factorial: factorial,
  isInteger: isInteger,
  isPositive: isPositive,
  multiply: multiply,
  typed: typed
});
exports.multinomial = multinomial;
var inverseConductanceQuantum = /* #__PURE__ */(0, _factoriesAny.createInverseConductanceQuantum)({
  BigNumber: BigNumber,
  Unit: Unit,
  config: _configReadonly.config
});
exports.inverseConductanceQuantum = inverseConductanceQuantum;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/entry/typeChecks.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/entry/typeChecks.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "isAccessorNode", ({
  enumerable: true,
  get: function get() {
    return _is.isAccessorNode;
  }
}));
Object.defineProperty(exports, "isArray", ({
  enumerable: true,
  get: function get() {
    return _is.isArray;
  }
}));
Object.defineProperty(exports, "isArrayNode", ({
  enumerable: true,
  get: function get() {
    return _is.isArrayNode;
  }
}));
Object.defineProperty(exports, "isAssignmentNode", ({
  enumerable: true,
  get: function get() {
    return _is.isAssignmentNode;
  }
}));
Object.defineProperty(exports, "isBigNumber", ({
  enumerable: true,
  get: function get() {
    return _is.isBigNumber;
  }
}));
Object.defineProperty(exports, "isBlockNode", ({
  enumerable: true,
  get: function get() {
    return _is.isBlockNode;
  }
}));
Object.defineProperty(exports, "isBoolean", ({
  enumerable: true,
  get: function get() {
    return _is.isBoolean;
  }
}));
Object.defineProperty(exports, "isChain", ({
  enumerable: true,
  get: function get() {
    return _is.isChain;
  }
}));
Object.defineProperty(exports, "isCollection", ({
  enumerable: true,
  get: function get() {
    return _is.isCollection;
  }
}));
Object.defineProperty(exports, "isComplex", ({
  enumerable: true,
  get: function get() {
    return _is.isComplex;
  }
}));
Object.defineProperty(exports, "isConditionalNode", ({
  enumerable: true,
  get: function get() {
    return _is.isConditionalNode;
  }
}));
Object.defineProperty(exports, "isConstantNode", ({
  enumerable: true,
  get: function get() {
    return _is.isConstantNode;
  }
}));
Object.defineProperty(exports, "isDate", ({
  enumerable: true,
  get: function get() {
    return _is.isDate;
  }
}));
Object.defineProperty(exports, "isDenseMatrix", ({
  enumerable: true,
  get: function get() {
    return _is.isDenseMatrix;
  }
}));
Object.defineProperty(exports, "isFraction", ({
  enumerable: true,
  get: function get() {
    return _is.isFraction;
  }
}));
Object.defineProperty(exports, "isFunction", ({
  enumerable: true,
  get: function get() {
    return _is.isFunction;
  }
}));
Object.defineProperty(exports, "isFunctionAssignmentNode", ({
  enumerable: true,
  get: function get() {
    return _is.isFunctionAssignmentNode;
  }
}));
Object.defineProperty(exports, "isFunctionNode", ({
  enumerable: true,
  get: function get() {
    return _is.isFunctionNode;
  }
}));
Object.defineProperty(exports, "isHelp", ({
  enumerable: true,
  get: function get() {
    return _is.isHelp;
  }
}));
Object.defineProperty(exports, "isIndex", ({
  enumerable: true,
  get: function get() {
    return _is.isIndex;
  }
}));
Object.defineProperty(exports, "isIndexNode", ({
  enumerable: true,
  get: function get() {
    return _is.isIndexNode;
  }
}));
Object.defineProperty(exports, "isMatrix", ({
  enumerable: true,
  get: function get() {
    return _is.isMatrix;
  }
}));
Object.defineProperty(exports, "isNode", ({
  enumerable: true,
  get: function get() {
    return _is.isNode;
  }
}));
Object.defineProperty(exports, "isNull", ({
  enumerable: true,
  get: function get() {
    return _is.isNull;
  }
}));
Object.defineProperty(exports, "isNumber", ({
  enumerable: true,
  get: function get() {
    return _is.isNumber;
  }
}));
Object.defineProperty(exports, "isString", ({
  enumerable: true,
  get: function get() {
    return _is.isString;
  }
}));
Object.defineProperty(exports, "isUndefined", ({
  enumerable: true,
  get: function get() {
    return _is.isUndefined;
  }
}));
Object.defineProperty(exports, "isObject", ({
  enumerable: true,
  get: function get() {
    return _is.isObject;
  }
}));
Object.defineProperty(exports, "isObjectNode", ({
  enumerable: true,
  get: function get() {
    return _is.isObjectNode;
  }
}));
Object.defineProperty(exports, "isOperatorNode", ({
  enumerable: true,
  get: function get() {
    return _is.isOperatorNode;
  }
}));
Object.defineProperty(exports, "isParenthesisNode", ({
  enumerable: true,
  get: function get() {
    return _is.isParenthesisNode;
  }
}));
Object.defineProperty(exports, "isRange", ({
  enumerable: true,
  get: function get() {
    return _is.isRange;
  }
}));
Object.defineProperty(exports, "isRangeNode", ({
  enumerable: true,
  get: function get() {
    return _is.isRangeNode;
  }
}));
Object.defineProperty(exports, "isRegExp", ({
  enumerable: true,
  get: function get() {
    return _is.isRegExp;
  }
}));
Object.defineProperty(exports, "isResultSet", ({
  enumerable: true,
  get: function get() {
    return _is.isResultSet;
  }
}));
Object.defineProperty(exports, "isSparseMatrix", ({
  enumerable: true,
  get: function get() {
    return _is.isSparseMatrix;
  }
}));
Object.defineProperty(exports, "isSymbolNode", ({
  enumerable: true,
  get: function get() {
    return _is.isSymbolNode;
  }
}));
Object.defineProperty(exports, "isUnit", ({
  enumerable: true,
  get: function get() {
    return _is.isUnit;
  }
}));

var _is = __webpack_require__(/*! ../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/error/ArgumentsError.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/error/ArgumentsError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ArgumentsError = ArgumentsError;

/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;
  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
  this.stack = new Error().stack;
}

ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/error/DimensionError.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/error/DimensionError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DimensionError = DimensionError;

/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.actual = actual;
  this.expected = expected;
  this.relation = relation;
  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
  this.stack = new Error().stack;
}

DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/error/IndexError.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/error/IndexError.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.IndexError = IndexError;

/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.index = index;

  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  } else {
    this.min = min;
    this.max = max;
  }

  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  } else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  } else {
    this.message = 'Index out of range (' + this.index + ')';
  }

  this.stack = new Error().stack;
}

IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/Help.js":
/*!********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/Help.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createHelpClass = void 0;

var _is = __webpack_require__(/*! ../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _string = __webpack_require__(/*! ../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Help';
var dependencies = ['parse'];
var createHelpClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var parse = _ref.parse;

  /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
  function Help(doc) {
    if (!(this instanceof Help)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!doc) throw new Error('Argument "doc" missing');
    this.doc = doc;
  }
  /**
   * Attach type information
   */


  Help.prototype.type = 'Help';
  Help.prototype.isHelp = true;
  /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */

  Help.prototype.toString = function () {
    var doc = this.doc || {};
    var desc = '\n';

    if (doc.name) {
      desc += 'Name: ' + doc.name + '\n\n';
    }

    if (doc.category) {
      desc += 'Category: ' + doc.category + '\n\n';
    }

    if (doc.description) {
      desc += 'Description:\n    ' + doc.description + '\n\n';
    }

    if (doc.syntax) {
      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
    }

    if (doc.examples) {
      desc += 'Examples:\n';
      var scope = {};

      for (var i = 0; i < doc.examples.length; i++) {
        var expr = doc.examples[i];
        desc += '    ' + expr + '\n';
        var res = void 0;

        try {
          // note: res can be undefined when `expr` is an empty string
          res = parse(expr).compile().evaluate(scope);
        } catch (e) {
          res = e;
        }

        if (res !== undefined && !(0, _is.isHelp)(res)) {
          desc += '        ' + (0, _string.format)(res, {
            precision: 14
          }) + '\n';
        }
      }

      desc += '\n';
    }

    if (doc.seealso && doc.seealso.length) {
      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
    }

    return desc;
  };
  /**
   * Export the help object to JSON
   */


  Help.prototype.toJSON = function () {
    var obj = (0, _object.clone)(this.doc);
    obj.mathjs = 'Help';
    return obj;
  };
  /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */


  Help.fromJSON = function (json) {
    var doc = {};
    Object.keys(json).filter(function (prop) {
      return prop !== 'mathjs';
    }).forEach(function (prop) {
      doc[prop] = json[prop];
    });
    return new Help(doc);
  };
  /**
   * Returns a string representation of the Help object
   */


  Help.prototype.valueOf = Help.prototype.toString;
  return Help;
}, {
  isClass: true
});
exports.createHelpClass = createHelpClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/Parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/Parser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createParserClass = void 0;

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _map = __webpack_require__(/*! ../utils/map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

var name = 'Parser';
var dependencies = ['evaluate'];
var createParserClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var evaluate = _ref.evaluate;

  /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('f(x, y) = x^y')          // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 7
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */
  function Parser() {
    if (!(this instanceof Parser)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    Object.defineProperty(this, 'scope', {
      value: (0, _map.createEmptyMap)(),
      writable: false
    });
  }
  /**
   * Attach type information
   */


  Parser.prototype.type = 'Parser';
  Parser.prototype.isParser = true;
  /**
   * Parse and evaluate the given expression
   * @param {string | string[]} expr   A string containing an expression,
   *                                   for example "2+3", or a list with expressions
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */

  Parser.prototype.evaluate = function (expr) {
    // TODO: validate arguments
    return evaluate(expr, this.scope);
  };
  /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */


  Parser.prototype.get = function (name) {
    // TODO: validate arguments
    if (this.scope.has(name)) {
      return this.scope.get(name);
    }
  };
  /**
   * Get a map with all defined variables
   * @return {Object} values
   */


  Parser.prototype.getAll = function () {
    return (0, _map.toObject)(this.scope);
  };
  /**
   * Get a map with all defined variables
   * @return {Map} values
   */


  Parser.prototype.getAllAsMap = function () {
    return this.scope;
  };
  /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */


  Parser.prototype.set = function (name, value) {
    this.scope.set(name, value);
    return value;
  };
  /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */


  Parser.prototype.remove = function (name) {
    this.scope["delete"](name);
  };
  /**
   * Clear the scope with variables and functions
   */


  Parser.prototype.clear = function () {
    this.scope.clear();
  };

  return Parser;
}, {
  isClass: true
});
exports.createParserClass = createParserClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/Infinity.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/Infinity.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InfinityDocs = void 0;
var InfinityDocs = {
  name: 'Infinity',
  category: 'Constants',
  syntax: ['Infinity'],
  description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
  examples: ['Infinity', '1 / 0'],
  seealso: []
};
exports.InfinityDocs = InfinityDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LN10.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LN10.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LN10Docs = void 0;
var LN10Docs = {
  name: 'LN10',
  category: 'Constants',
  syntax: ['LN10'],
  description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
  examples: ['LN10', 'log(10)'],
  seealso: []
};
exports.LN10Docs = LN10Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LN2.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LN2.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LN2Docs = void 0;
var LN2Docs = {
  name: 'LN2',
  category: 'Constants',
  syntax: ['LN2'],
  description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
  examples: ['LN2', 'log(2)'],
  seealso: []
};
exports.LN2Docs = LN2Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LOG10E.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LOG10E.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LOG10EDocs = void 0;
var LOG10EDocs = {
  name: 'LOG10E',
  category: 'Constants',
  syntax: ['LOG10E'],
  description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
  examples: ['LOG10E', 'log(e, 10)'],
  seealso: []
};
exports.LOG10EDocs = LOG10EDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LOG2E.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LOG2E.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.LOG2EDocs = void 0;
var LOG2EDocs = {
  name: 'LOG2E',
  category: 'Constants',
  syntax: ['LOG2E'],
  description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
  examples: ['LOG2E', 'log(e, 2)'],
  seealso: []
};
exports.LOG2EDocs = LOG2EDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/NaN.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/NaN.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NaNDocs = void 0;
var NaNDocs = {
  name: 'NaN',
  category: 'Constants',
  syntax: ['NaN'],
  description: 'Not a number',
  examples: ['NaN', '0 / 0'],
  seealso: []
};
exports.NaNDocs = NaNDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/SQRT1_2.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/SQRT1_2.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SQRT12Docs = void 0;
var SQRT12Docs = {
  name: 'SQRT1_2',
  category: 'Constants',
  syntax: ['SQRT1_2'],
  description: 'Returns the square root of 1/2, approximately equal to 0.707',
  examples: ['SQRT1_2', 'sqrt(1/2)'],
  seealso: []
};
exports.SQRT12Docs = SQRT12Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/SQRT2.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/SQRT2.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SQRT2Docs = void 0;
var SQRT2Docs = {
  name: 'SQRT2',
  category: 'Constants',
  syntax: ['SQRT2'],
  description: 'Returns the square root of 2, approximately equal to 1.414',
  examples: ['SQRT2', 'sqrt(2)'],
  seealso: []
};
exports.SQRT2Docs = SQRT2Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/e.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/e.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.eDocs = void 0;
var eDocs = {
  name: 'e',
  category: 'Constants',
  syntax: ['e'],
  description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
  examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
  seealso: ['exp']
};
exports.eDocs = eDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/false.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/false.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.falseDocs = void 0;
var falseDocs = {
  name: 'false',
  category: 'Constants',
  syntax: ['false'],
  description: 'Boolean value false',
  examples: ['false'],
  seealso: ['true']
};
exports.falseDocs = falseDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/i.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/i.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.iDocs = void 0;
var iDocs = {
  name: 'i',
  category: 'Constants',
  syntax: ['i'],
  description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
  examples: ['i', 'i * i', 'sqrt(-1)'],
  seealso: []
};
exports.iDocs = iDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/null.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/null.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nullDocs = void 0;
var nullDocs = {
  name: 'null',
  category: 'Constants',
  syntax: ['null'],
  description: 'Value null',
  examples: ['null'],
  seealso: ['true', 'false']
};
exports.nullDocs = nullDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/phi.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/phi.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.phiDocs = void 0;
var phiDocs = {
  name: 'phi',
  category: 'Constants',
  syntax: ['phi'],
  description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
  examples: ['phi'],
  seealso: []
};
exports.phiDocs = phiDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/pi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/pi.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.piDocs = void 0;
var piDocs = {
  name: 'pi',
  category: 'Constants',
  syntax: ['pi'],
  description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
  examples: ['pi', 'sin(pi/2)'],
  seealso: ['tau']
};
exports.piDocs = piDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/tau.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/tau.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tauDocs = void 0;
var tauDocs = {
  name: 'tau',
  category: 'Constants',
  syntax: ['tau'],
  description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
  examples: ['tau', '2 * pi'],
  seealso: ['pi']
};
exports.tauDocs = tauDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/true.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/true.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.trueDocs = void 0;
var trueDocs = {
  name: 'true',
  category: 'Constants',
  syntax: ['true'],
  description: 'Boolean value true',
  examples: ['true'],
  seealso: ['false']
};
exports.trueDocs = trueDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/version.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/version.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.versionDocs = void 0;
var versionDocs = {
  name: 'version',
  category: 'Constants',
  syntax: ['version'],
  description: 'A string with the version number of math.js',
  examples: ['version'],
  seealso: []
};
exports.versionDocs = versionDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/bignumber.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/bignumber.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bignumberDocs = void 0;
var bignumberDocs = {
  name: 'bignumber',
  category: 'Construction',
  syntax: ['bignumber(x)'],
  description: 'Create a big number from a number or string.',
  examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
  seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};
exports.bignumberDocs = bignumberDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/boolean.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/boolean.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.booleanDocs = void 0;
var booleanDocs = {
  name: 'boolean',
  category: 'Construction',
  syntax: ['x', 'boolean(x)'],
  description: 'Convert a string or number into a boolean.',
  examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
  seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
};
exports.booleanDocs = booleanDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/complex.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/complex.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.complexDocs = void 0;
var complexDocs = {
  name: 'complex',
  category: 'Construction',
  syntax: ['complex()', 'complex(re, im)', 'complex(string)'],
  description: 'Create a complex number.',
  examples: ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
  seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
};
exports.complexDocs = complexDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/createUnit.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/createUnit.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnitDocs = void 0;
var createUnitDocs = {
  name: 'createUnit',
  category: 'Construction',
  syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],
  description: 'Create a user-defined unit and register it with the Unit type.',
  examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  seealso: ['unit', 'splitUnit']
};
exports.createUnitDocs = createUnitDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/fraction.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/fraction.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fractionDocs = void 0;
var fractionDocs = {
  name: 'fraction',
  category: 'Construction',
  syntax: ['fraction(num)', 'fraction(num,den)'],
  description: 'Create a fraction from a number or from a numerator and denominator.',
  examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
};
exports.fractionDocs = fractionDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.indexDocs = void 0;
var indexDocs = {
  name: 'index',
  category: 'Construction',
  syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
  description: 'Create an index to get or replace a subset of a matrix',
  examples: ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
  seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
};
exports.indexDocs = indexDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/matrix.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/matrix.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixDocs = void 0;
var matrixDocs = {
  name: 'matrix',
  category: 'Construction',
  syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
  description: 'Create a matrix.',
  examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
};
exports.matrixDocs = matrixDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/number.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/number.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.numberDocs = void 0;
var numberDocs = {
  name: 'number',
  category: 'Construction',
  syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],
  description: 'Create a number or convert a string or boolean into a number.',
  examples: ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
  seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};
exports.numberDocs = numberDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/sparse.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/sparse.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sparseDocs = void 0;
var sparseDocs = {
  name: 'sparse',
  category: 'Construction',
  syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  description: 'Create a sparse matrix.',
  examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
};
exports.sparseDocs = sparseDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/splitUnit.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/splitUnit.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.splitUnitDocs = void 0;
var splitUnitDocs = {
  name: 'splitUnit',
  category: 'Construction',
  syntax: ['splitUnit(unit: Unit, parts: Unit[])'],
  description: 'Split a unit in an array of units whose sum is equal to the original unit.',
  examples: ['splitUnit(1 m, ["feet", "inch"])'],
  seealso: ['unit', 'createUnit']
};
exports.splitUnitDocs = splitUnitDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/string.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/string.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stringDocs = void 0;
var stringDocs = {
  name: 'string',
  category: 'Construction',
  syntax: ['"text"', 'string(x)'],
  description: 'Create a string or convert a value to a string',
  examples: ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
};
exports.stringDocs = stringDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/unit.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/unit.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unitDocs = void 0;
var unitDocs = {
  name: 'unit',
  category: 'Construction',
  syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],
  description: 'Create a unit.',
  examples: ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
};
exports.unitDocs = unitDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/config.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/config.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.configDocs = void 0;
var configDocs = {
  name: 'config',
  category: 'Core',
  syntax: ['config()', 'config(options)'],
  description: 'Get configuration or change configuration.',
  examples: ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
  seealso: []
};
exports.configDocs = configDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/import.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/import.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.importDocs = void 0;
var importDocs = {
  name: 'import',
  category: 'Core',
  syntax: ['import(functions)', 'import(functions, options)'],
  description: 'Import functions or constants from an object.',
  examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
  seealso: []
};
exports.importDocs = importDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/typed.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/typed.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.typedDocs = void 0;
var typedDocs = {
  name: 'typed',
  category: 'Core',
  syntax: ['typed(signatures)', 'typed(name, signatures)'],
  description: 'Create a typed function.',
  examples: ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
  seealso: []
};
exports.typedDocs = typedDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/embeddedDocs.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/embeddedDocs.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.embeddedDocs = void 0;

var _bignumber = __webpack_require__(/*! ./construction/bignumber.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/bignumber.js");

var _typeOf = __webpack_require__(/*! ./function/utils/typeOf.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/typeOf.js");

var _isZero = __webpack_require__(/*! ./function/utils/isZero.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isZero.js");

var _isPrime = __webpack_require__(/*! ./function/utils/isPrime.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isPrime.js");

var _isPositive = __webpack_require__(/*! ./function/utils/isPositive.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isPositive.js");

var _isNumeric = __webpack_require__(/*! ./function/utils/isNumeric.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNumeric.js");

var _hasNumericValue = __webpack_require__(/*! ./function/utils/hasNumericValue.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/hasNumericValue.js");

var _isNegative = __webpack_require__(/*! ./function/utils/isNegative.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNegative.js");

var _isInteger = __webpack_require__(/*! ./function/utils/isInteger.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isInteger.js");

var _isNaN = __webpack_require__(/*! ./function/utils/isNaN.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNaN.js");

var _format = __webpack_require__(/*! ./function/utils/format.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/format.js");

var _bin = __webpack_require__(/*! ./function/utils/bin.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/bin.js");

var _oct = __webpack_require__(/*! ./function/utils/oct.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/oct.js");

var _hex = __webpack_require__(/*! ./function/utils/hex.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/hex.js");

var _clone = __webpack_require__(/*! ./function/utils/clone.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/clone.js");

var _to = __webpack_require__(/*! ./function/units/to.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/units/to.js");

var _tanh = __webpack_require__(/*! ./function/trigonometry/tanh.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/tanh.js");

var _tan = __webpack_require__(/*! ./function/trigonometry/tan.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/tan.js");

var _sinh = __webpack_require__(/*! ./function/trigonometry/sinh.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sinh.js");

var _sech = __webpack_require__(/*! ./function/trigonometry/sech.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sech.js");

var _sec = __webpack_require__(/*! ./function/trigonometry/sec.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sec.js");

var _csch = __webpack_require__(/*! ./function/trigonometry/csch.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/csch.js");

var _csc = __webpack_require__(/*! ./function/trigonometry/csc.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/csc.js");

var _coth = __webpack_require__(/*! ./function/trigonometry/coth.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/coth.js");

var _cot = __webpack_require__(/*! ./function/trigonometry/cot.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cot.js");

var _cosh = __webpack_require__(/*! ./function/trigonometry/cosh.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cosh.js");

var _cos = __webpack_require__(/*! ./function/trigonometry/cos.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cos.js");

var _atan = __webpack_require__(/*! ./function/trigonometry/atan2.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atan2.js");

var _atanh = __webpack_require__(/*! ./function/trigonometry/atanh.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atanh.js");

var _atan2 = __webpack_require__(/*! ./function/trigonometry/atan.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atan.js");

var _asinh = __webpack_require__(/*! ./function/trigonometry/asinh.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asinh.js");

var _asin = __webpack_require__(/*! ./function/trigonometry/asin.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asin.js");

var _asech = __webpack_require__(/*! ./function/trigonometry/asech.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asech.js");

var _asec = __webpack_require__(/*! ./function/trigonometry/asec.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asec.js");

var _acsch = __webpack_require__(/*! ./function/trigonometry/acsch.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acsch.js");

var _acsc = __webpack_require__(/*! ./function/trigonometry/acsc.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acsc.js");

var _acoth = __webpack_require__(/*! ./function/trigonometry/acoth.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acoth.js");

var _acot = __webpack_require__(/*! ./function/trigonometry/acot.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acot.js");

var _acosh = __webpack_require__(/*! ./function/trigonometry/acosh.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acosh.js");

var _acos = __webpack_require__(/*! ./function/trigonometry/acos.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acos.js");

var _sum = __webpack_require__(/*! ./function/statistics/sum.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/sum.js");

var _std = __webpack_require__(/*! ./function/statistics/std.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/std.js");

var _quantileSeq = __webpack_require__(/*! ./function/statistics/quantileSeq.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/quantileSeq.js");

var _prod = __webpack_require__(/*! ./function/statistics/prod.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/prod.js");

var _mode = __webpack_require__(/*! ./function/statistics/mode.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mode.js");

var _min = __webpack_require__(/*! ./function/statistics/min.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/min.js");

var _median = __webpack_require__(/*! ./function/statistics/median.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/median.js");

var _mean = __webpack_require__(/*! ./function/statistics/mean.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mean.js");

var _max = __webpack_require__(/*! ./function/statistics/max.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/max.js");

var _mad = __webpack_require__(/*! ./function/statistics/mad.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mad.js");

var _erf = __webpack_require__(/*! ./function/special/erf.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/special/erf.js");

var _setUnion = __webpack_require__(/*! ./function/set/setUnion.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setUnion.js");

var _setSymDifference = __webpack_require__(/*! ./function/set/setSymDifference.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSymDifference.js");

var _setSize = __webpack_require__(/*! ./function/set/setSize.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSize.js");

var _setPowerset = __webpack_require__(/*! ./function/set/setPowerset.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setPowerset.js");

var _setMultiplicity = __webpack_require__(/*! ./function/set/setMultiplicity.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setMultiplicity.js");

var _setIsSubset = __webpack_require__(/*! ./function/set/setIsSubset.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIsSubset.js");

var _setIntersect = __webpack_require__(/*! ./function/set/setIntersect.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIntersect.js");

var _setDistinct = __webpack_require__(/*! ./function/set/setDistinct.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setDistinct.js");

var _setDifference = __webpack_require__(/*! ./function/set/setDifference.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setDifference.js");

var _setCartesian = __webpack_require__(/*! ./function/set/setCartesian.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setCartesian.js");

var _unequal = __webpack_require__(/*! ./function/relational/unequal.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/unequal.js");

var _smallerEq = __webpack_require__(/*! ./function/relational/smallerEq.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/smallerEq.js");

var _smaller = __webpack_require__(/*! ./function/relational/smaller.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/smaller.js");

var _largerEq = __webpack_require__(/*! ./function/relational/largerEq.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/largerEq.js");

var _larger = __webpack_require__(/*! ./function/relational/larger.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/larger.js");

var _equalText = __webpack_require__(/*! ./function/relational/equalText.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/equalText.js");

var _equal = __webpack_require__(/*! ./function/relational/equal.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/equal.js");

var _deepEqual = __webpack_require__(/*! ./function/relational/deepEqual.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/deepEqual.js");

var _compareText = __webpack_require__(/*! ./function/relational/compareText.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compareText.js");

var _compareNatural = __webpack_require__(/*! ./function/relational/compareNatural.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compareNatural.js");

var _compare = __webpack_require__(/*! ./function/relational/compare.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compare.js");

var _randomInt = __webpack_require__(/*! ./function/probability/randomInt.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/randomInt.js");

var _random = __webpack_require__(/*! ./function/probability/random.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/random.js");

var _pickRandom = __webpack_require__(/*! ./function/probability/pickRandom.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/pickRandom.js");

var _permutations = __webpack_require__(/*! ./function/probability/permutations.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/permutations.js");

var _multinomial = __webpack_require__(/*! ./function/probability/multinomial.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/multinomial.js");

var _kldivergence = __webpack_require__(/*! ./function/probability/kldivergence.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/kldivergence.js");

var _gamma = __webpack_require__(/*! ./function/probability/gamma.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/gamma.js");

var _factorial = __webpack_require__(/*! ./function/probability/factorial.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/factorial.js");

var _combinations = __webpack_require__(/*! ./function/probability/combinations.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/combinations.js");

var _combinationsWithRep = __webpack_require__(/*! ./function/probability/combinationsWithRep.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/combinationsWithRep.js");

var _zeros = __webpack_require__(/*! ./function/matrix/zeros.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/zeros.js");

var _transpose = __webpack_require__(/*! ./function/matrix/transpose.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/transpose.js");

var _trace = __webpack_require__(/*! ./function/matrix/trace.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/trace.js");

var _subset = __webpack_require__(/*! ./function/matrix/subset.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/subset.js");

var _squeeze = __webpack_require__(/*! ./function/matrix/squeeze.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/squeeze.js");

var _sort = __webpack_require__(/*! ./function/matrix/sort.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/sort.js");

var _size = __webpack_require__(/*! ./function/matrix/size.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/size.js");

var _diff = __webpack_require__(/*! ./function/matrix/diff.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/diff.js");

var _reshape = __webpack_require__(/*! ./function/matrix/reshape.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/reshape.js");

var _resize = __webpack_require__(/*! ./function/matrix/resize.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/resize.js");

var _range = __webpack_require__(/*! ./function/matrix/range.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/range.js");

var _partitionSelect = __webpack_require__(/*! ./function/matrix/partitionSelect.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/partitionSelect.js");

var _ones = __webpack_require__(/*! ./function/matrix/ones.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/ones.js");

var _map = __webpack_require__(/*! ./function/matrix/map.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/map.js");

var _kron = __webpack_require__(/*! ./function/matrix/kron.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/kron.js");

var _inv = __webpack_require__(/*! ./function/matrix/inv.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/inv.js");

var _forEach = __webpack_require__(/*! ./function/matrix/forEach.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/forEach.js");

var _flatten = __webpack_require__(/*! ./function/matrix/flatten.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/flatten.js");

var _filter = __webpack_require__(/*! ./function/matrix/filter.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/filter.js");

var _identity = __webpack_require__(/*! ./function/matrix/identity.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/identity.js");

var _getMatrixDataType = __webpack_require__(/*! ./function/matrix/getMatrixDataType.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/getMatrixDataType.js");

var _dot = __webpack_require__(/*! ./function/matrix/dot.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/dot.js");

var _diag = __webpack_require__(/*! ./function/matrix/diag.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/diag.js");

var _det = __webpack_require__(/*! ./function/matrix/det.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/det.js");

var _ctranspose = __webpack_require__(/*! ./function/matrix/ctranspose.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/ctranspose.js");

var _cross = __webpack_require__(/*! ./function/matrix/cross.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/cross.js");

var _concat = __webpack_require__(/*! ./function/matrix/concat.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/concat.js");

var _count = __webpack_require__(/*! ./function/matrix/count.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/count.js");

var _xor = __webpack_require__(/*! ./function/logical/xor.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/xor.js");

var _or = __webpack_require__(/*! ./function/logical/or.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/or.js");

var _not = __webpack_require__(/*! ./function/logical/not.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/not.js");

var _and = __webpack_require__(/*! ./function/logical/and.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/and.js");

var _intersect = __webpack_require__(/*! ./function/geometry/intersect.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/geometry/intersect.js");

var _distance = __webpack_require__(/*! ./function/geometry/distance.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/geometry/distance.js");

var _help = __webpack_require__(/*! ./function/expression/help.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/expression/help.js");

var _evaluate = __webpack_require__(/*! ./function/expression/evaluate.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/expression/evaluate.js");

var _im = __webpack_require__(/*! ./function/complex/im.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/im.js");

var _re = __webpack_require__(/*! ./function/complex/re.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/re.js");

var _conj = __webpack_require__(/*! ./function/complex/conj.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/conj.js");

var _arg = __webpack_require__(/*! ./function/complex/arg.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/arg.js");

var _typed = __webpack_require__(/*! ./core/typed.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/typed.js");

var _import = __webpack_require__(/*! ./core/import.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/import.js");

var _config = __webpack_require__(/*! ./core/config.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/core/config.js");

var _stirlingS = __webpack_require__(/*! ./function/combinatorics/stirlingS2.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/stirlingS2.js");

var _composition = __webpack_require__(/*! ./function/combinatorics/composition.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/composition.js");

var _catalan = __webpack_require__(/*! ./function/combinatorics/catalan.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/catalan.js");

var _bellNumbers = __webpack_require__(/*! ./function/combinatorics/bellNumbers.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/bellNumbers.js");

var _rightLogShift = __webpack_require__(/*! ./function/bitwise/rightLogShift.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/rightLogShift.js");

var _rightArithShift = __webpack_require__(/*! ./function/bitwise/rightArithShift.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/rightArithShift.js");

var _leftShift = __webpack_require__(/*! ./function/bitwise/leftShift.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/leftShift.js");

var _bitXor = __webpack_require__(/*! ./function/bitwise/bitXor.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitXor.js");

var _bitOr = __webpack_require__(/*! ./function/bitwise/bitOr.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitOr.js");

var _bitNot = __webpack_require__(/*! ./function/bitwise/bitNot.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitNot.js");

var _bitAnd = __webpack_require__(/*! ./function/bitwise/bitAnd.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitAnd.js");

var _xgcd = __webpack_require__(/*! ./function/arithmetic/xgcd.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/xgcd.js");

var _unaryPlus = __webpack_require__(/*! ./function/arithmetic/unaryPlus.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/unaryPlus.js");

var _unaryMinus = __webpack_require__(/*! ./function/arithmetic/unaryMinus.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/unaryMinus.js");

var _square = __webpack_require__(/*! ./function/arithmetic/square.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/square.js");

var _sqrtm = __webpack_require__(/*! ./function/arithmetic/sqrtm.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sqrtm.js");

var _sqrt = __webpack_require__(/*! ./function/arithmetic/sqrt.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sqrt.js");

var _sign = __webpack_require__(/*! ./function/arithmetic/sign.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sign.js");

var _round = __webpack_require__(/*! ./function/arithmetic/round.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/round.js");

var _pow = __webpack_require__(/*! ./function/arithmetic/pow.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/pow.js");

var _nthRoots = __webpack_require__(/*! ./function/arithmetic/nthRoots.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/nthRoots.js");

var _nthRoot = __webpack_require__(/*! ./function/arithmetic/nthRoot.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/nthRoot.js");

var _norm = __webpack_require__(/*! ./function/arithmetic/norm.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/norm.js");

var _multiply = __webpack_require__(/*! ./function/arithmetic/multiply.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/multiply.js");

var _mod = __webpack_require__(/*! ./function/arithmetic/mod.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/mod.js");

var _log = __webpack_require__(/*! ./function/arithmetic/log10.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log10.js");

var _log1p = __webpack_require__(/*! ./function/arithmetic/log1p.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log1p.js");

var _log2 = __webpack_require__(/*! ./function/arithmetic/log2.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log2.js");

var _log3 = __webpack_require__(/*! ./function/arithmetic/log.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log.js");

var _lcm = __webpack_require__(/*! ./function/arithmetic/lcm.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/lcm.js");

var _hypot = __webpack_require__(/*! ./function/arithmetic/hypot.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/hypot.js");

var _gcd = __webpack_require__(/*! ./function/arithmetic/gcd.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/gcd.js");

var _floor = __webpack_require__(/*! ./function/arithmetic/floor.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/floor.js");

var _fix = __webpack_require__(/*! ./function/arithmetic/fix.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/fix.js");

var _expm = __webpack_require__(/*! ./function/arithmetic/expm1.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/expm1.js");

var _expm2 = __webpack_require__(/*! ./function/arithmetic/expm.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/expm.js");

var _eigs = __webpack_require__(/*! ./function/matrix/eigs.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/eigs.js");

var _exp = __webpack_require__(/*! ./function/arithmetic/exp.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/exp.js");

var _dotMultiply = __webpack_require__(/*! ./function/arithmetic/dotMultiply.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotMultiply.js");

var _dotDivide = __webpack_require__(/*! ./function/arithmetic/dotDivide.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotDivide.js");

var _divide = __webpack_require__(/*! ./function/arithmetic/divide.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/divide.js");

var _cube = __webpack_require__(/*! ./function/arithmetic/cube.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/cube.js");

var _ceil = __webpack_require__(/*! ./function/arithmetic/ceil.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/ceil.js");

var _cbrt = __webpack_require__(/*! ./function/arithmetic/cbrt.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/cbrt.js");

var _add = __webpack_require__(/*! ./function/arithmetic/add.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/add.js");

var _abs = __webpack_require__(/*! ./function/arithmetic/abs.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/abs.js");

var _qr = __webpack_require__(/*! ./function/algebra/qr.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/qr.js");

var _usolve = __webpack_require__(/*! ./function/algebra/usolve.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/usolve.js");

var _usolveAll = __webpack_require__(/*! ./function/algebra/usolveAll.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/usolveAll.js");

var _slu = __webpack_require__(/*! ./function/algebra/slu.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/slu.js");

var _rationalize = __webpack_require__(/*! ./function/algebra/rationalize.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/rationalize.js");

var _simplify = __webpack_require__(/*! ./function/algebra/simplify.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/simplify.js");

var _lup = __webpack_require__(/*! ./function/algebra/lup.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lup.js");

var _lsolve = __webpack_require__(/*! ./function/algebra/lsolve.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lsolve.js");

var _lsolveAll = __webpack_require__(/*! ./function/algebra/lsolveAll.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lsolveAll.js");

var _derivative = __webpack_require__(/*! ./function/algebra/derivative.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/derivative.js");

var _version = __webpack_require__(/*! ./constants/version.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/version.js");

var _true = __webpack_require__(/*! ./constants/true.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/true.js");

var _tau = __webpack_require__(/*! ./constants/tau.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/tau.js");

var _SQRT = __webpack_require__(/*! ./constants/SQRT2.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/SQRT2.js");

var _SQRT1_ = __webpack_require__(/*! ./constants/SQRT1_2.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/SQRT1_2.js");

var _phi = __webpack_require__(/*! ./constants/phi.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/phi.js");

var _pi = __webpack_require__(/*! ./constants/pi.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/pi.js");

var _null = __webpack_require__(/*! ./constants/null.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/null.js");

var _NaN = __webpack_require__(/*! ./constants/NaN.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/NaN.js");

var _LOG10E = __webpack_require__(/*! ./constants/LOG10E.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LOG10E.js");

var _LOG2E = __webpack_require__(/*! ./constants/LOG2E.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LOG2E.js");

var _LN = __webpack_require__(/*! ./constants/LN10.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LN10.js");

var _LN2 = __webpack_require__(/*! ./constants/LN2.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/LN2.js");

var _Infinity = __webpack_require__(/*! ./constants/Infinity.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/Infinity.js");

var _i = __webpack_require__(/*! ./constants/i.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/i.js");

var _false = __webpack_require__(/*! ./constants/false.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/false.js");

var _e = __webpack_require__(/*! ./constants/e.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/constants/e.js");

var _unit = __webpack_require__(/*! ./construction/unit.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/unit.js");

var _string = __webpack_require__(/*! ./construction/string.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/string.js");

var _splitUnit = __webpack_require__(/*! ./construction/splitUnit.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/splitUnit.js");

var _sparse = __webpack_require__(/*! ./construction/sparse.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/sparse.js");

var _number = __webpack_require__(/*! ./construction/number.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/number.js");

var _matrix = __webpack_require__(/*! ./construction/matrix.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/matrix.js");

var _matrixFromFunction = __webpack_require__(/*! ./function/matrix/matrixFromFunction.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromFunction.js");

var _matrixFromRows = __webpack_require__(/*! ./function/matrix/matrixFromRows.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromRows.js");

var _matrixFromColumns = __webpack_require__(/*! ./function/matrix/matrixFromColumns.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromColumns.js");

var _index = __webpack_require__(/*! ./construction/index.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/index.js");

var _fraction = __webpack_require__(/*! ./construction/fraction.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/fraction.js");

var _createUnit = __webpack_require__(/*! ./construction/createUnit.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/createUnit.js");

var _complex = __webpack_require__(/*! ./construction/complex.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/complex.js");

var _boolean = __webpack_require__(/*! ./construction/boolean.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/construction/boolean.js");

var _dotPow = __webpack_require__(/*! ./function/arithmetic/dotPow.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotPow.js");

var _lusolve = __webpack_require__(/*! ./function/algebra/lusolve.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lusolve.js");

var _subtract = __webpack_require__(/*! ./function/arithmetic/subtract.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/subtract.js");

var _variance = __webpack_require__(/*! ./function/statistics/variance.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/variance.js");

var _sin = __webpack_require__(/*! ./function/trigonometry/sin.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sin.js");

var _numeric = __webpack_require__(/*! ./function/utils/numeric.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/numeric.js");

var _column = __webpack_require__(/*! ./function/matrix/column.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/column.js");

var _row = __webpack_require__(/*! ./function/matrix/row.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/row.js");

var _rotationMatrix = __webpack_require__(/*! ./function/matrix/rotationMatrix.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/rotationMatrix.js");

var _rotate = __webpack_require__(/*! ./function/matrix/rotate.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/rotate.js");

var embeddedDocs = {
  // construction functions
  bignumber: _bignumber.bignumberDocs,
  "boolean": _boolean.booleanDocs,
  complex: _complex.complexDocs,
  createUnit: _createUnit.createUnitDocs,
  fraction: _fraction.fractionDocs,
  index: _index.indexDocs,
  matrix: _matrix.matrixDocs,
  number: _number.numberDocs,
  sparse: _sparse.sparseDocs,
  splitUnit: _splitUnit.splitUnitDocs,
  string: _string.stringDocs,
  unit: _unit.unitDocs,
  // constants
  e: _e.eDocs,
  E: _e.eDocs,
  "false": _false.falseDocs,
  i: _i.iDocs,
  Infinity: _Infinity.InfinityDocs,
  LN2: _LN2.LN2Docs,
  LN10: _LN.LN10Docs,
  LOG2E: _LOG2E.LOG2EDocs,
  LOG10E: _LOG10E.LOG10EDocs,
  NaN: _NaN.NaNDocs,
  "null": _null.nullDocs,
  pi: _pi.piDocs,
  PI: _pi.piDocs,
  phi: _phi.phiDocs,
  SQRT1_2: _SQRT1_.SQRT12Docs,
  SQRT2: _SQRT.SQRT2Docs,
  tau: _tau.tauDocs,
  "true": _true.trueDocs,
  version: _version.versionDocs,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: 'Speed of light in vacuum',
    examples: ['speedOfLight']
  },
  gravitationConstant: {
    description: 'Newtonian constant of gravitation',
    examples: ['gravitationConstant']
  },
  planckConstant: {
    description: 'Planck constant',
    examples: ['planckConstant']
  },
  reducedPlanckConstant: {
    description: 'Reduced Planck constant',
    examples: ['reducedPlanckConstant']
  },
  magneticConstant: {
    description: 'Magnetic constant (vacuum permeability)',
    examples: ['magneticConstant']
  },
  electricConstant: {
    description: 'Electric constant (vacuum permeability)',
    examples: ['electricConstant']
  },
  vacuumImpedance: {
    description: 'Characteristic impedance of vacuum',
    examples: ['vacuumImpedance']
  },
  coulomb: {
    description: 'Coulomb\'s constant',
    examples: ['coulomb']
  },
  elementaryCharge: {
    description: 'Elementary charge',
    examples: ['elementaryCharge']
  },
  bohrMagneton: {
    description: 'Borh magneton',
    examples: ['bohrMagneton']
  },
  conductanceQuantum: {
    description: 'Conductance quantum',
    examples: ['conductanceQuantum']
  },
  inverseConductanceQuantum: {
    description: 'Inverse conductance quantum',
    examples: ['inverseConductanceQuantum']
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: 'Magnetic flux quantum',
    examples: ['magneticFluxQuantum']
  },
  nuclearMagneton: {
    description: 'Nuclear magneton',
    examples: ['nuclearMagneton']
  },
  klitzing: {
    description: 'Von Klitzing constant',
    examples: ['klitzing']
  },
  bohrRadius: {
    description: 'Borh radius',
    examples: ['bohrRadius']
  },
  classicalElectronRadius: {
    description: 'Classical electron radius',
    examples: ['classicalElectronRadius']
  },
  electronMass: {
    description: 'Electron mass',
    examples: ['electronMass']
  },
  fermiCoupling: {
    description: 'Fermi coupling constant',
    examples: ['fermiCoupling']
  },
  fineStructure: {
    description: 'Fine-structure constant',
    examples: ['fineStructure']
  },
  hartreeEnergy: {
    description: 'Hartree energy',
    examples: ['hartreeEnergy']
  },
  protonMass: {
    description: 'Proton mass',
    examples: ['protonMass']
  },
  deuteronMass: {
    description: 'Deuteron Mass',
    examples: ['deuteronMass']
  },
  neutronMass: {
    description: 'Neutron mass',
    examples: ['neutronMass']
  },
  quantumOfCirculation: {
    description: 'Quantum of circulation',
    examples: ['quantumOfCirculation']
  },
  rydberg: {
    description: 'Rydberg constant',
    examples: ['rydberg']
  },
  thomsonCrossSection: {
    description: 'Thomson cross section',
    examples: ['thomsonCrossSection']
  },
  weakMixingAngle: {
    description: 'Weak mixing angle',
    examples: ['weakMixingAngle']
  },
  efimovFactor: {
    description: 'Efimov factor',
    examples: ['efimovFactor']
  },
  atomicMass: {
    description: 'Atomic mass constant',
    examples: ['atomicMass']
  },
  avogadro: {
    description: 'Avogadro\'s number',
    examples: ['avogadro']
  },
  boltzmann: {
    description: 'Boltzmann constant',
    examples: ['boltzmann']
  },
  faraday: {
    description: 'Faraday constant',
    examples: ['faraday']
  },
  firstRadiation: {
    description: 'First radiation constant',
    examples: ['firstRadiation']
  },
  loschmidt: {
    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
    examples: ['loschmidt']
  },
  gasConstant: {
    description: 'Gas constant',
    examples: ['gasConstant']
  },
  molarPlanckConstant: {
    description: 'Molar Planck constant',
    examples: ['molarPlanckConstant']
  },
  molarVolume: {
    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
    examples: ['molarVolume']
  },
  sackurTetrode: {
    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
    examples: ['sackurTetrode']
  },
  secondRadiation: {
    description: 'Second radiation constant',
    examples: ['secondRadiation']
  },
  stefanBoltzmann: {
    description: 'Stefan-Boltzmann constant',
    examples: ['stefanBoltzmann']
  },
  wienDisplacement: {
    description: 'Wien displacement law constant',
    examples: ['wienDisplacement']
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: 'Molar mass constant',
    examples: ['molarMass']
  },
  molarMassC12: {
    description: 'Molar mass constant of carbon-12',
    examples: ['molarMassC12']
  },
  gravity: {
    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
    examples: ['gravity']
  },
  planckLength: {
    description: 'Planck length',
    examples: ['planckLength']
  },
  planckMass: {
    description: 'Planck mass',
    examples: ['planckMass']
  },
  planckTime: {
    description: 'Planck time',
    examples: ['planckTime']
  },
  planckCharge: {
    description: 'Planck charge',
    examples: ['planckCharge']
  },
  planckTemperature: {
    description: 'Planck temperature',
    examples: ['planckTemperature']
  },
  // functions - algebra
  derivative: _derivative.derivativeDocs,
  lsolve: _lsolve.lsolveDocs,
  lsolveAll: _lsolveAll.lsolveAllDocs,
  lup: _lup.lupDocs,
  lusolve: _lusolve.lusolveDocs,
  simplify: _simplify.simplifyDocs,
  rationalize: _rationalize.rationalizeDocs,
  slu: _slu.sluDocs,
  usolve: _usolve.usolveDocs,
  usolveAll: _usolveAll.usolveAllDocs,
  qr: _qr.qrDocs,
  // functions - arithmetic
  abs: _abs.absDocs,
  add: _add.addDocs,
  cbrt: _cbrt.cbrtDocs,
  ceil: _ceil.ceilDocs,
  cube: _cube.cubeDocs,
  divide: _divide.divideDocs,
  dotDivide: _dotDivide.dotDivideDocs,
  dotMultiply: _dotMultiply.dotMultiplyDocs,
  dotPow: _dotPow.dotPowDocs,
  exp: _exp.expDocs,
  expm: _expm2.expmDocs,
  expm1: _expm.expm1Docs,
  fix: _fix.fixDocs,
  floor: _floor.floorDocs,
  gcd: _gcd.gcdDocs,
  hypot: _hypot.hypotDocs,
  lcm: _lcm.lcmDocs,
  log: _log3.logDocs,
  log2: _log2.log2Docs,
  log1p: _log1p.log1pDocs,
  log10: _log.log10Docs,
  mod: _mod.modDocs,
  multiply: _multiply.multiplyDocs,
  norm: _norm.normDocs,
  nthRoot: _nthRoot.nthRootDocs,
  nthRoots: _nthRoots.nthRootsDocs,
  pow: _pow.powDocs,
  round: _round.roundDocs,
  sign: _sign.signDocs,
  sqrt: _sqrt.sqrtDocs,
  sqrtm: _sqrtm.sqrtmDocs,
  square: _square.squareDocs,
  subtract: _subtract.subtractDocs,
  unaryMinus: _unaryMinus.unaryMinusDocs,
  unaryPlus: _unaryPlus.unaryPlusDocs,
  xgcd: _xgcd.xgcdDocs,
  // functions - bitwise
  bitAnd: _bitAnd.bitAndDocs,
  bitNot: _bitNot.bitNotDocs,
  bitOr: _bitOr.bitOrDocs,
  bitXor: _bitXor.bitXorDocs,
  leftShift: _leftShift.leftShiftDocs,
  rightArithShift: _rightArithShift.rightArithShiftDocs,
  rightLogShift: _rightLogShift.rightLogShiftDocs,
  // functions - combinatorics
  bellNumbers: _bellNumbers.bellNumbersDocs,
  catalan: _catalan.catalanDocs,
  composition: _composition.compositionDocs,
  stirlingS2: _stirlingS.stirlingS2Docs,
  // functions - core
  config: _config.configDocs,
  "import": _import.importDocs,
  typed: _typed.typedDocs,
  // functions - complex
  arg: _arg.argDocs,
  conj: _conj.conjDocs,
  re: _re.reDocs,
  im: _im.imDocs,
  // functions - expression
  evaluate: _evaluate.evaluateDocs,
  help: _help.helpDocs,
  // functions - geometry
  distance: _distance.distanceDocs,
  intersect: _intersect.intersectDocs,
  // functions - logical
  and: _and.andDocs,
  not: _not.notDocs,
  or: _or.orDocs,
  xor: _xor.xorDocs,
  // functions - matrix
  concat: _concat.concatDocs,
  count: _count.countDocs,
  cross: _cross.crossDocs,
  column: _column.columnDocs,
  ctranspose: _ctranspose.ctransposeDocs,
  det: _det.detDocs,
  diag: _diag.diagDocs,
  diff: _diff.diffDocs,
  dot: _dot.dotDocs,
  getMatrixDataType: _getMatrixDataType.getMatrixDataTypeDocs,
  identity: _identity.identityDocs,
  filter: _filter.filterDocs,
  flatten: _flatten.flattenDocs,
  forEach: _forEach.forEachDocs,
  inv: _inv.invDocs,
  eigs: _eigs.eigsDocs,
  kron: _kron.kronDocs,
  matrixFromFunction: _matrixFromFunction.matrixFromFunctionDocs,
  matrixFromRows: _matrixFromRows.matrixFromRowsDocs,
  matrixFromColumns: _matrixFromColumns.matrixFromColumnsDocs,
  map: _map.mapDocs,
  ones: _ones.onesDocs,
  partitionSelect: _partitionSelect.partitionSelectDocs,
  range: _range.rangeDocs,
  resize: _resize.resizeDocs,
  reshape: _reshape.reshapeDocs,
  rotate: _rotate.rotateDocs,
  rotationMatrix: _rotationMatrix.rotationMatrixDocs,
  row: _row.rowDocs,
  size: _size.sizeDocs,
  sort: _sort.sortDocs,
  squeeze: _squeeze.squeezeDocs,
  subset: _subset.subsetDocs,
  trace: _trace.traceDocs,
  transpose: _transpose.transposeDocs,
  zeros: _zeros.zerosDocs,
  // functions - probability
  combinations: _combinations.combinationsDocs,
  combinationsWithRep: _combinationsWithRep.combinationsWithRepDocs,
  // distribution: distributionDocs,
  factorial: _factorial.factorialDocs,
  gamma: _gamma.gammaDocs,
  kldivergence: _kldivergence.kldivergenceDocs,
  multinomial: _multinomial.multinomialDocs,
  permutations: _permutations.permutationsDocs,
  pickRandom: _pickRandom.pickRandomDocs,
  random: _random.randomDocs,
  randomInt: _randomInt.randomIntDocs,
  // functions - relational
  compare: _compare.compareDocs,
  compareNatural: _compareNatural.compareNaturalDocs,
  compareText: _compareText.compareTextDocs,
  deepEqual: _deepEqual.deepEqualDocs,
  equal: _equal.equalDocs,
  equalText: _equalText.equalTextDocs,
  larger: _larger.largerDocs,
  largerEq: _largerEq.largerEqDocs,
  smaller: _smaller.smallerDocs,
  smallerEq: _smallerEq.smallerEqDocs,
  unequal: _unequal.unequalDocs,
  // functions - set
  setCartesian: _setCartesian.setCartesianDocs,
  setDifference: _setDifference.setDifferenceDocs,
  setDistinct: _setDistinct.setDistinctDocs,
  setIntersect: _setIntersect.setIntersectDocs,
  setIsSubset: _setIsSubset.setIsSubsetDocs,
  setMultiplicity: _setMultiplicity.setMultiplicityDocs,
  setPowerset: _setPowerset.setPowersetDocs,
  setSize: _setSize.setSizeDocs,
  setSymDifference: _setSymDifference.setSymDifferenceDocs,
  setUnion: _setUnion.setUnionDocs,
  // functions - special
  erf: _erf.erfDocs,
  // functions - statistics
  mad: _mad.madDocs,
  max: _max.maxDocs,
  mean: _mean.meanDocs,
  median: _median.medianDocs,
  min: _min.minDocs,
  mode: _mode.modeDocs,
  prod: _prod.prodDocs,
  quantileSeq: _quantileSeq.quantileSeqDocs,
  std: _std.stdDocs,
  sum: _sum.sumDocs,
  variance: _variance.varianceDocs,
  // functions - trigonometry
  acos: _acos.acosDocs,
  acosh: _acosh.acoshDocs,
  acot: _acot.acotDocs,
  acoth: _acoth.acothDocs,
  acsc: _acsc.acscDocs,
  acsch: _acsch.acschDocs,
  asec: _asec.asecDocs,
  asech: _asech.asechDocs,
  asin: _asin.asinDocs,
  asinh: _asinh.asinhDocs,
  atan: _atan2.atanDocs,
  atanh: _atanh.atanhDocs,
  atan2: _atan.atan2Docs,
  cos: _cos.cosDocs,
  cosh: _cosh.coshDocs,
  cot: _cot.cotDocs,
  coth: _coth.cothDocs,
  csc: _csc.cscDocs,
  csch: _csch.cschDocs,
  sec: _sec.secDocs,
  sech: _sech.sechDocs,
  sin: _sin.sinDocs,
  sinh: _sinh.sinhDocs,
  tan: _tan.tanDocs,
  tanh: _tanh.tanhDocs,
  // functions - units
  to: _to.toDocs,
  // functions - utils
  clone: _clone.cloneDocs,
  format: _format.formatDocs,
  bin: _bin.binDocs,
  oct: _oct.octDocs,
  hex: _hex.hexDocs,
  isNaN: _isNaN.isNaNDocs,
  isInteger: _isInteger.isIntegerDocs,
  isNegative: _isNegative.isNegativeDocs,
  isNumeric: _isNumeric.isNumericDocs,
  hasNumericValue: _hasNumericValue.hasNumericValueDocs,
  isPositive: _isPositive.isPositiveDocs,
  isPrime: _isPrime.isPrimeDocs,
  isZero: _isZero.isZeroDocs,
  // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
  typeOf: _typeOf.typeOfDocs,
  numeric: _numeric.numericDocs
};
exports.embeddedDocs = embeddedDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/derivative.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/derivative.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.derivativeDocs = void 0;
var derivativeDocs = {
  name: 'derivative',
  category: 'Algebra',
  syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
  description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
  examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
  seealso: ['simplify', 'parse', 'evaluate']
};
exports.derivativeDocs = derivativeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lsolve.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lsolve.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lsolveDocs = void 0;
var lsolveDocs = {
  name: 'lsolve',
  category: 'Algebra',
  syntax: ['x=lsolve(L, b)'],
  description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lsolveAll', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};
exports.lsolveDocs = lsolveDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lsolveAll.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lsolveAll.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lsolveAllDocs = void 0;
var lsolveAllDocs = {
  name: 'lsolveAll',
  category: 'Algebra',
  syntax: ['x=lsolveAll(L, b)'],
  description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lsolve', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};
exports.lsolveAllDocs = lsolveAllDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lup.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lup.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lupDocs = void 0;
var lupDocs = {
  name: 'lup',
  category: 'Algebra',
  syntax: ['lup(m)'],
  description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
  examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
};
exports.lupDocs = lupDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lusolve.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/lusolve.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lusolveDocs = void 0;
var lusolveDocs = {
  name: 'lusolve',
  category: 'Algebra',
  syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
  description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
  seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
};
exports.lusolveDocs = lusolveDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/qr.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/qr.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.qrDocs = void 0;
var qrDocs = {
  name: 'qr',
  category: 'Algebra',
  syntax: ['qr(A)'],
  description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
  examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
  seealso: ['lup', 'slu', 'matrix']
};
exports.qrDocs = qrDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/rationalize.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/rationalize.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rationalizeDocs = void 0;
var rationalizeDocs = {
  name: 'rationalize',
  category: 'Algebra',
  syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
  description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
  examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  seealso: ['simplify']
};
exports.rationalizeDocs = rationalizeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/simplify.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/simplify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.simplifyDocs = void 0;
var simplifyDocs = {
  name: 'simplify',
  category: 'Algebra',
  syntax: ['simplify(expr)', 'simplify(expr, rules)'],
  description: 'Simplify an expression tree.',
  examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
  seealso: ['derivative', 'parse', 'evaluate']
};
exports.simplifyDocs = simplifyDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/slu.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/slu.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sluDocs = void 0;
var sluDocs = {
  name: 'slu',
  category: 'Algebra',
  syntax: ['slu(A, order, threshold)'],
  description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
  examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
};
exports.sluDocs = sluDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/usolve.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/usolve.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.usolveDocs = void 0;
var usolveDocs = {
  name: 'usolve',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['usolveAll', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};
exports.usolveDocs = usolveDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/usolveAll.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/algebra/usolveAll.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.usolveAllDocs = void 0;
var usolveAllDocs = {
  name: 'usolveAll',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['usolve', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};
exports.usolveAllDocs = usolveAllDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/abs.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/abs.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.absDocs = void 0;
var absDocs = {
  name: 'abs',
  category: 'Arithmetic',
  syntax: ['abs(x)'],
  description: 'Compute the absolute value.',
  examples: ['abs(3.5)', 'abs(-4.2)'],
  seealso: ['sign']
};
exports.absDocs = absDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/add.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/add.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.addDocs = void 0;
var addDocs = {
  name: 'add',
  category: 'Operators',
  syntax: ['x + y', 'add(x, y)'],
  description: 'Add two values.',
  examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
  seealso: ['subtract']
};
exports.addDocs = addDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/cbrt.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/cbrt.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cbrtDocs = void 0;
var cbrtDocs = {
  name: 'cbrt',
  category: 'Arithmetic',
  syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],
  description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
  examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
  seealso: ['square', 'sqrt', 'cube', 'multiply']
};
exports.cbrtDocs = cbrtDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/ceil.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/ceil.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ceilDocs = void 0;
var ceilDocs = {
  name: 'ceil',
  category: 'Arithmetic',
  syntax: ['ceil(x)'],
  description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
  examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
  seealso: ['floor', 'fix', 'round']
};
exports.ceilDocs = ceilDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/cube.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/cube.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cubeDocs = void 0;
var cubeDocs = {
  name: 'cube',
  category: 'Arithmetic',
  syntax: ['cube(x)'],
  description: 'Compute the cube of a value. The cube of x is x * x * x.',
  examples: ['cube(2)', '2^3', '2 * 2 * 2'],
  seealso: ['multiply', 'square', 'pow']
};
exports.cubeDocs = cubeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/divide.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/divide.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.divideDocs = void 0;
var divideDocs = {
  name: 'divide',
  category: 'Operators',
  syntax: ['x / y', 'divide(x, y)'],
  description: 'Divide two values.',
  examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
  seealso: ['multiply']
};
exports.divideDocs = divideDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotDivide.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotDivide.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotDivideDocs = void 0;
var dotDivideDocs = {
  name: 'dotDivide',
  category: 'Operators',
  syntax: ['x ./ y', 'dotDivide(x, y)'],
  description: 'Divide two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
  seealso: ['multiply', 'dotMultiply', 'divide']
};
exports.dotDivideDocs = dotDivideDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotMultiply.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotMultiply.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotMultiplyDocs = void 0;
var dotMultiplyDocs = {
  name: 'dotMultiply',
  category: 'Operators',
  syntax: ['x .* y', 'dotMultiply(x, y)'],
  description: 'Multiply two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
  seealso: ['multiply', 'divide', 'dotDivide']
};
exports.dotMultiplyDocs = dotMultiplyDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotPow.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/dotPow.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotPowDocs = void 0;
var dotPowDocs = {
  name: 'dotPow',
  category: 'Operators',
  syntax: ['x .^ y', 'dotPow(x, y)'],
  description: 'Calculates the power of x to y element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
  seealso: ['pow']
};
exports.dotPowDocs = dotPowDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/exp.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/exp.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.expDocs = void 0;
var expDocs = {
  name: 'exp',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Calculate the exponent of a value.',
  examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
  seealso: ['expm', 'expm1', 'pow', 'log']
};
exports.expDocs = expDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/expm.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/expm.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.expmDocs = void 0;
var expmDocs = {
  name: 'expm',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
  examples: ['expm([[0,2],[0,0]])'],
  seealso: ['exp']
};
exports.expmDocs = expmDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/expm1.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/expm1.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.expm1Docs = void 0;
var expm1Docs = {
  name: 'expm1',
  category: 'Arithmetic',
  syntax: ['expm1(x)'],
  description: 'Calculate the value of subtracting 1 from the exponential value.',
  examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
  seealso: ['exp', 'pow', 'log']
};
exports.expm1Docs = expm1Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/fix.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/fix.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fixDocs = void 0;
var fixDocs = {
  name: 'fix',
  category: 'Arithmetic',
  syntax: ['fix(x)'],
  description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
  examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
  seealso: ['ceil', 'floor', 'round']
};
exports.fixDocs = fixDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/floor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/floor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.floorDocs = void 0;
var floorDocs = {
  name: 'floor',
  category: 'Arithmetic',
  syntax: ['floor(x)'],
  description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
  examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
  seealso: ['ceil', 'fix', 'round']
};
exports.floorDocs = floorDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/gcd.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/gcd.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gcdDocs = void 0;
var gcdDocs = {
  name: 'gcd',
  category: 'Arithmetic',
  syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],
  description: 'Compute the greatest common divisor.',
  examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
  seealso: ['lcm', 'xgcd']
};
exports.gcdDocs = gcdDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/hypot.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/hypot.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hypotDocs = void 0;
var hypotDocs = {
  name: 'hypot',
  category: 'Arithmetic',
  syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
  description: 'Calculate the hypotenusa of a list with values. ',
  examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
  seealso: ['abs', 'norm']
};
exports.hypotDocs = hypotDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/lcm.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/lcm.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lcmDocs = void 0;
var lcmDocs = {
  name: 'lcm',
  category: 'Arithmetic',
  syntax: ['lcm(x, y)'],
  description: 'Compute the least common multiple.',
  examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
  seealso: ['gcd']
};
exports.lcmDocs = lcmDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.logDocs = void 0;
var logDocs = {
  name: 'log',
  category: 'Arithmetic',
  syntax: ['log(x)', 'log(x, base)'],
  description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
  examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
  seealso: ['exp', 'log1p', 'log2', 'log10']
};
exports.logDocs = logDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log10.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log10.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.log10Docs = void 0;
var log10Docs = {
  name: 'log10',
  category: 'Arithmetic',
  syntax: ['log10(x)'],
  description: 'Compute the 10-base logarithm of a value.',
  examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
  seealso: ['exp', 'log']
};
exports.log10Docs = log10Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log1p.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log1p.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.log1pDocs = void 0;
var log1pDocs = {
  name: 'log1p',
  category: 'Arithmetic',
  syntax: ['log1p(x)', 'log1p(x, base)'],
  description: 'Calculate the logarithm of a `value+1`',
  examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
  seealso: ['exp', 'log', 'log2', 'log10']
};
exports.log1pDocs = log1pDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log2.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/log2.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.log2Docs = void 0;
var log2Docs = {
  name: 'log2',
  category: 'Arithmetic',
  syntax: ['log2(x)'],
  description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
  examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
  seealso: ['exp', 'log1p', 'log', 'log10']
};
exports.log2Docs = log2Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/mod.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/mod.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.modDocs = void 0;
var modDocs = {
  name: 'mod',
  category: 'Operators',
  syntax: ['x % y', 'x mod y', 'mod(x, y)'],
  description: 'Calculates the modulus, the remainder of an integer division.',
  examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
  seealso: ['divide']
};
exports.modDocs = modDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/multiply.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/multiply.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.multiplyDocs = void 0;
var multiplyDocs = {
  name: 'multiply',
  category: 'Operators',
  syntax: ['x * y', 'multiply(x, y)'],
  description: 'multiply two values.',
  examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
  seealso: ['divide']
};
exports.multiplyDocs = multiplyDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/norm.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/norm.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.normDocs = void 0;
var normDocs = {
  name: 'norm',
  category: 'Arithmetic',
  syntax: ['norm(x)', 'norm(x, p)'],
  description: 'Calculate the norm of a number, vector or matrix.',
  examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
};
exports.normDocs = normDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/nthRoot.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/nthRoot.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nthRootDocs = void 0;
var nthRootDocs = {
  name: 'nthRoot',
  category: 'Arithmetic',
  syntax: ['nthRoot(a)', 'nthRoot(a, root)'],
  description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
  examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
  seealso: ['nthRoots', 'pow', 'sqrt']
};
exports.nthRootDocs = nthRootDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/nthRoots.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/nthRoots.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nthRootsDocs = void 0;
var nthRootsDocs = {
  name: 'nthRoots',
  category: 'Arithmetic',
  syntax: ['nthRoots(A)', 'nthRoots(A, root)'],
  description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
  examples: ['nthRoots(1)', 'nthRoots(1, 3)'],
  seealso: ['sqrt', 'pow', 'nthRoot']
};
exports.nthRootsDocs = nthRootsDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/pow.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/pow.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.powDocs = void 0;
var powDocs = {
  name: 'pow',
  category: 'Operators',
  syntax: ['x ^ y', 'pow(x, y)'],
  description: 'Calculates the power of x to y, x^y.',
  examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
  seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
};
exports.powDocs = powDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/round.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/round.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.roundDocs = void 0;
var roundDocs = {
  name: 'round',
  category: 'Arithmetic',
  syntax: ['round(x)', 'round(x, n)'],
  description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
  examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
  seealso: ['ceil', 'floor', 'fix']
};
exports.roundDocs = roundDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sign.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sign.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.signDocs = void 0;
var signDocs = {
  name: 'sign',
  category: 'Arithmetic',
  syntax: ['sign(x)'],
  description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
  examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
  seealso: ['abs']
};
exports.signDocs = signDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sqrt.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sqrt.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sqrtDocs = void 0;
var sqrtDocs = {
  name: 'sqrt',
  category: 'Arithmetic',
  syntax: ['sqrt(x)'],
  description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
  examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
  seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
};
exports.sqrtDocs = sqrtDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sqrtm.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/sqrtm.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sqrtmDocs = void 0;
var sqrtmDocs = {
  name: 'sqrtm',
  category: 'Arithmetic',
  syntax: ['sqrtm(x)'],
  description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
  examples: ['sqrtm([[1, 2], [3, 4]])'],
  seealso: ['sqrt', 'abs', 'square', 'multiply']
};
exports.sqrtmDocs = sqrtmDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/square.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/square.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.squareDocs = void 0;
var squareDocs = {
  name: 'square',
  category: 'Arithmetic',
  syntax: ['square(x)'],
  description: 'Compute the square of a value. The square of x is x * x.',
  examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
  seealso: ['multiply', 'pow', 'sqrt', 'cube']
};
exports.squareDocs = squareDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/subtract.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/subtract.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subtractDocs = void 0;
var subtractDocs = {
  name: 'subtract',
  category: 'Operators',
  syntax: ['x - y', 'subtract(x, y)'],
  description: 'subtract two values.',
  examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
  seealso: ['add']
};
exports.subtractDocs = subtractDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/unaryMinus.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/unaryMinus.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unaryMinusDocs = void 0;
var unaryMinusDocs = {
  name: 'unaryMinus',
  category: 'Operators',
  syntax: ['-x', 'unaryMinus(x)'],
  description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
  examples: ['-4.5', '-(-5.6)', '-"22"'],
  seealso: ['add', 'subtract', 'unaryPlus']
};
exports.unaryMinusDocs = unaryMinusDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/unaryPlus.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/unaryPlus.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unaryPlusDocs = void 0;
var unaryPlusDocs = {
  name: 'unaryPlus',
  category: 'Operators',
  syntax: ['+x', 'unaryPlus(x)'],
  description: 'Converts booleans and strings to numbers.',
  examples: ['+true', '+"2"'],
  seealso: ['add', 'subtract', 'unaryMinus']
};
exports.unaryPlusDocs = unaryPlusDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/xgcd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/arithmetic/xgcd.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.xgcdDocs = void 0;
var xgcdDocs = {
  name: 'xgcd',
  category: 'Arithmetic',
  syntax: ['xgcd(a, b)'],
  description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
  examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
  seealso: ['gcd', 'lcm']
};
exports.xgcdDocs = xgcdDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitAnd.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitAnd.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitAndDocs = void 0;
var bitAndDocs = {
  name: 'bitAnd',
  category: 'Bitwise',
  syntax: ['x & y', 'bitAnd(x, y)'],
  description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
  examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
  seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitAndDocs = bitAndDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitNot.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitNot.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitNotDocs = void 0;
var bitNotDocs = {
  name: 'bitNot',
  category: 'Bitwise',
  syntax: ['~x', 'bitNot(x)'],
  description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
  examples: ['~1', '~2', 'bitNot([2, -3, 4])'],
  seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitNotDocs = bitNotDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitOr.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitOr.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitOrDocs = void 0;
var bitOrDocs = {
  name: 'bitOr',
  category: 'Bitwise',
  syntax: ['x | y', 'bitOr(x, y)'],
  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitOrDocs = bitOrDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitXor.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/bitXor.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitXorDocs = void 0;
var bitXorDocs = {
  name: 'bitXor',
  category: 'Bitwise',
  syntax: ['bitXor(x, y)'],
  description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
  examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitXorDocs = bitXorDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/leftShift.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/leftShift.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.leftShiftDocs = void 0;
var leftShiftDocs = {
  name: 'leftShift',
  category: 'Bitwise',
  syntax: ['x << y', 'leftShift(x, y)'],
  description: 'Bitwise left logical shift of a value x by y number of bits.',
  examples: ['4 << 1', '8 >> 1'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
};
exports.leftShiftDocs = leftShiftDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/rightArithShift.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/rightArithShift.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rightArithShiftDocs = void 0;
var rightArithShiftDocs = {
  name: 'rightArithShift',
  category: 'Bitwise',
  syntax: ['x >> y', 'rightArithShift(x, y)'],
  description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
  examples: ['8 >> 1', '4 << 1', '-12 >> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
};
exports.rightArithShiftDocs = rightArithShiftDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/rightLogShift.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/bitwise/rightLogShift.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rightLogShiftDocs = void 0;
var rightLogShiftDocs = {
  name: 'rightLogShift',
  category: 'Bitwise',
  syntax: ['x >>> y', 'rightLogShift(x, y)'],
  description: 'Bitwise right logical shift of a value x by y number of bits.',
  examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
};
exports.rightLogShiftDocs = rightLogShiftDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/bellNumbers.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/bellNumbers.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bellNumbersDocs = void 0;
var bellNumbersDocs = {
  name: 'bellNumbers',
  category: 'Combinatorics',
  syntax: ['bellNumbers(n)'],
  description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['bellNumbers(3)', 'bellNumbers(8)'],
  seealso: ['stirlingS2']
};
exports.bellNumbersDocs = bellNumbersDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/catalan.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/catalan.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.catalanDocs = void 0;
var catalanDocs = {
  name: 'catalan',
  category: 'Combinatorics',
  syntax: ['catalan(n)'],
  description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['catalan(3)', 'catalan(8)'],
  seealso: ['bellNumbers']
};
exports.catalanDocs = catalanDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/composition.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/composition.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compositionDocs = void 0;
var compositionDocs = {
  name: 'composition',
  category: 'Combinatorics',
  syntax: ['composition(n, k)'],
  description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
  examples: ['composition(5, 3)'],
  seealso: ['combinations']
};
exports.compositionDocs = compositionDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/stirlingS2.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/combinatorics/stirlingS2.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stirlingS2Docs = void 0;
var stirlingS2Docs = {
  name: 'stirlingS2',
  category: 'Combinatorics',
  syntax: ['stirlingS2(n, k)'],
  description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
  examples: ['stirlingS2(5, 3)'],
  seealso: ['bellNumbers']
};
exports.stirlingS2Docs = stirlingS2Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/arg.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/arg.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.argDocs = void 0;
var argDocs = {
  name: 'arg',
  category: 'Complex',
  syntax: ['arg(x)'],
  description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
  examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
  seealso: ['re', 'im', 'conj', 'abs']
};
exports.argDocs = argDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/conj.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/conj.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.conjDocs = void 0;
var conjDocs = {
  name: 'conj',
  category: 'Complex',
  syntax: ['conj(x)'],
  description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
  examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
  seealso: ['re', 'im', 'abs', 'arg']
};
exports.conjDocs = conjDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/im.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/im.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.imDocs = void 0;
var imDocs = {
  name: 'im',
  category: 'Complex',
  syntax: ['im(x)'],
  description: 'Get the imaginary part of a complex number.',
  examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
  seealso: ['re', 'conj', 'abs', 'arg']
};
exports.imDocs = imDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/re.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/complex/re.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reDocs = void 0;
var reDocs = {
  name: 're',
  category: 'Complex',
  syntax: ['re(x)'],
  description: 'Get the real part of a complex number.',
  examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
  seealso: ['im', 'conj', 'abs', 'arg']
};
exports.reDocs = reDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/expression/evaluate.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/expression/evaluate.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.evaluateDocs = void 0;
var evaluateDocs = {
  name: 'evaluate',
  category: 'Expression',
  syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
  description: 'Evaluate an expression or an array with expressions.',
  examples: ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
  seealso: []
};
exports.evaluateDocs = evaluateDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/expression/help.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/expression/help.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.helpDocs = void 0;
var helpDocs = {
  name: 'help',
  category: 'Expression',
  syntax: ['help(object)', 'help(string)'],
  description: 'Display documentation on a function or data type.',
  examples: ['help(sqrt)', 'help("complex")'],
  seealso: []
};
exports.helpDocs = helpDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/geometry/distance.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/geometry/distance.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.distanceDocs = void 0;
var distanceDocs = {
  name: 'distance',
  category: 'Geometry',
  syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2]])'],
  description: 'Calculates the Euclidean distance between two points.',
  examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
  seealso: []
};
exports.distanceDocs = distanceDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/geometry/intersect.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/geometry/intersect.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.intersectDocs = void 0;
var intersectDocs = {
  name: 'intersect',
  category: 'Geometry',
  syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
  description: 'Computes the intersection point of lines and/or planes.',
  examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
  seealso: []
};
exports.intersectDocs = intersectDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/and.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/and.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.andDocs = void 0;
var andDocs = {
  name: 'and',
  category: 'Logical',
  syntax: ['x and y', 'and(x, y)'],
  description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
  examples: ['true and false', 'true and true', '2 and 4'],
  seealso: ['not', 'or', 'xor']
};
exports.andDocs = andDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/not.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/not.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.notDocs = void 0;
var notDocs = {
  name: 'not',
  category: 'Logical',
  syntax: ['not x', 'not(x)'],
  description: 'Logical not. Flips the boolean value of given argument.',
  examples: ['not true', 'not false', 'not 2', 'not 0'],
  seealso: ['and', 'or', 'xor']
};
exports.notDocs = notDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/or.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/or.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.orDocs = void 0;
var orDocs = {
  name: 'or',
  category: 'Logical',
  syntax: ['x or y', 'or(x, y)'],
  description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
  examples: ['true or false', 'false or false', '0 or 4'],
  seealso: ['not', 'and', 'xor']
};
exports.orDocs = orDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/xor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/logical/xor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.xorDocs = void 0;
var xorDocs = {
  name: 'xor',
  category: 'Logical',
  syntax: ['x xor y', 'xor(x, y)'],
  description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
  examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
  seealso: ['not', 'and', 'or']
};
exports.xorDocs = xorDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/column.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/column.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.columnDocs = void 0;
var columnDocs = {
  name: 'column',
  category: 'Matrix',
  syntax: ['column(x, index)'],
  description: 'Return a column from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
  seealso: ['row', 'matrixFromColumns']
};
exports.columnDocs = columnDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/concat.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/concat.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concatDocs = void 0;
var concatDocs = {
  name: 'concat',
  category: 'Matrix',
  syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
  description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
  examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
  seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.concatDocs = concatDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/count.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/count.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.countDocs = void 0;
var countDocs = {
  name: 'count',
  category: 'Matrix',
  syntax: ['count(x)'],
  description: 'Count the number of elements of a matrix, array or string.',
  examples: ['a = [1, 2; 3, 4; 5, 6]', 'count(a)', 'size(a)', 'count("hello world")'],
  seealso: ['size']
};
exports.countDocs = countDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/cross.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/cross.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.crossDocs = void 0;
var crossDocs = {
  name: 'cross',
  category: 'Matrix',
  syntax: ['cross(A, B)'],
  description: 'Calculate the cross product for two vectors in three dimensional space.',
  examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
  seealso: ['multiply', 'dot']
};
exports.crossDocs = crossDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/ctranspose.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/ctranspose.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ctransposeDocs = void 0;
var ctransposeDocs = {
  name: 'ctranspose',
  category: 'Matrix',
  syntax: ['x\'', 'ctranspose(x)'],
  description: 'Complex Conjugate and Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};
exports.ctransposeDocs = ctransposeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/det.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/det.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.detDocs = void 0;
var detDocs = {
  name: 'det',
  category: 'Matrix',
  syntax: ['det(x)'],
  description: 'Calculate the determinant of a matrix',
  examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
  seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.detDocs = detDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/diag.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/diag.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.diagDocs = void 0;
var diagDocs = {
  name: 'diag',
  category: 'Matrix',
  syntax: ['diag(x)', 'diag(x, k)'],
  description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
  examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
  seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.diagDocs = diagDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/diff.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/diff.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.diffDocs = void 0;
var diffDocs = {
  name: 'diff',
  category: 'Matrix',
  syntax: ['diff(arr)', 'diff(arr, dim)'],
  description: ['Create a new matrix or array with the difference of the passed matrix or array.', 'Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference', 'If no dimension parameter is passed it is assumed as dimension 0', 'Dimension is zero-based in javascript and one-based in the parser', 'Arrays must be \'rectangular\' meaning arrays like [1, 2]', 'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'],
  examples: ['diff([1, 2, 4, 7, 0])', 'diff([1, 2, 4, 7, 0], 0)', 'diff(matrix([1, 2, 4, 7, 0]))', 'diff([[1, 2], [3, 4]])', 'diff([[1, 2], [3, 4]], 0)', 'diff([[1, 2], [3, 4]], 1)', 'diff([[1, 2], [3, 4]], bignumber(1))', 'diff(matrix([[1, 2], [3, 4]]), 1)', 'diff([[1, 2], matrix([3, 4])], 1)'],
  seealso: ['subtract', 'partitionSelect']
};
exports.diffDocs = diffDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/dot.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/dot.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dotDocs = void 0;
var dotDocs = {
  name: 'dot',
  category: 'Matrix',
  syntax: ['dot(A, B)', 'A * B'],
  description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
  examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
  seealso: ['multiply', 'cross']
};
exports.dotDocs = dotDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/eigs.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/eigs.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.eigsDocs = void 0;
var eigsDocs = {
  name: 'eigs',
  category: 'Matrix',
  syntax: ['eigs(x)'],
  description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',
  examples: ['eigs([[5, 2.3], [2.3, 1]])'],
  seealso: ['inv']
};
exports.eigsDocs = eigsDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/filter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/filter.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.filterDocs = void 0;
var filterDocs = {
  name: 'filter',
  category: 'Matrix',
  syntax: ['filter(x, test)'],
  description: 'Filter items in a matrix.',
  examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
  seealso: ['sort', 'map', 'forEach']
};
exports.filterDocs = filterDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/flatten.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/flatten.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.flattenDocs = void 0;
var flattenDocs = {
  name: 'flatten',
  category: 'Matrix',
  syntax: ['flatten(x)'],
  description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
  seealso: ['concat', 'resize', 'size', 'squeeze']
};
exports.flattenDocs = flattenDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/forEach.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/forEach.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.forEachDocs = void 0;
var forEachDocs = {
  name: 'forEach',
  category: 'Matrix',
  syntax: ['forEach(x, callback)'],
  description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
  examples: ['forEach([1, 2, 3], function(val) { console.log(val) })'],
  seealso: ['map', 'sort', 'filter']
};
exports.forEachDocs = forEachDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/getMatrixDataType.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/getMatrixDataType.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getMatrixDataTypeDocs = void 0;
var getMatrixDataTypeDocs = {
  name: 'getMatrixDataType',
  category: 'Matrix',
  syntax: ['getMatrixDataType(x)'],
  description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
  examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
  seealso: ['matrix', 'sparse', 'typeOf']
};
exports.getMatrixDataTypeDocs = getMatrixDataTypeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/identity.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/identity.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.identityDocs = void 0;
var identityDocs = {
  name: 'identity',
  category: 'Matrix',
  syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
  description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
  examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
  seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.identityDocs = identityDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/inv.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/inv.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.invDocs = void 0;
var invDocs = {
  name: 'inv',
  category: 'Matrix',
  syntax: ['inv(x)'],
  description: 'Calculate the inverse of a matrix',
  examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
  seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.invDocs = invDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/kron.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/kron.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.kronDocs = void 0;
var kronDocs = {
  name: 'kron',
  category: 'Matrix',
  syntax: ['kron(x, y)'],
  description: 'Calculates the kronecker product of 2 matrices or vectors.',
  examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
  seealso: ['multiply', 'dot', 'cross']
};
exports.kronDocs = kronDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/map.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/map.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mapDocs = void 0;
var mapDocs = {
  name: 'map',
  category: 'Matrix',
  syntax: ['map(x, callback)'],
  description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
  examples: ['map([1, 2, 3], square)'],
  seealso: ['filter', 'forEach']
};
exports.mapDocs = mapDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromColumns.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromColumns.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixFromColumnsDocs = void 0;
var matrixFromColumnsDocs = {
  name: 'matrixFromColumns',
  category: 'Matrix',
  syntax: ['math.matrixFromColumns(...arr)', 'math.matrixFromColumns(row1, row2)', 'math.matrixFromColumns(row1, row2, row3)'],
  description: 'Create a dense matrix from vectors as individual columns.',
  examples: ['matrixFromColumns([1, 2, 3], [[4],[5],[6]])'],
  seealso: ['matrix', 'matrixFromRows', 'matrixFromFunction', 'zeros']
};
exports.matrixFromColumnsDocs = matrixFromColumnsDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromFunction.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromFunction.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixFromFunctionDocs = void 0;
var matrixFromFunctionDocs = {
  name: 'matrixFromFunction',
  category: 'Matrix',
  syntax: ['math.matrixFromFunction(size, fn)', 'math.matrixFromFunction(size, fn, format)', 'math.matrixFromFunction(size, fn, format, datatype)', 'math.matrixFromFunction(size, format, fn)', 'math.matrixFromFunction(size, format, datatype, fn)'],
  description: 'Create a matrix by evaluating a generating function at each index.',
  examples: ['f(I) = I[1] - I[2]', 'matrixFromFunction([3,3], f)', 'g(I) = I[1] - I[2] == 1 ? 4 : 0', 'matrixFromFunction([100, 100], "sparse", g)', 'matrixFromFunction([5], random)'],
  seealso: ['matrix', 'matrixFromRows', 'matrixFromColumns', 'zeros']
};
exports.matrixFromFunctionDocs = matrixFromFunctionDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromRows.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/matrixFromRows.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.matrixFromRowsDocs = void 0;
var matrixFromRowsDocs = {
  name: 'matrixFromRows',
  category: 'Matrix',
  syntax: ['math.matrixFromRows(...arr)', 'math.matrixFromRows(row1, row2)', 'math.matrixFromRows(row1, row2, row3)'],
  description: 'Create a dense matrix from vectors as individual rows.',
  examples: ['matrixFromRows([1, 2, 3], [[4],[5],[6]])'],
  seealso: ['matrix', 'matrixFromColumns', 'matrixFromFunction', 'zeros']
};
exports.matrixFromRowsDocs = matrixFromRowsDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/ones.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/ones.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.onesDocs = void 0;
var onesDocs = {
  name: 'ones',
  category: 'Matrix',
  syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
  description: 'Create a matrix containing ones.',
  examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.onesDocs = onesDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/partitionSelect.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/partitionSelect.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.partitionSelectDocs = void 0;
var partitionSelectDocs = {
  name: 'partitionSelect',
  category: 'Matrix',
  syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
  description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
  examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
  seealso: ['sort']
};
exports.partitionSelectDocs = partitionSelectDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/range.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/range.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rangeDocs = void 0;
var rangeDocs = {
  name: 'range',
  category: 'Type',
  syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
  description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
  examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.rangeDocs = rangeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/reshape.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/reshape.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reshapeDocs = void 0;
var reshapeDocs = {
  name: 'reshape',
  category: 'Matrix',
  syntax: ['reshape(x, sizes)'],
  description: 'Reshape a multi dimensional array to fit the specified dimensions.',
  examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
  seealso: ['size', 'squeeze', 'resize']
};
exports.reshapeDocs = reshapeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/resize.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/resize.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.resizeDocs = void 0;
var resizeDocs = {
  name: 'resize',
  category: 'Matrix',
  syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],
  description: 'Resize a matrix.',
  examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
  seealso: ['size', 'subset', 'squeeze', 'reshape']
};
exports.resizeDocs = resizeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/rotate.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/rotate.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rotateDocs = void 0;
var rotateDocs = {
  name: 'rotate',
  category: 'Matrix',
  syntax: ['rotate(w, theta)', 'rotate(w, theta, v)'],
  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
  examples: ['rotate([1, 0], math.pi / 2)', 'rotate(matrix([1, 0]), unit("35deg"))', 'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],
  seealso: ['matrix', 'rotationMatrix']
};
exports.rotateDocs = rotateDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/rotationMatrix.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/rotationMatrix.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rotationMatrixDocs = void 0;
var rotationMatrixDocs = {
  name: 'rotationMatrix',
  category: 'Matrix',
  syntax: ['rotationMatrix(theta)', 'rotationMatrix(theta, v)', 'rotationMatrix(theta, v, format)'],
  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
  examples: ['rotationMatrix(pi / 2)', 'rotationMatrix(unit("45deg"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],
  seealso: ['cos', 'sin']
};
exports.rotationMatrixDocs = rotationMatrixDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/row.js":
/*!************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/row.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rowDocs = void 0;
var rowDocs = {
  name: 'row',
  category: 'Matrix',
  syntax: ['row(x, index)'],
  description: 'Return a row from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
  seealso: ['column', 'matrixFromRows']
};
exports.rowDocs = rowDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/size.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/size.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sizeDocs = void 0;
var sizeDocs = {
  name: 'size',
  category: 'Matrix',
  syntax: ['size(x)'],
  description: 'Calculate the size of a matrix.',
  examples: ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
  seealso: ['concat', 'count', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.sizeDocs = sizeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/sort.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/sort.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sortDocs = void 0;
var sortDocs = {
  name: 'sort',
  category: 'Matrix',
  syntax: ['sort(x)', 'sort(x, compare)'],
  description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  examples: ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  seealso: ['map', 'filter', 'forEach']
};
exports.sortDocs = sortDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/squeeze.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/squeeze.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.squeezeDocs = void 0;
var squeezeDocs = {
  name: 'squeeze',
  category: 'Matrix',
  syntax: ['squeeze(x)'],
  description: 'Remove inner and outer singleton dimensions from a matrix.',
  examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
};
exports.squeezeDocs = squeezeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/subset.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/subset.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subsetDocs = void 0;
var subsetDocs = {
  name: 'subset',
  category: 'Matrix',
  syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
  description: 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
  examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
};
exports.subsetDocs = subsetDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/trace.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/trace.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.traceDocs = void 0;
var traceDocs = {
  name: 'trace',
  category: 'Matrix',
  syntax: ['trace(A)'],
  description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
  examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
};
exports.traceDocs = traceDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/transpose.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/transpose.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.transposeDocs = void 0;
var transposeDocs = {
  name: 'transpose',
  category: 'Matrix',
  syntax: ['x\'', 'transpose(x)'],
  description: 'Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};
exports.transposeDocs = transposeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/zeros.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/matrix/zeros.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.zerosDocs = void 0;
var zerosDocs = {
  name: 'zeros',
  category: 'Matrix',
  syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
  description: 'Create a matrix containing zeros.',
  examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
};
exports.zerosDocs = zerosDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/combinations.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/combinations.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combinationsDocs = void 0;
var combinationsDocs = {
  name: 'combinations',
  category: 'Probability',
  syntax: ['combinations(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time',
  examples: ['combinations(7, 5)'],
  seealso: ['combinationsWithRep', 'permutations', 'factorial']
};
exports.combinationsDocs = combinationsDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/combinationsWithRep.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/combinationsWithRep.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combinationsWithRepDocs = void 0;
var combinationsWithRepDocs = {
  name: 'combinationsWithRep',
  category: 'Probability',
  syntax: ['combinationsWithRep(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time with replacements.',
  examples: ['combinationsWithRep(7, 5)'],
  seealso: ['combinations', 'permutations', 'factorial']
};
exports.combinationsWithRepDocs = combinationsWithRepDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/factorial.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/factorial.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.factorialDocs = void 0;
var factorialDocs = {
  name: 'factorial',
  category: 'Probability',
  syntax: ['n!', 'factorial(n)'],
  description: 'Compute the factorial of a value',
  examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
  seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']
};
exports.factorialDocs = factorialDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/gamma.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/gamma.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gammaDocs = void 0;
var gammaDocs = {
  name: 'gamma',
  category: 'Probability',
  syntax: ['gamma(n)'],
  description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
  examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
  seealso: ['factorial']
};
exports.gammaDocs = gammaDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/kldivergence.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/kldivergence.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.kldivergenceDocs = void 0;
var kldivergenceDocs = {
  name: 'kldivergence',
  category: 'Probability',
  syntax: ['kldivergence(x, y)'],
  description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
  examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
  seealso: []
};
exports.kldivergenceDocs = kldivergenceDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/multinomial.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/multinomial.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.multinomialDocs = void 0;
var multinomialDocs = {
  name: 'multinomial',
  category: 'Probability',
  syntax: ['multinomial(A)'],
  description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
  examples: ['multinomial([1, 2, 1])'],
  seealso: ['combinations', 'factorial']
};
exports.multinomialDocs = multinomialDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/permutations.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/permutations.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.permutationsDocs = void 0;
var permutationsDocs = {
  name: 'permutations',
  category: 'Probability',
  syntax: ['permutations(n)', 'permutations(n, k)'],
  description: 'Compute the number of permutations of n items taken k at a time',
  examples: ['permutations(5)', 'permutations(5, 3)'],
  seealso: ['combinations', 'combinationsWithRep', 'factorial']
};
exports.permutationsDocs = permutationsDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/pickRandom.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/pickRandom.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.pickRandomDocs = void 0;
var pickRandomDocs = {
  name: 'pickRandom',
  category: 'Probability',
  syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
  description: 'Pick a random entry from a given array.',
  examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
  seealso: ['random', 'randomInt']
};
exports.pickRandomDocs = pickRandomDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/random.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/random.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.randomDocs = void 0;
var randomDocs = {
  name: 'random',
  category: 'Probability',
  syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
  description: 'Return a random number.',
  examples: ['random()', 'random(10, 20)', 'random([2, 3])'],
  seealso: ['pickRandom', 'randomInt']
};
exports.randomDocs = randomDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/randomInt.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/probability/randomInt.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.randomIntDocs = void 0;
var randomIntDocs = {
  name: 'randomInt',
  category: 'Probability',
  syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
  description: 'Return a random integer number',
  examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
  seealso: ['pickRandom', 'random']
};
exports.randomIntDocs = randomIntDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compare.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compare.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compareDocs = void 0;
var compareDocs = {
  name: 'compare',
  category: 'Relational',
  syntax: ['compare(x, y)'],
  description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
};
exports.compareDocs = compareDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compareNatural.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compareNatural.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compareNaturalDocs = void 0;
var compareNaturalDocs = {
  name: 'compareNatural',
  category: 'Relational',
  syntax: ['compareNatural(x, y)'],
  description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
};
exports.compareNaturalDocs = compareNaturalDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compareText.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/compareText.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compareTextDocs = void 0;
var compareTextDocs = {
  name: 'compareText',
  category: 'Relational',
  syntax: ['compareText(x, y)'],
  description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural']
};
exports.compareTextDocs = compareTextDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/deepEqual.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/deepEqual.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.deepEqualDocs = void 0;
var deepEqualDocs = {
  name: 'deepEqual',
  category: 'Relational',
  syntax: ['deepEqual(x, y)'],
  description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
  examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
  seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
};
exports.deepEqualDocs = deepEqualDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/equal.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/equal.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.equalDocs = void 0;
var equalDocs = {
  name: 'equal',
  category: 'Relational',
  syntax: ['x == y', 'equal(x, y)'],
  description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
  examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
  seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
};
exports.equalDocs = equalDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/equalText.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/equalText.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.equalTextDocs = void 0;
var equalTextDocs = {
  name: 'equalText',
  category: 'Relational',
  syntax: ['equalText(x, y)'],
  description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
  examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural', 'compareText', 'equal']
};
exports.equalTextDocs = equalTextDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/larger.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/larger.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.largerDocs = void 0;
var largerDocs = {
  name: 'larger',
  category: 'Relational',
  syntax: ['x > y', 'larger(x, y)'],
  description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
  examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
};
exports.largerDocs = largerDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/largerEq.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/largerEq.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.largerEqDocs = void 0;
var largerEqDocs = {
  name: 'largerEq',
  category: 'Relational',
  syntax: ['x >= y', 'largerEq(x, y)'],
  description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
  examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
  seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
};
exports.largerEqDocs = largerEqDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/smaller.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/smaller.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.smallerDocs = void 0;
var smallerDocs = {
  name: 'smaller',
  category: 'Relational',
  syntax: ['x < y', 'smaller(x, y)'],
  description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
  seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
};
exports.smallerDocs = smallerDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/smallerEq.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/smallerEq.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.smallerEqDocs = void 0;
var smallerEqDocs = {
  name: 'smallerEq',
  category: 'Relational',
  syntax: ['x <= y', 'smallerEq(x, y)'],
  description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
  seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
};
exports.smallerEqDocs = smallerEqDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/unequal.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/relational/unequal.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.unequalDocs = void 0;
var unequalDocs = {
  name: 'unequal',
  category: 'Relational',
  syntax: ['x != y', 'unequal(x, y)'],
  description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
  examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
  seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
};
exports.unequalDocs = unequalDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setCartesian.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setCartesian.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setCartesianDocs = void 0;
var setCartesianDocs = {
  name: 'setCartesian',
  category: 'Set',
  syntax: ['setCartesian(set1, set2)'],
  description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.',
  examples: ['setCartesian([1, 2], [3, 4])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
};
exports.setCartesianDocs = setCartesianDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setDifference.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setDifference.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setDifferenceDocs = void 0;
var setDifferenceDocs = {
  name: 'setDifference',
  category: 'Set',
  syntax: ['setDifference(set1, set2)'],
  description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setSymDifference']
};
exports.setDifferenceDocs = setDifferenceDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setDistinct.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setDistinct.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setDistinctDocs = void 0;
var setDistinctDocs = {
  name: 'setDistinct',
  category: 'Set',
  syntax: ['setDistinct(set)'],
  description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],
  seealso: ['setMultiplicity']
};
exports.setDistinctDocs = setDistinctDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIntersect.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIntersect.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setIntersectDocs = void 0;
var setIntersectDocs = {
  name: 'setIntersect',
  category: 'Set',
  syntax: ['setIntersect(set1, set2)'],
  description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setDifference']
};
exports.setIntersectDocs = setIntersectDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIsSubset.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setIsSubset.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setIsSubsetDocs = void 0;
var setIsSubsetDocs = {
  name: 'setIsSubset',
  category: 'Set',
  syntax: ['setIsSubset(set1, set2)'],
  description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};
exports.setIsSubsetDocs = setIsSubsetDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setMultiplicity.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setMultiplicity.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setMultiplicityDocs = void 0;
var setMultiplicityDocs = {
  name: 'setMultiplicity',
  category: 'Set',
  syntax: ['setMultiplicity(element, set)'],
  description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
  seealso: ['setDistinct', 'setSize']
};
exports.setMultiplicityDocs = setMultiplicityDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setPowerset.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setPowerset.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setPowersetDocs = void 0;
var setPowersetDocs = {
  name: 'setPowerset',
  category: 'Set',
  syntax: ['setPowerset(set)'],
  description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setPowerset([1, 2, 3])'],
  seealso: ['setCartesian']
};
exports.setPowersetDocs = setPowersetDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSize.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSize.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setSizeDocs = void 0;
var setSizeDocs = {
  name: 'setSize',
  category: 'Set',
  syntax: ['setSize(set)', 'setSize(set, unique)'],
  description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};
exports.setSizeDocs = setSizeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSymDifference.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setSymDifference.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setSymDifferenceDocs = void 0;
var setSymDifferenceDocs = {
  name: 'setSymDifference',
  category: 'Set',
  syntax: ['setSymDifference(set1, set2)'],
  description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};
exports.setSymDifferenceDocs = setSymDifferenceDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setUnion.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/set/setUnion.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.setUnionDocs = void 0;
var setUnionDocs = {
  name: 'setUnion',
  category: 'Set',
  syntax: ['setUnion(set1, set2)'],
  description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setIntersect', 'setDifference']
};
exports.setUnionDocs = setUnionDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/special/erf.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/special/erf.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.erfDocs = void 0;
var erfDocs = {
  name: 'erf',
  category: 'Special',
  syntax: ['erf(x)'],
  description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
  examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
  seealso: []
};
exports.erfDocs = erfDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mad.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mad.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.madDocs = void 0;
var madDocs = {
  name: 'mad',
  category: 'Statistics',
  syntax: ['mad(a, b, c, ...)', 'mad(A)'],
  description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
  examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
  seealso: ['mean', 'median', 'std', 'abs']
};
exports.madDocs = madDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/max.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/max.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.maxDocs = void 0;
var maxDocs = {
  name: 'max',
  category: 'Statistics',
  syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
  description: 'Compute the maximum value of a list of values.',
  examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
exports.maxDocs = maxDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mean.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mean.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.meanDocs = void 0;
var meanDocs = {
  name: 'mean',
  category: 'Statistics',
  syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
  description: 'Compute the arithmetic mean of a list of values.',
  examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
  seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
exports.meanDocs = meanDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/median.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/median.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.medianDocs = void 0;
var medianDocs = {
  name: 'median',
  category: 'Statistics',
  syntax: ['median(a, b, c, ...)', 'median(A)'],
  description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
  examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
  seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
};
exports.medianDocs = medianDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/min.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/min.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.minDocs = void 0;
var minDocs = {
  name: 'min',
  category: 'Statistics',
  syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
  description: 'Compute the minimum value of a list of values.',
  examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
};
exports.minDocs = minDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mode.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/mode.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.modeDocs = void 0;
var modeDocs = {
  name: 'mode',
  category: 'Statistics',
  syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
  description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
  examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
};
exports.modeDocs = modeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/prod.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/prod.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.prodDocs = void 0;
var prodDocs = {
  name: 'prod',
  category: 'Statistics',
  syntax: ['prod(a, b, c, ...)', 'prod(A)'],
  description: 'Compute the product of all values.',
  examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
};
exports.prodDocs = prodDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/quantileSeq.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/quantileSeq.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.quantileSeqDocs = void 0;
var quantileSeqDocs = {
  name: 'quantileSeq',
  category: 'Statistics',
  syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
  description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
  examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
  seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
};
exports.quantileSeqDocs = quantileSeqDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/std.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/std.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.stdDocs = void 0;
var stdDocs = {
  name: 'std',
  category: 'Statistics',
  syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'sum', 'variance']
};
exports.stdDocs = stdDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/sum.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/sum.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sumDocs = void 0;
var sumDocs = {
  name: 'sum',
  category: 'Statistics',
  syntax: ['sum(a, b, c, ...)', 'sum(A)'],
  description: 'Compute the sum of all values.',
  examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
exports.sumDocs = sumDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/variance.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/statistics/variance.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.varianceDocs = void 0;
var varianceDocs = {
  name: 'variance',
  category: 'Statistics',
  syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
  description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
};
exports.varianceDocs = varianceDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acos.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acos.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acosDocs = void 0;
var acosDocs = {
  name: 'acos',
  category: 'Trigonometry',
  syntax: ['acos(x)'],
  description: 'Compute the inverse cosine of a value in radians.',
  examples: ['acos(0.5)', 'acos(cos(2.3))'],
  seealso: ['cos', 'atan', 'asin']
};
exports.acosDocs = acosDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acosh.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acosh.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acoshDocs = void 0;
var acoshDocs = {
  name: 'acosh',
  category: 'Trigonometry',
  syntax: ['acosh(x)'],
  description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
  examples: ['acosh(1.5)'],
  seealso: ['cosh', 'asinh', 'atanh']
};
exports.acoshDocs = acoshDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acot.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acot.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acotDocs = void 0;
var acotDocs = {
  name: 'acot',
  category: 'Trigonometry',
  syntax: ['acot(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
  seealso: ['cot', 'atan']
};
exports.acotDocs = acotDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acoth.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acoth.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acothDocs = void 0;
var acothDocs = {
  name: 'acoth',
  category: 'Trigonometry',
  syntax: ['acoth(x)'],
  description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
  examples: ['acoth(2)', 'acoth(0.5)'],
  seealso: ['acsch', 'asech']
};
exports.acothDocs = acothDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acsc.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acsc.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acscDocs = void 0;
var acscDocs = {
  name: 'acsc',
  category: 'Trigonometry',
  syntax: ['acsc(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
  seealso: ['csc', 'asin', 'asec']
};
exports.acscDocs = acscDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acsch.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/acsch.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acschDocs = void 0;
var acschDocs = {
  name: 'acsch',
  category: 'Trigonometry',
  syntax: ['acsch(x)'],
  description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
  examples: ['acsch(0.5)'],
  seealso: ['asech', 'acoth']
};
exports.acschDocs = acschDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asec.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asec.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asecDocs = void 0;
var asecDocs = {
  name: 'asec',
  category: 'Trigonometry',
  syntax: ['asec(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
  seealso: ['acos', 'acot', 'acsc']
};
exports.asecDocs = asecDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asech.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asech.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asechDocs = void 0;
var asechDocs = {
  name: 'asech',
  category: 'Trigonometry',
  syntax: ['asech(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asech(0.5)'],
  seealso: ['acsch', 'acoth']
};
exports.asechDocs = asechDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asin.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asin.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asinDocs = void 0;
var asinDocs = {
  name: 'asin',
  category: 'Trigonometry',
  syntax: ['asin(x)'],
  description: 'Compute the inverse sine of a value in radians.',
  examples: ['asin(0.5)', 'asin(sin(0.5))'],
  seealso: ['sin', 'acos', 'atan']
};
exports.asinDocs = asinDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asinh.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/asinh.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asinhDocs = void 0;
var asinhDocs = {
  name: 'asinh',
  category: 'Trigonometry',
  syntax: ['asinh(x)'],
  description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
  examples: ['asinh(0.5)'],
  seealso: ['acosh', 'atanh']
};
exports.asinhDocs = asinhDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atan.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atan.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atanDocs = void 0;
var atanDocs = {
  name: 'atan',
  category: 'Trigonometry',
  syntax: ['atan(x)'],
  description: 'Compute the inverse tangent of a value in radians.',
  examples: ['atan(0.5)', 'atan(tan(0.5))'],
  seealso: ['tan', 'acos', 'asin']
};
exports.atanDocs = atanDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atan2.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atan2.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atan2Docs = void 0;
var atan2Docs = {
  name: 'atan2',
  category: 'Trigonometry',
  syntax: ['atan2(y, x)'],
  description: 'Computes the principal value of the arc tangent of y/x in radians.',
  examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
  seealso: ['sin', 'cos', 'tan']
};
exports.atan2Docs = atan2Docs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atanh.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/atanh.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.atanhDocs = void 0;
var atanhDocs = {
  name: 'atanh',
  category: 'Trigonometry',
  syntax: ['atanh(x)'],
  description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
  examples: ['atanh(0.5)'],
  seealso: ['acosh', 'asinh']
};
exports.atanhDocs = atanhDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cos.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cos.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cosDocs = void 0;
var cosDocs = {
  name: 'cos',
  category: 'Trigonometry',
  syntax: ['cos(x)'],
  description: 'Compute the cosine of x in radians.',
  examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['acos', 'sin', 'tan']
};
exports.cosDocs = cosDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cosh.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cosh.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.coshDocs = void 0;
var coshDocs = {
  name: 'cosh',
  category: 'Trigonometry',
  syntax: ['cosh(x)'],
  description: 'Compute the hyperbolic cosine of x in radians.',
  examples: ['cosh(0.5)'],
  seealso: ['sinh', 'tanh', 'coth']
};
exports.coshDocs = coshDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cot.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/cot.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cotDocs = void 0;
var cotDocs = {
  name: 'cot',
  category: 'Trigonometry',
  syntax: ['cot(x)'],
  description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
  examples: ['cot(2)', '1 / tan(2)'],
  seealso: ['sec', 'csc', 'tan']
};
exports.cotDocs = cotDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/coth.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/coth.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cothDocs = void 0;
var cothDocs = {
  name: 'coth',
  category: 'Trigonometry',
  syntax: ['coth(x)'],
  description: 'Compute the hyperbolic cotangent of x in radians.',
  examples: ['coth(2)', '1 / tanh(2)'],
  seealso: ['sech', 'csch', 'tanh']
};
exports.cothDocs = cothDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/csc.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/csc.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cscDocs = void 0;
var cscDocs = {
  name: 'csc',
  category: 'Trigonometry',
  syntax: ['csc(x)'],
  description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
  examples: ['csc(2)', '1 / sin(2)'],
  seealso: ['sec', 'cot', 'sin']
};
exports.cscDocs = cscDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/csch.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/csch.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cschDocs = void 0;
var cschDocs = {
  name: 'csch',
  category: 'Trigonometry',
  syntax: ['csch(x)'],
  description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
  examples: ['csch(2)', '1 / sinh(2)'],
  seealso: ['sech', 'coth', 'sinh']
};
exports.cschDocs = cschDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sec.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sec.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.secDocs = void 0;
var secDocs = {
  name: 'sec',
  category: 'Trigonometry',
  syntax: ['sec(x)'],
  description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
  examples: ['sec(2)', '1 / cos(2)'],
  seealso: ['cot', 'csc', 'cos']
};
exports.secDocs = secDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sech.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sech.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sechDocs = void 0;
var sechDocs = {
  name: 'sech',
  category: 'Trigonometry',
  syntax: ['sech(x)'],
  description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
  examples: ['sech(2)', '1 / cosh(2)'],
  seealso: ['coth', 'csch', 'cosh']
};
exports.sechDocs = sechDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sin.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sin.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sinDocs = void 0;
var sinDocs = {
  name: 'sin',
  category: 'Trigonometry',
  syntax: ['sin(x)'],
  description: 'Compute the sine of x in radians.',
  examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['asin', 'cos', 'tan']
};
exports.sinDocs = sinDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sinh.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/sinh.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sinhDocs = void 0;
var sinhDocs = {
  name: 'sinh',
  category: 'Trigonometry',
  syntax: ['sinh(x)'],
  description: 'Compute the hyperbolic sine of x in radians.',
  examples: ['sinh(0.5)'],
  seealso: ['cosh', 'tanh']
};
exports.sinhDocs = sinhDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/tan.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/tan.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tanDocs = void 0;
var tanDocs = {
  name: 'tan',
  category: 'Trigonometry',
  syntax: ['tan(x)'],
  description: 'Compute the tangent of x in radians.',
  examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
  seealso: ['atan', 'sin', 'cos']
};
exports.tanDocs = tanDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/tanh.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/trigonometry/tanh.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tanhDocs = void 0;
var tanhDocs = {
  name: 'tanh',
  category: 'Trigonometry',
  syntax: ['tanh(x)'],
  description: 'Compute the hyperbolic tangent of x in radians.',
  examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
  seealso: ['sinh', 'cosh']
};
exports.tanhDocs = tanhDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/units/to.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/units/to.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toDocs = void 0;
var toDocs = {
  name: 'to',
  category: 'Units',
  syntax: ['x to unit', 'to(x, unit)'],
  description: 'Change the unit of a value.',
  examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
  seealso: []
};
exports.toDocs = toDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/bin.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/bin.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.binDocs = void 0;
var binDocs = {
  name: 'bin',
  category: 'Utils',
  syntax: ['bin(value)'],
  description: 'Format a number as binary',
  examples: ['bin(2)'],
  seealso: ['oct', 'hex']
};
exports.binDocs = binDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/clone.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/clone.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cloneDocs = void 0;
var cloneDocs = {
  name: 'clone',
  category: 'Utils',
  syntax: ['clone(x)'],
  description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
  examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
  seealso: []
};
exports.cloneDocs = cloneDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/format.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/format.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.formatDocs = void 0;
var formatDocs = {
  name: 'format',
  category: 'Utils',
  syntax: ['format(value)', 'format(value, precision)'],
  description: 'Format a value of any type as string.',
  examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
  seealso: ['print']
};
exports.formatDocs = formatDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/hasNumericValue.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/hasNumericValue.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hasNumericValueDocs = void 0;
var hasNumericValueDocs = {
  name: 'hasNumericValue',
  category: 'Utils',
  syntax: ['hasNumericValue(x)'],
  description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
  examples: ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
};
exports.hasNumericValueDocs = hasNumericValueDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/hex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/hex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hexDocs = void 0;
var hexDocs = {
  name: 'hex',
  category: 'Utils',
  syntax: ['hex(value)'],
  description: 'Format a number as hexadecimal',
  examples: ['hex(240)'],
  seealso: ['bin', 'oct']
};
exports.hexDocs = hexDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isInteger.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isInteger.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isIntegerDocs = void 0;
var isIntegerDocs = {
  name: 'isInteger',
  category: 'Utils',
  syntax: ['isInteger(x)'],
  description: 'Test whether a value is an integer number.',
  examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};
exports.isIntegerDocs = isIntegerDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNaN.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNaN.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNaNDocs = void 0;
var isNaNDocs = {
  name: 'isNaN',
  category: 'Utils',
  syntax: ['isNaN(x)'],
  description: 'Test whether a value is NaN (not a number)',
  examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};
exports.isNaNDocs = isNaNDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNegative.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNegative.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNegativeDocs = void 0;
var isNegativeDocs = {
  name: 'isNegative',
  category: 'Utils',
  syntax: ['isNegative(x)'],
  description: 'Test whether a value is negative: smaller than zero.',
  examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']
};
exports.isNegativeDocs = isNegativeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNumeric.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isNumeric.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNumericDocs = void 0;
var isNumericDocs = {
  name: 'isNumeric',
  category: 'Utils',
  syntax: ['isNumeric(x)'],
  description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
  examples: ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
};
exports.isNumericDocs = isNumericDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isPositive.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isPositive.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isPositiveDocs = void 0;
var isPositiveDocs = {
  name: 'isPositive',
  category: 'Utils',
  syntax: ['isPositive(x)'],
  description: 'Test whether a value is positive: larger than zero.',
  examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
exports.isPositiveDocs = isPositiveDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isPrime.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isPrime.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isPrimeDocs = void 0;
var isPrimeDocs = {
  name: 'isPrime',
  category: 'Utils',
  syntax: ['isPrime(x)'],
  description: 'Test whether a value is prime: has no divisors other than itself and one.',
  examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
exports.isPrimeDocs = isPrimeDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isZero.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/isZero.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isZeroDocs = void 0;
var isZeroDocs = {
  name: 'isZero',
  category: 'Utils',
  syntax: ['isZero(x)'],
  description: 'Test whether a value is zero.',
  examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
};
exports.isZeroDocs = isZeroDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/numeric.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/numeric.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.numericDocs = void 0;
var numericDocs = {
  name: 'numeric',
  category: 'Utils',
  syntax: ['numeric(x)'],
  description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
  examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
  seealso: ['number', 'fraction', 'bignumber', 'string', 'format']
};
exports.numericDocs = numericDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/oct.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/oct.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.octDocs = void 0;
var octDocs = {
  name: 'oct',
  category: 'Utils',
  syntax: ['oct(value)'],
  description: 'Format a number as octal',
  examples: ['oct(56)'],
  seealso: ['bin', 'hex']
};
exports.octDocs = octDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/typeOf.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/embeddedDocs/function/utils/typeOf.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.typeOfDocs = void 0;
var typeOfDocs = {
  name: 'typeOf',
  category: 'Utils',
  syntax: ['typeOf(x)'],
  description: 'Get the type of a variable.',
  examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
  seealso: ['getMatrixDataType']
};
exports.typeOfDocs = typeOfDocs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/function/compile.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/function/compile.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCompile = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'compile';
var dependencies = ['typed', 'parse'];
var createCompile = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      parse = _ref.parse;

  /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
  return typed(name, {
    string: function string(expr) {
      return parse(expr).compile();
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      return (0, _collection.deepMap)(expr, function (entry) {
        return parse(entry).compile();
      });
    }
  });
});
exports.createCompile = createCompile;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/function/evaluate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/function/evaluate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createEvaluate = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _map = __webpack_require__(/*! ../../utils/map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

var name = 'evaluate';
var dependencies = ['typed', 'parse'];
var createEvaluate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      parse = _ref.parse;

  /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
  return typed(name, {
    string: function string(expr) {
      var scope = (0, _map.createEmptyMap)();
      return parse(expr).compile().evaluate(scope);
    },
    'string, Map | Object': function stringMapObject(expr, scope) {
      return parse(expr).compile().evaluate(scope);
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      var scope = (0, _map.createEmptyMap)();
      return (0, _collection.deepMap)(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    },
    'Array | Matrix, Map | Object': function ArrayMatrixMapObject(expr, scope) {
      return (0, _collection.deepMap)(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    }
  });
});
exports.createEvaluate = createEvaluate;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/function/help.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/function/help.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createHelp = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _embeddedDocs = __webpack_require__(/*! ../embeddedDocs/embeddedDocs.js */ "./node_modules/mathjs/lib/cjs/expression/embeddedDocs/embeddedDocs.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var name = 'help';
var dependencies = ['typed', 'mathWithTransform', 'Help'];
var createHelp = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      mathWithTransform = _ref.mathWithTransform,
      Help = _ref.Help;

  /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
  return typed(name, {
    any: function any(search) {
      var prop;
      var searchName = search;

      if (typeof search !== 'string') {
        for (prop in mathWithTransform) {
          // search in functions and constants
          if ((0, _object.hasOwnProperty)(mathWithTransform, prop) && search === mathWithTransform[prop]) {
            searchName = prop;
            break;
          }
        }
        /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (hasOwnProperty(math, prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */

      }

      var doc = (0, _customs.getSafeProperty)(_embeddedDocs.embeddedDocs, searchName);

      if (!doc) {
        var searchText = typeof searchName === 'function' ? searchName.name : searchName;
        throw new Error('No documentation found on "' + searchText + '"');
      }

      return new Help(doc);
    }
  });
});
exports.createHelp = createHelp;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/function/parser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/function/parser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createParser = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'parser';
var dependencies = ['typed', 'Parser'];
var createParser = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Parser = _ref.Parser;

  /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')             // 3.5
   *     parser.evaluate('x + 3')                 // 6.5
   *     parser.evaluate('f(x, y) = x^y')         // f(x, y)
   *     parser.evaluate('f(2, 3)')               // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 7
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */
  return typed(name, {
    '': function _() {
      return new Parser();
    }
  });
});
exports.createParser = createParser;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/keywords.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/keywords.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.keywords = void 0;
// Reserved keywords not allowed to use in the parser
var keywords = new Set(['end']);
exports.keywords = keywords;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/AccessorNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/AccessorNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAccessorNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _access = __webpack_require__(/*! ./utils/access.js */ "./node_modules/mathjs/lib/cjs/expression/node/utils/access.js");

var name = 'AccessorNode';
var dependencies = ['subset', 'Node'];
var createAccessorNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var subset = _ref.subset,
      Node = _ref.Node;
  var access = (0, _access.accessFactory)({
    subset: subset
  });
  /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */

  function AccessorNode(object, index) {
    if (!(this instanceof AccessorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!(0, _is.isNode)(object)) {
      throw new TypeError('Node expected for parameter "object"');
    }

    if (!(0, _is.isIndexNode)(index)) {
      throw new TypeError('IndexNode expected for parameter "index"');
    }

    this.object = object || null;
    this.index = index; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AccessorNode.prototype = new Node();
  AccessorNode.prototype.type = 'AccessorNode';
  AccessorNode.prototype.isAccessorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AccessorNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);

    var evalIndex = this.index._compile(math, argNames);

    if (this.index.isObjectProperty()) {
      var prop = this.index.getObjectProperty();
      return function evalAccessorNode(scope, args, context) {
        // get a property from an object evaluated using the scope.
        return (0, _customs.getSafeProperty)(evalObject(scope, args, context), prop);
      };
    } else {
      return function evalAccessorNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var index = evalIndex(scope, args, object); // we pass object here instead of context

        return access(object, index);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AccessorNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    callback(this.index, 'index', this);
  };
  /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */


  AccessorNode.prototype.map = function (callback) {
    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */


  AccessorNode.prototype.clone = function () {
    return new AccessorNode(this.object, this.index);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toString = function (options) {
    var object = this.object.toString(options);

    if (needParenthesis(this.object)) {
      object = '(' + object + ')';
    }

    return object + this.index.toString(options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);

    if (needParenthesis(this.object)) {
      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return object + this.index.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);

    if (needParenthesis(this.object)) {
      object = '\\left(\' + object + \'\\right)';
    }

    return object + this.index.toTex(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AccessorNode.prototype.toJSON = function () {
    return {
      mathjs: 'AccessorNode',
      object: this.object,
      index: this.index
    };
  };
  /**
   * Instantiate an AccessorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
   *                       where mathjs is optional
   * @returns {AccessorNode}
   */


  AccessorNode.fromJSON = function (json) {
    return new AccessorNode(json.object, json.index);
  };
  /**
   * Are parenthesis needed?
   * @private
   */


  function needParenthesis(node) {
    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
    return !((0, _is.isAccessorNode)(node) || (0, _is.isArrayNode)(node) || (0, _is.isConstantNode)(node) || (0, _is.isFunctionNode)(node) || (0, _is.isObjectNode)(node) || (0, _is.isParenthesisNode)(node) || (0, _is.isSymbolNode)(node));
  }

  return AccessorNode;
}, {
  isClass: true,
  isNode: true
});
exports.createAccessorNode = createAccessorNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/ArrayNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/ArrayNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createArrayNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ArrayNode';
var dependencies = ['Node'];
var createArrayNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
  function ArrayNode(items) {
    if (!(this instanceof ArrayNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.items = items || []; // validate input

    if (!Array.isArray(this.items) || !this.items.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected');
    }
  }

  ArrayNode.prototype = new Node();
  ArrayNode.prototype.type = 'ArrayNode';
  ArrayNode.prototype.isArrayNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ArrayNode.prototype._compile = function (math, argNames) {
    var evalItems = (0, _array.map)(this.items, function (item) {
      return item._compile(math, argNames);
    });
    var asMatrix = math.config.matrix !== 'Array';

    if (asMatrix) {
      var matrix = math.matrix;
      return function evalArrayNode(scope, args, context) {
        return matrix((0, _array.map)(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        }));
      };
    } else {
      return function evalArrayNode(scope, args, context) {
        return (0, _array.map)(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        });
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ArrayNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.items.length; i++) {
      var node = this.items[i];
      callback(node, 'items[' + i + ']', this);
    }
  };
  /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */


  ArrayNode.prototype.map = function (callback) {
    var items = [];

    for (var i = 0; i < this.items.length; i++) {
      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
    }

    return new ArrayNode(items);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */


  ArrayNode.prototype.clone = function () {
    return new ArrayNode(this.items.slice(0));
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype._toString = function (options) {
    var items = this.items.map(function (node) {
      return node.toString(options);
    });
    return '[' + items.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ArrayNode.prototype.toJSON = function () {
    return {
      mathjs: 'ArrayNode',
      items: this.items
    };
  };
  /**
   * Instantiate an ArrayNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ArrayNode", items: [...]}`,
   *                       where mathjs is optional
   * @returns {ArrayNode}
   */


  ArrayNode.fromJSON = function (json) {
    return new ArrayNode(json.items);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype.toHTML = function (options) {
    var items = this.items.map(function (node) {
      return node.toHTML(options);
    });
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ArrayNode.prototype._toTex = function (options) {
    function itemsToTex(items, nested) {
      var mixedItems = items.some(_is.isArrayNode) && !items.every(_is.isArrayNode);
      var itemsFormRow = nested || mixedItems;
      var itemSep = itemsFormRow ? '&' : '\\\\';
      var itemsTex = items.map(function (node) {
        if (node.items) {
          return itemsToTex(node.items, !nested);
        } else {
          return node.toTex(options);
        }
      }).join(itemSep);
      return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\begin{bmatrix}' + itemsTex + '\\end{bmatrix}' : itemsTex;
    }

    return itemsToTex(this.items, false);
  };

  return ArrayNode;
}, {
  isClass: true,
  isNode: true
});
exports.createArrayNode = createArrayNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAssignmentNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _access = __webpack_require__(/*! ./utils/access.js */ "./node_modules/mathjs/lib/cjs/expression/node/utils/access.js");

var _assign = __webpack_require__(/*! ./utils/assign.js */ "./node_modules/mathjs/lib/cjs/expression/node/utils/assign.js");

var _operators = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/cjs/expression/operators.js");

var name = 'AssignmentNode';
var dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset
'Node'];
var createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var subset = _ref.subset,
      matrix = _ref.matrix,
      Node = _ref.Node;
  var access = (0, _access.accessFactory)({
    subset: subset
  });
  var assign = (0, _assign.assignFactory)({
    subset: subset,
    matrix: matrix
  });
  /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */

  function AssignmentNode(object, index, value) {
    if (!(this instanceof AssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.object = object;
    this.index = value ? index : null;
    this.value = value || index; // validate input

    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    }

    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {
      throw new Error('Cannot assign to symbol "end"');
    }

    if (this.index && !(0, _is.isIndexNode)(this.index)) {
      // index is optional
      throw new TypeError('IndexNode expected as "index"');
    }

    if (!(0, _is.isNode)(this.value)) {
      throw new TypeError('Node expected as "value"');
    } // readonly property name


    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AssignmentNode.prototype = new Node();
  AssignmentNode.prototype.type = 'AssignmentNode';
  AssignmentNode.prototype.isAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AssignmentNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);

    var evalIndex = this.index ? this.index._compile(math, argNames) : null;

    var evalValue = this.value._compile(math, argNames);

    var name = this.object.name;

    if (!this.index) {
      // apply a variable to the scope, for example `a=2`
      if (!(0, _is.isSymbolNode)(this.object)) {
        throw new TypeError('SymbolNode expected as object');
      }

      return function evalAssignmentNode(scope, args, context) {
        var value = evalValue(scope, args, context);
        scope.set(name, value);
        return value;
      };
    } else if (this.index.isObjectProperty()) {
      // apply an object property for example `a.b=2`
      var prop = this.index.getObjectProperty();
      return function evalAssignmentNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        (0, _customs.setSafeProperty)(object, prop, value);
        return value;
      };
    } else if ((0, _is.isSymbolNode)(this.object)) {
      // update a matrix subset, for example `a[2]=3`
      return function evalAssignmentNode(scope, args, context) {
        var childObject = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

        scope.set(name, assign(childObject, index, value));
        return value;
      };
    } else {
      // isAccessorNode(node.object) === true
      // update a matrix subset, for example `a.b[2]=3`
      // we will not use the compile function of the AccessorNode, but compile it
      // ourselves here as we need the parent object of the AccessorNode:
      // wee need to apply the updated object to parent object
      var evalParentObject = this.object.object._compile(math, argNames);

      if (this.object.index.isObjectProperty()) {
        var parentProp = this.object.index.getObjectProperty();
        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var childObject = (0, _customs.getSafeProperty)(parent, parentProp);
          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

          var value = evalValue(scope, args, context);
          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));
          return value;
        };
      } else {
        // if some parameters use the 'end' parameter, we need to calculate the size
        var evalParentIndex = this.object.index._compile(math, argNames);

        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

          var childObject = access(parent, parentIndex);
          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

          var value = evalValue(scope, args, context);
          assign(parent, parentIndex, assign(childObject, index, value));
          return value;
        };
      }
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AssignmentNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);

    if (this.index) {
      callback(this.index, 'index', this);
    }

    callback(this.value, 'value', this);
  };
  /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */


  AssignmentNode.prototype.map = function (callback) {
    var object = this._ifNode(callback(this.object, 'object', this));

    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

    var value = this._ifNode(callback(this.value, 'value', this));

    return new AssignmentNode(object, index, value);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */


  AssignmentNode.prototype.clone = function () {
    return new AssignmentNode(this.object, this.index, this.value);
  };
  /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */


  function needParenthesis(node, parenthesis) {
    if (!parenthesis) {
      parenthesis = 'keep';
    }

    var precedence = (0, _operators.getPrecedence)(node, parenthesis);
    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toString = function (options) {
    var object = this.object.toString(options);
    var index = this.index ? this.index.toString(options) : '';
    var value = this.value.toString(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '(' + value + ')';
    }

    return object + index + ' = ' + value;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AssignmentNode.prototype.toJSON = function () {
    return {
      mathjs: 'AssignmentNode',
      object: this.object,
      index: this.index,
      value: this.value
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
   *                       where mathjs is optional
   * @returns {AssignmentNode}
   */


  AssignmentNode.fromJSON = function (json) {
    return new AssignmentNode(json.object, json.index, json.value);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);
    var index = this.index ? this.index.toHTML(options) : '';
    var value = this.value.toHTML(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }

    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);
    var index = this.index ? this.index.toTex(options) : '';
    var value = this.value.toTex(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = "\\left(".concat(value, "\\right)");
    }

    return object + index + ':=' + value;
  };

  return AssignmentNode;
}, {
  isClass: true,
  isNode: true
});
exports.createAssignmentNode = createAssignmentNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/BlockNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/BlockNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBlockNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'BlockNode';
var dependencies = ['ResultSet', 'Node'];
var createBlockNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var ResultSet = _ref.ResultSet,
      Node = _ref.Node;

  /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
  function BlockNode(blocks) {
    if (!(this instanceof BlockNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input, copy blocks


    if (!Array.isArray(blocks)) throw new Error('Array expected');
    this.blocks = blocks.map(function (block) {
      var node = block && block.node;
      var visible = block && block.visible !== undefined ? block.visible : true;
      if (!(0, _is.isNode)(node)) throw new TypeError('Property "node" must be a Node');
      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
      return {
        node: node,
        visible: visible
      };
    });
  }

  BlockNode.prototype = new Node();
  BlockNode.prototype.type = 'BlockNode';
  BlockNode.prototype.isBlockNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  BlockNode.prototype._compile = function (math, argNames) {
    var evalBlocks = (0, _array.map)(this.blocks, function (block) {
      return {
        evaluate: block.node._compile(math, argNames),
        visible: block.visible
      };
    });
    return function evalBlockNodes(scope, args, context) {
      var results = [];
      (0, _array.forEach)(evalBlocks, function evalBlockNode(block) {
        var result = block.evaluate(scope, args, context);

        if (block.visible) {
          results.push(result);
        }
      });
      return new ResultSet(results);
    };
  };
  /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  BlockNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.blocks.length; i++) {
      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    }
  };
  /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */


  BlockNode.prototype.map = function (callback) {
    var blocks = [];

    for (var i = 0; i < this.blocks.length; i++) {
      var block = this.blocks[i];

      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

      blocks[i] = {
        node: node,
        visible: block.visible
      };
    }

    return new BlockNode(blocks);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */


  BlockNode.prototype.clone = function () {
    var blocks = this.blocks.map(function (block) {
      return {
        node: block.node,
        visible: block.visible
      };
    });
    return new BlockNode(blocks);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype._toString = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toString(options) + (param.visible ? '' : ';');
    }).join('\n');
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  BlockNode.prototype.toJSON = function () {
    return {
      mathjs: 'BlockNode',
      blocks: this.blocks
    };
  };
  /**
   * Instantiate an BlockNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
   *                       where mathjs is optional
   * @returns {BlockNode}
   */


  BlockNode.fromJSON = function (json) {
    return new BlockNode(json.blocks);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype.toHTML = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  BlockNode.prototype._toTex = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toTex(options) + (param.visible ? '' : ';');
    }).join('\\;\\;\n');
  };

  return BlockNode;
}, {
  isClass: true,
  isNode: true
});
exports.createBlockNode = createBlockNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/ConditionalNode.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/ConditionalNode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createConditionalNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _operators = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/cjs/expression/operators.js");

var name = 'ConditionalNode';
var dependencies = ['Node'];
var createConditionalNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
  function ConditionalNode(condition, trueExpr, falseExpr) {
    if (!(this instanceof ConditionalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!(0, _is.isNode)(condition)) throw new TypeError('Parameter condition must be a Node');
    if (!(0, _is.isNode)(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
    if (!(0, _is.isNode)(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }

  ConditionalNode.prototype = new Node();
  ConditionalNode.prototype.type = 'ConditionalNode';
  ConditionalNode.prototype.isConditionalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConditionalNode.prototype._compile = function (math, argNames) {
    var evalCondition = this.condition._compile(math, argNames);

    var evalTrueExpr = this.trueExpr._compile(math, argNames);

    var evalFalseExpr = this.falseExpr._compile(math, argNames);

    return function evalConditionalNode(scope, args, context) {
      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConditionalNode.prototype.forEach = function (callback) {
    callback(this.condition, 'condition', this);
    callback(this.trueExpr, 'trueExpr', this);
    callback(this.falseExpr, 'falseExpr', this);
  };
  /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */


  ConditionalNode.prototype.map = function (callback) {
    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */


  ConditionalNode.prototype.clone = function () {
    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0, _operators.getPrecedence)(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toString(options);
    var conditionPrecedence = (0, _operators.getPrecedence)(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '(' + condition + ')';
    }

    var trueExpr = this.trueExpr.toString(options);
    var truePrecedence = (0, _operators.getPrecedence)(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '(' + trueExpr + ')';
    }

    var falseExpr = this.falseExpr.toString(options);
    var falsePrecedence = (0, _operators.getPrecedence)(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '(' + falseExpr + ')';
    }

    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConditionalNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConditionalNode',
      condition: this.condition,
      trueExpr: this.trueExpr,
      falseExpr: this.falseExpr
    };
  };
  /**
   * Instantiate an ConditionalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {ConditionalNode}
   */


  ConditionalNode.fromJSON = function (json) {
    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0, _operators.getPrecedence)(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toHTML(options);
    var conditionPrecedence = (0, _operators.getPrecedence)(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var trueExpr = this.trueExpr.toHTML(options);
    var truePrecedence = (0, _operators.getPrecedence)(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var falseExpr = this.falseExpr.toHTML(options);
    var falsePrecedence = (0, _operators.getPrecedence)(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toTex = function (options) {
    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
  };
  /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */


  function testCondition(condition) {
    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
      return !!condition;
    }

    if (condition) {
      if ((0, _is.isBigNumber)(condition)) {
        return !condition.isZero();
      }

      if ((0, _is.isComplex)(condition)) {
        return !!(condition.re || condition.im);
      }

      if ((0, _is.isUnit)(condition)) {
        return !!condition.value;
      }
    }

    if (condition === null || condition === undefined) {
      return false;
    }

    throw new TypeError('Unsupported type of condition "' + (0, _is.typeOf)(condition) + '"');
  }

  return ConditionalNode;
}, {
  isClass: true,
  isNode: true
});
exports.createConditionalNode = createConditionalNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/ConstantNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/ConstantNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createConstantNode = void 0;

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _latex = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/cjs/utils/latex.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ConstantNode';
var dependencies = ['Node'];
var createConstantNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * A ConstantNode holds a constant value like a number or string.
   *
   * Usage:
   *
   *     new ConstantNode(2.3)
   *     new ConstantNode('hello')
   *
   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
   * @constructor ConstantNode
   * @extends {Node}
   */
  function ConstantNode(value) {
    if (!(this instanceof ConstantNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.value = value;
  }

  ConstantNode.prototype = new Node();
  ConstantNode.prototype.type = 'ConstantNode';
  ConstantNode.prototype.isConstantNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConstantNode.prototype._compile = function (math, argNames) {
    var value = this.value;
    return function evalConstantNode() {
      return value;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
  };
  /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */


  ConstantNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */


  ConstantNode.prototype.clone = function () {
    return new ConstantNode(this.value);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toString = function (options) {
    return (0, _string.format)(this.value, options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype.toHTML = function (options) {
    var value = this._toString(options);

    switch ((0, _is.typeOf)(this.value)) {
      case 'number':
      case 'BigNumber':
      case 'Fraction':
        return '<span class="math-number">' + value + '</span>';

      case 'string':
        return '<span class="math-string">' + value + '</span>';

      case 'boolean':
        return '<span class="math-boolean">' + value + '</span>';

      case 'null':
        return '<span class="math-null-symbol">' + value + '</span>';

      case 'undefined':
        return '<span class="math-undefined">' + value + '</span>';

      default:
        return '<span class="math-symbol">' + value + '</span>';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConstantNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConstantNode',
      value: this.value
    };
  };
  /**
   * Instantiate a ConstantNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
   *                       where mathjs is optional
   * @returns {ConstantNode}
   */


  ConstantNode.fromJSON = function (json) {
    return new ConstantNode(json.value);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toTex = function (options) {
    var value = this._toString(options);

    switch ((0, _is.typeOf)(this.value)) {
      case 'string':
        return '\\mathtt{' + (0, _latex.escapeLatex)(value) + '}';

      case 'number':
      case 'BigNumber':
        {
          if (!isFinite(this.value)) {
            return this.value.valueOf() < 0 ? '-\\infty' : '\\infty';
          }

          var index = value.toLowerCase().indexOf('e');

          if (index !== -1) {
            return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
          }
        }
        return value;

      case 'Fraction':
        return this.value.toLatex();

      default:
        return value;
    }
  };

  return ConstantNode;
}, {
  isClass: true,
  isNode: true
});
exports.createConstantNode = createConstantNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/FunctionAssignmentNode.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/FunctionAssignmentNode.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFunctionAssignmentNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _keywords = __webpack_require__(/*! ../keywords.js */ "./node_modules/mathjs/lib/cjs/expression/keywords.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _latex = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/cjs/utils/latex.js");

var _operators = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/cjs/expression/operators.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'FunctionAssignmentNode';
var dependencies = ['typed', 'Node'];
var createFunctionAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Node = _ref.Node;

  /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
  function FunctionAssignmentNode(name, params, expr) {
    if (!(this instanceof FunctionAssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!(0, _is.isNode)(expr)) throw new TypeError('Node expected for parameter "expr"');
    if (_keywords.keywords.has(name)) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
    this.name = name;
    this.params = params.map(function (param) {
      return param && param.name || param;
    });
    this.types = params.map(function (param) {
      return param && param.type || 'any';
    });
    this.expr = expr;
  }

  FunctionAssignmentNode.prototype = new Node();
  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
    var childArgNames = Object.create(argNames);
    (0, _array.forEach)(this.params, function (param) {
      childArgNames[param] = true;
    }); // compile the function expression with the child args

    var evalExpr = this.expr._compile(math, childArgNames);

    var name = this.name;
    var params = this.params;
    var signature = (0, _array.join)(this.types, ',');
    var syntax = name + '(' + (0, _array.join)(this.params, ', ') + ')';
    return function evalFunctionAssignmentNode(scope, args, context) {
      var signatures = {};

      signatures[signature] = function () {
        var childArgs = Object.create(args);

        for (var i = 0; i < params.length; i++) {
          childArgs[params[i]] = arguments[i];
        }

        return evalExpr(scope, childArgs, context);
      };

      var fn = typed(name, signatures);
      fn.syntax = syntax;
      scope.set(name, fn);
      return fn;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionAssignmentNode.prototype.forEach = function (callback) {
    callback(this.expr, 'expr', this);
  };
  /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */


  FunctionAssignmentNode.prototype.map = function (callback) {
    var expr = this._ifNode(callback(this.expr, 'expr', this));

    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.prototype.clone = function () {
    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
  };
  /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */


  function needParenthesis(node, parenthesis) {
    var precedence = (0, _operators.getPrecedence)(node, parenthesis);
    var exprPrecedence = (0, _operators.getPrecedence)(node.expr, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toString(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '(' + expr + ')';
    }

    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionAssignmentNode.prototype.toJSON = function () {
    var types = this.types;
    return {
      mathjs: 'FunctionAssignmentNode',
      name: this.name,
      params: this.params.map(function (param, index) {
        return {
          name: param,
          type: types[index]
        };
      }),
      expr: this.expr
    };
  };
  /**
   * Instantiate an FunctionAssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.fromJSON = function (json) {
    return new FunctionAssignmentNode(json.name, json.params, json.expr);
  };
  /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var params = [];

    for (var i = 0; i < this.params.length; i++) {
      params.push('<span class="math-symbol math-parameter">' + (0, _string.escape)(this.params[i]) + '</span>');
    }

    var expr = this.expr.toHTML(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return '<span class="math-function">' + (0, _string.escape)(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
  };
  /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toTex(options);

    if (needParenthesis(this, parenthesis)) {
      expr = "\\left(".concat(expr, "\\right)");
    }

    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(_latex.toSymbol).join(',') + '\\right):=' + expr;
  };

  return FunctionAssignmentNode;
}, {
  isClass: true,
  isNode: true
});
exports.createFunctionAssignmentNode = createFunctionAssignmentNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/FunctionNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/FunctionNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFunctionNode = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _scope = __webpack_require__(/*! ../../utils/scope.js */ "./node_modules/mathjs/lib/cjs/utils/scope.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _latex = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/cjs/utils/latex.js");

var name = 'FunctionNode';
var dependencies = ['math', 'Node', 'SymbolNode'];
var createFunctionNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var math = _ref.math,
      Node = _ref.Node,
      SymbolNode = _ref.SymbolNode;

  /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
  function FunctionNode(fn, args) {
    if (!(this instanceof FunctionNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (typeof fn === 'string') {
      fn = new SymbolNode(fn);
    } // validate input


    if (!(0, _is.isNode)(fn)) throw new TypeError('Node expected as parameter "fn"');

    if (!Array.isArray(args) || !args.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.fn = fn;
    this.args = args || []; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        return this.fn.name || '';
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  FunctionNode.prototype = new Node();
  FunctionNode.prototype.type = 'FunctionNode';
  FunctionNode.prototype.isFunctionNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionNode.prototype._compile = function (math, argNames) {
    if (!(this instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode');
    } // compile arguments


    var evalArgs = this.args.map(function (arg) {
      return arg._compile(math, argNames);
    });

    if ((0, _is.isSymbolNode)(this.fn)) {
      // we can statically determine whether the function has an rawArgs property
      var _name = this.fn.name;
      var fn = _name in math ? (0, _customs.getSafeProperty)(math, _name) : undefined;
      var isRaw = typeof fn === 'function' && fn.rawArgs === true;

      var resolveFn = function resolveFn(scope) {
        if (scope.has(_name)) {
          return scope.get(_name);
        }

        if (_name in math) {
          return (0, _customs.getSafeProperty)(math, _name);
        }

        return FunctionNode.onUndefinedFunction(_name);
      };

      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        // "raw" evaluation
        var rawArgs = this.args;
        return function evalFunctionNode(scope, args, context) {
          var fn = resolveFn(scope);
          return fn(rawArgs, math, (0, _scope.createSubScope)(scope, args), scope);
        };
      } else {
        // "regular" evaluation
        switch (evalArgs.length) {
          case 0:
            return function evalFunctionNode(scope, args, context) {
              var fn = resolveFn(scope);
              return fn();
            };

          case 1:
            return function evalFunctionNode(scope, args, context) {
              var fn = resolveFn(scope);
              var evalArg0 = evalArgs[0];
              return fn(evalArg0(scope, args, context));
            };

          case 2:
            return function evalFunctionNode(scope, args, context) {
              var fn = resolveFn(scope);
              var evalArg0 = evalArgs[0];
              var evalArg1 = evalArgs[1];
              return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));
            };

          default:
            return function evalFunctionNode(scope, args, context) {
              var fn = resolveFn(scope);
              var values = evalArgs.map(function (evalArg) {
                return evalArg(scope, args, context);
              });
              return fn.apply(void 0, (0, _toConsumableArray2["default"])(values));
            };
        }
      }
    } else if ((0, _is.isAccessorNode)(this.fn) && (0, _is.isIndexNode)(this.fn.index) && this.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode
      var evalObject = this.fn.object._compile(math, argNames);

      var prop = this.fn.index.getObjectProperty();
      var _rawArgs = this.args;
      return function evalFunctionNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        (0, _customs.validateSafeMethod)(object, prop);
        var isRaw = object[prop] && object[prop].rawArgs;

        if (isRaw) {
          return object[prop](_rawArgs, math, (0, _scope.createSubScope)(scope, args), scope); // "raw" evaluation
        } else {
          // "regular" evaluation
          var values = evalArgs.map(function (evalArg) {
            return evalArg(scope, args, context);
          });
          return object[prop].apply(object, values);
        }
      };
    } else {
      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      var evalFn = this.fn._compile(math, argNames);

      var _rawArgs2 = this.args;
      return function evalFunctionNode(scope, args, context) {
        var fn = evalFn(scope, args, context);
        var isRaw = fn && fn.rawArgs;

        if (isRaw) {
          return fn(_rawArgs2, math, (0, _scope.createSubScope)(scope, args), scope); // "raw" evaluation
        } else {
          // "regular" evaluation
          var values = evalArgs.map(function (evalArg) {
            return evalArg(scope, args, context);
          });
          return fn.apply(fn, values);
        }
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionNode.prototype.forEach = function (callback) {
    callback(this.fn, 'fn', this);

    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */


  FunctionNode.prototype.map = function (callback) {
    var fn = this._ifNode(callback(this.fn, 'fn', this));

    var args = [];

    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new FunctionNode(fn, args);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */


  FunctionNode.prototype.clone = function () {
    return new FunctionNode(this.fn, this.args.slice(0));
  };
  /**
   * Throws an error 'Undefined function {name}'
   * @param {string} name
   */


  FunctionNode.onUndefinedFunction = function (name) {
    throw new Error('Undefined function ' + name);
  }; // backup Node's toString function
  // @private


  var nodeToString = FunctionNode.prototype.toString;
  /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */

  FunctionNode.prototype.toString = function (options) {
    var customString;
    var name = this.fn.toString(options);

    if (options && (0, _typeof2["default"])(options.handler) === 'object' && (0, _object.hasOwnProperty)(options.handler, name)) {
      // callback is a map of callback functions
      customString = options.handler[name](this, options);
    }

    if (typeof customString !== 'undefined') {
      return customString;
    } // fall back to Node's toString


    return nodeToString.call(this, options);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toString = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toString(options);
    });
    var fn = (0, _is.isFunctionAssignmentNode)(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

    return fn + '(' + args.join(', ') + ')';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionNode.prototype.toJSON = function () {
    return {
      mathjs: 'FunctionNode',
      fn: this.fn,
      args: this.args
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionNode}
   */


  FunctionNode.fromJSON = function (json) {
    return new FunctionNode(json.fn, json.args);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype.toHTML = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toHTML(options);
    }); // format the arguments like "add(2, 4.2)"

    return '<span class="math-function">' + (0, _string.escape)(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };
  /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/


  function expandTemplate(template, node, options) {
    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
    // while submatching identifier and 2 (in the second case)

    var regex = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi;
    var inputPos = 0; // position in the input string

    var match;

    while ((match = regex.exec(template)) !== null) {
      // go through all matches
      // add everything in front of the match to the LaTeX string
      latex += template.substring(inputPos, match.index);
      inputPos = match.index;

      if (match[0] === '$$') {
        // escaped dollar sign
        latex += '$';
        inputPos++;
      } else {
        // template parameter
        inputPos += match[0].length;
        var property = node[match[1]];

        if (!property) {
          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
        }

        if (match[2] === undefined) {
          // no square brackets
          switch ((0, _typeof2["default"])(property)) {
            case 'string':
              latex += property;
              break;

            case 'object':
              if ((0, _is.isNode)(property)) {
                latex += property.toTex(options);
              } else if (Array.isArray(property)) {
                // make array of Nodes into comma separated list
                latex += property.map(function (arg, index) {
                  if ((0, _is.isNode)(arg)) {
                    return arg.toTex(options);
                  }

                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                }).join(',');
              } else {
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }

              break;

            default:
              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
          }
        } else {
          // with square brackets
          if ((0, _is.isNode)(property[match[2]] && property[match[2]])) {
            latex += property[match[2]].toTex(options);
          } else {
            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
          }
        }
      }
    }

    latex += template.slice(inputPos); // append rest of the template

    return latex;
  } // backup Node's toTex function
  // @private


  var nodeToTex = FunctionNode.prototype.toTex;
  /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */

  FunctionNode.prototype.toTex = function (options) {
    var customTex;

    if (options && (0, _typeof2["default"])(options.handler) === 'object' && (0, _object.hasOwnProperty)(options.handler, this.name)) {
      // callback is a map of callback functions
      customTex = options.handler[this.name](this, options);
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    } // fall back to Node's toTex


    return nodeToTex.call(this, options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toTex = function (options) {
    var args = this.args.map(function (arg) {
      // get LaTeX of the arguments
      return arg.toTex(options);
    });
    var latexConverter;

    if (_latex.latexFunctions[this.name]) {
      latexConverter = _latex.latexFunctions[this.name];
    } // toTex property on the function itself


    if (math[this.name] && (typeof math[this.name].toTex === 'function' || (0, _typeof2["default"])(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
      // .toTex is a callback function
      latexConverter = math[this.name].toTex;
    }

    var customToTex;

    switch ((0, _typeof2["default"])(latexConverter)) {
      case 'function':
        // a callback function
        customToTex = latexConverter(this, options);
        break;

      case 'string':
        // a template string
        customToTex = expandTemplate(latexConverter, this, options);
        break;

      case 'object':
        // an object with different "converters" for different numbers of arguments
        switch ((0, _typeof2["default"])(latexConverter[args.length])) {
          case 'function':
            customToTex = latexConverter[args.length](this, options);
            break;

          case 'string':
            customToTex = expandTemplate(latexConverter[args.length], this, options);
            break;
        }

    }

    if (typeof customToTex !== 'undefined') {
      return customToTex;
    }

    return expandTemplate(_latex.defaultTemplate, this, options);
  };
  /**
   * Get identifier.
   * @return {string}
   */


  FunctionNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.name;
  };

  return FunctionNode;
}, {
  isClass: true,
  isNode: true
});
exports.createFunctionNode = createFunctionNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/IndexNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/IndexNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIndexNode = void 0;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var name = 'IndexNode';
var dependencies = ['Range', 'Node', 'size'];
var createIndexNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Range = _ref.Range,
      Node = _ref.Node,
      size = _ref.size;

  /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */
  function IndexNode(dimensions, dotNotation) {
    if (!(this instanceof IndexNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.dimensions = dimensions;
    this.dotNotation = dotNotation || false; // validate input

    if (!Array.isArray(dimensions) || !dimensions.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    }

    if (this.dotNotation && !this.isObjectProperty()) {
      throw new Error('dotNotation only applicable for object properties');
    }
  }

  IndexNode.prototype = new Node();
  IndexNode.prototype.type = 'IndexNode';
  IndexNode.prototype.isIndexNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  IndexNode.prototype._compile = function (math, argNames) {
    // TODO: implement support for bignumber (currently bignumbers are silently
    //       reduced to numbers when changing the value to zero-based)
    // TODO: Optimization: when the range values are ConstantNodes,
    //       we can beforehand resolve the zero-based value
    // optimization for a simple object property
    var evalDimensions = (0, _array.map)(this.dimensions, function (range, i) {
      if ((0, _is.isRangeNode)(range)) {
        if (range.needsEnd()) {
          // create a range containing end (like '4:end')
          var childArgNames = Object.create(argNames);
          childArgNames.end = true;

          var evalStart = range.start._compile(math, childArgNames);

          var evalEnd = range.end._compile(math, childArgNames);

          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            var s = size(context).valueOf();
            var childArgs = Object.create(args);
            childArgs.end = s[i];
            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
          };
        } else {
          // create range
          var _evalStart = range.start._compile(math, argNames);

          var _evalEnd = range.end._compile(math, argNames);

          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
            return 1;
          };

          return function evalDimension(scope, args, context) {
            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
          };
        }
      } else if ((0, _is.isSymbolNode)(range) && range.name === 'end') {
        // SymbolNode 'end'
        var _childArgNames = Object.create(argNames);

        _childArgNames.end = true;

        var evalRange = range._compile(math, _childArgNames);

        return function evalDimension(scope, args, context) {
          var s = size(context).valueOf();
          var childArgs = Object.create(args);
          childArgs.end = s[i];
          return evalRange(scope, childArgs, context);
        };
      } else {
        // ConstantNode
        var _evalRange = range._compile(math, argNames);

        return function evalDimension(scope, args, context) {
          return _evalRange(scope, args, context);
        };
      }
    });
    var index = (0, _customs.getSafeProperty)(math, 'index');
    return function evalIndexNode(scope, args, context) {
      var dimensions = (0, _array.map)(evalDimensions, function (evalDimension) {
        return evalDimension(scope, args, context);
      });
      return index.apply(void 0, (0, _toConsumableArray2["default"])(dimensions));
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  IndexNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.dimensions.length; i++) {
      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    }
  };
  /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */


  IndexNode.prototype.map = function (callback) {
    var dimensions = [];

    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
    }

    return new IndexNode(dimensions, this.dotNotation);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */


  IndexNode.prototype.clone = function () {
    return new IndexNode(this.dimensions.slice(0), this.dotNotation);
  };
  /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */


  IndexNode.prototype.isObjectProperty = function () {
    return this.dimensions.length === 1 && (0, _is.isConstantNode)(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
  };
  /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */


  IndexNode.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toString = function (options) {
    // format the parameters like "[1, 0:5]"
    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  IndexNode.prototype.toJSON = function () {
    return {
      mathjs: 'IndexNode',
      dimensions: this.dimensions,
      dotNotation: this.dotNotation
    };
  };
  /**
   * Instantiate an IndexNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
   *                       where mathjs is optional
   * @returns {IndexNode}
   */


  IndexNode.fromJSON = function (json) {
    return new IndexNode(json.dimensions, json.dotNotation);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype.toHTML = function (options) {
    // format the parameters like "[1, 0:5]"
    var dimensions = [];

    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this.dimensions[i].toHTML();
    }

    if (this.dotNotation) {
      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + (0, _string.escape)(this.getObjectProperty()) + '</span>';
    } else {
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toTex = function (options) {
    var dimensions = this.dimensions.map(function (range) {
      return range.toTex(options);
    });
    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
  }; // helper function to create a Range from start, step and end


  function createRange(start, end, step) {
    return new Range((0, _is.isBigNumber)(start) ? start.toNumber() : start, (0, _is.isBigNumber)(end) ? end.toNumber() : end, (0, _is.isBigNumber)(step) ? step.toNumber() : step);
  }

  return IndexNode;
}, {
  isClass: true,
  isNode: true
});
exports.createIndexNode = createIndexNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/Node.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/Node.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNode = void 0;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _keywords = __webpack_require__(/*! ../keywords.js */ "./node_modules/mathjs/lib/cjs/expression/keywords.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _map = __webpack_require__(/*! ../../utils/map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

var name = 'Node';
var dependencies = ['mathWithTransform'];
var createNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var mathWithTransform = _ref.mathWithTransform;

  /**
   * Node
   */
  function Node() {
    if (!(this instanceof Node)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */


  Node.prototype.evaluate = function (scope) {
    return this.compile().evaluate(scope);
  };

  Node.prototype.type = 'Node';
  Node.prototype.isNode = true;
  Node.prototype.comment = '';
  /**
   * Compile the node into an optimized, evauatable JavaScript function
   * @return {{evaluate: function([Object])}} object
   *                Returns an object with a function 'evaluate',
   *                which can be invoked as expr.evaluate([scope: Object]),
   *                where scope is an optional object with
   *                variables.
   */

  Node.prototype.compile = function () {
    var expr = this._compile(mathWithTransform, {});

    var args = {};
    var context = null;

    function evaluate(scope) {
      var s = (0, _map.createMap)(scope);

      _validateScope(s);

      return expr(s, args, context);
    }

    return {
      evaluate: evaluate
    };
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  Node.prototype._compile = function (math, argNames) {
    throw new Error('Method _compile should be implemented by type ' + this.type);
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  Node.prototype.forEach = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run forEach on a Node interface');
  };
  /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  Node.prototype.map = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run map on a Node interface');
  };
  /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */


  Node.prototype._ifNode = function (node) {
    if (!(0, _is.isNode)(node)) {
      throw new TypeError('Callback function must return a Node');
    }

    return node;
  };
  /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */


  Node.prototype.traverse = function (callback) {
    // execute callback for itself
    // eslint-disable-next-line
    callback(this, null, null); // recursively traverse over all childs of a node

    function _traverse(node, callback) {
      node.forEach(function (child, path, parent) {
        callback(child, path, parent);

        _traverse(child, callback);
      });
    }

    _traverse(this, callback);
  };
  /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     const res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
   *         return new ConstantNode(2)
   *       }
   *       else {
   *         return node
   *       }
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */


  Node.prototype.transform = function (callback) {
    function _transform(child, path, parent) {
      var replacement = callback(child, path, parent);

      if (replacement !== child) {
        // stop iterating when the node is replaced
        return replacement;
      }

      return child.map(_transform);
    }

    return _transform(this, null, null);
  };
  /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     const results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name === 'x')
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */


  Node.prototype.filter = function (callback) {
    var nodes = [];
    this.traverse(function (node, path, parent) {
      if (callback(node, path, parent)) {
        nodes.push(node);
      }
    });
    return nodes;
  };
  /**
   * Create a shallow clone of this node
   * @return {Node}
   */


  Node.prototype.clone = function () {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot clone a Node interface');
  };
  /**
   * Create a deep clone of this node
   * @return {Node}
   */


  Node.prototype.cloneDeep = function () {
    return this.map(function (node) {
      return node.cloneDeep();
    });
  };
  /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */


  Node.prototype.equals = function (other) {
    return other ? (0, _object.deepStrictEqual)(this, other) : false;
  };
  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toString = function (options) {
    var customString = this._getCustomString(options);

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toString(options);
  };
  /**
   * Get a JSON representation of the node
   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
   * implementations of Node
   * @returns {Object}
   */


  Node.prototype.toJSON = function () {
    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
  };
  /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toHTML = function (options) {
    var customString = this._getCustomString(options);

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this.toHTML(options);
  };
  /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */


  Node.prototype._toString = function () {
    // must be implemented by each of the Node implementations
    throw new Error('_toString not implemented for ' + this.type);
  };
  /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toTex = function (options) {
    var customString = this._getCustomString(options);

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toTex(options);
  };
  /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */


  Node.prototype._toTex = function (options) {
    // must be implemented by each of the Node implementations
    throw new Error('_toTex not implemented for ' + this.type);
  };
  /**
   * Helper used by `to...` functions.
   */


  Node.prototype._getCustomString = function (options) {
    if (options && (0, _typeof2["default"])(options) === 'object') {
      switch ((0, _typeof2["default"])(options.handler)) {
        case 'object':
        case 'undefined':
          return;

        case 'function':
          return options.handler(this, options);

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */


  Node.prototype.getIdentifier = function () {
    return this.type;
  };
  /**
   * Get the content of the current Node.
   * @return {Node} node
   **/


  Node.prototype.getContent = function () {
    return this;
  };
  /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */


  function _validateScope(scope) {
    for (var _i = 0, _arr = (0, _toConsumableArray2["default"])(_keywords.keywords); _i < _arr.length; _i++) {
      var symbol = _arr[_i];

      if (scope.has(symbol)) {
        throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
      }
    }
  }

  return Node;
}, {
  isClass: true,
  isNode: true
});
exports.createNode = createNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/ObjectNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/ObjectNode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createObjectNode = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ObjectNode';
var dependencies = ['Node'];
var createObjectNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   object with key/value pairs
   */
  function ObjectNode(properties) {
    if (!(this instanceof ObjectNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.properties = properties || {}; // validate input

    if (properties) {
      if (!((0, _typeof2["default"])(properties) === 'object') || !Object.keys(properties).every(function (key) {
        return (0, _is.isNode)(properties[key]);
      })) {
        throw new TypeError('Object containing Nodes expected');
      }
    }
  }

  ObjectNode.prototype = new Node();
  ObjectNode.prototype.type = 'ObjectNode';
  ObjectNode.prototype.isObjectNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ObjectNode.prototype._compile = function (math, argNames) {
    var evalEntries = {};

    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        // we stringify/parse the key here to resolve unicode characters,
        // so you cannot create a key like {"co\\u006Estructor": null}
        var stringifiedKey = (0, _string.stringify)(key);
        var parsedKey = JSON.parse(stringifiedKey);

        if (!(0, _customs.isSafeProperty)(this.properties, parsedKey)) {
          throw new Error('No access to property "' + parsedKey + '"');
        }

        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
      }
    }

    return function evalObjectNode(scope, args, context) {
      var obj = {};

      for (var _key in evalEntries) {
        if ((0, _object.hasOwnProperty)(evalEntries, _key)) {
          obj[_key] = evalEntries[_key](scope, args, context);
        }
      }

      return obj;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ObjectNode.prototype.forEach = function (callback) {
    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this);
      }
    }
  };
  /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */


  ObjectNode.prototype.map = function (callback) {
    var properties = {};

    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this));
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */


  ObjectNode.prototype.clone = function () {
    var properties = {};

    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        properties[key] = this.properties[key];
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype._toString = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        entries.push((0, _string.stringify)(key) + ': ' + this.properties[key].toString(options));
      }
    }

    return '{' + entries.join(', ') + '}';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ObjectNode.prototype.toJSON = function () {
    return {
      mathjs: 'ObjectNode',
      properties: this.properties
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
   *                       where mathjs is optional
   * @returns {ObjectNode}
   */


  ObjectNode.fromJSON = function (json) {
    return new ObjectNode(json.properties);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype.toHTML = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        entries.push('<span class="math-symbol math-property">' + (0, _string.escape)(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
      }
    }

    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ObjectNode.prototype._toTex = function (options) {
    var entries = [];

    for (var key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
      }
    }

    return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
  };

  return ObjectNode;
}, {
  isClass: true,
  isNode: true
});
exports.createObjectNode = createObjectNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/OperatorNode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/OperatorNode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createOperatorNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _operators = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/cjs/expression/operators.js");

var _latex = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/cjs/utils/latex.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'OperatorNode';
var dependencies = ['Node'];
var createOperatorNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   * @param {boolean} [isPercentage] Is this an percentage Operation?
   */
  function OperatorNode(op, fn, args, implicit, isPercentage) {
    if (!(this instanceof OperatorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof op !== 'string') {
      throw new TypeError('string expected for parameter "op"');
    }

    if (typeof fn !== 'string') {
      throw new TypeError('string expected for parameter "fn"');
    }

    if (!Array.isArray(args) || !args.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.implicit = implicit === true;
    this.isPercentage = isPercentage === true;
    this.op = op;
    this.fn = fn;
    this.args = args || [];
  }

  OperatorNode.prototype = new Node();
  OperatorNode.prototype.type = 'OperatorNode';
  OperatorNode.prototype.isOperatorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  OperatorNode.prototype._compile = function (math, argNames) {
    // validate fn
    if (typeof this.fn !== 'string' || !(0, _customs.isSafeMethod)(math, this.fn)) {
      if (!math[this.fn]) {
        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
      } else {
        throw new Error('No access to function "' + this.fn + '"');
      }
    }

    var fn = (0, _customs.getSafeProperty)(math, this.fn);
    var evalArgs = (0, _array.map)(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if (evalArgs.length === 1) {
      var evalArg0 = evalArgs[0];
      return function evalOperatorNode(scope, args, context) {
        return fn(evalArg0(scope, args, context));
      };
    } else if (evalArgs.length === 2) {
      var _evalArg = evalArgs[0];
      var evalArg1 = evalArgs[1];
      return function evalOperatorNode(scope, args, context) {
        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
      };
    } else {
      return function evalOperatorNode(scope, args, context) {
        return fn.apply(null, (0, _array.map)(evalArgs, function (evalArg) {
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  OperatorNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  OperatorNode.prototype.map = function (callback) {
    var args = [];

    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */


  OperatorNode.prototype.clone = function () {
    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);
  };
  /**
   * Check whether this is an unary OperatorNode:
   * has exactly one argument, like `-a`.
   * @return {boolean} Returns true when an unary operator node, false otherwise.
   */


  OperatorNode.prototype.isUnary = function () {
    return this.args.length === 1;
  };
  /**
   * Check whether this is a binary OperatorNode:
   * has exactly two arguments, like `a + b`.
   * @return {boolean} Returns true when a binary operator node, false otherwise.
   */


  OperatorNode.prototype.isBinary = function () {
    return this.args.length === 2;
  };
  /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */


  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
    // precedence of the root OperatorNode
    var precedence = (0, _operators.getPrecedence)(root, parenthesis);
    var associativity = (0, _operators.getAssociativity)(root, parenthesis);

    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
      return args.map(function (arg) {
        switch (arg.getContent().type) {
          // Nodes that don't need extra parentheses
          case 'ArrayNode':
          case 'ConstantNode':
          case 'SymbolNode':
          case 'ParenthesisNode':
            return false;

          default:
            return true;
        }
      });
    }

    var result;

    switch (args.length) {
      case 0:
        result = [];
        break;

      case 1:
        // unary operators
        {
          // precedence of the operand
          var operandPrecedence = (0, _operators.getPrecedence)(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

          if (latex && operandPrecedence !== null) {
            var operandIdentifier;
            var rootIdentifier;

            if (parenthesis === 'keep') {
              operandIdentifier = args[0].getIdentifier();
              rootIdentifier = root.getIdentifier();
            } else {
              // Ignore Parenthesis Nodes when not in 'keep' mode
              operandIdentifier = args[0].getContent().getIdentifier();
              rootIdentifier = root.getContent().getIdentifier();
            }

            if (_operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
              result = [false];
              break;
            }

            if (_operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
              result = [false];
              break;
            }
          }

          if (operandPrecedence === null) {
            // if the operand has no defined precedence, no parens are needed
            result = [false];
            break;
          }

          if (operandPrecedence <= precedence) {
            // if the operands precedence is lower, parens are needed
            result = [true];
            break;
          } // otherwise, no parens needed


          result = [false];
        }
        break;

      case 2:
        // binary operators
        {
          var lhsParens; // left hand side needs parenthesis?
          // precedence of the left hand side

          var lhsPrecedence = (0, _operators.getPrecedence)(args[0], parenthesis); // is the root node associative with the left hand side

          var assocWithLhs = (0, _operators.isAssociativeWith)(root, args[0], parenthesis);

          if (lhsPrecedence === null) {
            // if the left hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            lhsParens = false;
          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
            // In case of equal precedence, if the root node is left associative
            // parens are **never** necessary for the left hand side.
            // If it is right associative however, parens are necessary
            // if the root node isn't associative with the left hand side
            lhsParens = true;
          } else if (lhsPrecedence < precedence) {
            lhsParens = true;
          } else {
            lhsParens = false;
          }

          var rhsParens; // right hand side needs parenthesis?
          // precedence of the right hand side

          var rhsPrecedence = (0, _operators.getPrecedence)(args[1], parenthesis); // is the root node associative with the right hand side?

          var assocWithRhs = (0, _operators.isAssociativeWith)(root, args[1], parenthesis);

          if (rhsPrecedence === null) {
            // if the right hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            rhsParens = false;
          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
            // In case of equal precedence, if the root node is right associative
            // parens are **never** necessary for the right hand side.
            // If it is left associative however, parens are necessary
            // if the root node isn't associative with the right hand side
            rhsParens = true;
          } else if (rhsPrecedence < precedence) {
            rhsParens = true;
          } else {
            rhsParens = false;
          } // handle special cases for LaTeX, where some of the parentheses aren't needed


          if (latex) {
            var _rootIdentifier;

            var lhsIdentifier;
            var rhsIdentifier;

            if (parenthesis === 'keep') {
              _rootIdentifier = root.getIdentifier();
              lhsIdentifier = root.args[0].getIdentifier();
              rhsIdentifier = root.args[1].getIdentifier();
            } else {
              // Ignore ParenthesisNodes when not in 'keep' mode
              _rootIdentifier = root.getContent().getIdentifier();
              lhsIdentifier = root.args[0].getContent().getIdentifier();
              rhsIdentifier = root.args[1].getContent().getIdentifier();
            }

            if (lhsPrecedence !== null) {
              if (_operators.properties[precedence][_rootIdentifier].latexLeftParens === false) {
                lhsParens = false;
              }

              if (_operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                lhsParens = false;
              }
            }

            if (rhsPrecedence !== null) {
              if (_operators.properties[precedence][_rootIdentifier].latexRightParens === false) {
                rhsParens = false;
              }

              if (_operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                rhsParens = false;
              }
            }
          }

          result = [lhsParens, rhsParens];
        }
        break;

      default:
        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
          result = args.map(function (arg) {
            var argPrecedence = (0, _operators.getPrecedence)(arg, parenthesis);
            var assocWithArg = (0, _operators.isAssociativeWith)(root, arg, parenthesis);
            var argAssociativity = (0, _operators.getAssociativity)(arg, parenthesis);

            if (argPrecedence === null) {
              // if the argument has no defined precedence, no parens are needed
              return false;
            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }

            return false;
          });
        }

        break;
    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
    // printed.


    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
      result = args.map(function (arg, index) {
        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

        if (result[index] || isParenthesisNode) {
          // put in parenthesis?
          return true;
        }

        return false;
      });
    }

    return result;
  }
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      var assoc = (0, _operators.getAssociativity)(this, parenthesis);
      var operand = args[0].toString(options);

      if (parens[0]) {
        operand = '(' + operand + ')';
      } // for example for "not", we want a space between operand and argument


      var opIsNamed = /[a-zA-Z]+/.test(this.op);

      if (assoc === 'right') {
        // prefix operator
        return this.op + (opIsNamed ? ' ' : '') + operand;
      } else if (assoc === 'left') {
        // postfix
        return operand + (opIsNamed ? ' ' : '') + this.op;
      } // fall back to postfix


      return operand + this.op;
    } else if (args.length === 2) {
      var lhs = args[0].toString(options); // left hand side

      var rhs = args[1].toString(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '(' + lhs + ')';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '(' + rhs + ')';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + ' ' + rhs;
      }

      return lhs + ' ' + this.op + ' ' + rhs;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toString(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '(' + arg + ')';
        }

        return arg;
      });

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return stringifiedArgs.join(' ');
      }

      return stringifiedArgs.join(' ' + this.op + ' ');
    } else {
      // fallback to formatting as a function call
      return this.fn + '(' + this.args.join(', ') + ')';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  OperatorNode.prototype.toJSON = function () {
    return {
      mathjs: 'OperatorNode',
      op: this.op,
      fn: this.fn,
      args: this.args,
      implicit: this.implicit,
      isPercentage: this.isPercentage
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false, "isPercentage":false}`,
   *                       where mathjs is optional
   * @returns {OperatorNode}
   */


  OperatorNode.fromJSON = function (json) {
    return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);
  };
  /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      var assoc = (0, _operators.getAssociativity)(this, parenthesis);
      var operand = args[0].toHTML(options);

      if (parens[0]) {
        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (assoc === 'right') {
        // prefix operator
        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + (0, _string.escape)(this.op) + '</span>' + operand;
      } else {
        // postfix when assoc === 'left' or undefined
        return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + (0, _string.escape)(this.op) + '</span>';
      }
    } else if (args.length === 2) {
      // binary operatoes
      var lhs = args[0].toHTML(options); // left hand side

      var rhs = args[1].toHTML(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
      }

      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0, _string.escape)(this.op) + '</span>' + rhs;
    } else {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toHTML(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return arg;
      });

      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
        }

        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0, _string.escape)(this.op) + '</span>');
      } else {
        // fallback to formatting as a function call
        return '<span class="math-function">' + (0, _string.escape)(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
    var op = _latex.latexOperators[this.fn];
    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

    if (args.length === 1) {
      // unary operators
      var assoc = (0, _operators.getAssociativity)(this, parenthesis);
      var operand = args[0].toTex(options);

      if (parens[0]) {
        operand = "\\left(".concat(operand, "\\right)");
      }

      if (assoc === 'right') {
        // prefix operator
        return op + operand;
      } else if (assoc === 'left') {
        // postfix operator
        return operand + op;
      } // fall back to postfix


      return operand + op;
    } else if (args.length === 2) {
      // binary operators
      var lhs = args[0]; // left hand side

      var lhsTex = lhs.toTex(options);

      if (parens[0]) {
        lhsTex = "\\left(".concat(lhsTex, "\\right)");
      }

      var rhs = args[1]; // right hand side

      var rhsTex = rhs.toTex(options);

      if (parens[1]) {
        rhsTex = "\\left(".concat(rhsTex, "\\right)");
      } // handle some exceptions (due to the way LaTeX works)


      var lhsIdentifier;

      if (parenthesis === 'keep') {
        lhsIdentifier = lhs.getIdentifier();
      } else {
        // Ignore ParenthesisNodes if in 'keep' mode
        lhsIdentifier = lhs.getContent().getIdentifier();
      }

      switch (this.getIdentifier()) {
        case 'OperatorNode:divide':
          // op contains '\\frac' at this point
          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

        case 'OperatorNode:pow':
          lhsTex = '{' + lhsTex + '}';
          rhsTex = '{' + rhsTex + '}';

          switch (lhsIdentifier) {
            case 'ConditionalNode': //

            case 'OperatorNode:divide':
              lhsTex = "\\left(".concat(lhsTex, "\\right)");
          }

          break;

        case 'OperatorNode:multiply':
          if (this.implicit && implicit === 'hide') {
            return lhsTex + '~' + rhsTex;
          }

      }

      return lhsTex + op + rhsTex;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var texifiedArgs = args.map(function (arg, index) {
        arg = arg.toTex(options);

        if (parens[index]) {
          arg = "\\left(".concat(arg, "\\right)");
        }

        return arg;
      });

      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
        return texifiedArgs.join('~');
      }

      return texifiedArgs.join(op);
    } else {
      // fall back to formatting as a function call
      // as this is a fallback, it doesn't use
      // fancy function names
      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
        return arg.toTex(options);
      }).join(',') + '\\right)';
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */


  OperatorNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.fn;
  };

  return OperatorNode;
}, {
  isClass: true,
  isNode: true
});
exports.createOperatorNode = createOperatorNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/ParenthesisNode.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/ParenthesisNode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createParenthesisNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ParenthesisNode';
var dependencies = ['Node'];
var createParenthesisNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
  function ParenthesisNode(content) {
    if (!(this instanceof ParenthesisNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (!(0, _is.isNode)(content)) {
      throw new TypeError('Node expected for parameter "content"');
    }

    this.content = content;
  }

  ParenthesisNode.prototype = new Node();
  ParenthesisNode.prototype.type = 'ParenthesisNode';
  ParenthesisNode.prototype.isParenthesisNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ParenthesisNode.prototype._compile = function (math, argNames) {
    return this.content._compile(math, argNames);
  };
  /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/


  ParenthesisNode.prototype.getContent = function () {
    return this.content.getContent();
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ParenthesisNode.prototype.forEach = function (callback) {
    callback(this.content, 'content', this);
  };
  /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */


  ParenthesisNode.prototype.map = function (callback) {
    var content = callback(this.content, 'content', this);
    return new ParenthesisNode(content);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */


  ParenthesisNode.prototype.clone = function () {
    return new ParenthesisNode(this.content);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toString = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '(' + this.content.toString(options) + ')';
    }

    return this.content.toString(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ParenthesisNode.prototype.toJSON = function () {
    return {
      mathjs: 'ParenthesisNode',
      content: this.content
    };
  };
  /**
   * Instantiate an ParenthesisNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
   *                       where mathjs is optional
   * @returns {ParenthesisNode}
   */


  ParenthesisNode.fromJSON = function (json) {
    return new ParenthesisNode(json.content);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype.toHTML = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return this.content.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toTex = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return "\\left(".concat(this.content.toTex(options), "\\right)");
    }

    return this.content.toTex(options);
  };

  return ParenthesisNode;
}, {
  isClass: true,
  isNode: true
});
exports.createParenthesisNode = createParenthesisNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/RangeNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/RangeNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRangeNode = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _operators = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/cjs/expression/operators.js");

var name = 'RangeNode';
var dependencies = ['Node'];
var createRangeNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
  function RangeNode(start, end, step) {
    if (!(this instanceof RangeNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate inputs


    if (!(0, _is.isNode)(start)) throw new TypeError('Node expected');
    if (!(0, _is.isNode)(end)) throw new TypeError('Node expected');
    if (step && !(0, _is.isNode)(step)) throw new TypeError('Node expected');
    if (arguments.length > 3) throw new Error('Too many arguments');
    this.start = start; // included lower-bound

    this.end = end; // included upper-bound

    this.step = step || null; // optional step
  }

  RangeNode.prototype = new Node();
  RangeNode.prototype.type = 'RangeNode';
  RangeNode.prototype.isRangeNode = true;
  /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */

  RangeNode.prototype.needsEnd = function () {
    // find all `end` symbols in this RangeNode
    var endSymbols = this.filter(function (node) {
      return (0, _is.isSymbolNode)(node) && node.name === 'end';
    });
    return endSymbols.length > 0;
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  RangeNode.prototype._compile = function (math, argNames) {
    var range = math.range;

    var evalStart = this.start._compile(math, argNames);

    var evalEnd = this.end._compile(math, argNames);

    if (this.step) {
      var evalStep = this.step._compile(math, argNames);

      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
      };
    } else {
      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RangeNode.prototype.forEach = function (callback) {
    callback(this.start, 'start', this);
    callback(this.end, 'end', this);

    if (this.step) {
      callback(this.step, 'step', this);
    }
  };
  /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */


  RangeNode.prototype.map = function (callback) {
    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */


  RangeNode.prototype.clone = function () {
    return new RangeNode(this.start, this.end, this.step && this.step);
  };
  /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */


  function calculateNecessaryParentheses(node, parenthesis) {
    var precedence = (0, _operators.getPrecedence)(node, parenthesis);
    var parens = {};
    var startPrecedence = (0, _operators.getPrecedence)(node.start, parenthesis);
    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

    if (node.step) {
      var stepPrecedence = (0, _operators.getPrecedence)(node.step, parenthesis);
      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
    }

    var endPrecedence = (0, _operators.getPrecedence)(node.end, parenthesis);
    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
    return parens;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toString(options);

    if (parens.start) {
      start = '(' + start + ')';
    }

    str = start;

    if (this.step) {
      var step = this.step.toString(options);

      if (parens.step) {
        step = '(' + step + ')';
      }

      str += ':' + step;
    }

    var end = this.end.toString(options);

    if (parens.end) {
      end = '(' + end + ')';
    }

    str += ':' + end;
    return str;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RangeNode.prototype.toJSON = function () {
    return {
      mathjs: 'RangeNode',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate an RangeNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
   *                       where mathjs is optional
   * @returns {RangeNode}
   */


  RangeNode.fromJSON = function (json) {
    return new RangeNode(json.start, json.end, json.step);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toHTML(options);

    if (parens.start) {
      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str = start;

    if (this.step) {
      var step = this.step.toHTML(options);

      if (parens.step) {
        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      str += '<span class="math-operator math-range-operator">:</span>' + step;
    }

    var end = this.end.toHTML(options);

    if (parens.end) {
      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str += '<span class="math-operator math-range-operator">:</span>' + end;
    return str;
  };
  /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);
    var str = this.start.toTex(options);

    if (parens.start) {
      str = "\\left(".concat(str, "\\right)");
    }

    if (this.step) {
      var step = this.step.toTex(options);

      if (parens.step) {
        step = "\\left(".concat(step, "\\right)");
      }

      str += ':' + step;
    }

    var end = this.end.toTex(options);

    if (parens.end) {
      end = "\\left(".concat(end, "\\right)");
    }

    str += ':' + end;
    return str;
  };

  return RangeNode;
}, {
  isClass: true,
  isNode: true
});
exports.createRangeNode = createRangeNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/RelationalNode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/RelationalNode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRelationalNode = void 0;

var _operators = __webpack_require__(/*! ../operators.js */ "./node_modules/mathjs/lib/cjs/expression/operators.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _latex = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/cjs/utils/latex.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'RelationalNode';
var dependencies = ['Node'];
var createRelationalNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Node = _ref.Node;

  /**
   * A node representing a chained conditional expression, such as 'x > y > z'
   *
   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
   * @param {Node[]} params   The parameters that will be compared
   *
   * @constructor RelationalNode
   * @extends {Node}
   */
  function RelationalNode(conditionals, params) {
    if (!(this instanceof RelationalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
    this.conditionals = conditionals;
    this.params = params;
  }

  RelationalNode.prototype = new Node();
  RelationalNode.prototype.type = 'RelationalNode';
  RelationalNode.prototype.isRelationalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  RelationalNode.prototype._compile = function (math, argNames) {
    var self = this;
    var compiled = this.params.map(function (p) {
      return p._compile(math, argNames);
    });
    return function evalRelationalNode(scope, args, context) {
      var evalLhs;
      var evalRhs = compiled[0](scope, args, context);

      for (var i = 0; i < self.conditionals.length; i++) {
        evalLhs = evalRhs;
        evalRhs = compiled[i + 1](scope, args, context);
        var condFn = (0, _customs.getSafeProperty)(math, self.conditionals[i]);

        if (!condFn(evalLhs, evalRhs)) {
          return false;
        }
      }

      return true;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RelationalNode.prototype.forEach = function (callback) {
    var _this = this;

    this.params.forEach(function (n, i) {
      return callback(n, 'params[' + i + ']', _this);
    }, this);
  };
  /**
   * Create a new RelationalNode having its childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RelationalNode} Returns a transformed copy of the node
   */


  RelationalNode.prototype.map = function (callback) {
    var _this2 = this;

    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {
      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));
    }, this));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RelationalNode}
   */


  RelationalNode.prototype.clone = function () {
    return new RelationalNode(this.conditionals, this.params);
  };
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0, _operators.getPrecedence)(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RelationalNode.prototype.toJSON = function () {
    return {
      mathjs: 'RelationalNode',
      conditionals: this.conditionals,
      params: this.params
    };
  };
  /**
   * Instantiate a RelationalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {RelationalNode}
   */


  RelationalNode.fromJSON = function (json) {
    return new RelationalNode(json.conditionals, json.params);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0, _operators.getPrecedence)(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0, _string.escape)(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = (0, _operators.getPrecedence)(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
    });
    var ret = paramStrings[0];

    for (var i = 0; i < this.conditionals.length; i++) {
      ret += _latex.latexOperators[this.conditionals[i]] + paramStrings[i + 1];
    }

    return ret;
  };

  return RelationalNode;
}, {
  isClass: true,
  isNode: true
});
exports.createRelationalNode = createRelationalNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/SymbolNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/SymbolNode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSymbolNode = void 0;

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _latex = __webpack_require__(/*! ../../utils/latex.js */ "./node_modules/mathjs/lib/cjs/utils/latex.js");

var name = 'SymbolNode';
var dependencies = ['math', '?Unit', 'Node'];
var createSymbolNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var math = _ref.math,
      Unit = _ref.Unit,
      Node = _ref.Node;

  /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */
  function isValuelessUnit(name) {
    return Unit ? Unit.isValuelessUnit(name) : false;
  }
  /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */


  function SymbolNode(name) {
    if (!(this instanceof SymbolNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    this.name = name;
  }

  SymbolNode.prototype = new Node();
  SymbolNode.prototype.type = 'SymbolNode';
  SymbolNode.prototype.isSymbolNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  SymbolNode.prototype._compile = function (math, argNames) {
    var name = this.name;

    if (argNames[name] === true) {
      // this is a FunctionAssignment argument
      // (like an x when inside the expression of a function assignment `f(x) = ...`)
      return function (scope, args, context) {
        return args[name];
      };
    } else if (name in math) {
      return function (scope, args, context) {
        return scope.has(name) ? scope.get(name) : (0, _customs.getSafeProperty)(math, name);
      };
    } else {
      var isUnit = isValuelessUnit(name);
      return function (scope, args, context) {
        return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  SymbolNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
  };
  /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */


  SymbolNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */


  SymbolNode.onUndefinedSymbol = function (name) {
    throw new Error('Undefined symbol ' + name);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */


  SymbolNode.prototype.clone = function () {
    return new SymbolNode(this.name);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toString = function (options) {
    return this.name;
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype.toHTML = function (options) {
    var name = (0, _string.escape)(this.name);

    if (name === 'true' || name === 'false') {
      return '<span class="math-symbol math-boolean">' + name + '</span>';
    } else if (name === 'i') {
      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
    } else if (name === 'Infinity') {
      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
    } else if (name === 'NaN') {
      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
    } else if (name === 'null') {
      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
    } else if (name === 'undefined') {
      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
    }

    return '<span class="math-symbol">' + name + '</span>';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  SymbolNode.prototype.toJSON = function () {
    return {
      mathjs: 'SymbolNode',
      name: this.name
    };
  };
  /**
   * Instantiate a SymbolNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", name: "x"}`,
   *                       where mathjs is optional
   * @returns {SymbolNode}
   */


  SymbolNode.fromJSON = function (json) {
    return new SymbolNode(json.name);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toTex = function (options) {
    var isUnit = false;

    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
      isUnit = true;
    }

    var symbol = (0, _latex.toSymbol)(this.name, isUnit);

    if (symbol[0] === '\\') {
      // no space needed if the symbol starts with '\'
      return symbol;
    } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


    return ' ' + symbol;
  };

  return SymbolNode;
}, {
  isClass: true,
  isNode: true
});
exports.createSymbolNode = createSymbolNode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/utils/access.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/utils/access.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.accessFactory = accessFactory;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _errorTransform = __webpack_require__(/*! ../../transform/utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _customs = __webpack_require__(/*! ../../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

function accessFactory(_ref) {
  var subset = _ref.subset;

  /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
  return function access(object, index) {
    try {
      if (Array.isArray(object)) {
        return subset(object, index);
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index);
      } else if (typeof object === 'string') {
        // TODO: move getStringSubset into a separate util file, use that
        return subset(object, index);
      } else if ((0, _typeof2["default"])(object) === 'object') {
        if (!index.isObjectProperty()) {
          throw new TypeError('Cannot apply a numeric index as object property');
        }

        return (0, _customs.getSafeProperty)(object, index.getObjectProperty());
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw (0, _errorTransform.errorTransform)(err);
    }
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/node/utils/assign.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/node/utils/assign.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.assignFactory = assignFactory;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _errorTransform = __webpack_require__(/*! ../../transform/utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _customs = __webpack_require__(/*! ../../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

function assignFactory(_ref) {
  var subset = _ref.subset,
      matrix = _ref.matrix;

  /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
  // TODO: change assign to return the value instead of the object
  return function assign(object, index, value) {
    try {
      if (Array.isArray(object)) {
        // we use matrix.subset here instead of the function subset because we must not clone the contents
        return matrix(object).subset(index, value).valueOf();
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index, value);
      } else if (typeof object === 'string') {
        // TODO: move setStringSubset into a separate util file, use that
        return subset(object, index, value);
      } else if ((0, _typeof2["default"])(object) === 'object') {
        if (!index.isObjectProperty()) {
          throw TypeError('Cannot apply a numeric index as object property');
        }

        (0, _customs.setSafeProperty)(object, index.getObjectProperty(), value);
        return object;
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw (0, _errorTransform.errorTransform)(err);
    }
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/operators.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/operators.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getPrecedence = getPrecedence;
exports.getAssociativity = getAssociativity;
exports.isAssociativeWith = isAssociativeWith;
exports.properties = void 0;

var _object = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument
var properties = [{
  // assignment
  AssignmentNode: {},
  FunctionAssignmentNode: {}
}, {
  // conditional expression
  ConditionalNode: {
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional

  }
}, {
  // logical or
  'OperatorNode:or': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical xor
  'OperatorNode:xor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical and
  'OperatorNode:and': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise or
  'OperatorNode:bitOr': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise xor
  'OperatorNode:bitXor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise and
  'OperatorNode:bitAnd': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // relational operators
  'OperatorNode:equal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:unequal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smaller': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:larger': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smallerEq': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:largerEq': {
    associativity: 'left',
    associativeWith: []
  },
  RelationalNode: {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitshift operators
  'OperatorNode:leftShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightArithShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightLogShift': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unit conversion
  'OperatorNode:to': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // range
  RangeNode: {}
}, {
  // addition, subtraction
  'OperatorNode:add': {
    associativity: 'left',
    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
  },
  'OperatorNode:subtract': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  'OperatorNode:multiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
  },
  'OperatorNode:divide': {
    associativity: 'left',
    associativeWith: [],
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX

  },
  'OperatorNode:dotMultiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
  },
  'OperatorNode:dotDivide': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:mod': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unary prefix operators
  'OperatorNode:unaryPlus': {
    associativity: 'right'
  },
  'OperatorNode:unaryMinus': {
    associativity: 'right'
  },
  'OperatorNode:bitNot': {
    associativity: 'right'
  },
  'OperatorNode:not': {
    associativity: 'right'
  }
}, {
  // exponentiation
  'OperatorNode:pow': {
    associativity: 'right',
    associativeWith: [],
    latexRightParens: false // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)

  },
  'OperatorNode:dotPow': {
    associativity: 'right',
    associativeWith: []
  }
}, {
  // factorial
  'OperatorNode:factorial': {
    associativity: 'left'
  }
}, {
  // matrix transpose
  'OperatorNode:transpose': {
    associativity: 'left'
  }
}];
/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {number | null}
 */

exports.properties = properties;

function getPrecedence(_node, parenthesis) {
  var node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  var identifier = node.getIdentifier();

  for (var i = 0; i < properties.length; i++) {
    if (identifier in properties[i]) {
      return i;
    }
  }

  return null;
}
/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */


function getAssociativity(_node, parenthesis) {
  var node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  var identifier = node.getIdentifier();
  var index = getPrecedence(node, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  var property = properties[index][identifier];

  if ((0, _object.hasOwnProperty)(property, 'associativity')) {
    if (property.associativity === 'left') {
      return 'left';
    }

    if (property.associativity === 'right') {
      return 'right';
    } // associativity is invalid


    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
  } // associativity is undefined


  return null;
}
/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {boolean | null}
 */


function isAssociativeWith(nodeA, nodeB, parenthesis) {
  // ParenthesisNodes are only ignored when not in 'keep' mode
  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
  var identifierA = a.getIdentifier();
  var identifierB = b.getIdentifier();
  var index = getPrecedence(a, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  var property = properties[index][identifierA];

  if ((0, _object.hasOwnProperty)(property, 'associativeWith') && property.associativeWith instanceof Array) {
    for (var i = 0; i < property.associativeWith.length; i++) {
      if (property.associativeWith[i] === identifierB) {
        return true;
      }
    }

    return false;
  } // associativeWith is not defined


  return null;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/parse.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/parse.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createParse = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js"));

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _collection = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _object = __webpack_require__(/*! ../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var name = 'parse';
var dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
var createParse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      numeric = _ref.numeric,
      config = _ref.config,
      AccessorNode = _ref.AccessorNode,
      ArrayNode = _ref.ArrayNode,
      AssignmentNode = _ref.AssignmentNode,
      BlockNode = _ref.BlockNode,
      ConditionalNode = _ref.ConditionalNode,
      ConstantNode = _ref.ConstantNode,
      FunctionAssignmentNode = _ref.FunctionAssignmentNode,
      FunctionNode = _ref.FunctionNode,
      IndexNode = _ref.IndexNode,
      ObjectNode = _ref.ObjectNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode,
      RangeNode = _ref.RangeNode,
      RelationalNode = _ref.RelationalNode,
      SymbolNode = _ref.SymbolNode;

  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  var parse = typed(name, {
    string: function string(expression) {
      return parseStart(expression, {});
    },
    'Array | Matrix': function ArrayMatrix(expressions) {
      return parseMultiple(expressions, {});
    },
    'string, Object': function stringObject(expression, options) {
      var extraNodes = options.nodes !== undefined ? options.nodes : {};
      return parseStart(expression, extraNodes);
    },
    'Array | Matrix, Object': parseMultiple
  });

  function parseMultiple(expressions) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

    return (0, _collection.deepMap)(expressions, function (elem) {
      if (typeof elem !== 'string') throw new TypeError('String expected');
      return parseStart(elem, extraNodes);
    });
  } // token types enumeration


  var TOKENTYPE = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4
  }; // map with all delimiters

  var DELIMITERS = {
    ',': true,
    '(': true,
    ')': true,
    '[': true,
    ']': true,
    '{': true,
    '}': true,
    '"': true,
    '\'': true,
    ';': true,
    '+': true,
    '-': true,
    '*': true,
    '.*': true,
    '/': true,
    './': true,
    '%': true,
    '^': true,
    '.^': true,
    '~': true,
    '!': true,
    '&': true,
    '|': true,
    '^|': true,
    '=': true,
    ':': true,
    '?': true,
    '==': true,
    '!=': true,
    '<': true,
    '>': true,
    '<=': true,
    '>=': true,
    '<<': true,
    '>>': true,
    '>>>': true
  }; // map with all named delimiters

  var NAMED_DELIMITERS = {
    mod: true,
    to: true,
    "in": true,
    and: true,
    xor: true,
    or: true,
    not: true
  };
  var CONSTANTS = {
    "true": true,
    "false": false,
    "null": null,
    undefined: undefined
  };
  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

  function initialState() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: '',
      // current expression
      comment: '',
      // last parsed comment
      index: 0,
      // current index in expr
      token: '',
      // current token
      tokenType: TOKENTYPE.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

    };
  }
  /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {Object} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */


  function currentString(state, length) {
    return state.expression.substr(state.index, length);
  }
  /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {Object} state
   * @returns {string}
   * @private
   */


  function currentCharacter(state) {
    return currentString(state, 1);
  }
  /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */


  function next(state) {
    state.index++;
  }
  /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */


  function prevCharacter(state) {
    return state.expression.charAt(state.index - 1);
  }
  /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */


  function nextCharacter(state) {
    return state.expression.charAt(state.index + 1);
  }
  /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */


  function getToken(state) {
    state.tokenType = TOKENTYPE.NULL;
    state.token = '';
    state.comment = ''; // skip over whitespaces
    // space, tab, and newline when inside parameters

    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
      next(state);
    } // skip comment


    if (currentCharacter(state) === '#') {
      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
        state.comment += currentCharacter(state);
        next(state);
      }
    } // check for end of expression


    if (currentCharacter(state) === '') {
      // token is still empty
      state.tokenType = TOKENTYPE.DELIMITER;
      return;
    } // check for new line character


    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = currentCharacter(state);
      next(state);
      return;
    }

    var c1 = currentCharacter(state);
    var c2 = currentString(state, 2);
    var c3 = currentString(state, 3);

    if (c3.length === 3 && DELIMITERS[c3]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c3;
      next(state);
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 2 characters


    if (c2.length === 2 && DELIMITERS[c2]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c2;
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 1 character


    if (DELIMITERS[c1]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c1;
      next(state);
      return;
    } // check for a number


    if (parse.isDigitDot(c1)) {
      state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex

      var _c = currentString(state, 2);

      if (_c === '0b' || _c === '0o' || _c === '0x') {
        state.token += currentCharacter(state);
        next(state);
        state.token += currentCharacter(state);
        next(state);

        while (parse.isHexDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }

        if (currentCharacter(state) === '.') {
          // this number has a radix point
          state.token += '.';
          next(state); // get the digits after the radix

          while (parse.isHexDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }
        } else if (currentCharacter(state) === 'i') {
          // this number has a word size suffix
          state.token += 'i';
          next(state); // get the word size

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }
        }

        return;
      } // get number, can have a single dot


      if (currentCharacter(state) === '.') {
        state.token += currentCharacter(state);
        next(state);

        if (!parse.isDigit(currentCharacter(state))) {
          // this is no number, it is just a dot (can be dot notation)
          state.tokenType = TOKENTYPE.DELIMITER;
          return;
        }
      } else {
        while (parse.isDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }

        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
      }

      while (parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
          state.token += currentCharacter(state);
          next(state);

          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
            state.token += currentCharacter(state);
            next(state);
          } // Scientific notation MUST be followed by an exponent


          if (!parse.isDigit(currentCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }

          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }
        } else if (nextCharacter(state) === '.') {
          next(state);
          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
        }
      }

      return;
    } // check for variables, functions, named operators


    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      }

      if ((0, _object.hasOwnProperty)(NAMED_DELIMITERS, state.token)) {
        state.tokenType = TOKENTYPE.DELIMITER;
      } else {
        state.tokenType = TOKENTYPE.SYMBOL;
      }

      return;
    } // something unknown is found, wrong characters -> a syntax error


    state.tokenType = TOKENTYPE.UNKNOWN;

    while (currentCharacter(state) !== '') {
      state.token += currentCharacter(state);
      next(state);
    }

    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
  }
  /**
   * Get next token and skip newline tokens
   */


  function getTokenSkipNewline(state) {
    do {
      getToken(state);
    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

  }
  /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */


  function openParams(state) {
    state.nestingLevel++;
  }
  /**
   * Close parameters.
   * New line characters will no longer be ignored
   */


  function closeParams(state) {
    state.nestingLevel--;
  }
  /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */


  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
  };
  /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */


  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
  };
  /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */


  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
    return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
  };
  /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */


  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
  };
  /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */


  parse.isDecimalMark = function isDecimalMark(c, cNext) {
    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
  };
  /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigitDot = function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  };
  /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigit = function isDigit(c) {
    return c >= '0' && c <= '9';
  };
  /**
   * checks if the given char c is a hex digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isHexDigit = function isHexDigit(c) {
    return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
  };
  /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */


  function parseStart(expression, extraNodes) {
    var state = initialState();
    (0, _extends2["default"])(state, {
      expression: expression,
      extraNodes: extraNodes
    });
    getToken(state);
    var node = parseBlock(state); // check for garbage at the end of the expression
    // an expression ends with a empty character '' and tokenType DELIMITER

    if (state.token !== '') {
      if (state.tokenType === TOKENTYPE.DELIMITER) {
        // user entered a not existing operator like "//"
        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
        throw createError(state, 'Unexpected operator ' + state.token);
      } else {
        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
      }
    }

    return node;
  }
  /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */


  function parseBlock(state) {
    var node;
    var blocks = [];
    var visible;

    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
      node = parseAssignment(state);
      node.comment = state.comment;
    } // TODO: simplify this loop


    while (state.token === '\n' || state.token === ';') {
      // eslint-disable-line no-unmodified-loop-condition
      if (blocks.length === 0 && node) {
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }

      getToken(state);

      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
        node = parseAssignment(state);
        node.comment = state.comment;
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }
    }

    if (blocks.length > 0) {
      return new BlockNode(blocks);
    } else {
      if (!node) {
        node = new ConstantNode(undefined);
        node.comment = state.comment;
      }

      return node;
    }
  }
  /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */


  function parseAssignment(state) {
    var name, args, value, valid;
    var node = parseConditional(state);

    if (state.token === '=') {
      if ((0, _is.isSymbolNode)(node)) {
        // parse a variable assignment like 'a = 2/3'
        name = node.name;
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(new SymbolNode(name), value);
      } else if ((0, _is.isAccessorNode)(node)) {
        // parse a matrix subset assignment like 'A[1,2] = 4'
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(node.object, node.index, value);
      } else if ((0, _is.isFunctionNode)(node) && (0, _is.isSymbolNode)(node.fn)) {
        // parse function assignment like 'f(x) = x^2'
        valid = true;
        args = [];
        name = node.name;
        node.args.forEach(function (arg, index) {
          if ((0, _is.isSymbolNode)(arg)) {
            args[index] = arg.name;
          } else {
            valid = false;
          }
        });

        if (valid) {
          getTokenSkipNewline(state);
          value = parseAssignment(state);
          return new FunctionAssignmentNode(name, args, value);
        }
      }

      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
    }

    return node;
  }
  /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */


  function parseConditional(state) {
    var node = parseLogicalOr(state);

    while (state.token === '?') {
      // eslint-disable-line no-unmodified-loop-condition
      // set a conditional level, the range operator will be ignored as long
      // as conditionalLevel === state.nestingLevel.
      var prev = state.conditionalLevel;
      state.conditionalLevel = state.nestingLevel;
      getTokenSkipNewline(state);
      var condition = node;
      var trueExpr = parseAssignment(state);
      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
      state.conditionalLevel = null;
      getTokenSkipNewline(state);
      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

      state.conditionalLevel = prev;
    }

    return node;
  }
  /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */


  function parseLogicalOr(state) {
    var node = parseLogicalXor(state);

    while (state.token === 'or') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
    }

    return node;
  }
  /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */


  function parseLogicalXor(state) {
    var node = parseLogicalAnd(state);

    while (state.token === 'xor') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
    }

    return node;
  }
  /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */


  function parseLogicalAnd(state) {
    var node = parseBitwiseOr(state);

    while (state.token === 'and') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
    }

    return node;
  }
  /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseOr(state) {
    var node = parseBitwiseXor(state);

    while (state.token === '|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
    }

    return node;
  }
  /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseXor(state) {
    var node = parseBitwiseAnd(state);

    while (state.token === '^|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
    }

    return node;
  }
  /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseAnd(state) {
    var node = parseRelational(state);

    while (state.token === '&') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
    }

    return node;
  }
  /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */


  function parseRelational(state) {
    var params = [parseShift(state)];
    var conditionals = [];
    var operators = {
      '==': 'equal',
      '!=': 'unequal',
      '<': 'smaller',
      '>': 'larger',
      '<=': 'smallerEq',
      '>=': 'largerEq'
    };

    while ((0, _object.hasOwnProperty)(operators, state.token)) {
      // eslint-disable-line no-unmodified-loop-condition
      var cond = {
        name: state.token,
        fn: operators[state.token]
      };
      conditionals.push(cond);
      getTokenSkipNewline(state);
      params.push(parseShift(state));
    }

    if (params.length === 1) {
      return params[0];
    } else if (params.length === 2) {
      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
    } else {
      return new RelationalNode(conditionals.map(function (c) {
        return c.fn;
      }), params);
    }
  }
  /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */


  function parseShift(state) {
    var node, name, fn, params;
    node = parseConversion(state);
    var operators = {
      '<<': 'leftShift',
      '>>': 'rightArithShift',
      '>>>': 'rightLogShift'
    };

    while ((0, _object.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseConversion(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */


  function parseConversion(state) {
    var node, name, fn, params;
    node = parseRange(state);
    var operators = {
      to: 'to',
      "in": 'to' // alias of 'to'

    };

    while ((0, _object.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);

      if (name === 'in' && state.token === '') {
        // end of expression -> this is the unit 'in' ('inch')
        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
      } else {
        // operator 'a to b' or 'a in b'
        params = [node, parseRange(state)];
        node = new OperatorNode(name, fn, params);
      }
    }

    return node;
  }
  /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */


  function parseRange(state) {
    var node;
    var params = [];

    if (state.token === ':') {
      // implicit start=1 (one-based)
      node = new ConstantNode(1);
    } else {
      // explicit start
      node = parseAddSubtract(state);
    }

    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
      // we ignore the range operator when a conditional operator is being processed on the same level
      params.push(node); // parse step and end

      while (state.token === ':' && params.length < 3) {
        // eslint-disable-line no-unmodified-loop-condition
        getTokenSkipNewline(state);

        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
          // implicit end
          params.push(new SymbolNode('end'));
        } else {
          // explicit end
          params.push(parseAddSubtract(state));
        }
      }

      if (params.length === 3) {
        // params = [start, step, end]
        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
      } else {
        // length === 2
        // params = [start, end]
        node = new RangeNode(params[0], params[1]); // start, end
      }
    }

    return node;
  }
  /**
   * add or subtract
   * @return {Node} node
   * @private
   */


  function parseAddSubtract(state) {
    var node, name, fn, params;
    node = parseMultiplyDivide(state);
    var operators = {
      '+': 'add',
      '-': 'subtract'
    };

    while ((0, _object.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      var rightNode = parseMultiplyDivide(state);

      if (rightNode.isPercentage) {
        params = [node, new OperatorNode('*', 'multiply', [node, rightNode])];
      } else {
        params = [node, rightNode];
      }

      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */


  function parseMultiplyDivide(state) {
    var node, last, name, fn;
    node = parseImplicitMultiplication(state);
    last = node;
    var operators = {
      '*': 'multiply',
      '.*': 'dotMultiply',
      '/': 'divide',
      './': 'dotDivide'
    };

    while (true) {
      if ((0, _object.hasOwnProperty)(operators, state.token)) {
        // explicit operators
        name = state.token;
        fn = operators[name];
        getTokenSkipNewline(state);
        last = parseImplicitMultiplication(state);
        node = new OperatorNode(name, fn, [node, last]);
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */


  function parseImplicitMultiplication(state) {
    var node, last;
    node = parseRule2(state);
    last = node;

    while (true) {
      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && (0, _is.isConstantNode)(node) || state.tokenType === TOKENTYPE.NUMBER && !(0, _is.isConstantNode)(last) && (!(0, _is.isOperatorNode)(last) || last.op === '!') || state.token === '(') {
        // parse implicit multiplication
        //
        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
        // number:      implicit multiplication like '(2+3)2'
        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
        last = parseRule2(state);
        node = new OperatorNode('*', 'multiply', [node, last], true
        /* implicit */
        );
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern: [number] / [number] [symbol]
   * @return {Node} node
   * @private
   */


  function parseRule2(state) {
    var node = parsePercentage(state);
    var last = node;
    var tokenStates = [];

    while (true) {
      // Match the "number /" part of the pattern "number / number symbol"
      if (state.token === '/' && (0, _is.isConstantNode)(last)) {
        // Look ahead to see if the next token is a number
        tokenStates.push((0, _extends2["default"])({}, state));
        getTokenSkipNewline(state); // Match the "number / number" part of the pattern

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // Look ahead again
          tokenStates.push((0, _extends2["default"])({}, state));
          getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
            // We've matched the pattern "number / number symbol".
            // Rewind once and build the "number / number" node; the symbol will be consumed later
            (0, _extends2["default"])(state, tokenStates.pop());
            tokenStates.pop();
            last = parsePercentage(state);
            node = new OperatorNode('/', 'divide', [node, last]);
          } else {
            // Not a match, so rewind
            tokenStates.pop();
            (0, _extends2["default"])(state, tokenStates.pop());
            break;
          }
        } else {
          // Not a match, so rewind
          (0, _extends2["default"])(state, tokenStates.pop());
          break;
        }
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * percentage or mod
   * @return {Node} node
   * @private
   */


  function parsePercentage(state) {
    var node, name, fn, params;
    node = parseUnary(state);
    var operators = {
      '%': 'mod',
      mod: 'mod'
    };

    while ((0, _object.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);

      if (name === '%' && state.tokenType === TOKENTYPE.DELIMITER && state.token !== '(') {
        // If the expression contains only %, then treat that as /100
        node = new OperatorNode('/', 'divide', [node, new ConstantNode(100)], false, true);
      } else {
        params = [node, parseUnary(state)];
        node = new OperatorNode(name, fn, params);
      }
    }

    return node;
  }
  /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */


  function parseUnary(state) {
    var name, params, fn;
    var operators = {
      '-': 'unaryMinus',
      '+': 'unaryPlus',
      '~': 'bitNot',
      not: 'not'
    };

    if ((0, _object.hasOwnProperty)(operators, state.token)) {
      fn = operators[state.token];
      name = state.token;
      getTokenSkipNewline(state);
      params = [parseUnary(state)];
      return new OperatorNode(name, fn, params);
    }

    return parsePow(state);
  }
  /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */


  function parsePow(state) {
    var node, name, fn, params;
    node = parseLeftHandOperators(state);

    if (state.token === '^' || state.token === '.^') {
      name = state.token;
      fn = name === '^' ? 'pow' : 'dotPow';
      getTokenSkipNewline(state);
      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */


  function parseLeftHandOperators(state) {
    var node, name, fn, params;
    node = parseCustomNodes(state);
    var operators = {
      '!': 'factorial',
      '\'': 'ctranspose'
    };

    while ((0, _object.hasOwnProperty)(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getToken(state);
      params = [node];
      node = new OperatorNode(name, fn, params);
      node = parseAccessors(state, node);
    }

    return node;
  }
  /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */


  function parseCustomNodes(state) {
    var params = [];

    if (state.tokenType === TOKENTYPE.SYMBOL && (0, _object.hasOwnProperty)(state.extraNodes, state.token)) {
      var CustomNode = state.extraNodes[state.token];
      getToken(state); // parse parameters

      if (state.token === '(') {
        params = [];
        openParams(state);
        getToken(state);

        if (state.token !== ')') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ')') {
          throw createSyntaxError(state, 'Parenthesis ) expected');
        }

        closeParams(state);
        getToken(state);
      } // create a new custom node
      // noinspection JSValidateTypes


      return new CustomNode(params);
    }

    return parseSymbol(state);
  }
  /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */


  function parseSymbol(state) {
    var node, name;

    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
      name = state.token;
      getToken(state);

      if ((0, _object.hasOwnProperty)(CONSTANTS, name)) {
        // true, false, null, ...
        node = new ConstantNode(CONSTANTS[name]);
      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
        // NaN, Infinity
        node = new ConstantNode(numeric(name, 'number'));
      } else {
        node = new SymbolNode(name);
      } // parse function parameters and matrix index


      node = parseAccessors(state, node);
      return node;
    }

    return parseDoubleQuotesString(state);
  }
  /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Object} state
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */


  function parseAccessors(state, node, types) {
    var params;

    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
      // eslint-disable-line no-unmodified-loop-condition
      params = [];

      if (state.token === '(') {
        if ((0, _is.isSymbolNode)(node) || (0, _is.isAccessorNode)(node)) {
          // function invocation like fn(2, 3) or obj.fn(2, 3)
          openParams(state);
          getToken(state);

          if (state.token !== ')') {
            params.push(parseAssignment(state)); // parse a list with parameters

            while (state.token === ',') {
              // eslint-disable-line no-unmodified-loop-condition
              getToken(state);
              params.push(parseAssignment(state));
            }
          }

          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }

          closeParams(state);
          getToken(state);
          node = new FunctionNode(node, params);
        } else {
          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
          // don't parse it here but let it be handled by parseImplicitMultiplication
          // with correct precedence
          return node;
        }
      } else if (state.token === '[') {
        // index notation like variable[2, 3]
        openParams(state);
        getToken(state);

        if (state.token !== ']') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ']') {
          throw createSyntaxError(state, 'Parenthesis ] expected');
        }

        closeParams(state);
        getToken(state);
        node = new AccessorNode(node, new IndexNode(params));
      } else {
        // dot notation like variable.prop
        getToken(state);

        if (state.tokenType !== TOKENTYPE.SYMBOL) {
          throw createSyntaxError(state, 'Property name expected after dot');
        }

        params.push(new ConstantNode(state.token));
        getToken(state);
        var dotNotation = true;
        node = new AccessorNode(node, new IndexNode(params, dotNotation));
      }
    }

    return node;
  }
  /**
   * Parse a double quotes string.
   * @return {Node} node
   * @private
   */


  function parseDoubleQuotesString(state) {
    var node, str;

    if (state.token === '"') {
      str = parseDoubleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseSingleQuotesString(state);
  }
  /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */


  function parseDoubleQuotesStringToken(state) {
    var str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\"'
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '"') {
      throw createSyntaxError(state, 'End of string " expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * Parse a single quotes string.
   * @return {Node} node
   * @private
   */


  function parseSingleQuotesString(state) {
    var node, str;

    if (state.token === '\'') {
      str = parseSingleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseMatrix(state);
  }
  /**
   * Parse a string surrounded by single quotes '...'
   * @return {string}
   */


  function parseSingleQuotesStringToken(state) {
    var str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\''
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '\'') {
      throw createSyntaxError(state, 'End of string \' expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * parse the matrix
   * @return {Node} node
   * @private
   */


  function parseMatrix(state) {
    var array, params, rows, cols;

    if (state.token === '[') {
      // matrix [...]
      openParams(state);
      getToken(state);

      if (state.token !== ']') {
        // this is a non-empty matrix
        var row = parseRow(state);

        if (state.token === ';') {
          // 2 dimensional array
          rows = 1;
          params = [row]; // the rows of the matrix are separated by dot-comma's

          while (state.token === ';') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params[rows] = parseRow(state);
            rows++;
          }

          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state); // check if the number of columns matches in all rows

          cols = params[0].items.length;

          for (var r = 1; r < rows; r++) {
            if (params[r].items.length !== cols) {
              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
            }
          }

          array = new ArrayNode(params);
        } else {
          // 1 dimensional vector
          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state);
          array = row;
        }
      } else {
        // this is an empty matrix "[ ]"
        closeParams(state);
        getToken(state);
        array = new ArrayNode([]);
      }

      return parseAccessors(state, array);
    }

    return parseObject(state);
  }
  /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */


  function parseRow(state) {
    var params = [parseAssignment(state)];
    var len = 1;

    while (state.token === ',') {
      // eslint-disable-line no-unmodified-loop-condition
      getToken(state); // parse expression

      params[len] = parseAssignment(state);
      len++;
    }

    return new ArrayNode(params);
  }
  /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */


  function parseObject(state) {
    if (state.token === '{') {
      openParams(state);
      var key;
      var properties = {};

      do {
        getToken(state);

        if (state.token !== '}') {
          // parse key
          if (state.token === '"') {
            key = parseDoubleQuotesStringToken(state);
          } else if (state.token === '\'') {
            key = parseSingleQuotesStringToken(state);
          } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
            key = state.token;
            getToken(state);
          } else {
            throw createSyntaxError(state, 'Symbol or string expected as object key');
          } // parse key/value separator


          if (state.token !== ':') {
            throw createSyntaxError(state, 'Colon : expected after object key');
          }

          getToken(state); // parse key

          properties[key] = parseAssignment(state);
        }
      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


      if (state.token !== '}') {
        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
      }

      closeParams(state);
      getToken(state);
      var node = new ObjectNode(properties); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseNumber(state);
  }
  /**
   * parse a number
   * @return {Node} node
   * @private
   */


  function parseNumber(state) {
    var numberStr;

    if (state.tokenType === TOKENTYPE.NUMBER) {
      // this is a number
      numberStr = state.token;
      getToken(state);
      return new ConstantNode(numeric(numberStr, config.number));
    }

    return parseParentheses(state);
  }
  /**
   * parentheses
   * @return {Node} node
   * @private
   */


  function parseParentheses(state) {
    var node; // check if it is a parenthesized expression

    if (state.token === '(') {
      // parentheses (...)
      openParams(state);
      getToken(state);
      node = parseAssignment(state); // start again

      if (state.token !== ')') {
        throw createSyntaxError(state, 'Parenthesis ) expected');
      }

      closeParams(state);
      getToken(state);
      node = new ParenthesisNode(node);
      node = parseAccessors(state, node);
      return node;
    }

    return parseEnd(state);
  }
  /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */


  function parseEnd(state) {
    if (state.token === '') {
      // syntax error or unexpected end of expression
      throw createSyntaxError(state, 'Unexpected end of expression');
    } else {
      throw createSyntaxError(state, 'Value expected');
    }
  }
  /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */

  /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */

  /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */


  function col(state) {
    return state.index - state.token.length + 1;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */


  function createSyntaxError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error["char"] = c;
    return error;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */


  function createError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error["char"] = c;
    return error;
  }

  return parse;
});
exports.createParse = createParse;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/apply.transform.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/apply.transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createApplyTransform = void 0;

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _apply = __webpack_require__(/*! ../../function/matrix/apply.js */ "./node_modules/mathjs/lib/cjs/function/matrix/apply.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'apply';
var dependencies = ['typed', 'isInteger'];
/**
 * Attach a transform function to math.apply
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function apply
 * from one-based to zero based
 */

var createApplyTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      isInteger = _ref.isInteger;
  var apply = (0, _apply.createApply)({
    typed: typed,
    isInteger: isInteger
  }); // @see: comment of concat itself

  return typed('apply', {
    '...any': function any(args) {
      // change dim from one-based to zero-based
      var dim = args[1];

      if ((0, _is.isNumber)(dim)) {
        args[1] = dim - 1;
      } else if ((0, _is.isBigNumber)(dim)) {
        args[1] = dim.minus(1);
      }

      try {
        return apply.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createApplyTransform = createApplyTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/column.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/column.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createColumnTransform = void 0;

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _column = __webpack_require__(/*! ../../function/matrix/column.js */ "./node_modules/mathjs/lib/cjs/function/matrix/column.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'column';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createColumnTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;
  var column = (0, _column.createColumn)({
    typed: typed,
    Index: Index,
    matrix: matrix,
    range: range
  }); // @see: comment of column itself

  return typed('column', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if ((0, _is.isNumber)(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return column.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createColumnTransform = createColumnTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/concat.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/concat.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createConcatTransform = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _concat = __webpack_require__(/*! ../../function/matrix/concat.js */ "./node_modules/mathjs/lib/cjs/function/matrix/concat.js");

var name = 'concat';
var dependencies = ['typed', 'matrix', 'isInteger'];
var createConcatTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      isInteger = _ref.isInteger;
  var concat = (0, _concat.createConcat)({
    typed: typed,
    matrix: matrix,
    isInteger: isInteger
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */

  return typed('concat', {
    '...any': function any(args) {
      // change last argument from one-based to zero-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if ((0, _is.isNumber)(last)) {
        args[lastIndex] = last - 1;
      } else if ((0, _is.isBigNumber)(last)) {
        args[lastIndex] = last.minus(1);
      }

      try {
        return concat.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createConcatTransform = createConcatTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/diff.transform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/diff.transform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDiffTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _diff = __webpack_require__(/*! ../../function/matrix/diff.js */ "./node_modules/mathjs/lib/cjs/function/matrix/diff.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

var name = 'diff';
var dependencies = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];
var createDiffTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      subtract = _ref.subtract,
      number = _ref.number,
      bignumber = _ref.bignumber;
  var diff = (0, _diff.createDiff)({
    typed: typed,
    matrix: matrix,
    subtract: subtract,
    number: number,
    bignumber: bignumber
  });
  /**
   * Attach a transform function to math.diff
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed(name, {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return diff.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createDiffTransform = createDiffTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/filter.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/filter.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFilterTransform = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _compileInlineExpression = __webpack_require__(/*! ./utils/compileInlineExpression.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'filter';
var dependencies = ['typed'];
var createFilterTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */
  function filterTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);
      }
    }

    return filter(x, callback);
  }

  filterTransform.rawArgs = true; // one based version of function filter

  var filter = typed('filter', {
    'Array, function': _filter,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filter(x.toArray(), test));
    },
    'Array, RegExp': _array.filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create((0, _array.filterRegExp)(x.toArray(), test));
    }
  });
  return filterTransform;
}, {
  isTransformFunction: true
});
/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

exports.createFilterTransform = createFilterTransform;

function _filter(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0, _function.maxArgumentCount)(callback);
  return (0, _array.filter)(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index + 1]);
    } else {
      // 3 or -1
      return callback(value, [index + 1], array);
    }
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/forEach.transform.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/forEach.transform.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createForEachTransform = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _compileInlineExpression = __webpack_require__(/*! ./utils/compileInlineExpression.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js");

var name = 'forEach';
var dependencies = ['typed'];
var createForEachTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function forEachTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like forEach([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);
      }
    }

    return _forEach(x, callback);
  }

  forEachTransform.rawArgs = true; // one-based version of forEach

  var _forEach = typed('forEach', {
    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = (0, _function.maxArgumentCount)(callback);

      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          (0, _array.forEach)(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i + 1)); // one based index, hence i+1
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };

      recurse(array.valueOf(), []); // pass Array
    }
  });

  return forEachTransform;
}, {
  isTransformFunction: true
});
exports.createForEachTransform = createForEachTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/index.transform.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/index.transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIndexTransform = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'index';
var dependencies = ['Index'];
var createIndexTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Index = _ref.Index;

  /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  return function indexTransform() {
    var args = [];

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

      if ((0, _is.isRange)(arg)) {
        arg.start--;
        arg.end -= arg.step > 0 ? 0 : 2;
      } else if (arg && arg.isSet === true) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if ((0, _is.isNumber)(arg)) {
        arg--;
      } else if ((0, _is.isBigNumber)(arg)) {
        arg = arg.toNumber() - 1;
      } else if (typeof arg === 'string') {// leave as is
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }

      args[i] = arg;
    }

    var res = new Index();
    Index.apply(res, args);
    return res;
  };
}, {
  isTransformFunction: true
});
exports.createIndexTransform = createIndexTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/map.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/map.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMapTransform = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _compileInlineExpression = __webpack_require__(/*! ./utils/compileInlineExpression.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js");

var name = 'map';
var dependencies = ['typed'];
var createMapTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function mapTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);
      }
    }

    return map(x, callback);
  }

  mapTransform.rawArgs = true; // one-based version of map function

  var map = typed('map', {
    'Array, function': function ArrayFunction(x, callback) {
      return _map(x, callback, x);
    },
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.create(_map(x.valueOf(), callback, x));
    }
  });
  return mapTransform;
}, {
  isTransformFunction: true
});
/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */

exports.createMapTransform = createMapTransform;

function _map(array, callback, orig) {
  // figure out what number of arguments the callback function expects
  var argsCount = (0, _function.maxArgumentCount)(callback);

  function recurse(value, index) {
    if (Array.isArray(value)) {
      return (0, _array.map)(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
      });
    } else {
      // invoke the (typed) callback function with the right number of arguments
      if (argsCount === 1) {
        return callback(value);
      } else if (argsCount === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, orig);
      }
    }
  }

  return recurse(array, []);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/max.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/max.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMaxTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _max = __webpack_require__(/*! ../../function/statistics/max.js */ "./node_modules/mathjs/lib/cjs/function/statistics/max.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

var name = 'max';
var dependencies = ['typed', 'config', 'numeric', 'larger'];
var createMaxTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      numeric = _ref.numeric,
      larger = _ref.larger;
  var max = (0, _max.createMax)({
    typed: typed,
    config: config,
    numeric: numeric,
    larger: larger
  });
  /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */

  return typed('max', {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return max.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createMaxTransform = createMaxTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/mean.transform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/mean.transform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMeanTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _mean = __webpack_require__(/*! ../../function/statistics/mean.js */ "./node_modules/mathjs/lib/cjs/function/statistics/mean.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

var name = 'mean';
var dependencies = ['typed', 'add', 'divide'];
var createMeanTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide;
  var mean = (0, _mean.createMean)({
    typed: typed,
    add: add,
    divide: divide
  });
  /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */

  return typed('mean', {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return mean.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createMeanTransform = createMeanTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/min.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/min.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMinTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _min = __webpack_require__(/*! ../../function/statistics/min.js */ "./node_modules/mathjs/lib/cjs/function/statistics/min.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

var name = 'min';
var dependencies = ['typed', 'config', 'numeric', 'smaller'];
var createMinTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      numeric = _ref.numeric,
      smaller = _ref.smaller;
  var min = (0, _min.createMin)({
    typed: typed,
    config: config,
    numeric: numeric,
    smaller: smaller
  });
  /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */

  return typed('min', {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return min.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createMinTransform = createMinTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/range.transform.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/range.transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRangeTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _range = __webpack_require__(/*! ../../function/matrix/range.js */ "./node_modules/mathjs/lib/cjs/function/matrix/range.js");

var name = 'range';
var dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRangeTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      bignumber = _ref.bignumber,
      smaller = _ref.smaller,
      smallerEq = _ref.smallerEq,
      larger = _ref.larger,
      largerEq = _ref.largerEq;
  var range = (0, _range.createRange)({
    typed: typed,
    config: config,
    matrix: matrix,
    bignumber: bignumber,
    smaller: smaller,
    smallerEq: smallerEq,
    larger: larger,
    largerEq: largerEq
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('range', {
    '...any': function any(args) {
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if (typeof last !== 'boolean') {
        // append a parameter includeEnd=true
        args.push(true);
      }

      return range.apply(null, args);
    }
  });
}, {
  isTransformFunction: true
});
exports.createRangeTransform = createRangeTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/row.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/row.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRowTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _row = __webpack_require__(/*! ../../function/matrix/row.js */ "./node_modules/mathjs/lib/cjs/function/matrix/row.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'row';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createRowTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;
  var row = (0, _row.createRow)({
    typed: typed,
    Index: Index,
    matrix: matrix,
    range: range
  }); // @see: comment of row itself

  return typed('row', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];

      if ((0, _is.isNumber)(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return row.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createRowTransform = createRowTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/std.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/std.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createStdTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _std = __webpack_require__(/*! ../../function/statistics/std.js */ "./node_modules/mathjs/lib/cjs/function/statistics/std.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

var name = 'std';
var dependencies = ['typed', 'sqrt', 'variance'];
/**
 * Attach a transform function to math.std
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function std
 * from one-based to zero based
 */

var createStdTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      sqrt = _ref.sqrt,
      variance = _ref.variance;
  var std = (0, _std.createStd)({
    typed: typed,
    sqrt: sqrt,
    variance: variance
  });
  return typed('std', {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return std.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createStdTransform = createStdTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/subset.transform.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/subset.transform.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSubsetTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _subset = __webpack_require__(/*! ../../function/matrix/subset.js */ "./node_modules/mathjs/lib/cjs/function/matrix/subset.js");

var name = 'subset';
var dependencies = ['typed', 'matrix'];
var createSubsetTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;
  var subset = (0, _subset.createSubset)({
    typed: typed,
    matrix: matrix
  });
  /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('subset', {
    '...any': function any(args) {
      try {
        return subset.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createSubsetTransform = createSubsetTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/sum.transform.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/sum.transform.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSumTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _sum = __webpack_require__(/*! ../../function/statistics/sum.js */ "./node_modules/mathjs/lib/cjs/function/statistics/sum.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */
var name = 'sum';
var dependencies = ['typed', 'config', 'add', 'numeric'];
var createSumTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      add = _ref.add,
      numeric = _ref.numeric;
  var sum = (0, _sum.createSum)({
    typed: typed,
    config: config,
    add: add,
    numeric: numeric
  });
  return typed(name, {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return sum.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createSumTransform = createSumTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/utils/compileInlineExpression.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.compileInlineExpression = compileInlineExpression;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _scope = __webpack_require__(/*! ../../../utils/scope.js */ "./node_modules/mathjs/lib/cjs/utils/scope.js");

/**
 * Compile an inline expression like "x > 0"
 * @param {Node} expression
 * @param {Object} math
 * @param {Object} scope
 * @return {function} Returns a function with one argument which fills in the
 *                    undefined variable (like "x") and evaluates the expression
 */
function compileInlineExpression(expression, math, scope) {
  // find an undefined symbol
  var symbol = expression.filter(function (node) {
    return (0, _is.isSymbolNode)(node) && !(node.name in math) && !scope.has(node.name);
  })[0];

  if (!symbol) {
    throw new Error('No undefined variable found in inline expression "' + expression + '"');
  } // create a test function for this equation


  var name = symbol.name; // variable name

  var subScope = (0, _scope.createSubScope)(scope);
  var eq = expression.compile();
  return function inlineExpression(x) {
    subScope.set(name, x);
    return eq.evaluate(subScope);
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.errorTransform = errorTransform;

var _IndexError = __webpack_require__(/*! ../../../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error | IndexError} Returns the transformed error
 */
function errorTransform(err) {
  if (err && err.isIndexError) {
    return new _IndexError.IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
  }

  return err;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lastDimToZeroBase = lastDimToZeroBase;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

/**
 * Change last argument dim from one-based to zero-based.
 */
function lastDimToZeroBase(args) {
  if (args.length === 2 && (0, _is.isCollection)(args[0])) {
    args = args.slice();
    var dim = args[1];

    if ((0, _is.isNumber)(dim)) {
      args[1] = dim - 1;
    } else if ((0, _is.isBigNumber)(dim)) {
      args[1] = dim.minus(1);
    }
  }

  return args;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/expression/transform/variance.transform.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/expression/transform/variance.transform.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createVarianceTransform = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _errorTransform = __webpack_require__(/*! ./utils/errorTransform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/errorTransform.js");

var _variance = __webpack_require__(/*! ../../function/statistics/variance.js */ "./node_modules/mathjs/lib/cjs/function/statistics/variance.js");

var _lastDimToZeroBase = __webpack_require__(/*! ./utils/lastDimToZeroBase.js */ "./node_modules/mathjs/lib/cjs/expression/transform/utils/lastDimToZeroBase.js");

var name = 'variance';
var dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
/**
 * Attach a transform function to math.var
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function var
 * from one-based to zero based
 */

var createVarianceTransform = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      apply = _ref.apply,
      isNaN = _ref.isNaN;
  var variance = (0, _variance.createVariance)({
    typed: typed,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    apply: apply,
    isNaN: isNaN
  });
  return typed(name, {
    '...any': function any(args) {
      args = (0, _lastDimToZeroBase.lastDimToZeroBase)(args);

      try {
        return variance.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createVarianceTransform = createVarianceTransform;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/factoriesAny.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/factoriesAny.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "createTyped", ({
  enumerable: true,
  get: function get() {
    return _typed.createTyped;
  }
}));
Object.defineProperty(exports, "createResultSet", ({
  enumerable: true,
  get: function get() {
    return _ResultSet.createResultSet;
  }
}));
Object.defineProperty(exports, "createBigNumberClass", ({
  enumerable: true,
  get: function get() {
    return _BigNumber.createBigNumberClass;
  }
}));
Object.defineProperty(exports, "createComplexClass", ({
  enumerable: true,
  get: function get() {
    return _Complex.createComplexClass;
  }
}));
Object.defineProperty(exports, "createFractionClass", ({
  enumerable: true,
  get: function get() {
    return _Fraction.createFractionClass;
  }
}));
Object.defineProperty(exports, "createRangeClass", ({
  enumerable: true,
  get: function get() {
    return _Range.createRangeClass;
  }
}));
Object.defineProperty(exports, "createMatrixClass", ({
  enumerable: true,
  get: function get() {
    return _Matrix.createMatrixClass;
  }
}));
Object.defineProperty(exports, "createDenseMatrixClass", ({
  enumerable: true,
  get: function get() {
    return _DenseMatrix.createDenseMatrixClass;
  }
}));
Object.defineProperty(exports, "createClone", ({
  enumerable: true,
  get: function get() {
    return _clone.createClone;
  }
}));
Object.defineProperty(exports, "createIsInteger", ({
  enumerable: true,
  get: function get() {
    return _isInteger.createIsInteger;
  }
}));
Object.defineProperty(exports, "createIsNegative", ({
  enumerable: true,
  get: function get() {
    return _isNegative.createIsNegative;
  }
}));
Object.defineProperty(exports, "createIsNumeric", ({
  enumerable: true,
  get: function get() {
    return _isNumeric.createIsNumeric;
  }
}));
Object.defineProperty(exports, "createHasNumericValue", ({
  enumerable: true,
  get: function get() {
    return _hasNumericValue.createHasNumericValue;
  }
}));
Object.defineProperty(exports, "createIsPositive", ({
  enumerable: true,
  get: function get() {
    return _isPositive.createIsPositive;
  }
}));
Object.defineProperty(exports, "createIsZero", ({
  enumerable: true,
  get: function get() {
    return _isZero.createIsZero;
  }
}));
Object.defineProperty(exports, "createIsNaN", ({
  enumerable: true,
  get: function get() {
    return _isNaN.createIsNaN;
  }
}));
Object.defineProperty(exports, "createTypeOf", ({
  enumerable: true,
  get: function get() {
    return _typeOf.createTypeOf;
  }
}));
Object.defineProperty(exports, "createEqualScalar", ({
  enumerable: true,
  get: function get() {
    return _equalScalar.createEqualScalar;
  }
}));
Object.defineProperty(exports, "createSparseMatrixClass", ({
  enumerable: true,
  get: function get() {
    return _SparseMatrix.createSparseMatrixClass;
  }
}));
Object.defineProperty(exports, "createNumber", ({
  enumerable: true,
  get: function get() {
    return _number.createNumber;
  }
}));
Object.defineProperty(exports, "createString", ({
  enumerable: true,
  get: function get() {
    return _string.createString;
  }
}));
Object.defineProperty(exports, "createBoolean", ({
  enumerable: true,
  get: function get() {
    return _boolean.createBoolean;
  }
}));
Object.defineProperty(exports, "createBignumber", ({
  enumerable: true,
  get: function get() {
    return _bignumber.createBignumber;
  }
}));
Object.defineProperty(exports, "createComplex", ({
  enumerable: true,
  get: function get() {
    return _complex.createComplex;
  }
}));
Object.defineProperty(exports, "createFraction", ({
  enumerable: true,
  get: function get() {
    return _fraction.createFraction;
  }
}));
Object.defineProperty(exports, "createMatrix", ({
  enumerable: true,
  get: function get() {
    return _matrix.createMatrix;
  }
}));
Object.defineProperty(exports, "createMatrixFromFunction", ({
  enumerable: true,
  get: function get() {
    return _matrixFromFunction.createMatrixFromFunction;
  }
}));
Object.defineProperty(exports, "createMatrixFromRows", ({
  enumerable: true,
  get: function get() {
    return _matrixFromRows.createMatrixFromRows;
  }
}));
Object.defineProperty(exports, "createMatrixFromColumns", ({
  enumerable: true,
  get: function get() {
    return _matrixFromColumns.createMatrixFromColumns;
  }
}));
Object.defineProperty(exports, "createSplitUnit", ({
  enumerable: true,
  get: function get() {
    return _splitUnit.createSplitUnit;
  }
}));
Object.defineProperty(exports, "createUnaryMinus", ({
  enumerable: true,
  get: function get() {
    return _unaryMinus.createUnaryMinus;
  }
}));
Object.defineProperty(exports, "createUnaryPlus", ({
  enumerable: true,
  get: function get() {
    return _unaryPlus.createUnaryPlus;
  }
}));
Object.defineProperty(exports, "createAbs", ({
  enumerable: true,
  get: function get() {
    return _abs.createAbs;
  }
}));
Object.defineProperty(exports, "createApply", ({
  enumerable: true,
  get: function get() {
    return _apply.createApply;
  }
}));
Object.defineProperty(exports, "createAddScalar", ({
  enumerable: true,
  get: function get() {
    return _addScalar.createAddScalar;
  }
}));
Object.defineProperty(exports, "createCbrt", ({
  enumerable: true,
  get: function get() {
    return _cbrt.createCbrt;
  }
}));
Object.defineProperty(exports, "createCeil", ({
  enumerable: true,
  get: function get() {
    return _ceil.createCeil;
  }
}));
Object.defineProperty(exports, "createCube", ({
  enumerable: true,
  get: function get() {
    return _cube.createCube;
  }
}));
Object.defineProperty(exports, "createExp", ({
  enumerable: true,
  get: function get() {
    return _exp.createExp;
  }
}));
Object.defineProperty(exports, "createExpm1", ({
  enumerable: true,
  get: function get() {
    return _expm.createExpm1;
  }
}));
Object.defineProperty(exports, "createFix", ({
  enumerable: true,
  get: function get() {
    return _fix.createFix;
  }
}));
Object.defineProperty(exports, "createFloor", ({
  enumerable: true,
  get: function get() {
    return _floor.createFloor;
  }
}));
Object.defineProperty(exports, "createGcd", ({
  enumerable: true,
  get: function get() {
    return _gcd.createGcd;
  }
}));
Object.defineProperty(exports, "createLcm", ({
  enumerable: true,
  get: function get() {
    return _lcm.createLcm;
  }
}));
Object.defineProperty(exports, "createLog10", ({
  enumerable: true,
  get: function get() {
    return _log.createLog10;
  }
}));
Object.defineProperty(exports, "createLog2", ({
  enumerable: true,
  get: function get() {
    return _log2.createLog2;
  }
}));
Object.defineProperty(exports, "createMod", ({
  enumerable: true,
  get: function get() {
    return _mod.createMod;
  }
}));
Object.defineProperty(exports, "createMultiplyScalar", ({
  enumerable: true,
  get: function get() {
    return _multiplyScalar.createMultiplyScalar;
  }
}));
Object.defineProperty(exports, "createMultiply", ({
  enumerable: true,
  get: function get() {
    return _multiply.createMultiply;
  }
}));
Object.defineProperty(exports, "createNthRoot", ({
  enumerable: true,
  get: function get() {
    return _nthRoot.createNthRoot;
  }
}));
Object.defineProperty(exports, "createSign", ({
  enumerable: true,
  get: function get() {
    return _sign.createSign;
  }
}));
Object.defineProperty(exports, "createSqrt", ({
  enumerable: true,
  get: function get() {
    return _sqrt.createSqrt;
  }
}));
Object.defineProperty(exports, "createSquare", ({
  enumerable: true,
  get: function get() {
    return _square.createSquare;
  }
}));
Object.defineProperty(exports, "createSubtract", ({
  enumerable: true,
  get: function get() {
    return _subtract.createSubtract;
  }
}));
Object.defineProperty(exports, "createXgcd", ({
  enumerable: true,
  get: function get() {
    return _xgcd.createXgcd;
  }
}));
Object.defineProperty(exports, "createDotMultiply", ({
  enumerable: true,
  get: function get() {
    return _dotMultiply.createDotMultiply;
  }
}));
Object.defineProperty(exports, "createBitAnd", ({
  enumerable: true,
  get: function get() {
    return _bitAnd.createBitAnd;
  }
}));
Object.defineProperty(exports, "createBitNot", ({
  enumerable: true,
  get: function get() {
    return _bitNot.createBitNot;
  }
}));
Object.defineProperty(exports, "createBitOr", ({
  enumerable: true,
  get: function get() {
    return _bitOr.createBitOr;
  }
}));
Object.defineProperty(exports, "createBitXor", ({
  enumerable: true,
  get: function get() {
    return _bitXor.createBitXor;
  }
}));
Object.defineProperty(exports, "createArg", ({
  enumerable: true,
  get: function get() {
    return _arg.createArg;
  }
}));
Object.defineProperty(exports, "createConj", ({
  enumerable: true,
  get: function get() {
    return _conj.createConj;
  }
}));
Object.defineProperty(exports, "createIm", ({
  enumerable: true,
  get: function get() {
    return _im.createIm;
  }
}));
Object.defineProperty(exports, "createRe", ({
  enumerable: true,
  get: function get() {
    return _re.createRe;
  }
}));
Object.defineProperty(exports, "createNot", ({
  enumerable: true,
  get: function get() {
    return _not.createNot;
  }
}));
Object.defineProperty(exports, "createOr", ({
  enumerable: true,
  get: function get() {
    return _or.createOr;
  }
}));
Object.defineProperty(exports, "createXor", ({
  enumerable: true,
  get: function get() {
    return _xor.createXor;
  }
}));
Object.defineProperty(exports, "createConcat", ({
  enumerable: true,
  get: function get() {
    return _concat.createConcat;
  }
}));
Object.defineProperty(exports, "createColumn", ({
  enumerable: true,
  get: function get() {
    return _column.createColumn;
  }
}));
Object.defineProperty(exports, "createCount", ({
  enumerable: true,
  get: function get() {
    return _count.createCount;
  }
}));
Object.defineProperty(exports, "createCross", ({
  enumerable: true,
  get: function get() {
    return _cross.createCross;
  }
}));
Object.defineProperty(exports, "createDiag", ({
  enumerable: true,
  get: function get() {
    return _diag.createDiag;
  }
}));
Object.defineProperty(exports, "createFilter", ({
  enumerable: true,
  get: function get() {
    return _filter.createFilter;
  }
}));
Object.defineProperty(exports, "createFlatten", ({
  enumerable: true,
  get: function get() {
    return _flatten.createFlatten;
  }
}));
Object.defineProperty(exports, "createForEach", ({
  enumerable: true,
  get: function get() {
    return _forEach.createForEach;
  }
}));
Object.defineProperty(exports, "createGetMatrixDataType", ({
  enumerable: true,
  get: function get() {
    return _getMatrixDataType.createGetMatrixDataType;
  }
}));
Object.defineProperty(exports, "createIdentity", ({
  enumerable: true,
  get: function get() {
    return _identity.createIdentity;
  }
}));
Object.defineProperty(exports, "createKron", ({
  enumerable: true,
  get: function get() {
    return _kron.createKron;
  }
}));
Object.defineProperty(exports, "createMap", ({
  enumerable: true,
  get: function get() {
    return _map.createMap;
  }
}));
Object.defineProperty(exports, "createDiff", ({
  enumerable: true,
  get: function get() {
    return _diff.createDiff;
  }
}));
Object.defineProperty(exports, "createOnes", ({
  enumerable: true,
  get: function get() {
    return _ones.createOnes;
  }
}));
Object.defineProperty(exports, "createRange", ({
  enumerable: true,
  get: function get() {
    return _range.createRange;
  }
}));
Object.defineProperty(exports, "createReshape", ({
  enumerable: true,
  get: function get() {
    return _reshape.createReshape;
  }
}));
Object.defineProperty(exports, "createResize", ({
  enumerable: true,
  get: function get() {
    return _resize.createResize;
  }
}));
Object.defineProperty(exports, "createRotate", ({
  enumerable: true,
  get: function get() {
    return _rotate.createRotate;
  }
}));
Object.defineProperty(exports, "createRotationMatrix", ({
  enumerable: true,
  get: function get() {
    return _rotationMatrix.createRotationMatrix;
  }
}));
Object.defineProperty(exports, "createRow", ({
  enumerable: true,
  get: function get() {
    return _row.createRow;
  }
}));
Object.defineProperty(exports, "createSize", ({
  enumerable: true,
  get: function get() {
    return _size.createSize;
  }
}));
Object.defineProperty(exports, "createSqueeze", ({
  enumerable: true,
  get: function get() {
    return _squeeze.createSqueeze;
  }
}));
Object.defineProperty(exports, "createSubset", ({
  enumerable: true,
  get: function get() {
    return _subset.createSubset;
  }
}));
Object.defineProperty(exports, "createTranspose", ({
  enumerable: true,
  get: function get() {
    return _transpose.createTranspose;
  }
}));
Object.defineProperty(exports, "createCtranspose", ({
  enumerable: true,
  get: function get() {
    return _ctranspose.createCtranspose;
  }
}));
Object.defineProperty(exports, "createZeros", ({
  enumerable: true,
  get: function get() {
    return _zeros.createZeros;
  }
}));
Object.defineProperty(exports, "createErf", ({
  enumerable: true,
  get: function get() {
    return _erf.createErf;
  }
}));
Object.defineProperty(exports, "createMode", ({
  enumerable: true,
  get: function get() {
    return _mode.createMode;
  }
}));
Object.defineProperty(exports, "createProd", ({
  enumerable: true,
  get: function get() {
    return _prod.createProd;
  }
}));
Object.defineProperty(exports, "createFormat", ({
  enumerable: true,
  get: function get() {
    return _format.createFormat;
  }
}));
Object.defineProperty(exports, "createBin", ({
  enumerable: true,
  get: function get() {
    return _bin.createBin;
  }
}));
Object.defineProperty(exports, "createOct", ({
  enumerable: true,
  get: function get() {
    return _oct.createOct;
  }
}));
Object.defineProperty(exports, "createHex", ({
  enumerable: true,
  get: function get() {
    return _hex.createHex;
  }
}));
Object.defineProperty(exports, "createPrint", ({
  enumerable: true,
  get: function get() {
    return _print.createPrint;
  }
}));
Object.defineProperty(exports, "createTo", ({
  enumerable: true,
  get: function get() {
    return _to.createTo;
  }
}));
Object.defineProperty(exports, "createIsPrime", ({
  enumerable: true,
  get: function get() {
    return _isPrime.createIsPrime;
  }
}));
Object.defineProperty(exports, "createNumeric", ({
  enumerable: true,
  get: function get() {
    return _numeric.createNumeric;
  }
}));
Object.defineProperty(exports, "createDivideScalar", ({
  enumerable: true,
  get: function get() {
    return _divideScalar.createDivideScalar;
  }
}));
Object.defineProperty(exports, "createPow", ({
  enumerable: true,
  get: function get() {
    return _pow.createPow;
  }
}));
Object.defineProperty(exports, "createRound", ({
  enumerable: true,
  get: function get() {
    return _round.createRound;
  }
}));
Object.defineProperty(exports, "createLog", ({
  enumerable: true,
  get: function get() {
    return _log3.createLog;
  }
}));
Object.defineProperty(exports, "createLog1p", ({
  enumerable: true,
  get: function get() {
    return _log1p.createLog1p;
  }
}));
Object.defineProperty(exports, "createNthRoots", ({
  enumerable: true,
  get: function get() {
    return _nthRoots.createNthRoots;
  }
}));
Object.defineProperty(exports, "createDotPow", ({
  enumerable: true,
  get: function get() {
    return _dotPow.createDotPow;
  }
}));
Object.defineProperty(exports, "createDotDivide", ({
  enumerable: true,
  get: function get() {
    return _dotDivide.createDotDivide;
  }
}));
Object.defineProperty(exports, "createLsolve", ({
  enumerable: true,
  get: function get() {
    return _lsolve.createLsolve;
  }
}));
Object.defineProperty(exports, "createUsolve", ({
  enumerable: true,
  get: function get() {
    return _usolve.createUsolve;
  }
}));
Object.defineProperty(exports, "createLsolveAll", ({
  enumerable: true,
  get: function get() {
    return _lsolveAll.createLsolveAll;
  }
}));
Object.defineProperty(exports, "createUsolveAll", ({
  enumerable: true,
  get: function get() {
    return _usolveAll.createUsolveAll;
  }
}));
Object.defineProperty(exports, "createLeftShift", ({
  enumerable: true,
  get: function get() {
    return _leftShift.createLeftShift;
  }
}));
Object.defineProperty(exports, "createRightArithShift", ({
  enumerable: true,
  get: function get() {
    return _rightArithShift.createRightArithShift;
  }
}));
Object.defineProperty(exports, "createRightLogShift", ({
  enumerable: true,
  get: function get() {
    return _rightLogShift.createRightLogShift;
  }
}));
Object.defineProperty(exports, "createAnd", ({
  enumerable: true,
  get: function get() {
    return _and.createAnd;
  }
}));
Object.defineProperty(exports, "createCompare", ({
  enumerable: true,
  get: function get() {
    return _compare.createCompare;
  }
}));
Object.defineProperty(exports, "createCompareNatural", ({
  enumerable: true,
  get: function get() {
    return _compareNatural.createCompareNatural;
  }
}));
Object.defineProperty(exports, "createCompareText", ({
  enumerable: true,
  get: function get() {
    return _compareText.createCompareText;
  }
}));
Object.defineProperty(exports, "createEqual", ({
  enumerable: true,
  get: function get() {
    return _equal.createEqual;
  }
}));
Object.defineProperty(exports, "createEqualText", ({
  enumerable: true,
  get: function get() {
    return _equalText.createEqualText;
  }
}));
Object.defineProperty(exports, "createSmaller", ({
  enumerable: true,
  get: function get() {
    return _smaller.createSmaller;
  }
}));
Object.defineProperty(exports, "createSmallerEq", ({
  enumerable: true,
  get: function get() {
    return _smallerEq.createSmallerEq;
  }
}));
Object.defineProperty(exports, "createLarger", ({
  enumerable: true,
  get: function get() {
    return _larger.createLarger;
  }
}));
Object.defineProperty(exports, "createLargerEq", ({
  enumerable: true,
  get: function get() {
    return _largerEq.createLargerEq;
  }
}));
Object.defineProperty(exports, "createDeepEqual", ({
  enumerable: true,
  get: function get() {
    return _deepEqual.createDeepEqual;
  }
}));
Object.defineProperty(exports, "createUnequal", ({
  enumerable: true,
  get: function get() {
    return _unequal.createUnequal;
  }
}));
Object.defineProperty(exports, "createPartitionSelect", ({
  enumerable: true,
  get: function get() {
    return _partitionSelect.createPartitionSelect;
  }
}));
Object.defineProperty(exports, "createSort", ({
  enumerable: true,
  get: function get() {
    return _sort.createSort;
  }
}));
Object.defineProperty(exports, "createMax", ({
  enumerable: true,
  get: function get() {
    return _max.createMax;
  }
}));
Object.defineProperty(exports, "createMin", ({
  enumerable: true,
  get: function get() {
    return _min.createMin;
  }
}));
Object.defineProperty(exports, "createImmutableDenseMatrixClass", ({
  enumerable: true,
  get: function get() {
    return _ImmutableDenseMatrix.createImmutableDenseMatrixClass;
  }
}));
Object.defineProperty(exports, "createIndexClass", ({
  enumerable: true,
  get: function get() {
    return _MatrixIndex.createIndexClass;
  }
}));
Object.defineProperty(exports, "createFibonacciHeapClass", ({
  enumerable: true,
  get: function get() {
    return _FibonacciHeap.createFibonacciHeapClass;
  }
}));
Object.defineProperty(exports, "createSpaClass", ({
  enumerable: true,
  get: function get() {
    return _Spa.createSpaClass;
  }
}));
Object.defineProperty(exports, "createUnitClass", ({
  enumerable: true,
  get: function get() {
    return _Unit.createUnitClass;
  }
}));
Object.defineProperty(exports, "createUnitFunction", ({
  enumerable: true,
  get: function get() {
    return _unit.createUnitFunction;
  }
}));
Object.defineProperty(exports, "createSparse", ({
  enumerable: true,
  get: function get() {
    return _sparse.createSparse;
  }
}));
Object.defineProperty(exports, "createCreateUnit", ({
  enumerable: true,
  get: function get() {
    return _createUnit.createCreateUnit;
  }
}));
Object.defineProperty(exports, "createAcos", ({
  enumerable: true,
  get: function get() {
    return _acos.createAcos;
  }
}));
Object.defineProperty(exports, "createAcosh", ({
  enumerable: true,
  get: function get() {
    return _acosh.createAcosh;
  }
}));
Object.defineProperty(exports, "createAcot", ({
  enumerable: true,
  get: function get() {
    return _acot.createAcot;
  }
}));
Object.defineProperty(exports, "createAcoth", ({
  enumerable: true,
  get: function get() {
    return _acoth.createAcoth;
  }
}));
Object.defineProperty(exports, "createAcsc", ({
  enumerable: true,
  get: function get() {
    return _acsc.createAcsc;
  }
}));
Object.defineProperty(exports, "createAcsch", ({
  enumerable: true,
  get: function get() {
    return _acsch.createAcsch;
  }
}));
Object.defineProperty(exports, "createAsec", ({
  enumerable: true,
  get: function get() {
    return _asec.createAsec;
  }
}));
Object.defineProperty(exports, "createAsech", ({
  enumerable: true,
  get: function get() {
    return _asech.createAsech;
  }
}));
Object.defineProperty(exports, "createAsin", ({
  enumerable: true,
  get: function get() {
    return _asin.createAsin;
  }
}));
Object.defineProperty(exports, "createAsinh", ({
  enumerable: true,
  get: function get() {
    return _asinh.createAsinh;
  }
}));
Object.defineProperty(exports, "createAtan", ({
  enumerable: true,
  get: function get() {
    return _atan.createAtan;
  }
}));
Object.defineProperty(exports, "createAtan2", ({
  enumerable: true,
  get: function get() {
    return _atan2.createAtan2;
  }
}));
Object.defineProperty(exports, "createAtanh", ({
  enumerable: true,
  get: function get() {
    return _atanh.createAtanh;
  }
}));
Object.defineProperty(exports, "createCos", ({
  enumerable: true,
  get: function get() {
    return _cos.createCos;
  }
}));
Object.defineProperty(exports, "createCosh", ({
  enumerable: true,
  get: function get() {
    return _cosh.createCosh;
  }
}));
Object.defineProperty(exports, "createCot", ({
  enumerable: true,
  get: function get() {
    return _cot.createCot;
  }
}));
Object.defineProperty(exports, "createCoth", ({
  enumerable: true,
  get: function get() {
    return _coth.createCoth;
  }
}));
Object.defineProperty(exports, "createCsc", ({
  enumerable: true,
  get: function get() {
    return _csc.createCsc;
  }
}));
Object.defineProperty(exports, "createCsch", ({
  enumerable: true,
  get: function get() {
    return _csch.createCsch;
  }
}));
Object.defineProperty(exports, "createSec", ({
  enumerable: true,
  get: function get() {
    return _sec.createSec;
  }
}));
Object.defineProperty(exports, "createSech", ({
  enumerable: true,
  get: function get() {
    return _sech.createSech;
  }
}));
Object.defineProperty(exports, "createSin", ({
  enumerable: true,
  get: function get() {
    return _sin.createSin;
  }
}));
Object.defineProperty(exports, "createSinh", ({
  enumerable: true,
  get: function get() {
    return _sinh.createSinh;
  }
}));
Object.defineProperty(exports, "createTan", ({
  enumerable: true,
  get: function get() {
    return _tan.createTan;
  }
}));
Object.defineProperty(exports, "createTanh", ({
  enumerable: true,
  get: function get() {
    return _tanh.createTanh;
  }
}));
Object.defineProperty(exports, "createSetCartesian", ({
  enumerable: true,
  get: function get() {
    return _setCartesian.createSetCartesian;
  }
}));
Object.defineProperty(exports, "createSetDifference", ({
  enumerable: true,
  get: function get() {
    return _setDifference.createSetDifference;
  }
}));
Object.defineProperty(exports, "createSetDistinct", ({
  enumerable: true,
  get: function get() {
    return _setDistinct.createSetDistinct;
  }
}));
Object.defineProperty(exports, "createSetIntersect", ({
  enumerable: true,
  get: function get() {
    return _setIntersect.createSetIntersect;
  }
}));
Object.defineProperty(exports, "createSetIsSubset", ({
  enumerable: true,
  get: function get() {
    return _setIsSubset.createSetIsSubset;
  }
}));
Object.defineProperty(exports, "createSetMultiplicity", ({
  enumerable: true,
  get: function get() {
    return _setMultiplicity.createSetMultiplicity;
  }
}));
Object.defineProperty(exports, "createSetPowerset", ({
  enumerable: true,
  get: function get() {
    return _setPowerset.createSetPowerset;
  }
}));
Object.defineProperty(exports, "createSetSize", ({
  enumerable: true,
  get: function get() {
    return _setSize.createSetSize;
  }
}));
Object.defineProperty(exports, "createSetSymDifference", ({
  enumerable: true,
  get: function get() {
    return _setSymDifference.createSetSymDifference;
  }
}));
Object.defineProperty(exports, "createSetUnion", ({
  enumerable: true,
  get: function get() {
    return _setUnion.createSetUnion;
  }
}));
Object.defineProperty(exports, "createAdd", ({
  enumerable: true,
  get: function get() {
    return _add.createAdd;
  }
}));
Object.defineProperty(exports, "createHypot", ({
  enumerable: true,
  get: function get() {
    return _hypot.createHypot;
  }
}));
Object.defineProperty(exports, "createNorm", ({
  enumerable: true,
  get: function get() {
    return _norm.createNorm;
  }
}));
Object.defineProperty(exports, "createDot", ({
  enumerable: true,
  get: function get() {
    return _dot.createDot;
  }
}));
Object.defineProperty(exports, "createTrace", ({
  enumerable: true,
  get: function get() {
    return _trace.createTrace;
  }
}));
Object.defineProperty(exports, "createIndex", ({
  enumerable: true,
  get: function get() {
    return _index.createIndex;
  }
}));
Object.defineProperty(exports, "createNode", ({
  enumerable: true,
  get: function get() {
    return _Node.createNode;
  }
}));
Object.defineProperty(exports, "createAccessorNode", ({
  enumerable: true,
  get: function get() {
    return _AccessorNode.createAccessorNode;
  }
}));
Object.defineProperty(exports, "createArrayNode", ({
  enumerable: true,
  get: function get() {
    return _ArrayNode.createArrayNode;
  }
}));
Object.defineProperty(exports, "createAssignmentNode", ({
  enumerable: true,
  get: function get() {
    return _AssignmentNode.createAssignmentNode;
  }
}));
Object.defineProperty(exports, "createBlockNode", ({
  enumerable: true,
  get: function get() {
    return _BlockNode.createBlockNode;
  }
}));
Object.defineProperty(exports, "createConditionalNode", ({
  enumerable: true,
  get: function get() {
    return _ConditionalNode.createConditionalNode;
  }
}));
Object.defineProperty(exports, "createConstantNode", ({
  enumerable: true,
  get: function get() {
    return _ConstantNode.createConstantNode;
  }
}));
Object.defineProperty(exports, "createFunctionAssignmentNode", ({
  enumerable: true,
  get: function get() {
    return _FunctionAssignmentNode.createFunctionAssignmentNode;
  }
}));
Object.defineProperty(exports, "createIndexNode", ({
  enumerable: true,
  get: function get() {
    return _IndexNode.createIndexNode;
  }
}));
Object.defineProperty(exports, "createObjectNode", ({
  enumerable: true,
  get: function get() {
    return _ObjectNode.createObjectNode;
  }
}));
Object.defineProperty(exports, "createOperatorNode", ({
  enumerable: true,
  get: function get() {
    return _OperatorNode.createOperatorNode;
  }
}));
Object.defineProperty(exports, "createParenthesisNode", ({
  enumerable: true,
  get: function get() {
    return _ParenthesisNode.createParenthesisNode;
  }
}));
Object.defineProperty(exports, "createRangeNode", ({
  enumerable: true,
  get: function get() {
    return _RangeNode.createRangeNode;
  }
}));
Object.defineProperty(exports, "createRelationalNode", ({
  enumerable: true,
  get: function get() {
    return _RelationalNode.createRelationalNode;
  }
}));
Object.defineProperty(exports, "createSymbolNode", ({
  enumerable: true,
  get: function get() {
    return _SymbolNode.createSymbolNode;
  }
}));
Object.defineProperty(exports, "createFunctionNode", ({
  enumerable: true,
  get: function get() {
    return _FunctionNode.createFunctionNode;
  }
}));
Object.defineProperty(exports, "createParse", ({
  enumerable: true,
  get: function get() {
    return _parse.createParse;
  }
}));
Object.defineProperty(exports, "createCompile", ({
  enumerable: true,
  get: function get() {
    return _compile.createCompile;
  }
}));
Object.defineProperty(exports, "createEvaluate", ({
  enumerable: true,
  get: function get() {
    return _evaluate.createEvaluate;
  }
}));
Object.defineProperty(exports, "createParserClass", ({
  enumerable: true,
  get: function get() {
    return _Parser.createParserClass;
  }
}));
Object.defineProperty(exports, "createParser", ({
  enumerable: true,
  get: function get() {
    return _parser.createParser;
  }
}));
Object.defineProperty(exports, "createLup", ({
  enumerable: true,
  get: function get() {
    return _lup.createLup;
  }
}));
Object.defineProperty(exports, "createQr", ({
  enumerable: true,
  get: function get() {
    return _qr.createQr;
  }
}));
Object.defineProperty(exports, "createSlu", ({
  enumerable: true,
  get: function get() {
    return _slu.createSlu;
  }
}));
Object.defineProperty(exports, "createLusolve", ({
  enumerable: true,
  get: function get() {
    return _lusolve.createLusolve;
  }
}));
Object.defineProperty(exports, "createHelpClass", ({
  enumerable: true,
  get: function get() {
    return _Help.createHelpClass;
  }
}));
Object.defineProperty(exports, "createChainClass", ({
  enumerable: true,
  get: function get() {
    return _Chain.createChainClass;
  }
}));
Object.defineProperty(exports, "createHelp", ({
  enumerable: true,
  get: function get() {
    return _help.createHelp;
  }
}));
Object.defineProperty(exports, "createChain", ({
  enumerable: true,
  get: function get() {
    return _chain.createChain;
  }
}));
Object.defineProperty(exports, "createDet", ({
  enumerable: true,
  get: function get() {
    return _det.createDet;
  }
}));
Object.defineProperty(exports, "createInv", ({
  enumerable: true,
  get: function get() {
    return _inv.createInv;
  }
}));
Object.defineProperty(exports, "createEigs", ({
  enumerable: true,
  get: function get() {
    return _eigs.createEigs;
  }
}));
Object.defineProperty(exports, "createExpm", ({
  enumerable: true,
  get: function get() {
    return _expm2.createExpm;
  }
}));
Object.defineProperty(exports, "createSqrtm", ({
  enumerable: true,
  get: function get() {
    return _sqrtm.createSqrtm;
  }
}));
Object.defineProperty(exports, "createDivide", ({
  enumerable: true,
  get: function get() {
    return _divide.createDivide;
  }
}));
Object.defineProperty(exports, "createDistance", ({
  enumerable: true,
  get: function get() {
    return _distance.createDistance;
  }
}));
Object.defineProperty(exports, "createIntersect", ({
  enumerable: true,
  get: function get() {
    return _intersect.createIntersect;
  }
}));
Object.defineProperty(exports, "createSum", ({
  enumerable: true,
  get: function get() {
    return _sum.createSum;
  }
}));
Object.defineProperty(exports, "createMean", ({
  enumerable: true,
  get: function get() {
    return _mean.createMean;
  }
}));
Object.defineProperty(exports, "createMedian", ({
  enumerable: true,
  get: function get() {
    return _median.createMedian;
  }
}));
Object.defineProperty(exports, "createMad", ({
  enumerable: true,
  get: function get() {
    return _mad.createMad;
  }
}));
Object.defineProperty(exports, "createVariance", ({
  enumerable: true,
  get: function get() {
    return _variance.createVariance;
  }
}));
Object.defineProperty(exports, "createQuantileSeq", ({
  enumerable: true,
  get: function get() {
    return _quantileSeq.createQuantileSeq;
  }
}));
Object.defineProperty(exports, "createStd", ({
  enumerable: true,
  get: function get() {
    return _std.createStd;
  }
}));
Object.defineProperty(exports, "createCombinations", ({
  enumerable: true,
  get: function get() {
    return _combinations.createCombinations;
  }
}));
Object.defineProperty(exports, "createCombinationsWithRep", ({
  enumerable: true,
  get: function get() {
    return _combinationsWithRep.createCombinationsWithRep;
  }
}));
Object.defineProperty(exports, "createGamma", ({
  enumerable: true,
  get: function get() {
    return _gamma.createGamma;
  }
}));
Object.defineProperty(exports, "createFactorial", ({
  enumerable: true,
  get: function get() {
    return _factorial.createFactorial;
  }
}));
Object.defineProperty(exports, "createKldivergence", ({
  enumerable: true,
  get: function get() {
    return _kldivergence.createKldivergence;
  }
}));
Object.defineProperty(exports, "createMultinomial", ({
  enumerable: true,
  get: function get() {
    return _multinomial.createMultinomial;
  }
}));
Object.defineProperty(exports, "createPermutations", ({
  enumerable: true,
  get: function get() {
    return _permutations.createPermutations;
  }
}));
Object.defineProperty(exports, "createPickRandom", ({
  enumerable: true,
  get: function get() {
    return _pickRandom.createPickRandom;
  }
}));
Object.defineProperty(exports, "createRandom", ({
  enumerable: true,
  get: function get() {
    return _random.createRandom;
  }
}));
Object.defineProperty(exports, "createRandomInt", ({
  enumerable: true,
  get: function get() {
    return _randomInt.createRandomInt;
  }
}));
Object.defineProperty(exports, "createStirlingS2", ({
  enumerable: true,
  get: function get() {
    return _stirlingS.createStirlingS2;
  }
}));
Object.defineProperty(exports, "createBellNumbers", ({
  enumerable: true,
  get: function get() {
    return _bellNumbers.createBellNumbers;
  }
}));
Object.defineProperty(exports, "createCatalan", ({
  enumerable: true,
  get: function get() {
    return _catalan.createCatalan;
  }
}));
Object.defineProperty(exports, "createComposition", ({
  enumerable: true,
  get: function get() {
    return _composition.createComposition;
  }
}));
Object.defineProperty(exports, "createSimplify", ({
  enumerable: true,
  get: function get() {
    return _simplify.createSimplify;
  }
}));
Object.defineProperty(exports, "createDerivative", ({
  enumerable: true,
  get: function get() {
    return _derivative.createDerivative;
  }
}));
Object.defineProperty(exports, "createRationalize", ({
  enumerable: true,
  get: function get() {
    return _rationalize.createRationalize;
  }
}));
Object.defineProperty(exports, "createReviver", ({
  enumerable: true,
  get: function get() {
    return _reviver.createReviver;
  }
}));
Object.defineProperty(exports, "createReplacer", ({
  enumerable: true,
  get: function get() {
    return _replacer.createReplacer;
  }
}));
Object.defineProperty(exports, "createE", ({
  enumerable: true,
  get: function get() {
    return _constants.createE;
  }
}));
Object.defineProperty(exports, "createUppercaseE", ({
  enumerable: true,
  get: function get() {
    return _constants.createUppercaseE;
  }
}));
Object.defineProperty(exports, "createFalse", ({
  enumerable: true,
  get: function get() {
    return _constants.createFalse;
  }
}));
Object.defineProperty(exports, "createI", ({
  enumerable: true,
  get: function get() {
    return _constants.createI;
  }
}));
Object.defineProperty(exports, "createInfinity", ({
  enumerable: true,
  get: function get() {
    return _constants.createInfinity;
  }
}));
Object.defineProperty(exports, "createLN10", ({
  enumerable: true,
  get: function get() {
    return _constants.createLN10;
  }
}));
Object.defineProperty(exports, "createLN2", ({
  enumerable: true,
  get: function get() {
    return _constants.createLN2;
  }
}));
Object.defineProperty(exports, "createLOG10E", ({
  enumerable: true,
  get: function get() {
    return _constants.createLOG10E;
  }
}));
Object.defineProperty(exports, "createLOG2E", ({
  enumerable: true,
  get: function get() {
    return _constants.createLOG2E;
  }
}));
Object.defineProperty(exports, "createNaN", ({
  enumerable: true,
  get: function get() {
    return _constants.createNaN;
  }
}));
Object.defineProperty(exports, "createNull", ({
  enumerable: true,
  get: function get() {
    return _constants.createNull;
  }
}));
Object.defineProperty(exports, "createPhi", ({
  enumerable: true,
  get: function get() {
    return _constants.createPhi;
  }
}));
Object.defineProperty(exports, "createPi", ({
  enumerable: true,
  get: function get() {
    return _constants.createPi;
  }
}));
Object.defineProperty(exports, "createUppercasePi", ({
  enumerable: true,
  get: function get() {
    return _constants.createUppercasePi;
  }
}));
Object.defineProperty(exports, "createSQRT1_2", ({
  enumerable: true,
  get: function get() {
    return _constants.createSQRT1_2;
  }
}));
Object.defineProperty(exports, "createSQRT2", ({
  enumerable: true,
  get: function get() {
    return _constants.createSQRT2;
  }
}));
Object.defineProperty(exports, "createTau", ({
  enumerable: true,
  get: function get() {
    return _constants.createTau;
  }
}));
Object.defineProperty(exports, "createTrue", ({
  enumerable: true,
  get: function get() {
    return _constants.createTrue;
  }
}));
Object.defineProperty(exports, "createVersion", ({
  enumerable: true,
  get: function get() {
    return _constants.createVersion;
  }
}));
Object.defineProperty(exports, "createAtomicMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createAtomicMass;
  }
}));
Object.defineProperty(exports, "createAvogadro", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createAvogadro;
  }
}));
Object.defineProperty(exports, "createBohrMagneton", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createBohrMagneton;
  }
}));
Object.defineProperty(exports, "createBohrRadius", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createBohrRadius;
  }
}));
Object.defineProperty(exports, "createBoltzmann", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createBoltzmann;
  }
}));
Object.defineProperty(exports, "createClassicalElectronRadius", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createClassicalElectronRadius;
  }
}));
Object.defineProperty(exports, "createConductanceQuantum", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createConductanceQuantum;
  }
}));
Object.defineProperty(exports, "createCoulomb", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createCoulomb;
  }
}));
Object.defineProperty(exports, "createDeuteronMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createDeuteronMass;
  }
}));
Object.defineProperty(exports, "createEfimovFactor", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createEfimovFactor;
  }
}));
Object.defineProperty(exports, "createElectricConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createElectricConstant;
  }
}));
Object.defineProperty(exports, "createElectronMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createElectronMass;
  }
}));
Object.defineProperty(exports, "createElementaryCharge", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createElementaryCharge;
  }
}));
Object.defineProperty(exports, "createFaraday", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createFaraday;
  }
}));
Object.defineProperty(exports, "createFermiCoupling", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createFermiCoupling;
  }
}));
Object.defineProperty(exports, "createFineStructure", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createFineStructure;
  }
}));
Object.defineProperty(exports, "createFirstRadiation", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createFirstRadiation;
  }
}));
Object.defineProperty(exports, "createGasConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createGasConstant;
  }
}));
Object.defineProperty(exports, "createGravitationConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createGravitationConstant;
  }
}));
Object.defineProperty(exports, "createGravity", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createGravity;
  }
}));
Object.defineProperty(exports, "createHartreeEnergy", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createHartreeEnergy;
  }
}));
Object.defineProperty(exports, "createInverseConductanceQuantum", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createInverseConductanceQuantum;
  }
}));
Object.defineProperty(exports, "createKlitzing", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createKlitzing;
  }
}));
Object.defineProperty(exports, "createLoschmidt", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createLoschmidt;
  }
}));
Object.defineProperty(exports, "createMagneticConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createMagneticConstant;
  }
}));
Object.defineProperty(exports, "createMagneticFluxQuantum", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createMagneticFluxQuantum;
  }
}));
Object.defineProperty(exports, "createMolarMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createMolarMass;
  }
}));
Object.defineProperty(exports, "createMolarMassC12", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createMolarMassC12;
  }
}));
Object.defineProperty(exports, "createMolarPlanckConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createMolarPlanckConstant;
  }
}));
Object.defineProperty(exports, "createMolarVolume", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createMolarVolume;
  }
}));
Object.defineProperty(exports, "createNeutronMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createNeutronMass;
  }
}));
Object.defineProperty(exports, "createNuclearMagneton", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createNuclearMagneton;
  }
}));
Object.defineProperty(exports, "createPlanckCharge", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createPlanckCharge;
  }
}));
Object.defineProperty(exports, "createPlanckConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createPlanckConstant;
  }
}));
Object.defineProperty(exports, "createPlanckLength", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createPlanckLength;
  }
}));
Object.defineProperty(exports, "createPlanckMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createPlanckMass;
  }
}));
Object.defineProperty(exports, "createPlanckTemperature", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createPlanckTemperature;
  }
}));
Object.defineProperty(exports, "createPlanckTime", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createPlanckTime;
  }
}));
Object.defineProperty(exports, "createProtonMass", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createProtonMass;
  }
}));
Object.defineProperty(exports, "createQuantumOfCirculation", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createQuantumOfCirculation;
  }
}));
Object.defineProperty(exports, "createReducedPlanckConstant", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createReducedPlanckConstant;
  }
}));
Object.defineProperty(exports, "createRydberg", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createRydberg;
  }
}));
Object.defineProperty(exports, "createSackurTetrode", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createSackurTetrode;
  }
}));
Object.defineProperty(exports, "createSecondRadiation", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createSecondRadiation;
  }
}));
Object.defineProperty(exports, "createSpeedOfLight", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createSpeedOfLight;
  }
}));
Object.defineProperty(exports, "createStefanBoltzmann", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createStefanBoltzmann;
  }
}));
Object.defineProperty(exports, "createThomsonCrossSection", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createThomsonCrossSection;
  }
}));
Object.defineProperty(exports, "createVacuumImpedance", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createVacuumImpedance;
  }
}));
Object.defineProperty(exports, "createWeakMixingAngle", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createWeakMixingAngle;
  }
}));
Object.defineProperty(exports, "createWienDisplacement", ({
  enumerable: true,
  get: function get() {
    return _physicalConstants.createWienDisplacement;
  }
}));
Object.defineProperty(exports, "createApplyTransform", ({
  enumerable: true,
  get: function get() {
    return _applyTransform.createApplyTransform;
  }
}));
Object.defineProperty(exports, "createColumnTransform", ({
  enumerable: true,
  get: function get() {
    return _columnTransform.createColumnTransform;
  }
}));
Object.defineProperty(exports, "createFilterTransform", ({
  enumerable: true,
  get: function get() {
    return _filterTransform.createFilterTransform;
  }
}));
Object.defineProperty(exports, "createForEachTransform", ({
  enumerable: true,
  get: function get() {
    return _forEachTransform.createForEachTransform;
  }
}));
Object.defineProperty(exports, "createIndexTransform", ({
  enumerable: true,
  get: function get() {
    return _indexTransform.createIndexTransform;
  }
}));
Object.defineProperty(exports, "createMapTransform", ({
  enumerable: true,
  get: function get() {
    return _mapTransform.createMapTransform;
  }
}));
Object.defineProperty(exports, "createMaxTransform", ({
  enumerable: true,
  get: function get() {
    return _maxTransform.createMaxTransform;
  }
}));
Object.defineProperty(exports, "createMeanTransform", ({
  enumerable: true,
  get: function get() {
    return _meanTransform.createMeanTransform;
  }
}));
Object.defineProperty(exports, "createMinTransform", ({
  enumerable: true,
  get: function get() {
    return _minTransform.createMinTransform;
  }
}));
Object.defineProperty(exports, "createRangeTransform", ({
  enumerable: true,
  get: function get() {
    return _rangeTransform.createRangeTransform;
  }
}));
Object.defineProperty(exports, "createRowTransform", ({
  enumerable: true,
  get: function get() {
    return _rowTransform.createRowTransform;
  }
}));
Object.defineProperty(exports, "createSubsetTransform", ({
  enumerable: true,
  get: function get() {
    return _subsetTransform.createSubsetTransform;
  }
}));
Object.defineProperty(exports, "createConcatTransform", ({
  enumerable: true,
  get: function get() {
    return _concatTransform.createConcatTransform;
  }
}));
Object.defineProperty(exports, "createDiffTransform", ({
  enumerable: true,
  get: function get() {
    return _diffTransform.createDiffTransform;
  }
}));
Object.defineProperty(exports, "createStdTransform", ({
  enumerable: true,
  get: function get() {
    return _stdTransform.createStdTransform;
  }
}));
Object.defineProperty(exports, "createSumTransform", ({
  enumerable: true,
  get: function get() {
    return _sumTransform.createSumTransform;
  }
}));
Object.defineProperty(exports, "createVarianceTransform", ({
  enumerable: true,
  get: function get() {
    return _varianceTransform.createVarianceTransform;
  }
}));

var _typed = __webpack_require__(/*! ./core/function/typed.js */ "./node_modules/mathjs/lib/cjs/core/function/typed.js");

var _ResultSet = __webpack_require__(/*! ./type/resultset/ResultSet.js */ "./node_modules/mathjs/lib/cjs/type/resultset/ResultSet.js");

var _BigNumber = __webpack_require__(/*! ./type/bignumber/BigNumber.js */ "./node_modules/mathjs/lib/cjs/type/bignumber/BigNumber.js");

var _Complex = __webpack_require__(/*! ./type/complex/Complex.js */ "./node_modules/mathjs/lib/cjs/type/complex/Complex.js");

var _Fraction = __webpack_require__(/*! ./type/fraction/Fraction.js */ "./node_modules/mathjs/lib/cjs/type/fraction/Fraction.js");

var _Range = __webpack_require__(/*! ./type/matrix/Range.js */ "./node_modules/mathjs/lib/cjs/type/matrix/Range.js");

var _Matrix = __webpack_require__(/*! ./type/matrix/Matrix.js */ "./node_modules/mathjs/lib/cjs/type/matrix/Matrix.js");

var _DenseMatrix = __webpack_require__(/*! ./type/matrix/DenseMatrix.js */ "./node_modules/mathjs/lib/cjs/type/matrix/DenseMatrix.js");

var _clone = __webpack_require__(/*! ./function/utils/clone.js */ "./node_modules/mathjs/lib/cjs/function/utils/clone.js");

var _isInteger = __webpack_require__(/*! ./function/utils/isInteger.js */ "./node_modules/mathjs/lib/cjs/function/utils/isInteger.js");

var _isNegative = __webpack_require__(/*! ./function/utils/isNegative.js */ "./node_modules/mathjs/lib/cjs/function/utils/isNegative.js");

var _isNumeric = __webpack_require__(/*! ./function/utils/isNumeric.js */ "./node_modules/mathjs/lib/cjs/function/utils/isNumeric.js");

var _hasNumericValue = __webpack_require__(/*! ./function/utils/hasNumericValue.js */ "./node_modules/mathjs/lib/cjs/function/utils/hasNumericValue.js");

var _isPositive = __webpack_require__(/*! ./function/utils/isPositive.js */ "./node_modules/mathjs/lib/cjs/function/utils/isPositive.js");

var _isZero = __webpack_require__(/*! ./function/utils/isZero.js */ "./node_modules/mathjs/lib/cjs/function/utils/isZero.js");

var _isNaN = __webpack_require__(/*! ./function/utils/isNaN.js */ "./node_modules/mathjs/lib/cjs/function/utils/isNaN.js");

var _typeOf = __webpack_require__(/*! ./function/utils/typeOf.js */ "./node_modules/mathjs/lib/cjs/function/utils/typeOf.js");

var _equalScalar = __webpack_require__(/*! ./function/relational/equalScalar.js */ "./node_modules/mathjs/lib/cjs/function/relational/equalScalar.js");

var _SparseMatrix = __webpack_require__(/*! ./type/matrix/SparseMatrix.js */ "./node_modules/mathjs/lib/cjs/type/matrix/SparseMatrix.js");

var _number = __webpack_require__(/*! ./type/number.js */ "./node_modules/mathjs/lib/cjs/type/number.js");

var _string = __webpack_require__(/*! ./type/string.js */ "./node_modules/mathjs/lib/cjs/type/string.js");

var _boolean = __webpack_require__(/*! ./type/boolean.js */ "./node_modules/mathjs/lib/cjs/type/boolean.js");

var _bignumber = __webpack_require__(/*! ./type/bignumber/function/bignumber.js */ "./node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js");

var _complex = __webpack_require__(/*! ./type/complex/function/complex.js */ "./node_modules/mathjs/lib/cjs/type/complex/function/complex.js");

var _fraction = __webpack_require__(/*! ./type/fraction/function/fraction.js */ "./node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js");

var _matrix = __webpack_require__(/*! ./type/matrix/function/matrix.js */ "./node_modules/mathjs/lib/cjs/type/matrix/function/matrix.js");

var _matrixFromFunction = __webpack_require__(/*! ./function/matrix/matrixFromFunction.js */ "./node_modules/mathjs/lib/cjs/function/matrix/matrixFromFunction.js");

var _matrixFromRows = __webpack_require__(/*! ./function/matrix/matrixFromRows.js */ "./node_modules/mathjs/lib/cjs/function/matrix/matrixFromRows.js");

var _matrixFromColumns = __webpack_require__(/*! ./function/matrix/matrixFromColumns.js */ "./node_modules/mathjs/lib/cjs/function/matrix/matrixFromColumns.js");

var _splitUnit = __webpack_require__(/*! ./type/unit/function/splitUnit.js */ "./node_modules/mathjs/lib/cjs/type/unit/function/splitUnit.js");

var _unaryMinus = __webpack_require__(/*! ./function/arithmetic/unaryMinus.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/unaryMinus.js");

var _unaryPlus = __webpack_require__(/*! ./function/arithmetic/unaryPlus.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js");

var _abs = __webpack_require__(/*! ./function/arithmetic/abs.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/abs.js");

var _apply = __webpack_require__(/*! ./function/matrix/apply.js */ "./node_modules/mathjs/lib/cjs/function/matrix/apply.js");

var _addScalar = __webpack_require__(/*! ./function/arithmetic/addScalar.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js");

var _cbrt = __webpack_require__(/*! ./function/arithmetic/cbrt.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/cbrt.js");

var _ceil = __webpack_require__(/*! ./function/arithmetic/ceil.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/ceil.js");

var _cube = __webpack_require__(/*! ./function/arithmetic/cube.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/cube.js");

var _exp = __webpack_require__(/*! ./function/arithmetic/exp.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/exp.js");

var _expm = __webpack_require__(/*! ./function/arithmetic/expm1.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/expm1.js");

var _fix = __webpack_require__(/*! ./function/arithmetic/fix.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/fix.js");

var _floor = __webpack_require__(/*! ./function/arithmetic/floor.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/floor.js");

var _gcd = __webpack_require__(/*! ./function/arithmetic/gcd.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/gcd.js");

var _lcm = __webpack_require__(/*! ./function/arithmetic/lcm.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/lcm.js");

var _log = __webpack_require__(/*! ./function/arithmetic/log10.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/log10.js");

var _log2 = __webpack_require__(/*! ./function/arithmetic/log2.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/log2.js");

var _mod = __webpack_require__(/*! ./function/arithmetic/mod.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/mod.js");

var _multiplyScalar = __webpack_require__(/*! ./function/arithmetic/multiplyScalar.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js");

var _multiply = __webpack_require__(/*! ./function/arithmetic/multiply.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/multiply.js");

var _nthRoot = __webpack_require__(/*! ./function/arithmetic/nthRoot.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/nthRoot.js");

var _sign = __webpack_require__(/*! ./function/arithmetic/sign.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/sign.js");

var _sqrt = __webpack_require__(/*! ./function/arithmetic/sqrt.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js");

var _square = __webpack_require__(/*! ./function/arithmetic/square.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/square.js");

var _subtract = __webpack_require__(/*! ./function/arithmetic/subtract.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/subtract.js");

var _xgcd = __webpack_require__(/*! ./function/arithmetic/xgcd.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js");

var _dotMultiply = __webpack_require__(/*! ./function/arithmetic/dotMultiply.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/dotMultiply.js");

var _bitAnd = __webpack_require__(/*! ./function/bitwise/bitAnd.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/bitAnd.js");

var _bitNot = __webpack_require__(/*! ./function/bitwise/bitNot.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js");

var _bitOr = __webpack_require__(/*! ./function/bitwise/bitOr.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/bitOr.js");

var _bitXor = __webpack_require__(/*! ./function/bitwise/bitXor.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/bitXor.js");

var _arg = __webpack_require__(/*! ./function/complex/arg.js */ "./node_modules/mathjs/lib/cjs/function/complex/arg.js");

var _conj = __webpack_require__(/*! ./function/complex/conj.js */ "./node_modules/mathjs/lib/cjs/function/complex/conj.js");

var _im = __webpack_require__(/*! ./function/complex/im.js */ "./node_modules/mathjs/lib/cjs/function/complex/im.js");

var _re = __webpack_require__(/*! ./function/complex/re.js */ "./node_modules/mathjs/lib/cjs/function/complex/re.js");

var _not = __webpack_require__(/*! ./function/logical/not.js */ "./node_modules/mathjs/lib/cjs/function/logical/not.js");

var _or = __webpack_require__(/*! ./function/logical/or.js */ "./node_modules/mathjs/lib/cjs/function/logical/or.js");

var _xor = __webpack_require__(/*! ./function/logical/xor.js */ "./node_modules/mathjs/lib/cjs/function/logical/xor.js");

var _concat = __webpack_require__(/*! ./function/matrix/concat.js */ "./node_modules/mathjs/lib/cjs/function/matrix/concat.js");

var _column = __webpack_require__(/*! ./function/matrix/column.js */ "./node_modules/mathjs/lib/cjs/function/matrix/column.js");

var _count = __webpack_require__(/*! ./function/matrix/count.js */ "./node_modules/mathjs/lib/cjs/function/matrix/count.js");

var _cross = __webpack_require__(/*! ./function/matrix/cross.js */ "./node_modules/mathjs/lib/cjs/function/matrix/cross.js");

var _diag = __webpack_require__(/*! ./function/matrix/diag.js */ "./node_modules/mathjs/lib/cjs/function/matrix/diag.js");

var _filter = __webpack_require__(/*! ./function/matrix/filter.js */ "./node_modules/mathjs/lib/cjs/function/matrix/filter.js");

var _flatten = __webpack_require__(/*! ./function/matrix/flatten.js */ "./node_modules/mathjs/lib/cjs/function/matrix/flatten.js");

var _forEach = __webpack_require__(/*! ./function/matrix/forEach.js */ "./node_modules/mathjs/lib/cjs/function/matrix/forEach.js");

var _getMatrixDataType = __webpack_require__(/*! ./function/matrix/getMatrixDataType.js */ "./node_modules/mathjs/lib/cjs/function/matrix/getMatrixDataType.js");

var _identity = __webpack_require__(/*! ./function/matrix/identity.js */ "./node_modules/mathjs/lib/cjs/function/matrix/identity.js");

var _kron = __webpack_require__(/*! ./function/matrix/kron.js */ "./node_modules/mathjs/lib/cjs/function/matrix/kron.js");

var _map = __webpack_require__(/*! ./function/matrix/map.js */ "./node_modules/mathjs/lib/cjs/function/matrix/map.js");

var _diff = __webpack_require__(/*! ./function/matrix/diff.js */ "./node_modules/mathjs/lib/cjs/function/matrix/diff.js");

var _ones = __webpack_require__(/*! ./function/matrix/ones.js */ "./node_modules/mathjs/lib/cjs/function/matrix/ones.js");

var _range = __webpack_require__(/*! ./function/matrix/range.js */ "./node_modules/mathjs/lib/cjs/function/matrix/range.js");

var _reshape = __webpack_require__(/*! ./function/matrix/reshape.js */ "./node_modules/mathjs/lib/cjs/function/matrix/reshape.js");

var _resize = __webpack_require__(/*! ./function/matrix/resize.js */ "./node_modules/mathjs/lib/cjs/function/matrix/resize.js");

var _rotate = __webpack_require__(/*! ./function/matrix/rotate.js */ "./node_modules/mathjs/lib/cjs/function/matrix/rotate.js");

var _rotationMatrix = __webpack_require__(/*! ./function/matrix/rotationMatrix.js */ "./node_modules/mathjs/lib/cjs/function/matrix/rotationMatrix.js");

var _row = __webpack_require__(/*! ./function/matrix/row.js */ "./node_modules/mathjs/lib/cjs/function/matrix/row.js");

var _size = __webpack_require__(/*! ./function/matrix/size.js */ "./node_modules/mathjs/lib/cjs/function/matrix/size.js");

var _squeeze = __webpack_require__(/*! ./function/matrix/squeeze.js */ "./node_modules/mathjs/lib/cjs/function/matrix/squeeze.js");

var _subset = __webpack_require__(/*! ./function/matrix/subset.js */ "./node_modules/mathjs/lib/cjs/function/matrix/subset.js");

var _transpose = __webpack_require__(/*! ./function/matrix/transpose.js */ "./node_modules/mathjs/lib/cjs/function/matrix/transpose.js");

var _ctranspose = __webpack_require__(/*! ./function/matrix/ctranspose.js */ "./node_modules/mathjs/lib/cjs/function/matrix/ctranspose.js");

var _zeros = __webpack_require__(/*! ./function/matrix/zeros.js */ "./node_modules/mathjs/lib/cjs/function/matrix/zeros.js");

var _erf = __webpack_require__(/*! ./function/special/erf.js */ "./node_modules/mathjs/lib/cjs/function/special/erf.js");

var _mode = __webpack_require__(/*! ./function/statistics/mode.js */ "./node_modules/mathjs/lib/cjs/function/statistics/mode.js");

var _prod = __webpack_require__(/*! ./function/statistics/prod.js */ "./node_modules/mathjs/lib/cjs/function/statistics/prod.js");

var _format = __webpack_require__(/*! ./function/string/format.js */ "./node_modules/mathjs/lib/cjs/function/string/format.js");

var _bin = __webpack_require__(/*! ./function/string/bin.js */ "./node_modules/mathjs/lib/cjs/function/string/bin.js");

var _oct = __webpack_require__(/*! ./function/string/oct.js */ "./node_modules/mathjs/lib/cjs/function/string/oct.js");

var _hex = __webpack_require__(/*! ./function/string/hex.js */ "./node_modules/mathjs/lib/cjs/function/string/hex.js");

var _print = __webpack_require__(/*! ./function/string/print.js */ "./node_modules/mathjs/lib/cjs/function/string/print.js");

var _to = __webpack_require__(/*! ./function/unit/to.js */ "./node_modules/mathjs/lib/cjs/function/unit/to.js");

var _isPrime = __webpack_require__(/*! ./function/utils/isPrime.js */ "./node_modules/mathjs/lib/cjs/function/utils/isPrime.js");

var _numeric = __webpack_require__(/*! ./function/utils/numeric.js */ "./node_modules/mathjs/lib/cjs/function/utils/numeric.js");

var _divideScalar = __webpack_require__(/*! ./function/arithmetic/divideScalar.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js");

var _pow = __webpack_require__(/*! ./function/arithmetic/pow.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/pow.js");

var _round = __webpack_require__(/*! ./function/arithmetic/round.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/round.js");

var _log3 = __webpack_require__(/*! ./function/arithmetic/log.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/log.js");

var _log1p = __webpack_require__(/*! ./function/arithmetic/log1p.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/log1p.js");

var _nthRoots = __webpack_require__(/*! ./function/arithmetic/nthRoots.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/nthRoots.js");

var _dotPow = __webpack_require__(/*! ./function/arithmetic/dotPow.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/dotPow.js");

var _dotDivide = __webpack_require__(/*! ./function/arithmetic/dotDivide.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/dotDivide.js");

var _lsolve = __webpack_require__(/*! ./function/algebra/solver/lsolve.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/lsolve.js");

var _usolve = __webpack_require__(/*! ./function/algebra/solver/usolve.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/usolve.js");

var _lsolveAll = __webpack_require__(/*! ./function/algebra/solver/lsolveAll.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/lsolveAll.js");

var _usolveAll = __webpack_require__(/*! ./function/algebra/solver/usolveAll.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/usolveAll.js");

var _leftShift = __webpack_require__(/*! ./function/bitwise/leftShift.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/leftShift.js");

var _rightArithShift = __webpack_require__(/*! ./function/bitwise/rightArithShift.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/rightArithShift.js");

var _rightLogShift = __webpack_require__(/*! ./function/bitwise/rightLogShift.js */ "./node_modules/mathjs/lib/cjs/function/bitwise/rightLogShift.js");

var _and = __webpack_require__(/*! ./function/logical/and.js */ "./node_modules/mathjs/lib/cjs/function/logical/and.js");

var _compare = __webpack_require__(/*! ./function/relational/compare.js */ "./node_modules/mathjs/lib/cjs/function/relational/compare.js");

var _compareNatural = __webpack_require__(/*! ./function/relational/compareNatural.js */ "./node_modules/mathjs/lib/cjs/function/relational/compareNatural.js");

var _compareText = __webpack_require__(/*! ./function/relational/compareText.js */ "./node_modules/mathjs/lib/cjs/function/relational/compareText.js");

var _equal = __webpack_require__(/*! ./function/relational/equal.js */ "./node_modules/mathjs/lib/cjs/function/relational/equal.js");

var _equalText = __webpack_require__(/*! ./function/relational/equalText.js */ "./node_modules/mathjs/lib/cjs/function/relational/equalText.js");

var _smaller = __webpack_require__(/*! ./function/relational/smaller.js */ "./node_modules/mathjs/lib/cjs/function/relational/smaller.js");

var _smallerEq = __webpack_require__(/*! ./function/relational/smallerEq.js */ "./node_modules/mathjs/lib/cjs/function/relational/smallerEq.js");

var _larger = __webpack_require__(/*! ./function/relational/larger.js */ "./node_modules/mathjs/lib/cjs/function/relational/larger.js");

var _largerEq = __webpack_require__(/*! ./function/relational/largerEq.js */ "./node_modules/mathjs/lib/cjs/function/relational/largerEq.js");

var _deepEqual = __webpack_require__(/*! ./function/relational/deepEqual.js */ "./node_modules/mathjs/lib/cjs/function/relational/deepEqual.js");

var _unequal = __webpack_require__(/*! ./function/relational/unequal.js */ "./node_modules/mathjs/lib/cjs/function/relational/unequal.js");

var _partitionSelect = __webpack_require__(/*! ./function/matrix/partitionSelect.js */ "./node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js");

var _sort = __webpack_require__(/*! ./function/matrix/sort.js */ "./node_modules/mathjs/lib/cjs/function/matrix/sort.js");

var _max = __webpack_require__(/*! ./function/statistics/max.js */ "./node_modules/mathjs/lib/cjs/function/statistics/max.js");

var _min = __webpack_require__(/*! ./function/statistics/min.js */ "./node_modules/mathjs/lib/cjs/function/statistics/min.js");

var _ImmutableDenseMatrix = __webpack_require__(/*! ./type/matrix/ImmutableDenseMatrix.js */ "./node_modules/mathjs/lib/cjs/type/matrix/ImmutableDenseMatrix.js");

var _MatrixIndex = __webpack_require__(/*! ./type/matrix/MatrixIndex.js */ "./node_modules/mathjs/lib/cjs/type/matrix/MatrixIndex.js");

var _FibonacciHeap = __webpack_require__(/*! ./type/matrix/FibonacciHeap.js */ "./node_modules/mathjs/lib/cjs/type/matrix/FibonacciHeap.js");

var _Spa = __webpack_require__(/*! ./type/matrix/Spa.js */ "./node_modules/mathjs/lib/cjs/type/matrix/Spa.js");

var _Unit = __webpack_require__(/*! ./type/unit/Unit.js */ "./node_modules/mathjs/lib/cjs/type/unit/Unit.js");

var _unit = __webpack_require__(/*! ./type/unit/function/unit.js */ "./node_modules/mathjs/lib/cjs/type/unit/function/unit.js");

var _sparse = __webpack_require__(/*! ./type/matrix/function/sparse.js */ "./node_modules/mathjs/lib/cjs/type/matrix/function/sparse.js");

var _createUnit = __webpack_require__(/*! ./type/unit/function/createUnit.js */ "./node_modules/mathjs/lib/cjs/type/unit/function/createUnit.js");

var _acos = __webpack_require__(/*! ./function/trigonometry/acos.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/acos.js");

var _acosh = __webpack_require__(/*! ./function/trigonometry/acosh.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/acosh.js");

var _acot = __webpack_require__(/*! ./function/trigonometry/acot.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/acot.js");

var _acoth = __webpack_require__(/*! ./function/trigonometry/acoth.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/acoth.js");

var _acsc = __webpack_require__(/*! ./function/trigonometry/acsc.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js");

var _acsch = __webpack_require__(/*! ./function/trigonometry/acsch.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/acsch.js");

var _asec = __webpack_require__(/*! ./function/trigonometry/asec.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/asec.js");

var _asech = __webpack_require__(/*! ./function/trigonometry/asech.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/asech.js");

var _asin = __webpack_require__(/*! ./function/trigonometry/asin.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/asin.js");

var _asinh = __webpack_require__(/*! ./function/trigonometry/asinh.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/asinh.js");

var _atan = __webpack_require__(/*! ./function/trigonometry/atan.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/atan.js");

var _atan2 = __webpack_require__(/*! ./function/trigonometry/atan2.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/atan2.js");

var _atanh = __webpack_require__(/*! ./function/trigonometry/atanh.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/atanh.js");

var _cos = __webpack_require__(/*! ./function/trigonometry/cos.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/cos.js");

var _cosh = __webpack_require__(/*! ./function/trigonometry/cosh.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/cosh.js");

var _cot = __webpack_require__(/*! ./function/trigonometry/cot.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/cot.js");

var _coth = __webpack_require__(/*! ./function/trigonometry/coth.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/coth.js");

var _csc = __webpack_require__(/*! ./function/trigonometry/csc.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/csc.js");

var _csch = __webpack_require__(/*! ./function/trigonometry/csch.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/csch.js");

var _sec = __webpack_require__(/*! ./function/trigonometry/sec.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/sec.js");

var _sech = __webpack_require__(/*! ./function/trigonometry/sech.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/sech.js");

var _sin = __webpack_require__(/*! ./function/trigonometry/sin.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/sin.js");

var _sinh = __webpack_require__(/*! ./function/trigonometry/sinh.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/sinh.js");

var _tan = __webpack_require__(/*! ./function/trigonometry/tan.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/tan.js");

var _tanh = __webpack_require__(/*! ./function/trigonometry/tanh.js */ "./node_modules/mathjs/lib/cjs/function/trigonometry/tanh.js");

var _setCartesian = __webpack_require__(/*! ./function/set/setCartesian.js */ "./node_modules/mathjs/lib/cjs/function/set/setCartesian.js");

var _setDifference = __webpack_require__(/*! ./function/set/setDifference.js */ "./node_modules/mathjs/lib/cjs/function/set/setDifference.js");

var _setDistinct = __webpack_require__(/*! ./function/set/setDistinct.js */ "./node_modules/mathjs/lib/cjs/function/set/setDistinct.js");

var _setIntersect = __webpack_require__(/*! ./function/set/setIntersect.js */ "./node_modules/mathjs/lib/cjs/function/set/setIntersect.js");

var _setIsSubset = __webpack_require__(/*! ./function/set/setIsSubset.js */ "./node_modules/mathjs/lib/cjs/function/set/setIsSubset.js");

var _setMultiplicity = __webpack_require__(/*! ./function/set/setMultiplicity.js */ "./node_modules/mathjs/lib/cjs/function/set/setMultiplicity.js");

var _setPowerset = __webpack_require__(/*! ./function/set/setPowerset.js */ "./node_modules/mathjs/lib/cjs/function/set/setPowerset.js");

var _setSize = __webpack_require__(/*! ./function/set/setSize.js */ "./node_modules/mathjs/lib/cjs/function/set/setSize.js");

var _setSymDifference = __webpack_require__(/*! ./function/set/setSymDifference.js */ "./node_modules/mathjs/lib/cjs/function/set/setSymDifference.js");

var _setUnion = __webpack_require__(/*! ./function/set/setUnion.js */ "./node_modules/mathjs/lib/cjs/function/set/setUnion.js");

var _add = __webpack_require__(/*! ./function/arithmetic/add.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/add.js");

var _hypot = __webpack_require__(/*! ./function/arithmetic/hypot.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/hypot.js");

var _norm = __webpack_require__(/*! ./function/arithmetic/norm.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/norm.js");

var _dot = __webpack_require__(/*! ./function/matrix/dot.js */ "./node_modules/mathjs/lib/cjs/function/matrix/dot.js");

var _trace = __webpack_require__(/*! ./function/matrix/trace.js */ "./node_modules/mathjs/lib/cjs/function/matrix/trace.js");

var _index = __webpack_require__(/*! ./type/matrix/function/index.js */ "./node_modules/mathjs/lib/cjs/type/matrix/function/index.js");

var _Node = __webpack_require__(/*! ./expression/node/Node.js */ "./node_modules/mathjs/lib/cjs/expression/node/Node.js");

var _AccessorNode = __webpack_require__(/*! ./expression/node/AccessorNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/AccessorNode.js");

var _ArrayNode = __webpack_require__(/*! ./expression/node/ArrayNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/ArrayNode.js");

var _AssignmentNode = __webpack_require__(/*! ./expression/node/AssignmentNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js");

var _BlockNode = __webpack_require__(/*! ./expression/node/BlockNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/BlockNode.js");

var _ConditionalNode = __webpack_require__(/*! ./expression/node/ConditionalNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/ConditionalNode.js");

var _ConstantNode = __webpack_require__(/*! ./expression/node/ConstantNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/ConstantNode.js");

var _FunctionAssignmentNode = __webpack_require__(/*! ./expression/node/FunctionAssignmentNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/FunctionAssignmentNode.js");

var _IndexNode = __webpack_require__(/*! ./expression/node/IndexNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/IndexNode.js");

var _ObjectNode = __webpack_require__(/*! ./expression/node/ObjectNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/ObjectNode.js");

var _OperatorNode = __webpack_require__(/*! ./expression/node/OperatorNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/OperatorNode.js");

var _ParenthesisNode = __webpack_require__(/*! ./expression/node/ParenthesisNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/ParenthesisNode.js");

var _RangeNode = __webpack_require__(/*! ./expression/node/RangeNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/RangeNode.js");

var _RelationalNode = __webpack_require__(/*! ./expression/node/RelationalNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/RelationalNode.js");

var _SymbolNode = __webpack_require__(/*! ./expression/node/SymbolNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/SymbolNode.js");

var _FunctionNode = __webpack_require__(/*! ./expression/node/FunctionNode.js */ "./node_modules/mathjs/lib/cjs/expression/node/FunctionNode.js");

var _parse = __webpack_require__(/*! ./expression/parse.js */ "./node_modules/mathjs/lib/cjs/expression/parse.js");

var _compile = __webpack_require__(/*! ./expression/function/compile.js */ "./node_modules/mathjs/lib/cjs/expression/function/compile.js");

var _evaluate = __webpack_require__(/*! ./expression/function/evaluate.js */ "./node_modules/mathjs/lib/cjs/expression/function/evaluate.js");

var _Parser = __webpack_require__(/*! ./expression/Parser.js */ "./node_modules/mathjs/lib/cjs/expression/Parser.js");

var _parser = __webpack_require__(/*! ./expression/function/parser.js */ "./node_modules/mathjs/lib/cjs/expression/function/parser.js");

var _lup = __webpack_require__(/*! ./function/algebra/decomposition/lup.js */ "./node_modules/mathjs/lib/cjs/function/algebra/decomposition/lup.js");

var _qr = __webpack_require__(/*! ./function/algebra/decomposition/qr.js */ "./node_modules/mathjs/lib/cjs/function/algebra/decomposition/qr.js");

var _slu = __webpack_require__(/*! ./function/algebra/decomposition/slu.js */ "./node_modules/mathjs/lib/cjs/function/algebra/decomposition/slu.js");

var _lusolve = __webpack_require__(/*! ./function/algebra/solver/lusolve.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/lusolve.js");

var _Help = __webpack_require__(/*! ./expression/Help.js */ "./node_modules/mathjs/lib/cjs/expression/Help.js");

var _Chain = __webpack_require__(/*! ./type/chain/Chain.js */ "./node_modules/mathjs/lib/cjs/type/chain/Chain.js");

var _help = __webpack_require__(/*! ./expression/function/help.js */ "./node_modules/mathjs/lib/cjs/expression/function/help.js");

var _chain = __webpack_require__(/*! ./type/chain/function/chain.js */ "./node_modules/mathjs/lib/cjs/type/chain/function/chain.js");

var _det = __webpack_require__(/*! ./function/matrix/det.js */ "./node_modules/mathjs/lib/cjs/function/matrix/det.js");

var _inv = __webpack_require__(/*! ./function/matrix/inv.js */ "./node_modules/mathjs/lib/cjs/function/matrix/inv.js");

var _eigs = __webpack_require__(/*! ./function/matrix/eigs.js */ "./node_modules/mathjs/lib/cjs/function/matrix/eigs.js");

var _expm2 = __webpack_require__(/*! ./function/matrix/expm.js */ "./node_modules/mathjs/lib/cjs/function/matrix/expm.js");

var _sqrtm = __webpack_require__(/*! ./function/matrix/sqrtm.js */ "./node_modules/mathjs/lib/cjs/function/matrix/sqrtm.js");

var _divide = __webpack_require__(/*! ./function/arithmetic/divide.js */ "./node_modules/mathjs/lib/cjs/function/arithmetic/divide.js");

var _distance = __webpack_require__(/*! ./function/geometry/distance.js */ "./node_modules/mathjs/lib/cjs/function/geometry/distance.js");

var _intersect = __webpack_require__(/*! ./function/geometry/intersect.js */ "./node_modules/mathjs/lib/cjs/function/geometry/intersect.js");

var _sum = __webpack_require__(/*! ./function/statistics/sum.js */ "./node_modules/mathjs/lib/cjs/function/statistics/sum.js");

var _mean = __webpack_require__(/*! ./function/statistics/mean.js */ "./node_modules/mathjs/lib/cjs/function/statistics/mean.js");

var _median = __webpack_require__(/*! ./function/statistics/median.js */ "./node_modules/mathjs/lib/cjs/function/statistics/median.js");

var _mad = __webpack_require__(/*! ./function/statistics/mad.js */ "./node_modules/mathjs/lib/cjs/function/statistics/mad.js");

var _variance = __webpack_require__(/*! ./function/statistics/variance.js */ "./node_modules/mathjs/lib/cjs/function/statistics/variance.js");

var _quantileSeq = __webpack_require__(/*! ./function/statistics/quantileSeq.js */ "./node_modules/mathjs/lib/cjs/function/statistics/quantileSeq.js");

var _std = __webpack_require__(/*! ./function/statistics/std.js */ "./node_modules/mathjs/lib/cjs/function/statistics/std.js");

var _combinations = __webpack_require__(/*! ./function/probability/combinations.js */ "./node_modules/mathjs/lib/cjs/function/probability/combinations.js");

var _combinationsWithRep = __webpack_require__(/*! ./function/probability/combinationsWithRep.js */ "./node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js");

var _gamma = __webpack_require__(/*! ./function/probability/gamma.js */ "./node_modules/mathjs/lib/cjs/function/probability/gamma.js");

var _factorial = __webpack_require__(/*! ./function/probability/factorial.js */ "./node_modules/mathjs/lib/cjs/function/probability/factorial.js");

var _kldivergence = __webpack_require__(/*! ./function/probability/kldivergence.js */ "./node_modules/mathjs/lib/cjs/function/probability/kldivergence.js");

var _multinomial = __webpack_require__(/*! ./function/probability/multinomial.js */ "./node_modules/mathjs/lib/cjs/function/probability/multinomial.js");

var _permutations = __webpack_require__(/*! ./function/probability/permutations.js */ "./node_modules/mathjs/lib/cjs/function/probability/permutations.js");

var _pickRandom = __webpack_require__(/*! ./function/probability/pickRandom.js */ "./node_modules/mathjs/lib/cjs/function/probability/pickRandom.js");

var _random = __webpack_require__(/*! ./function/probability/random.js */ "./node_modules/mathjs/lib/cjs/function/probability/random.js");

var _randomInt = __webpack_require__(/*! ./function/probability/randomInt.js */ "./node_modules/mathjs/lib/cjs/function/probability/randomInt.js");

var _stirlingS = __webpack_require__(/*! ./function/combinatorics/stirlingS2.js */ "./node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js");

var _bellNumbers = __webpack_require__(/*! ./function/combinatorics/bellNumbers.js */ "./node_modules/mathjs/lib/cjs/function/combinatorics/bellNumbers.js");

var _catalan = __webpack_require__(/*! ./function/combinatorics/catalan.js */ "./node_modules/mathjs/lib/cjs/function/combinatorics/catalan.js");

var _composition = __webpack_require__(/*! ./function/combinatorics/composition.js */ "./node_modules/mathjs/lib/cjs/function/combinatorics/composition.js");

var _simplify = __webpack_require__(/*! ./function/algebra/simplify.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify.js");

var _derivative = __webpack_require__(/*! ./function/algebra/derivative.js */ "./node_modules/mathjs/lib/cjs/function/algebra/derivative.js");

var _rationalize = __webpack_require__(/*! ./function/algebra/rationalize.js */ "./node_modules/mathjs/lib/cjs/function/algebra/rationalize.js");

var _reviver = __webpack_require__(/*! ./json/reviver.js */ "./node_modules/mathjs/lib/cjs/json/reviver.js");

var _replacer = __webpack_require__(/*! ./json/replacer.js */ "./node_modules/mathjs/lib/cjs/json/replacer.js");

var _constants = __webpack_require__(/*! ./constants.js */ "./node_modules/mathjs/lib/cjs/constants.js");

var _physicalConstants = __webpack_require__(/*! ./type/unit/physicalConstants.js */ "./node_modules/mathjs/lib/cjs/type/unit/physicalConstants.js");

var _applyTransform = __webpack_require__(/*! ./expression/transform/apply.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/apply.transform.js");

var _columnTransform = __webpack_require__(/*! ./expression/transform/column.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/column.transform.js");

var _filterTransform = __webpack_require__(/*! ./expression/transform/filter.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/filter.transform.js");

var _forEachTransform = __webpack_require__(/*! ./expression/transform/forEach.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/forEach.transform.js");

var _indexTransform = __webpack_require__(/*! ./expression/transform/index.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/index.transform.js");

var _mapTransform = __webpack_require__(/*! ./expression/transform/map.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/map.transform.js");

var _maxTransform = __webpack_require__(/*! ./expression/transform/max.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/max.transform.js");

var _meanTransform = __webpack_require__(/*! ./expression/transform/mean.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/mean.transform.js");

var _minTransform = __webpack_require__(/*! ./expression/transform/min.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/min.transform.js");

var _rangeTransform = __webpack_require__(/*! ./expression/transform/range.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/range.transform.js");

var _rowTransform = __webpack_require__(/*! ./expression/transform/row.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/row.transform.js");

var _subsetTransform = __webpack_require__(/*! ./expression/transform/subset.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/subset.transform.js");

var _concatTransform = __webpack_require__(/*! ./expression/transform/concat.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/concat.transform.js");

var _diffTransform = __webpack_require__(/*! ./expression/transform/diff.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/diff.transform.js");

var _stdTransform = __webpack_require__(/*! ./expression/transform/std.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/std.transform.js");

var _sumTransform = __webpack_require__(/*! ./expression/transform/sum.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/sum.transform.js");

var _varianceTransform = __webpack_require__(/*! ./expression/transform/variance.transform.js */ "./node_modules/mathjs/lib/cjs/expression/transform/variance.transform.js");

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/decomposition/lup.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/decomposition/lup.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLup = void 0;

var _object = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'lup';
var dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
var createLup = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      abs = _ref.abs,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      larger = _ref.larger,
      equalScalar = _ref.equalScalar,
      unaryMinus = _ref.unaryMinus,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix,
      Spa = _ref.Spa;

  /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A)
   *
   * Example:
   *
   *    const m = [[2, 1], [1, 4]]
   *    const r = math.lup(m)
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
  return typed(name, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseLUP(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseLUP(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseLUP(m); // result


      return {
        L: r.L.valueOf(),
        U: r.U.valueOf(),
        p: r.p
      };
    }
  });

  function _denseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix array, clone original data

    var data = (0, _object.clone)(m._data); // l matrix arrays

    var ldata = [];
    var lsize = [rows, n]; // u matrix arrays

    var udata = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vector

    var p = [];

    for (i = 0; i < rows; i++) {
      p[i] = i;
    } // loop columns


    for (j = 0; j < columns; j++) {
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows
        for (i = 0; i < rows; i++) {
          // min i,j
          var min = Math.min(i, j); // v[i, j]

          var s = 0; // loop up to min

          for (k = 0; k < min; k++) {
            // s = l[i, k] - data[k, j]
            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
          }

          data[i][j] = subtract(data[i][j], s);
        }
      } // row with larger value in cvector, row >= j


      var pi = j;
      var pabsv = 0;
      var vjj = 0; // loop rows

      for (i = j; i < rows; i++) {
        // data @ i, j
        var v = data[i][j]; // absolute value

        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = i; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      } // swap rows (j <-> pi)


      if (j !== pi) {
        // swap values j <-> pi in p
        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

        DenseMatrix._swapRows(j, pi, data);
      } // check column is in lower triangular matrix


      if (j < rows) {
        // loop rows (lower triangular matrix)
        for (i = j + 1; i < rows; i++) {
          // value @ i, j
          var vij = data[i][j];

          if (!equalScalar(vij, 0)) {
            // update data
            data[i][j] = divideScalar(data[i][j], vjj);
          }
        }
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // loop rows
      for (i = 0; i < rows; i++) {
        // initialize row in arrays
        if (j === 0) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i] = [];
          } // L


          ldata[i] = [];
        } // check we are in the upper triangular matrix


        if (i < j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 0;
          }

          continue;
        } // diagonal value


        if (i === j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 1;
          }

          continue;
        } // check row exists in upper triangular matrix


        if (i < columns) {
          // U
          udata[i][j] = 0;
        } // check column exists in lower triangular matrix


        if (j < rows) {
          // L
          ldata[i][j] = data[i][j];
        }
      }
    } // l matrix


    var l = new DenseMatrix({
      data: ldata,
      size: lsize
    }); // u matrix

    var u = new DenseMatrix({
      data: udata,
      size: usize
    }); // p vector

    var pv = [];

    for (i = 0, n = p.length; i < n; i++) {
      pv[p[i]] = i;
    } // return matrices


    return {
      L: l,
      U: u,
      p: pv,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }

  function _sparseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // l matrix arrays

    var lvalues = [];
    var lindex = [];
    var lptr = [];
    var lsize = [rows, n]; // u matrix arrays

    var uvalues = [];
    var uindex = [];
    var uptr = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

    var pvCo = [];
    var pvOc = [];

    for (i = 0; i < rows; i++) {
      pvCo[i] = i;
      pvOc[i] = i;
    } // swap indices in permutation vectors (condition x < y)!


    var swapIndeces = function swapIndeces(x, y) {
      // find pv indeces getting data from x and y
      var kx = pvOc[x];
      var ky = pvOc[y]; // update permutation vector current -> original

      pvCo[kx] = y;
      pvCo[ky] = x; // update permutation vector original -> current

      pvOc[x] = ky;
      pvOc[y] = kx;
    }; // loop columns


    var _loop = function _loop() {
      // sparse accumulator
      var spa = new Spa(); // check lower triangular matrix has a value @ column j

      if (j < rows) {
        // update ptr
        lptr.push(lvalues.length); // first value in j column for lower triangular matrix

        lvalues.push(1);
        lindex.push(j);
      } // update ptr


      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // copy column j into sparse accumulator

      for (k = k0; k < k1; k++) {
        // row
        i = index[k]; // copy column values into sparse accumulator (use permutation vector)

        spa.set(pvCo[i], values[k]);
      } // skip first column in upper triangular matrix


      if (j > 0) {
        // loop rows in column j (above diagonal)
        spa.forEach(0, j - 1, function (k, vkj) {
          // loop rows in column k (L)
          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
            // check row is below k
            if (i > k) {
              // update spa value
              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
            }
          });
        });
      } // row with larger value in spa, row >= j


      var pi = j;
      var vjj = spa.get(j);
      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

      spa.forEach(j + 1, rows - 1, function (x, v) {
        // absolute value
        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = x; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      }); // swap rows (j <-> pi)

      if (j !== pi) {
        // swap values j <-> pi in L
        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

        swapIndeces(j, pi);
      } // loop values in spa (order by row)


      spa.forEach(0, rows - 1, function (x, v) {
        // check we are above diagonal
        if (x <= j) {
          // update upper triangular matrix
          uvalues.push(v);
          uindex.push(x);
        } else {
          // update value
          v = divideScalar(v, vjj); // check value is non zero

          if (!equalScalar(v, 0)) {
            // update lower triangular matrix
            lvalues.push(v);
            lindex.push(x);
          }
        }
      });
    };

    for (j = 0; j < columns; j++) {
      _loop();
    } // update ptrs


    uptr.push(uvalues.length);
    lptr.push(lvalues.length); // return matrices

    return {
      L: new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: lsize
      }),
      U: new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: usize
      }),
      p: pvCo,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }
});
exports.createLup = createLup;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/decomposition/qr.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/decomposition/qr.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createQr = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js"));

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'qr';
var dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];
var createQr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      zeros = _ref.zeros,
      identity = _ref.identity,
      isZero = _ref.isZero,
      equal = _ref.equal,
      sign = _ref.sign,
      sqrt = _ref.sqrt,
      conj = _ref.conj,
      unaryMinus = _ref.unaryMinus,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      complex = _ref.complex;

  /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
   * two matrices (`Q`, `R`) where `Q` is an
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A)
   *
   * Example:
   *
   *    const m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ]
   *    const result = math.qr(m)
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lup, lusolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */
  return (0, _extends2["default"])(typed(name, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseQR(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseQR(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseQR(m); // result


      return {
        Q: r.Q.valueOf(),
        R: r.R.valueOf()
      };
    }
  }), {
    _denseQRimpl: _denseQRimpl
  });

  function _denseQRimpl(m) {
    // rows & columns (m x n)
    var rows = m._size[0]; // m

    var cols = m._size[1]; // n

    var Q = identity([rows], 'dense');
    var Qdata = Q._data;
    var R = m.clone();
    var Rdata = R._data; // vars

    var i, j, k;
    var w = zeros([rows], '');

    for (k = 0; k < Math.min(cols, rows); ++k) {
      /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged
       *    so Q remains othoganal.
       *
       */
      var pivot = Rdata[k][k];
      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
      var conjSgn = conj(sgn);
      var alphaSquared = 0;

      for (i = k; i < rows; i++) {
        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
      }

      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));

      if (!isZero(alpha)) {
        // first element in vector u
        var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

        w[k] = 1;

        for (i = k + 1; i < rows; i++) {
          w[i] = divideScalar(Rdata[i][k], u1);
        } // tau = - conj(u1 / alpha)


        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
        var s = void 0;
        /*
         * tau and w have been choosen so that
         *
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */

        /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */

        for (j = k; j < cols; j++) {
          s = 0.0; // calculate jth element of [tranpose(w) * R]

          for (i = k; i < rows; i++) {
            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
          } // calculate the jth element of [tau * transpose(w) * R]


          s = multiplyScalar(s, tau);

          for (i = k; i < rows; i++) {
            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
          }
        }
        /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */


        for (i = 0; i < rows; i++) {
          s = 0.0; // calculate ith element of [Q * w]

          for (j = k; j < rows; j++) {
            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
          } // calculate the ith element of [tau * Q * w]


          s = multiplyScalar(s, tau);

          for (j = k; j < rows; ++j) {
            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
          }
        }
      }
    } // return matrices


    return {
      Q: Q,
      R: R,
      toString: function toString() {
        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
      }
    };
  }

  function _denseQR(m) {
    var ret = _denseQRimpl(m);

    var Rdata = ret.R._data;

    if (m._data.length > 0) {
      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;

      for (var i = 0; i < Rdata.length; ++i) {
        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {
          Rdata[i][j] = zero;
        }
      }
    }

    return ret;
  }

  function _sparseQR(m) {
    throw new Error('qr not implemented for sparse matrices yet');
  }
});
exports.createQr = createQr;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/decomposition/slu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/decomposition/slu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSlu = void 0;

var _number = __webpack_require__(/*! ../../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _csSqr = __webpack_require__(/*! ../sparse/csSqr.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csSqr.js");

var _csLu = __webpack_require__(/*! ../sparse/csLu.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csLu.js");

var name = 'slu';
var dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createSlu = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      multiply = _ref.multiply,
      transpose = _ref.transpose,
      divideScalar = _ref.divideScalar,
      subtract = _ref.subtract,
      larger = _ref.larger,
      largerEq = _ref.largerEq,
      SparseMatrix = _ref.SparseMatrix;
  var csSqr = (0, _csSqr.createCsSqr)({
    add: add,
    multiply: multiply,
    transpose: transpose
  });
  var csLu = (0, _csLu.createCsLu)({
    abs: abs,
    divideScalar: divideScalar,
    multiply: multiply,
    subtract: subtract,
    larger: larger,
    largerEq: largerEq,
    SparseMatrix: SparseMatrix
  });
  /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold)
   *
   * Examples:
   *
   *    const A = math.sparse([[4,3], [6, 3]])
   *    math.slu(A, 1, 0.001)
   *    // returns:
   *    // {
   *    //   L: [[1, 0], [1.5, 1]]
   *    //   U: [[4, 3], [0, -1.5]]
   *    //   p: [0, 1]
   *    //   q: [0, 1]
   *    // }
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */

  return typed(name, {
    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
      // verify order
      if (!(0, _number.isInteger)(order) || order < 0 || order > 3) {
        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
      } // verify threshold


      if (threshold < 0 || threshold > 1) {
        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      } // perform symbolic ordering and analysis


      var s = csSqr(order, a, false); // perform lu decomposition

      var f = csLu(a, s, threshold); // return decomposition

      return {
        L: f.L,
        U: f.U,
        p: f.pinv,
        q: s.q,
        toString: function toString() {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
        }
      };
    }
  });
});
exports.createSlu = createSlu;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/derivative.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/derivative.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDerivative = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'derivative';
var dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createDerivative = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      parse = _ref.parse,
      simplify = _ref.simplify,
      equal = _ref.equal,
      isZero = _ref.isZero,
      numeric = _ref.numeric,
      ConstantNode = _ref.ConstantNode,
      FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode,
      SymbolNode = _ref.SymbolNode;

  /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x')                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').evaluate()          // number 2
   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
   *     const f = math.parse('x^2')
   *     const x = math.parse('x')
   *     math.derivative(f, x)                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, evaluate
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  var derivative = typed('derivative', {
    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
      var constNodes = {};
      constTag(constNodes, expr, variable.name);

      var res = _derivative(expr, constNodes);

      return options.simplify ? simplify(res) : res;
    },
    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
      return this(expr, variable, {
        simplify: true
      });
    },
    'string, SymbolNode': function stringSymbolNode(expr, variable) {
      return this(parse(expr), variable);
    },
    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
      return this(parse(expr), variable, options);
    },
    'string, string': function stringString(expr, variable) {
      return this(parse(expr), parse(variable));
    },
    'string, string, Object': function stringStringObject(expr, variable, options) {
      return this(parse(expr), parse(variable), options);
    },
    'Node, string': function NodeString(expr, variable) {
      return this(expr, parse(variable));
    },
    'Node, string, Object': function NodeStringObject(expr, variable, options) {
      return this(expr, parse(variable), options);
    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        let constNodes = {}
        constTag(constNodes, expr, variable.name)
        res = _derivative(res, constNodes)
      }
      return res
    }
    */

  });
  derivative._simplify = true;

  derivative.toTex = function (deriv) {
    return _derivTex.apply(null, deriv.args);
  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
  // NOTE: the optional "order" parameter here is currently unused


  var _derivTex = typed('_derivTex', {
    'Node, SymbolNode': function NodeSymbolNode(expr, x) {
      if ((0, _is.isConstantNode)(expr) && (0, _is.typeOf)(expr.value) === 'string') {
        return _derivTex(parse(expr.value).toString(), x.toString(), 1);
      } else {
        return _derivTex(expr.toString(), x.toString(), 1);
      }
    },
    'Node, ConstantNode': function NodeConstantNode(expr, x) {
      if ((0, _is.typeOf)(x.value) === 'string') {
        return _derivTex(expr, parse(x.value));
      } else {
        throw new Error("The second parameter to 'derivative' is a non-string constant");
      }
    },
    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
      return _derivTex(expr.toString(), x.name, order.value);
    },
    'string, string, number': function stringStringNumber(expr, x, order) {
      var d;

      if (order === 1) {
        d = '{d\\over d' + x + '}';
      } else {
        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
      }

      return d + "\\left[".concat(expr, "\\right]");
    }
  });
  /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */
  // TODO: can we rewrite constTag into a pure function?


  var constTag = typed('constTag', {
    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
      constNodes[node] = true;
      return true;
    },
    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
      // Treat other variables like constants. For reasoning, see:
      //   https://en.wikipedia.org/wiki/Partial_derivative
      if (node.name !== varName) {
        constNodes[node] = true;
        return true;
      }

      return false;
    },
    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
      return constTag(constNodes, node.content, varName);
    },
    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
      if (node.params.indexOf(varName) === -1) {
        constNodes[node] = true;
        return true;
      }

      return constTag(constNodes, node.expr, varName);
    },
    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
      if (node.args.length > 0) {
        var isConst = constTag(constNodes, node.args[0], varName);

        for (var i = 1; i < node.args.length; ++i) {
          isConst = constTag(constNodes, node.args[i], varName) && isConst;
        }

        if (isConst) {
          constNodes[node] = true;
          return true;
        }
      }

      return false;
    }
  });
  /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */

  var _derivative = typed('_derivative', {
    'ConstantNode, Object': function ConstantNodeObject(node) {
      return createConstantNode(0);
    },
    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return createConstantNode(1);
    },
    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
      return new ParenthesisNode(_derivative(node.content, constNodes));
    },
    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return _derivative(node.expr, constNodes);
    },
    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
      if (node.args.length !== 1) {
        funcArgsCheck(node);
      }

      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      var arg0 = node.args[0];
      var arg1;
      var div = false; // is output a fraction?

      var negative = false; // is output negative?

      var funcDerivative;

      switch (node.name) {
        case 'cbrt':
          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
          break;

        case 'sqrt':
        case 'nthRoot':
          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
          if (node.args.length === 1) {
            div = true;
            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
          } else if (node.args.length === 2) {
            // Rearrange from nthRoot(x, a) -> x^(1/a)
            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

            constNodes[arg1] = constNodes[node.args[1]];
            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
          }

          break;

        case 'log10':
          arg1 = createConstantNode(10);

        /* fall through! */

        case 'log':
          if (!arg1 && node.args.length === 1) {
            // d/dx(log(x)) = 1 / x
            funcDerivative = arg0.clone();
            div = true;
          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
            // d/dx(log(x, c)) = 1 / (x*ln(c))
            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
            div = true;
          } else if (node.args.length === 2) {
            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
          }

          break;

        case 'pow':
          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);

        case 'exp':
          // d/dx(e^x) = e^x
          funcDerivative = new FunctionNode('exp', [arg0.clone()]);
          break;

        case 'sin':
          // d/dx(sin(x)) = cos(x)
          funcDerivative = new FunctionNode('cos', [arg0.clone()]);
          break;

        case 'cos':
          // d/dx(cos(x)) = -sin(x)
          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
          break;

        case 'tan':
          // d/dx(tan(x)) = sec(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sec':
          // d/dx(sec(x)) = sec(x)tan(x)
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
          break;

        case 'csc':
          // d/dx(csc(x)) = -csc(x)cot(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
          break;

        case 'cot':
          // d/dx(cot(x)) = -csc(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asin':
          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'acos':
          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'atan':
          // d/dx(atan(x)) = 1 / (x^2 + 1)
          div = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'asec':
          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acsc':
          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acot':
          // d/dx(acot(x)) = -1 / (x^2 + 1)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'sinh':
          // d/dx(sinh(x)) = cosh(x)
          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
          break;

        case 'cosh':
          // d/dx(cosh(x)) = sinh(x)
          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
          break;

        case 'tanh':
          // d/dx(tanh(x)) = sech(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sech':
          // d/dx(sech(x)) = -sech(x)tanh(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
          break;

        case 'csch':
          // d/dx(csch(x)) = -csch(x)coth(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
          break;

        case 'coth':
          // d/dx(coth(x)) = -csch(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asinh':
          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'acosh':
          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'atanh':
          // d/dx(atanh(x)) = 1 / (1 - x^2)
          div = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'asech':
          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
          break;

        case 'acsch':
          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acoth':
          // d/dx(acoth(x)) = -1 / (1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'abs':
          // d/dx(abs(x)) = abs(x)/x
          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
          break;

        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

        default:
          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
      }

      var op, func;

      if (div) {
        op = '/';
        func = 'divide';
      } else {
        op = '*';
        func = 'multiply';
      }
      /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */


      var chainDerivative = _derivative(arg0, constNodes);

      if (negative) {
        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
      }

      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
    },
    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      if (node.op === '+') {
        // d/dx(sum(f(x)) = sum(f'(x))
        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
          return _derivative(arg, constNodes);
        }));
      }

      if (node.op === '-') {
        // d/dx(+/-f(x)) = +/-f'(x)
        if (node.isUnary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


        if (node.isBinary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
        }
      }

      if (node.op === '*') {
        // d/dx(c*f(x)) = c*f'(x)
        var constantTerms = node.args.filter(function (arg) {
          return constNodes[arg] !== undefined;
        });

        if (constantTerms.length > 0) {
          var nonConstantTerms = node.args.filter(function (arg) {
            return constNodes[arg] === undefined;
          });
          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
          return new OperatorNode('*', 'multiply', newArgs);
        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
          }));
        }));
      }

      if (node.op === '/' && node.isBinary()) {
        var arg0 = node.args[0];
        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

        if (constNodes[arg1] !== undefined) {
          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


        if (constNodes[arg0] !== undefined) {
          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
      }

      if (node.op === '^' && node.isBinary()) {
        var _arg = node.args[0];
        var _arg2 = node.args[1];

        if (constNodes[_arg] !== undefined) {
          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
          if ((0, _is.isConstantNode)(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {
            return createConstantNode(0);
          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
        }

        if (constNodes[_arg2] !== undefined) {
          if ((0, _is.isConstantNode)(_arg2)) {
            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
            if (isZero(_arg2.value)) {
              return createConstantNode(0);
            } // Ignore exponent; f(x)^1 = f(x)


            if (equal(_arg2.value, 1)) {
              return _derivative(_arg, constNodes);
            }
          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);
          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);
      }

      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  });
  /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */


  function funcArgsCheck(node) {
    // TODO add min, max etc
    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
      return;
    } // There should be an incorrect number of arguments if we reach here
    // Change all args to constants to avoid unidentified
    // symbol error when compiling function


    for (var i = 0; i < node.args.length; ++i) {
      node.args[i] = createConstantNode(0);
    }

    node.compile().evaluate();
    throw new Error('Expected TypeError, but none found');
  }
  /**
   * Helper function to create a constant node with a specific type
   * (number, BigNumber, Fraction)
   * @param {number} value
   * @param {string} [valueType]
   * @return {ConstantNode}
   */


  function createConstantNode(value, valueType) {
    return new ConstantNode(numeric(value, valueType || config.number));
  }

  return derivative;
});
exports.createDerivative = createDerivative;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/rationalize.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/rationalize.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRationalize = void 0;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _simplifyConstant = __webpack_require__(/*! ./simplify/simplifyConstant.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyConstant.js");

var _simplifyCore = __webpack_require__(/*! ./simplify/simplifyCore.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyCore.js");

var name = 'rationalize';
var dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];
var createRationalize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      equal = _ref.equal,
      isZero = _ref.isZero,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      pow = _ref.pow,
      parse = _ref.parse,
      simplify = _ref.simplify,
      fraction = _ref.fraction,
      bignumber = _ref.bignumber,
      mathWithTransform = _ref.mathWithTransform,
      ConstantNode = _ref.ConstantNode,
      OperatorNode = _ref.OperatorNode,
      FunctionNode = _ref.FunctionNode,
      SymbolNode = _ref.SymbolNode,
      ParenthesisNode = _ref.ParenthesisNode;
  var simplifyConstant = (0, _simplifyConstant.createSimplifyConstant)({
    typed: typed,
    config: config,
    mathWithTransform: mathWithTransform,
    fraction: fraction,
    bignumber: bignumber,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    SymbolNode: SymbolNode
  });
  var simplifyCore = (0, _simplifyCore.createSimplifyCore)({
    equal: equal,
    isZero: isZero,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    ParenthesisNode: ParenthesisNode
  });
  /**
   * Transform a rationalizable expression in a rational fraction.
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator.
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')
   *                   //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')
   *                   // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')
   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *
   *     const ret = math.rationalize('x+x+x+y',{},true)
   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
   *     const ret = math.rationalize('-2+5x^2',{},true)
   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   *
   *     simplify
   *
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
   *
   * @return {Object | Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
   *           {Expression Node}  node simplified expression
   *
   */

  return typed(name, {
    string: function string(expr) {
      return this(parse(expr), {}, false);
    },
    'string, boolean': function stringBoolean(expr, detailed) {
      return this(parse(expr), {}, detailed);
    },
    'string, Object': function stringObject(expr, scope) {
      return this(parse(expr), scope, false);
    },
    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
      return this(parse(expr), scope, detailed);
    },
    Node: function Node(expr) {
      return this(expr, {}, false);
    },
    'Node, boolean': function NodeBoolean(expr, detailed) {
      return this(expr, {}, detailed);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return this(expr, scope, false);
    },
    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

      var nVars = polyRet.variables.length;
      expr = polyRet.expression;

      if (nVars >= 1) {
        // If expression in not a constant
        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

        var sBefore; // Previous expression

        var rules;
        var eDistrDiv = true;
        var redoInic = false;
        expr = simplify(expr, setRules.firstRules, {}, {
          exactFractions: false
        }); // Apply the initial rules, including succ div rules

        var s;

        while (true) {
          // Apply alternately  successive division rules and distr.div.rules
          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
          expr = simplify(expr, rules); // until no more changes

          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

          s = expr.toString();

          if (s === sBefore) {
            break; // No changes : end of the loop
          }

          redoInic = true;
          sBefore = s;
        }

        if (redoInic) {
          // Apply first rules again without succ div rules (if there are changes)
          expr = simplify(expr, setRules.firstRulesAgain, {}, {
            exactFractions: false
          });
        }

        expr = simplify(expr, setRules.finalRules, {}, {
          exactFractions: false
        }); // Apply final rules
      } // NVars >= 1


      var coefficients = [];
      var retRationalize = {};

      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
        // Separate numerator from denominator
        if (nVars === 1) {
          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
          expr.args[1] = polyToCanonical(expr.args[1]);
        }

        if (detailed) {
          retRationalize.numerator = expr.args[0];
          retRationalize.denominator = expr.args[1];
        }
      } else {
        if (nVars === 1) {
          expr = polyToCanonical(expr, coefficients);
        }

        if (detailed) {
          retRationalize.numerator = expr;
          retRationalize.denominator = null;
        }
      } // nVars


      if (!detailed) return expr;
      retRationalize.coefficients = coefficients;
      retRationalize.variables = polyRet.variables;
      retRationalize.expression = expr;
      return retRationalize;
    } // ^^^^^^^ end of rationalize ^^^^^^^^

  }); // end of typed rationalize

  /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e.
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer.
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended, rules)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   * @param  {array}  rules           Optional. Default is no rule.
   *
   *
   * @return {Object}
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */

  function polynomial(expr, scope, extended, rules) {
    var variables = [];
    var node = simplify(expr, rules, scope, {
      exactFractions: false
    }); // Resolves any variables and functions with all defined parameters

    extended = !!extended;
    var oper = '+-*' + (extended ? '/' : '');
    recPoly(node);
    var retFunc = {};
    retFunc.expression = node;
    retFunc.variables = variables;
    return retFunc; // -------------------------------------------------------------------------------------------------------

    /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e.
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer.
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */

    function recPoly(node) {
      var tp = node.type; // node type

      if (tp === 'FunctionNode') {
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        if (node.op === '^') {
          // TODO: handle negative exponents like in '1/x^(-2)'
          if (node.args[1].type !== 'ConstantNode' || !(0, _number.isInteger)(parseFloat(node.args[1].value))) {
            throw new Error('There is a non-integer exponent');
          } else {
            recPoly(node.args[0]);
          }
        } else {
          if (oper.indexOf(node.op) === -1) {
            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
          }

          for (var i = 0; i < node.args.length; i++) {
            recPoly(node.args[i]);
          }
        } // type of operator

      } else if (tp === 'SymbolNode') {
        var _name = node.name; // variable name

        var pos = variables.indexOf(_name);

        if (pos === -1) {
          // new variable in expression
          variables.push(_name);
        }
      } else if (tp === 'ParenthesisNode') {
        recPoly(node.content);
      } else if (tp !== 'ConstantNode') {
        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
      }
    } // end of recPoly

  } // end of polynomial
  // ---------------------------------------------------------------------------------------

  /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression
   */


  function rulesRationalize() {
    var oldRules = [simplifyCore, // sCore
    {
      l: 'n+n',
      r: '2*n'
    }, {
      l: 'n+-n',
      r: '0'
    }, simplifyConstant, // sConstant
    {
      l: 'n*(n1^-1)',
      r: 'n/n1'
    }, {
      l: 'n*n1^-n2',
      r: 'n/n1^n2'
    }, {
      l: 'n1^-1',
      r: '1/n1'
    }, {
      l: 'n*(n1/n2)',
      r: '(n*n1)/n2'
    }, {
      l: '1*n',
      r: 'n'
    }];
    var rulesFirst = [{
      l: '(-n1)/(-n2)',
      r: 'n1/n2'
    }, // Unary division
    {
      l: '(-n1)*(-n2)',
      r: 'n1*n2'
    }, // Unary multiplication
    {
      l: 'n1--n2',
      r: 'n1+n2'
    }, // '--' elimination
    {
      l: 'n1-n2',
      r: 'n1+(-n2)'
    }, // Subtraction turn into add with un�ry minus
    {
      l: '(n1+n2)*n3',
      r: '(n1*n3 + n2*n3)'
    }, // Distributive 1
    {
      l: 'n1*(n2+n3)',
      r: '(n1*n2+n1*n3)'
    }, // Distributive 2
    {
      l: 'c1*n + c2*n',
      r: '(c1+c2)*n'
    }, // Joining constants
    {
      l: 'c1*n + n',
      r: '(c1+1)*n'
    }, // Joining constants
    {
      l: 'c1*n - c2*n',
      r: '(c1-c2)*n'
    }, // Joining constants
    {
      l: 'c1*n - n',
      r: '(c1-1)*n'
    }, // Joining constants
    {
      l: 'v/c',
      r: '(1/c)*v'
    }, // variable/constant (new!)
    {
      l: 'v/-c',
      r: '-(1/c)*v'
    }, // variable/constant (new!)
    {
      l: '-v*-c',
      r: 'c*v'
    }, // Inversion constant and variable 1
    {
      l: '-v*c',
      r: '-c*v'
    }, // Inversion constant and variable 2
    {
      l: 'v*-c',
      r: '-c*v'
    }, // Inversion constant and variable 3
    {
      l: 'v*c',
      r: 'c*v'
    }, // Inversion constant and variable 4
    {
      l: '-(-n1*n2)',
      r: '(n1*n2)'
    }, // Unary propagation
    {
      l: '-(n1*n2)',
      r: '(-n1*n2)'
    }, // Unary propagation
    {
      l: '-(-n1+n2)',
      r: '(n1-n2)'
    }, // Unary propagation
    {
      l: '-(n1+n2)',
      r: '(-n1-n2)'
    }, // Unary propagation
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    }, // Power to Power
    {
      l: '-(-n1/n2)',
      r: '(n1/n2)'
    }, // Division and Unary
    {
      l: '-(n1/n2)',
      r: '(-n1/n2)'
    }]; // Divisao and Unary

    var rulesDistrDiv = [{
      l: '(n1/n2 + n3/n4)',
      r: '((n1*n4 + n3*n2)/(n2*n4))'
    }, // Sum of fractions
    {
      l: '(n1/n2 + n3)',
      r: '((n1 + n3*n2)/n2)'
    }, // Sum fraction with number 1
    {
      l: '(n1 + n2/n3)',
      r: '((n1*n3 + n2)/n3)'
    }]; // Sum fraction with number 1

    var rulesSucDiv = [{
      l: '(n1/(n2/n3))',
      r: '((n1*n3)/n2)'
    }, // Division simplification
    {
      l: '(n1/n2/n3)',
      r: '(n1/(n2*n3))'
    }];
    var setRules = {}; // rules set in 4 steps.
    // All rules => infinite loop
    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
    // Division simplification
    // Second rule set.
    // There is no aggregate expression with parentesis, but the only variable can be scattered.

    setRules.finalRules = [simplifyCore, // simplify.rules[0]
    {
      l: 'n*-n',
      r: '-n^2'
    }, // Joining multiply with power 1
    {
      l: 'n*n',
      r: 'n^2'
    }, // Joining multiply with power 2
    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules
    {
      l: 'n*-n^n1',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 3
    {
      l: 'n*n^n1',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 4
    {
      l: 'n^n1*-n^n2',
      r: '-n^(n1+n2)'
    }, // Joining multiply with power 5
    {
      l: 'n^n1*n^n2',
      r: 'n^(n1+n2)'
    }, // Joining multiply with power 6
    {
      l: 'n^n1*-n',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 7
    {
      l: 'n^n1*n',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/-n',
      r: '-n^(n1-1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/n',
      r: 'n^(n1-1)'
    }, // Joining division with power 1
    {
      l: 'n/-n^n1',
      r: '-n^(1-n1)'
    }, // Joining division with power 2
    {
      l: 'n/n^n1',
      r: 'n^(1-n1)'
    }, // Joining division with power 3
    {
      l: 'n^n1/-n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 4
    {
      l: 'n^n1/n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 5
    {
      l: 'n1+(-n2*n3)',
      r: 'n1-n2*n3'
    }, // Solving useless parenthesis 1
    {
      l: 'v*(-c)',
      r: '-c*v'
    }, // Solving useless unary 2
    {
      l: 'n1+-n2',
      r: 'n1-n2'
    }, // Solving +- together (new!)
    {
      l: 'v*c',
      r: 'c*v'
    }, // inversion constant with variable
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    } // Power to Power
    ];
    return setRules;
  } // End rulesRationalize
  // ---------------------------------------------------------------------------------------

  /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion
   *
   * @return {node}        node expression with all powers expanded.
   */


  function expandPower(node, parent, indParent) {
    var tp = node.type;
    var internal = arguments.length > 1; // TRUE in internal calls

    if (tp === 'OperatorNode' && node.isBinary()) {
      var does = false;
      var val;

      if (node.op === '^') {
        // First operator: Parenthesis or UnaryMinus
        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
          // Second operator: Constant
          val = parseFloat(node.args[1].value);
          does = val >= 2 && (0, _number.isInteger)(val);
        }
      }

      if (does) {
        // Exponent >= 2
        // Before:
        //            operator A --> Subtree
        // parent pow
        //            constant
        //
        if (val > 2) {
          // Exponent > 2,
          // AFTER:  (exponent > 2)
          //             operator A --> Subtree
          // parent  *
          //                 deep clone (operator A --> Subtree
          //             pow
          //                 constant - 1
          //
          var nEsqTopo = node.args[0];
          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
        } else {
          // Expo = 2 - no power
          // AFTER:  (exponent =  2)
          //             operator A --> Subtree
          // parent   oper
          //            deep clone (operator A --> Subtree)
          //
          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
        }

        if (internal) {
          // Change parent references in internal recursive calls
          if (indParent === 'content') {
            parent.content = node;
          } else {
            parent.args[indParent] = node;
          }
        }
      } // does

    } // binary OperatorNode


    if (tp === 'ParenthesisNode') {
      // Recursion
      expandPower(node.content, node, 'content');
    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
      for (var i = 0; i < node.args.length; i++) {
        expandPower(node.args[i], node, i);
      }
    }

    if (!internal) {
      // return the root node
      return node;
    }
  } // End expandPower
  // ---------------------------------------------------------------------------------------

  /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   *
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error.
   */


  function polyToCanonical(node, coefficients) {
    if (coefficients === undefined) {
      coefficients = [];
    } // coefficients.


    coefficients[0] = 0; // index is the exponent

    var o = {};
    o.cte = 1;
    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
    //       It is used to deduce the exponent: 1 for *, 0 for "".

    o.fire = '';
    var maxExpo = 0; // maximum exponent

    var varname = ''; // variable name

    recurPol(node, null, o);
    maxExpo = coefficients.length - 1;
    var first = true;
    var no;

    for (var i = maxExpo; i >= 0; i--) {
      if (coefficients[i] === 0) continue;
      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
      var op = coefficients[i] < 0 ? '-' : '+';

      if (i > 0) {
        // Is not a constant without variable
        var n2 = new SymbolNode(varname);

        if (i > 1) {
          var n3 = new ConstantNode(i);
          n2 = new OperatorNode('^', 'pow', [n2, n3]);
        }

        if (coefficients[i] === -1 && first) {
          n1 = new OperatorNode('-', 'unaryMinus', [n2]);
        } else if (Math.abs(coefficients[i]) === 1) {
          n1 = n2;
        } else {
          n1 = new OperatorNode('*', 'multiply', [n1, n2]);
        }
      }

      if (first) {
        no = n1;
      } else if (op === '+') {
        no = new OperatorNode('+', 'add', [no, n1]);
      } else {
        no = new OperatorNode('-', 'subtract', [no, n1]);
      }

      first = false;
    } // for


    if (first) {
      return new ConstantNode(0);
    } else {
      return no;
    }
    /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */


    function recurPol(node, noPai, o) {
      var tp = node.type;

      if (tp === 'FunctionNode') {
        // ***** FunctionName *****
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        // ***** OperatorName *****
        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

        if (noPai !== null) {
          // -(unary),^  : children of *,+,-
          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+,* : children of +,-


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+ : first child


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
            throw new Error('Invalid ' + node.op + ' placing');
          }
        } // Has parent
        // Firers: ^,*       Old:   ^,&,-(unary): firers


        if (node.op === '^' || node.op === '*') {
          o.fire = node.op;
        }

        for (var _i = 0; _i < node.args.length; _i++) {
          // +,-: reset fire
          if (node.fn === 'unaryMinus') o.oper = '-';

          if (node.op === '+' || node.fn === 'subtract') {
            o.fire = '';
            o.cte = 1; // default if there is no constant

            o.oper = _i === 0 ? '+' : node.op;
          }

          o.noFil = _i; // number of son

          recurPol(node.args[_i], node, o);
        } // for in children

      } else if (tp === 'SymbolNode') {
        // ***** SymbolName *****
        if (node.name !== varname && varname !== '') {
          throw new Error('There is more than one variable');
        }

        varname = node.name;

        if (noPai === null) {
          coefficients[1] = 1;
          return;
        } // ^: Symbol is First child


        if (noPai.op === '^' && o.noFil !== 0) {
          throw new Error('In power the variable should be the first parameter');
        } // *: Symbol is Second child


        if (noPai.op === '*' && o.noFil !== 1) {
          throw new Error('In multiply the variable should be the second parameter');
        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


        if (o.fire === '' || o.fire === '*') {
          if (maxExpo < 1) coefficients[1] = 0;
          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(1, maxExpo);
        }
      } else if (tp === 'ConstantNode') {
        var valor = parseFloat(node.value);

        if (noPai === null) {
          coefficients[0] = valor;
          return;
        }

        if (noPai.op === '^') {
          // cte: second  child of power
          if (o.noFil !== 1) throw new Error('Constant cannot be powered');

          if (!(0, _number.isInteger)(valor) || valor <= 0) {
            throw new Error('Non-integer exponent is not allowed');
          }

          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
            coefficients[_i2] = 0;
          }

          if (valor > maxExpo) coefficients[valor] = 0;
          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(valor, maxExpo);
          return;
        }

        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

        if (o.fire === '') {
          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
        }
      } else {
        throw new Error('Type ' + tp + ' is not allowed');
      }
    } // End of recurPol

  } // End of polyToCanonical

});
exports.createRationalize = createRationalize;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/simplify.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/simplify.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSimplify = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _util = __webpack_require__(/*! ./simplify/util.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/util.js");

var _simplifyCore = __webpack_require__(/*! ./simplify/simplifyCore.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyCore.js");

var _simplifyConstant = __webpack_require__(/*! ./simplify/simplifyConstant.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyConstant.js");

var _resolve = __webpack_require__(/*! ./simplify/resolve.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/resolve.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _map = __webpack_require__(/*! ../../utils/map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

var name = 'simplify';
var dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createSimplify = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      parse = _ref.parse,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      pow = _ref.pow,
      isZero = _ref.isZero,
      equal = _ref.equal,
      fraction = _ref.fraction,
      bignumber = _ref.bignumber,
      mathWithTransform = _ref.mathWithTransform,
      ConstantNode = _ref.ConstantNode,
      FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode,
      SymbolNode = _ref.SymbolNode;
  var simplifyConstant = (0, _simplifyConstant.createSimplifyConstant)({
    typed: typed,
    config: config,
    mathWithTransform: mathWithTransform,
    fraction: fraction,
    bignumber: bignumber,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    SymbolNode: SymbolNode
  });
  var simplifyCore = (0, _simplifyCore.createSimplifyCore)({
    equal: equal,
    isZero: isZero,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    ParenthesisNode: ParenthesisNode
  });
  var resolve = (0, _resolve.createResolve)({
    parse: parse,
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    ParenthesisNode: ParenthesisNode
  });

  var _createUtil = (0, _util.createUtil)({
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    SymbolNode: SymbolNode
  }),
      isCommutative = _createUtil.isCommutative,
      isAssociative = _createUtil.isAssociative,
      flatten = _createUtil.flatten,
      unflattenr = _createUtil.unflattenr,
      unflattenl = _createUtil.unflattenl,
      createMakeNodeFunction = _createUtil.createMakeNodeFunction;
  /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     const rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   *  An optional `options` argument can be passed as last argument of `simplify`.
   *  There is currently one option available:
   *  - `exactFractions`: a boolean which is `true` by default.
   *  - `fractionsLimit`: when `exactFractions` is true, a fraction will be returned
   *    only when both numerator and denominator are smaller than `fractionsLimit`.
   *    Default value is 10000.
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, rules, scope, options)
   *     simplify(expr, scope)
   *     simplify(expr, scope, options)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify(f)                          // Node "2 * x"
   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
   *
   * See also:
   *
   *     derivative, parse, evaluate, rationalize
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */


  var simplify = typed('simplify', {
    string: function string(expr) {
      return this(parse(expr), this.rules, (0, _map.createEmptyMap)(), {});
    },
    'string, Map | Object': function stringMapObject(expr, scope) {
      return this(parse(expr), this.rules, scope, {});
    },
    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {
      return this(parse(expr), this.rules, scope, options);
    },
    'string, Array': function stringArray(expr, rules) {
      return this(parse(expr), rules, (0, _map.createEmptyMap)(), {});
    },
    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {
      return this(parse(expr), rules, scope, {});
    },
    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {
      return this(parse(expr), rules, scope, options);
    },
    'Node, Map | Object': function NodeMapObject(expr, scope) {
      return this(expr, this.rules, scope, {});
    },
    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {
      return this(expr, this.rules, scope, options);
    },
    Node: function Node(expr) {
      return this(expr, this.rules, (0, _map.createEmptyMap)(), {});
    },
    'Node, Array': function NodeArray(expr, rules) {
      return this(expr, rules, (0, _map.createEmptyMap)(), {});
    },
    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {
      return this(expr, rules, scope, {});
    },
    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
      return this(expr, rules, (0, _map.createMap)(scope), options);
    },
    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {
      rules = _buildRules(rules);
      var res = resolve(expr, scope);
      res = removeParens(res);
      var visited = {};
      var str = res.toString({
        parenthesis: 'all'
      });

      while (!visited[str]) {
        visited[str] = true;
        _lastsym = 0; // counter for placeholder symbols

        for (var i = 0; i < rules.length; i++) {
          if (typeof rules[i] === 'function') {
            res = rules[i](res, options);
          } else {
            flatten(res);
            res = applyRule(res, rules[i]);
          }

          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
        }

        str = res.toString({
          parenthesis: 'all'
        });
      }

      return res;
    }
  });
  simplify.simplifyCore = simplifyCore;
  simplify.resolve = resolve;

  function removeParens(node) {
    return node.transform(function (node, path, parent) {
      return (0, _is.isParenthesisNode)(node) ? removeParens(node.content) : node;
    });
  } // All constants that are allowed in rules


  var SUPPORTED_CONSTANTS = {
    "true": true,
    "false": true,
    e: true,
    i: true,
    Infinity: true,
    LN2: true,
    LN10: true,
    LOG2E: true,
    LOG10E: true,
    NaN: true,
    phi: true,
    pi: true,
    SQRT1_2: true,
    SQRT2: true,
    tau: true // null: false,
    // undefined: false,
    // version: false,

  }; // Array of strings, used to build the ruleSet.
  // Each l (left side) and r (right side) are parsed by
  // the expression parser into a node tree.
  // Left hand sides are matched to subtrees within the
  // expression to be parsed and replaced with the right
  // hand side.
  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
  // It is possible to get into an infinite loop with conflicting rules

  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore
  // { l: 'n^0', r: '1' },     // simplifyCore
  // { l: '0*n', r: '0' },     // simplifyCore
  // { l: 'n/n', r: '1'},      // simplifyCore
  // { l: 'n^1', r: 'n' },     // simplifyCore
  // { l: '+n1', r:'n1' },     // simplifyCore
  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
  {
    l: 'log(e)',
    r: '1'
  }, // temporary rules
  {
    l: 'n-n1',
    r: 'n+-n1'
  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
  {
    l: '-(c*v)',
    r: '(-c) * v'
  }, // make non-constant terms positive
  {
    l: '-v',
    r: '(-1) * v'
  }, {
    l: 'n/n1^n2',
    r: 'n*n1^-n2'
  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
  {
    l: 'n/n1',
    r: 'n*n1^-1'
  }, // expand nested exponentiation
  {
    l: '(n ^ n1) ^ n2',
    r: 'n ^ (n1 * n2)'
  }, // collect like factors
  {
    l: 'n*n',
    r: 'n^2'
  }, {
    l: 'n * n^n1',
    r: 'n^(n1+1)'
  }, {
    l: 'n^n1 * n^n2',
    r: 'n^(n1+n2)'
  }, // collect like terms
  {
    l: 'n+n',
    r: '2*n'
  }, {
    l: 'n+-n',
    r: '0'
  }, {
    l: 'n1*n2 + n2',
    r: '(n1+1)*n2'
  }, {
    l: 'n1*n3 + n2*n3',
    r: '(n1+n2)*n3'
  }, // remove parenthesis in the case of negating a quantitiy
  {
    l: 'n1 + -1 * (n2 + n3)',
    r: 'n1 + -1 * n2 + -1 * n3'
  }, simplifyConstant, {
    l: '(-n)*n1',
    r: '-(n*n1)'
  }, // make factors positive (and undo 'make non-constant terms positive')
  // ordering of constants
  {
    l: 'c+v',
    r: 'v+c',
    context: {
      add: {
        commutative: false
      }
    }
  }, {
    l: 'v*c',
    r: 'c*v',
    context: {
      multiply: {
        commutative: false
      }
    }
  }, // undo temporary rules
  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
  {
    l: 'n+-n1',
    r: 'n-n1'
  }, // undo replace 'subtract'
  {
    l: 'n*(n1^-1)',
    r: 'n/n1'
  }, // undo replace 'divide'
  {
    l: 'n*n1^-n2',
    r: 'n/n1^n2'
  }, {
    l: 'n1^-1',
    r: '1/n1'
  }, {
    l: 'n*(n1/n2)',
    r: '(n*n1)/n2'
  }, // '*' before '/'
  {
    l: 'n-(n1+n2)',
    r: 'n-n1-n2'
  }, // '-' before '+'
  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
  {
    l: '1*n',
    r: 'n'
  }, // this pattern can be produced by simplifyConstant
  {
    l: 'n1/(n2/n3)',
    r: '(n1*n3)/n2'
  }];
  /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */

  function _buildRules(rules) {
    // Array of rules to be used to simplify expressions
    var ruleSet = [];

    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      var newRule = void 0;
      var ruleType = (0, _typeof2["default"])(rule);

      switch (ruleType) {
        case 'string':
          {
            var lr = rule.split('->');

            if (lr.length === 2) {
              rule = {
                l: lr[0],
                r: lr[1]
              };
            } else {
              throw SyntaxError('Could not parse rule: ' + rule);
            }
          }

        /* falls through */

        case 'object':
          newRule = {
            l: removeParens(parse(rule.l)),
            r: removeParens(parse(rule.r))
          };

          if (rule.context) {
            newRule.evaluate = rule.context;
          }

          if (rule.evaluate) {
            newRule.evaluate = parse(rule.evaluate);
          }

          if (isAssociative(newRule.l)) {
            var makeNode = createMakeNodeFunction(newRule.l);

            var expandsym = _getExpandPlaceholderSymbol();

            newRule.expanded = {};
            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
            // This helps to match the newRule against nodes returned from getSplits() later on.

            flatten(newRule.expanded.l);
            unflattenr(newRule.expanded.l);
            newRule.expanded.r = makeNode([newRule.r, expandsym]);
          }

          break;

        case 'function':
          newRule = rule;
          break;

        default:
          throw TypeError('Unsupported type of rule: ' + ruleType);
      } // console.log('Adding rule: ' + rules[i])
      // console.log(newRule)


      ruleSet.push(newRule);
    }

    return ruleSet;
  }

  var _lastsym = 0;

  function _getExpandPlaceholderSymbol() {
    return new SymbolNode('_p' + _lastsym++);
  }
  /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */


  var applyRule = typed('applyRule', {
    'Node, Object': function NodeObject(node, rule) {
      // console.log('Entering applyRule(' + node.toString() + ')')
      // Do not clone node unless we find a match
      var res = node; // First replace our child nodes with their simplified versions
      // If a child could not be simplified, the assignments will have
      // no effect since the node is returned unchanged

      if (res instanceof OperatorNode || res instanceof FunctionNode) {
        if (res.args) {
          for (var i = 0; i < res.args.length; i++) {
            res.args[i] = applyRule(res.args[i], rule);
          }
        }
      } else if (res instanceof ParenthesisNode) {
        if (res.content) {
          res.content = applyRule(res.content, rule);
        }
      } // Try to match a rule against this node


      var repl = rule.r;

      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


      if (!matches && rule.expanded) {
        repl = rule.expanded.r;
        matches = _ruleMatch(rule.expanded.l, res)[0];
      }

      if (matches) {
        // const before = res.toString({parenthesis: 'all'})
        // Create a new node by cloning the rhs of the matched rule
        // we keep any implicit multiplication state if relevant
        var implicit = res.implicit;
        res = repl.clone();

        if (implicit && 'implicit' in repl) {
          res.implicit = true;
        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


        res = res.transform(function (node) {
          if (node.isSymbolNode && (0, _object.hasOwnProperty)(matches.placeholders, node.name)) {
            return matches.placeholders[node.name].clone();
          } else {
            return node;
          }
        }); // const after = res.toString({parenthesis: 'all'})
        // console.log('Simplified ' + before + ' to ' + after)
      }

      return res;
    }
  });
  /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */

  function getSplits(node, context) {
    var res = [];
    var right, rightArgs;
    var makeNode = createMakeNodeFunction(node);

    if (isCommutative(node, context)) {
      for (var i = 0; i < node.args.length; i++) {
        rightArgs = node.args.slice(0);
        rightArgs.splice(i, 1);
        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
        res.push(makeNode([node.args[i], right]));
      }
    } else {
      rightArgs = node.args.slice(1);
      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
      res.push(makeNode([node.args[0], right]));
    }

    return res;
  }
  /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */


  function mergeMatch(match1, match2) {
    var res = {
      placeholders: {}
    }; // Some matches may not have placeholders; this is OK

    if (!match1.placeholders && !match2.placeholders) {
      return res;
    } else if (!match1.placeholders) {
      return match2;
    } else if (!match2.placeholders) {
      return match1;
    } // Placeholders with the same key must match exactly


    for (var key in match1.placeholders) {
      if ((0, _object.hasOwnProperty)(match1.placeholders, key)) {
        res.placeholders[key] = match1.placeholders[key];

        if ((0, _object.hasOwnProperty)(match2.placeholders, key)) {
          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
            return null;
          }
        }
      }
    }

    for (var _key in match2.placeholders) {
      if ((0, _object.hasOwnProperty)(match2.placeholders, _key)) {
        res.placeholders[_key] = match2.placeholders[_key];
      }
    }

    return res;
  }
  /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */


  function combineChildMatches(list1, list2) {
    var res = [];

    if (list1.length === 0 || list2.length === 0) {
      return res;
    }

    var merged;

    for (var i1 = 0; i1 < list1.length; i1++) {
      for (var i2 = 0; i2 < list2.length; i2++) {
        merged = mergeMatch(list1[i1], list2[i2]);

        if (merged) {
          res.push(merged);
        }
      }
    }

    return res;
  }
  /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */


  function mergeChildMatches(childMatches) {
    if (childMatches.length === 0) {
      return childMatches;
    }

    var sets = childMatches.reduce(combineChildMatches);
    var uniqueSets = [];
    var unique = {};

    for (var i = 0; i < sets.length; i++) {
      var s = JSON.stringify(sets[i]);

      if (!unique[s]) {
        unique[s] = true;
        uniqueSets.push(sets[i]);
      }
    }

    return uniqueSets;
  }
  /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */


  function _ruleMatch(rule, node, isSplit) {
    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
    //    console.log('rule = ' + rule)
    //    console.log('node = ' + node)
    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
    var res = [{
      placeholders: {}
    }];

    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
      if (rule instanceof OperatorNode) {
        if (rule.op !== node.op || rule.fn !== node.fn) {
          return [];
        }
      } else if (rule instanceof FunctionNode) {
        if (rule.name !== node.name) {
          return [];
        }
      } // rule and node match. Search the children of rule and node.


      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {
        // Expect non-associative operators to match exactly
        var childMatches = [];

        for (var i = 0; i < rule.args.length; i++) {
          var childMatch = _ruleMatch(rule.args[i], node.args[i]);

          if (childMatch.length === 0) {
            // Child did not match, so stop searching immediately
            return [];
          } // The child matched, so add the information returned from the child to our result


          childMatches.push(childMatch);
        }

        res = mergeChildMatches(childMatches);
      } else if (node.args.length >= 2 && rule.args.length === 2) {
        // node is flattened, rule is not
        // Associative operators/functions can be split in different ways so we check if the rule matches each
        // them and return their union.
        var splits = getSplits(node, rule.context);
        var splitMatches = [];

        for (var _i = 0; _i < splits.length; _i++) {
          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here


          splitMatches = splitMatches.concat(matchSet);
        }

        return splitMatches;
      } else if (rule.args.length > 2) {
        throw Error('Unexpected non-binary associative function: ' + rule.toString());
      } else {
        // Incorrect number of arguments in rule and node, so no match
        return [];
      }
    } else if (rule instanceof SymbolNode) {
      // If the rule is a SymbolNode, then it carries a special meaning
      // according to the first character of the symbol node name.
      // c.* matches a ConstantNode
      // n.* matches any node
      if (rule.name.length === 0) {
        throw new Error('Symbol in rule has 0 length...!?');
      }

      if (SUPPORTED_CONSTANTS[rule.name]) {
        // built-in constant must match exactly
        if (rule.name !== node.name) {
          return [];
        }
      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
        // rule matches _anything_, so assign this node to the rule.name placeholder
        // Assign node to the rule.name placeholder.
        // Our parent will check for matches among placeholders.
        res[0].placeholders[rule.name] = node;
      } else if (rule.name[0] === 'v') {
        // rule matches any variable thing (not a ConstantNode)
        if (!(0, _is.isConstantNode)(node)) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting something other than a ConstantNode
          return [];
        }
      } else if (rule.name[0] === 'c') {
        // rule matches any ConstantNode
        if (node instanceof ConstantNode) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting a ConstantNode
          return [];
        }
      } else {
        throw new Error('Invalid symbol in rule: ' + rule.name);
      }
    } else if (rule instanceof ConstantNode) {
      // Literal constant must match exactly
      if (!equal(rule.value, node.value)) {
        return [];
      }
    } else {
      // Some other node was encountered which we aren't prepared for, so no match
      return [];
    } // It's a match!
    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


    return res;
  }
  /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */


  function _exactMatch(p, q) {
    if (p instanceof ConstantNode && q instanceof ConstantNode) {
      if (!equal(p.value, q.value)) {
        return false;
      }
    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
      if (p.name !== q.name) {
        return false;
      }
    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
      if (p instanceof OperatorNode) {
        if (p.op !== q.op || p.fn !== q.fn) {
          return false;
        }
      } else if (p instanceof FunctionNode) {
        if (p.name !== q.name) {
          return false;
        }
      }

      if (p.args.length !== q.args.length) {
        return false;
      }

      for (var i = 0; i < p.args.length; i++) {
        if (!_exactMatch(p.args[i], q.args[i])) {
          return false;
        }
      }
    } else {
      return false;
    }

    return true;
  }

  return simplify;
});
exports.createSimplify = createSimplify;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/resolve.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/simplify/resolve.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createResolve = void 0;

var _map = __webpack_require__(/*! ../../../utils/map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'resolve';
var dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
var createResolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var parse = _ref.parse,
      FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      ParenthesisNode = _ref.ParenthesisNode;

  /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */
  function resolve(node, scope) {
    if (!scope) {
      return node;
    }

    if (!(0, _map.isMap)(scope)) {
      scope = (0, _map.createMap)(scope);
    }

    if ((0, _is.isSymbolNode)(node)) {
      var value = scope.get(node.name);

      if ((0, _is.isNode)(value)) {
        return resolve(value, scope);
      } else if (typeof value === 'number') {
        return parse(String(value));
      }
    } else if ((0, _is.isOperatorNode)(node)) {
      var args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new OperatorNode(node.op, node.fn, args, node.implicit);
    } else if ((0, _is.isParenthesisNode)(node)) {
      return new ParenthesisNode(resolve(node.content, scope));
    } else if ((0, _is.isFunctionNode)(node)) {
      var _args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });

      return new FunctionNode(node.name, _args);
    }

    return node;
  }

  return resolve;
});
exports.createResolve = createResolve;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyConstant.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyConstant.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSimplifyConstant = void 0;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _util = __webpack_require__(/*! ./util.js */ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/util.js");

var _noop = __webpack_require__(/*! ../../../utils/noop.js */ "./node_modules/mathjs/lib/cjs/utils/noop.js");

// TODO this could be improved by simplifying seperated constants under associative and commutative operators
var name = 'simplifyConstant';
var dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];
var createSimplifyConstant = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      mathWithTransform = _ref.mathWithTransform,
      fraction = _ref.fraction,
      bignumber = _ref.bignumber,
      ConstantNode = _ref.ConstantNode,
      OperatorNode = _ref.OperatorNode,
      FunctionNode = _ref.FunctionNode,
      SymbolNode = _ref.SymbolNode;

  var _createUtil = (0, _util.createUtil)({
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    SymbolNode: SymbolNode
  }),
      isCommutative = _createUtil.isCommutative,
      isAssociative = _createUtil.isAssociative,
      allChildren = _createUtil.allChildren,
      createMakeNodeFunction = _createUtil.createMakeNodeFunction;

  function simplifyConstant(expr, options) {
    var res = foldFraction(expr, options);
    return (0, _is.isNode)(res) ? res : _toNode(res);
  }

  function _eval(fnname, args, options) {
    try {
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    } catch (ignore) {
      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
      args = args.map(function (x) {
        if ((0, _is.isFraction)(x)) {
          return x.valueOf();
        }

        return x;
      });
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    }
  }

  var _toNode = typed({
    Fraction: _fractionToNode,
    number: function number(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n);
    },
    BigNumber: function BigNumber(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n); // old parameters: (n.toString(), 'number')
    },
    Complex: function Complex(s) {
      throw new Error('Cannot convert Complex number to Node');
    }
  }); // convert a number to a fraction only if it can be expressed exactly,
  // and when both numerator and denominator are small enough


  function _exactFraction(n, options) {
    var exactFractions = options && options.exactFractions !== false;

    if (exactFractions && isFinite(n) && fraction) {
      var f = fraction(n);
      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default

      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {
        return f;
      }
    }

    return n;
  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
  // BigNumbers are left alone


  var _toNumber = typed({
    'string, Object': function stringObject(s, options) {
      if (config.number === 'BigNumber') {
        if (bignumber === undefined) {
          (0, _noop.noBignumber)();
        }

        return bignumber(s);
      } else if (config.number === 'Fraction') {
        if (fraction === undefined) {
          (0, _noop.noFraction)();
        }

        return fraction(s);
      } else {
        var n = parseFloat(s);
        return _exactFraction(n, options);
      }
    },
    'Fraction, Object': function FractionObject(s, options) {
      return s;
    },
    // we don't need options here
    'BigNumber, Object': function BigNumberObject(s, options) {
      return s;
    },
    // we don't need options here
    'number, Object': function numberObject(s, options) {
      return _exactFraction(s, options);
    },
    'Complex, Object': function ComplexObject(s, options) {
      if (s.im !== 0) {
        return s;
      }

      return _exactFraction(s.re, options);
    }
  });

  function unaryMinusNode(n) {
    return new OperatorNode('-', 'unaryMinus', [n]);
  }

  function _fractionToNode(f) {
    var n;
    var vn = f.s * f.n;

    if (vn < 0) {
      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
    } else {
      n = new ConstantNode(vn);
    }

    if (f.d === 1) {
      return n;
    }

    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
  }
  /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */


  function foldOp(fn, args, makeNode, options) {
    return args.reduce(function (a, b) {
      if (!(0, _is.isNode)(a) && !(0, _is.isNode)(b)) {
        try {
          return _eval(fn, [a, b], options);
        } catch (ignoreandcontinue) {}

        a = _toNode(a);
        b = _toNode(b);
      } else if (!(0, _is.isNode)(a)) {
        a = _toNode(a);
      } else if (!(0, _is.isNode)(b)) {
        b = _toNode(b);
      }

      return makeNode([a, b]);
    });
  } // destroys the original node and returns a folded one


  function foldFraction(node, options) {
    switch (node.type) {
      case 'SymbolNode':
        return node;

      case 'ConstantNode':
        if (typeof node.value === 'number' || !isNaN(node.value)) {
          return _toNumber(node.value, options);
        }

        return node;

      case 'FunctionNode':
        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
          return node;
        }

        {
          // Process operators as OperatorNode
          var operatorFunctions = ['add', 'multiply'];

          if (operatorFunctions.indexOf(node.name) === -1) {
            var args = node.args.map(function (arg) {
              return foldFraction(arg, options);
            }); // If all args are numbers

            if (!args.some(_is.isNode)) {
              try {
                return _eval(node.name, args, options);
              } catch (ignoreandcontine) {}
            } // Convert all args to nodes and construct a symbolic function call


            args = args.map(function (arg) {
              return (0, _is.isNode)(arg) ? arg : _toNode(arg);
            });
            return new FunctionNode(node.name, args);
          } else {// treat as operator
          }
        }

      /* falls through */

      case 'OperatorNode':
        {
          var fn = node.fn.toString();

          var _args;

          var res;
          var makeNode = createMakeNodeFunction(node);

          if ((0, _is.isOperatorNode)(node) && node.isUnary()) {
            _args = [foldFraction(node.args[0], options)];

            if (!(0, _is.isNode)(_args[0])) {
              res = _eval(fn, _args, options);
            } else {
              res = makeNode(_args);
            }
          } else if (isAssociative(node)) {
            _args = allChildren(node);
            _args = _args.map(function (arg) {
              return foldFraction(arg, options);
            });

            if (isCommutative(fn)) {
              // commutative binary operator
              var consts = [];
              var vars = [];

              for (var i = 0; i < _args.length; i++) {
                if (!(0, _is.isNode)(_args[i])) {
                  consts.push(_args[i]);
                } else {
                  vars.push(_args[i]);
                }
              }

              if (consts.length > 1) {
                res = foldOp(fn, consts, makeNode, options);
                vars.unshift(res);
                res = foldOp(fn, vars, makeNode, options);
              } else {
                // we won't change the children order since it's not neccessary
                res = foldOp(fn, _args, makeNode, options);
              }
            } else {
              // non-commutative binary operator
              res = foldOp(fn, _args, makeNode, options);
            }
          } else {
            // non-associative binary operator
            _args = node.args.map(function (arg) {
              return foldFraction(arg, options);
            });
            res = foldOp(fn, _args, makeNode, options);
          }

          return res;
        }

      case 'ParenthesisNode':
        // remove the uneccessary parenthesis
        return foldFraction(node.content, options);

      case 'AccessorNode':
      /* falls through */

      case 'ArrayNode':
      /* falls through */

      case 'AssignmentNode':
      /* falls through */

      case 'BlockNode':
      /* falls through */

      case 'FunctionAssignmentNode':
      /* falls through */

      case 'IndexNode':
      /* falls through */

      case 'ObjectNode':
      /* falls through */

      case 'RangeNode':
      /* falls through */

      case 'ConditionalNode':
      /* falls through */

      default:
        throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
    }
  }

  return simplifyConstant;
});
exports.createSimplifyConstant = createSimplifyConstant;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyCore.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/simplify/simplifyCore.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSimplifyCore = void 0;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'simplifyCore';
var dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];
var createSimplifyCore = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var equal = _ref.equal,
      isZero = _ref.isZero,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      pow = _ref.pow,
      ConstantNode = _ref.ConstantNode,
      OperatorNode = _ref.OperatorNode,
      FunctionNode = _ref.FunctionNode,
      ParenthesisNode = _ref.ParenthesisNode;
  var node0 = new ConstantNode(0);
  var node1 = new ConstantNode(1);
  /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simplifyCore(expr)
   *
   * Examples:
   *
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */

  function simplifyCore(node) {
    if ((0, _is.isOperatorNode)(node) && node.isUnary()) {
      var a0 = simplifyCore(node.args[0]);

      if (node.op === '+') {
        // unary plus
        return a0;
      }

      if (node.op === '-') {
        // unary minus
        if ((0, _is.isOperatorNode)(a0)) {
          if (a0.isUnary() && a0.op === '-') {
            return a0.args[0];
          } else if (a0.isBinary() && a0.fn === 'subtract') {
            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
          }
        }

        return new OperatorNode(node.op, node.fn, [a0]);
      }
    } else if ((0, _is.isOperatorNode)(node) && node.isBinary()) {
      var _a = simplifyCore(node.args[0]);

      var a1 = simplifyCore(node.args[1]);

      if (node.op === '+') {
        if ((0, _is.isConstantNode)(_a)) {
          if (isZero(_a.value)) {
            return a1;
          } else if ((0, _is.isConstantNode)(a1)) {
            return new ConstantNode(add(_a.value, a1.value));
          }
        }

        if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {
          return _a;
        }

        if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {
          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
        }

        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
      } else if (node.op === '-') {
        if ((0, _is.isConstantNode)(_a) && a1) {
          if ((0, _is.isConstantNode)(a1)) {
            return new ConstantNode(subtract(_a.value, a1.value));
          } else if (isZero(_a.value)) {
            return new OperatorNode('-', 'unaryMinus', [a1]);
          }
        } // if (node.fn === "subtract" && node.args.length === 2) {


        if (node.fn === 'subtract') {
          if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {
            return _a;
          }

          if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {
            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
          }

          return new OperatorNode(node.op, node.fn, [_a, a1]);
        }
      } else if (node.op === '*') {
        if ((0, _is.isConstantNode)(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if (equal(_a.value, 1)) {
            return a1;
          } else if ((0, _is.isConstantNode)(a1)) {
            return new ConstantNode(multiply(_a.value, a1.value));
          }
        }

        if ((0, _is.isConstantNode)(a1)) {
          if (isZero(a1.value)) {
            return node0;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === node.op) {
            var a00 = _a.args[0];

            if ((0, _is.isConstantNode)(a00)) {
              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
            }
          }

          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
        }

        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
      } else if (node.op === '/') {
        if ((0, _is.isConstantNode)(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if ((0, _is.isConstantNode)(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
            return new ConstantNode(divide(_a.value, a1.value));
          }
        }

        return new OperatorNode(node.op, node.fn, [_a, a1]);
      } else if (node.op === '^') {
        if ((0, _is.isConstantNode)(a1)) {
          if (isZero(a1.value)) {
            return node1;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else {
            if ((0, _is.isConstantNode)(_a)) {
              // fold constant
              return new ConstantNode(pow(_a.value, a1.value));
            } else if ((0, _is.isOperatorNode)(_a) && _a.isBinary() && _a.op === '^') {
              var a01 = _a.args[1];

              if ((0, _is.isConstantNode)(a01)) {
                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
              }
            }
          }
        }

        return new OperatorNode(node.op, node.fn, [_a, a1]);
      }
    } else if ((0, _is.isParenthesisNode)(node)) {
      var c = simplifyCore(node.content);

      if ((0, _is.isParenthesisNode)(c) || (0, _is.isSymbolNode)(c) || (0, _is.isConstantNode)(c)) {
        return c;
      }

      return new ParenthesisNode(c);
    } else if ((0, _is.isFunctionNode)(node)) {
      var args = node.args.map(simplifyCore).map(function (arg) {
        return (0, _is.isParenthesisNode)(arg) ? arg.content : arg;
      });
      return new FunctionNode(simplifyCore(node.fn), args);
    } else {// cannot simplify
    }

    return node;
  }

  return simplifyCore;
});
exports.createSimplifyCore = createSimplifyCore;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/simplify/util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/simplify/util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUtil = void 0;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var name = 'simplifyUtil';
var dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
var createUtil = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var FunctionNode = _ref.FunctionNode,
      OperatorNode = _ref.OperatorNode,
      SymbolNode = _ref.SymbolNode;
  // TODO commutative/associative properties rely on the arguments
  // e.g. multiply is not commutative for matrices
  // The properties should be calculated from an argument to simplify, or possibly something in math.config
  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
  var commutative = {
    add: true,
    multiply: true
  };
  var associative = {
    add: true,
    multiply: true
  };

  function isCommutative(node, context) {
    if (!(0, _is.isOperatorNode)(node)) {
      return true;
    }

    var name = node.fn.toString();

    if (context && (0, _object.hasOwnProperty)(context, name) && (0, _object.hasOwnProperty)(context[name], 'commutative')) {
      return context[name].commutative;
    }

    return commutative[name] || false;
  }

  function isAssociative(node, context) {
    if (!(0, _is.isOperatorNode)(node)) {
      return false;
    }

    var name = node.fn.toString();

    if (context && (0, _object.hasOwnProperty)(context, name) && (0, _object.hasOwnProperty)(context[name], 'associative')) {
      return context[name].associative;
    }

    return associative[name] || false;
  }
  /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */


  function flatten(node) {
    if (!node.args || node.args.length === 0) {
      return node;
    }

    node.args = allChildren(node);

    for (var i = 0; i < node.args.length; i++) {
      flatten(node.args[i]);
    }
  }
  /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */


  function allChildren(node) {
    var op;
    var children = [];

    var findChildren = function findChildren(node) {
      for (var i = 0; i < node.args.length; i++) {
        var child = node.args[i];

        if ((0, _is.isOperatorNode)(child) && op === child.op) {
          findChildren(child);
        } else {
          children.push(child);
        }
      }
    };

    if (isAssociative(node)) {
      op = node.op;
      findChildren(node);
      return children;
    } else {
      return node.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */


  function unflattenr(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;

    for (var i = 0; i < l; i++) {
      unflattenr(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.pop();

      while (node.args.length > 0) {
        curnode = makeNode([node.args.pop(), curnode]);
      }

      node.args = curnode.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */


  function unflattenl(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;

    for (var i = 0; i < l; i++) {
      unflattenl(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.shift();

      while (node.args.length > 0) {
        curnode = makeNode([curnode, node.args.shift()]);
      }

      node.args = curnode.args;
    }
  }

  function createMakeNodeFunction(node) {
    if ((0, _is.isOperatorNode)(node)) {
      return function (args) {
        try {
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } catch (err) {
          console.error(err);
          return [];
        }
      };
    } else {
      return function (args) {
        return new FunctionNode(new SymbolNode(node.name), args);
      };
    }
  }

  return {
    createMakeNodeFunction: createMakeNodeFunction,
    isCommutative: isCommutative,
    isAssociative: isAssociative,
    flatten: flatten,
    allChildren: allChildren,
    unflattenr: unflattenr,
    unflattenl: unflattenl
  };
});
exports.createUtil = createUtil;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/solver/lsolve.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/solver/lsolve.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLsolve = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _solveValidation = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js");

var name = 'lsolve';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lsolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var r = _denseForwardSubstitution(m, b);

      return r.valueOf();
    }
  });

  function _denseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = [];
    var mdata = m._data; // loop columns

    for (var j = 0; j < columns; j++) {
      var bj = bdata[j][0] || 0;
      var xj = void 0;

      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = mdata[j][j];

        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j + 1; i < rows; i++) {
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
        }
      } else {
        // degenerate row, we can choose any value
        xj = 0;
      }

      x[j] = [xj];
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result

    var x = []; // loop columns

    for (var j = 0; j < columns; j++) {
      var bj = bdata[j][0] || 0;

      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = 0; // matrix values & indices (column j)

        var jValues = [];
        var jIndices = []; // first and last index in the column

        var firstIndex = ptr[j];
        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]

        for (var k = firstIndex; k < lastIndex; k++) {
          var i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            vjj = values[k];
          } else if (i > j) {
            // store lower triangular
            jValues.push(values[k]);
            jIndices.push(i);
          }
        } // at this point we must have a value in vjj


        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        var xj = divideScalar(bj, vjj);

        for (var _k = 0, l = jIndices.length; _k < l; _k++) {
          var _i = jIndices[_k];
          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];
        }

        x[j] = [xj];
      } else {
        // degenerate row, we can choose any value
        x[j] = [0];
      }
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});
exports.createLsolve = createLsolve;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/solver/lsolveAll.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/solver/lsolveAll.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLsolveAll = void 0;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _solveValidation = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js");

var name = 'lsolveAll';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolveAll = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolveAll(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolveAll(a, b)  // [ [[-5.5], [20]] ]
   *
   * See also:
   *
   *    lsolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var R = _denseForwardSubstitution(m, b);

      return R.map(function (r) {
        return r.valueOf();
      });
    }
  });

  function _denseForwardSubstitution(m, b_) {
    // the algorithm is derived from
    // https://www.overleaf.com/read/csvgqdxggyjv
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var M = m._data;
    var rows = m._size[0];
    var columns = m._size[1]; // loop columns

    for (var i = 0; i < columns; i++) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k];

        if (!equalScalar(M[i][i], 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], M[i][i]);

          for (var j = i + 1; j < columns; j++) {
            // b[j] -= b[i] * M[j,i]
            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = (0, _toConsumableArray2["default"])(b);
          bNew[i] = 1;

          for (var _j = i + 1; _j < columns; _j++) {
            bNew[_j] = subtract(bNew[_j], M[_j][i]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }

  function _sparseForwardSubstitution(m, b_) {
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop columns

    for (var i = 0; i < columns; i++) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k]; // values & indices (column i)

        var iValues = [];
        var iIndices = []; // first & last indeces in column

        var firstIndex = ptr[i];
        var lastIndex = ptr[i + 1]; // find the value at [i, i]

        var Mii = 0;

        for (var j = firstIndex; j < lastIndex; j++) {
          var J = index[j]; // check row

          if (J === i) {
            Mii = values[j];
          } else if (J > i) {
            // store lower triangular
            iValues.push(values[j]);
            iIndices.push(J);
          }
        }

        if (!equalScalar(Mii, 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], Mii);

          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
            var _J = iIndices[_j2];
            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = (0, _toConsumableArray2["default"])(b);
          bNew[i] = 1;

          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
            var _J2 = iIndices[_j3];
            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }
});
exports.createLsolveAll = createLsolveAll;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/solver/lusolve.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/solver/lusolve.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLusolve = void 0;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _solveValidation = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js");

var _csIpvec = __webpack_require__(/*! ../sparse/csIpvec.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csIpvec.js");

var name = 'lusolve';
var dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
var createLusolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      lup = _ref.lup,
      slu = _ref.slu,
      usolve = _ref.usolve,
      lsolve = _ref.lsolve,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix: DenseMatrix
  });
  /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
   *
   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    const f = math.lup(m)
   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = math.lusolve(a, b)  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */

  return typed(name, {
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      a = matrix(a);
      var d = lup(a);

      var x = _lusolve(d.L, d.U, d.p, null, b);

      return x.valueOf();
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
      var d = lup(a);
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
      var d = lup(a);
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
      var d = slu(a, order, threshold);
      return _lusolve(d.L, d.U, d.p, d.q, b);
    },
    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
      return _lusolve(d.L, d.U, d.p, d.q, b);
    }
  });

  function _toMatrix(a) {
    if ((0, _is.isMatrix)(a)) {
      return a;
    }

    if ((0, _is.isArray)(a)) {
      return matrix(a);
    }

    throw new TypeError('Invalid Matrix LU decomposition');
  }

  function _lusolve(l, u, p, q, b) {
    // verify decomposition
    l = _toMatrix(l);
    u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)

    if (p) {
      b = solveValidation(l, b, true);
      b._data = (0, _csIpvec.csIpvec)(p, b._data);
    } // use forward substitution to resolve L * y = b


    var y = lsolve(l, b); // use backward substitution to resolve U * x = y

    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

    if (q) {
      x._data = (0, _csIpvec.csIpvec)(q, x._data);
    }

    return x;
  }
});
exports.createLusolve = createLusolve;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/solver/usolve.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/solver/usolve.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUsolve = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _solveValidation = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js");

var name = 'usolve';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [[8], [9]]
   *
   * See also:
   *
   *    usolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var r = _denseBackwardSubstitution(m, b);

      return r.valueOf();
    }
  });

  function _denseBackwardSubstitution(m, b) {
    // make b into a column vector
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = [];
    var mdata = m._data; // loop columns backwards

    for (var j = columns - 1; j >= 0; j--) {
      // b[j]
      var bj = bdata[j][0] || 0; // x[j]

      var xj = void 0;

      if (!equalScalar(bj, 0)) {
        // value at [j, j]
        var vjj = mdata[j][j];

        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j - 1; i >= 0; i--) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
        }
      } else {
        // zero value at j
        xj = 0;
      } // update x


      x[j] = [xj];
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseBackwardSubstitution(m, b) {
    // make b into a column vector
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result

    var x = []; // loop columns backwards

    for (var j = columns - 1; j >= 0; j--) {
      var bj = bdata[j][0] || 0;

      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = 0; // upper triangular matrix values & index (column j)

        var jValues = [];
        var jIndices = []; // first & last indeces in column

        var firstIndex = ptr[j];
        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards

        for (var k = lastIndex - 1; k >= firstIndex; k--) {
          var i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            vjj = values[k];
          } else if (i < j) {
            // store upper triangular
            jValues.push(values[k]);
            jIndices.push(i);
          }
        } // at this point we must have a value in vjj


        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }

        var xj = divideScalar(bj, vjj);

        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {
          var _i = jIndices[_k];
          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];
        }

        x[j] = [xj];
      } else {
        // degenerate row, we can choose any value
        x[j] = [0];
      }
    }

    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});
exports.createUsolve = createUsolve;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/solver/usolveAll.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/solver/usolveAll.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUsolveAll = void 0;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _solveValidation = __webpack_require__(/*! ./utils/solveValidation.js */ "./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js");

var name = 'usolveAll';
var dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolveAll = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      subtract = _ref.subtract,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolveAll(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolveAll(a, b)  // [ [[8], [9]] ]
   *
   * See also:
   *
   *    usolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);

      var R = _denseBackwardSubstitution(m, b);

      return R.map(function (r) {
        return r.valueOf();
      });
    }
  });

  function _denseBackwardSubstitution(m, b_) {
    // the algorithm is derived from
    // https://www.overleaf.com/read/csvgqdxggyjv
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var M = m._data;
    var rows = m._size[0];
    var columns = m._size[1]; // loop columns backwards

    for (var i = columns - 1; i >= 0; i--) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k];

        if (!equalScalar(M[i][i], 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], M[i][i]);

          for (var j = i - 1; j >= 0; j--) {
            // b[j] -= b[i] * M[j,i]
            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = (0, _toConsumableArray2["default"])(b);
          bNew[i] = 1;

          for (var _j = i - 1; _j >= 0; _j--) {
            bNew[_j] = subtract(bNew[_j], M[_j][i]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }

  function _sparseBackwardSubstitution(m, b_) {
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop columns backwards

    for (var i = columns - 1; i >= 0; i--) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k]; // values & indices (column i)

        var iValues = [];
        var iIndices = []; // first & last indeces in column

        var firstIndex = ptr[i];
        var lastIndex = ptr[i + 1]; // find the value at [i, i]

        var Mii = 0;

        for (var j = lastIndex - 1; j >= firstIndex; j--) {
          var J = index[j]; // check row

          if (J === i) {
            Mii = values[j];
          } else if (J < i) {
            // store upper triangular
            iValues.push(values[j]);
            iIndices.push(J);
          }
        }

        if (!equalScalar(Mii, 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], Mii); // loop upper triangular

          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
            var _J = iIndices[_j2];
            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = (0, _toConsumableArray2["default"])(b);
          bNew[i] = 1; // loop upper triangular

          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
            var _J2 = iIndices[_j3];
            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
          }

          B.push(bNew);
        }
      }
    }

    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }
});
exports.createUsolveAll = createUsolveAll;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/solver/utils/solveValidation.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSolveValidation = createSolveValidation;

var _is = __webpack_require__(/*! ../../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _string = __webpack_require__(/*! ../../../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

function createSolveValidation(_ref) {
  var DenseMatrix = _ref.DenseMatrix;

  /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
  return function solveValidation(m, b, copy) {
    var mSize = m.size();

    if (mSize.length !== 2) {
      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(mSize) + ')');
    }

    var rows = mSize[0];
    var columns = mSize[1];

    if (rows !== columns) {
      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(mSize) + ')');
    }

    var data = [];

    if ((0, _is.isMatrix)(b)) {
      var bSize = b.size();
      var bdata = b._data; // 1-dim vector

      if (bSize.length === 1) {
        if (bSize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        for (var i = 0; i < rows; i++) {
          data[i] = [bdata[i]];
        }

        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // 2-dim column


      if (bSize.length === 2) {
        if (bSize[0] !== rows || bSize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        if ((0, _is.isDenseMatrix)(b)) {
          if (copy) {
            data = [];

            for (var _i = 0; _i < rows; _i++) {
              data[_i] = [bdata[_i][0]];
            }

            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          }

          return b;
        }

        if ((0, _is.isSparseMatrix)(b)) {
          for (var _i2 = 0; _i2 < rows; _i2++) {
            data[_i2] = [0];
          }

          var values = b._values;
          var index = b._index;
          var ptr = b._ptr;

          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
            var _i3 = index[k];
            data[_i3][0] = values[k];
          }

          return new DenseMatrix({
            data: data,
            size: [rows, 1],
            datatype: b._datatype
          });
        }
      }

      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
    }

    if ((0, _is.isArray)(b)) {
      var bsize = (0, _array.arraySize)(b);

      if (bsize.length === 1) {
        if (bsize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        for (var _i4 = 0; _i4 < rows; _i4++) {
          data[_i4] = [b[_i4]];
        }

        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }

      if (bsize.length === 2) {
        if (bsize[0] !== rows || bsize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }

        for (var _i5 = 0; _i5 < rows; _i5++) {
          data[_i5] = [b[_i5][0]];
        }

        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }

      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
    }
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csAmd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csAmd.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsAmd = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _csFkeep = __webpack_require__(/*! ./csFkeep.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFkeep.js");

var _csFlip = __webpack_require__(/*! ./csFlip.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFlip.js");

var _csTdfs = __webpack_require__(/*! ./csTdfs.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csTdfs.js");

var name = 'csAmd';
var dependencies = ['add', 'multiply', 'transpose'];
var createCsAmd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var add = _ref.add,
      multiply = _ref.multiply,
      transpose = _ref.transpose;

  /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   */
  return function csAmd(order, a) {
    // check input parameters
    if (!a || order <= 0 || order > 3) {
      return null;
    } // a matrix arrays


    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // initialize vars

    var lemax = 0; // dense threshold

    var dense = Math.max(16, 10 * Math.sqrt(n));
    dense = Math.min(n - 2, dense); // create target matrix C

    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


    (0, _csFkeep.csFkeep)(cm, _diag, null); // C matrix arrays

    var cindex = cm._index;
    var cptr = cm._ptr; // number of nonzero elements in C

    var cnz = cptr[n]; // allocate result (n+1)

    var P = []; // create workspace (8 * (n + 1))

    var W = [];
    var len = 0; // first n + 1 entries

    var nv = n + 1; // next n + 1 entries

    var next = 2 * (n + 1); // next n + 1 entries

    var head = 3 * (n + 1); // next n + 1 entries

    var elen = 4 * (n + 1); // next n + 1 entries

    var degree = 5 * (n + 1); // next n + 1 entries

    var w = 6 * (n + 1); // next n + 1 entries

    var hhead = 7 * (n + 1); // last n + 1 entries
    // use P as workspace for last

    var last = P; // initialize quotient graph

    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


    var mindeg = 0; // vars

    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

    while (nel < n) {
      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
      // many nodes have been eliminated.
      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
        ;
      }

      if (W[next + k] !== -1) {
        last[W[next + k]] = -1;
      } // remove k from degree list


      W[head + mindeg] = W[next + k]; // elenk = |Ek|

      var elenk = W[elen + k]; // # of nodes k represents

      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
      // degree lists. All elements e in Ek are absorved into element k.

      var dk = 0; // flag k as in Lk

      W[nv + k] = -nvk;
      var p = cptr[k]; // do in place if W[elen + k] === 0

      var pk1 = elenk === 0 ? p : cnz;
      var pk2 = pk1;

      for (k1 = 1; k1 <= elenk + 1; k1++) {
        if (k1 > elenk) {
          // search the nodes in k
          e = k; // list of nodes starts at cindex[pj]

          pj = p; // length of list of nodes in k

          ln = W[len + k] - elenk;
        } else {
          // search the nodes in e
          e = cindex[p++];
          pj = cptr[e]; // length of list of nodes in e

          ln = W[len + e];
        }

        for (k2 = 1; k2 <= ln; k2++) {
          i = cindex[pj++]; // check  node i dead, or seen

          if ((nvi = W[nv + i]) <= 0) {
            continue;
          } // W[degree + Lk] += size of node i


          dk += nvi; // negate W[nv + i] to denote i in Lk

          W[nv + i] = -nvi; // place i in Lk

          cindex[pk2++] = i;

          if (W[next + i] !== -1) {
            last[W[next + i]] = last[i];
          } // check we need to remove i from degree list


          if (last[i] !== -1) {
            W[next + last[i]] = W[next + i];
          } else {
            W[head + W[degree + i]] = W[next + i];
          }
        }

        if (e !== k) {
          // absorb e into k
          cptr[e] = (0, _csFlip.csFlip)(k); // e is now a dead element

          W[w + e] = 0;
        }
      } // cindex[cnz...nzmax] is free


      if (elenk !== 0) {
        cnz = pk2;
      } // external degree of k - |Lk\i|


      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

      cptr[k] = pk1;
      W[len + k] = pk2 - pk1; // k is now an element

      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
      // scan, no entry in the w array is greater than or equal to mark.
      // clear w if necessary

      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check if W[elen + i] empty, skip it

        if ((eln = W[elen + i]) <= 0) {
          continue;
        } // W[nv + i] was negated


        nvi = -W[nv + i];
        var wnvi = mark - nvi; // scan Ei

        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
          e = cindex[p];

          if (W[w + e] >= mark) {
            // decrement |Le\Lk|
            W[w + e] -= nvi;
          } else if (W[w + e] !== 0) {
            // ensure e is a live element, 1st time e seen in scan 1
            W[w + e] = W[degree + e] + wnvi;
          }
        }
      } // degree update
      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
      // function h(i) for all nodes in Lk.
      // scan2: degree update


      for (pk = pk1; pk < pk2; pk++) {
        // consider node i in Lk
        i = cindex[pk];
        p1 = cptr[i];
        p2 = p1 + W[elen + i] - 1;
        pn = p1; // scan Ei

        for (h = 0, d = 0, p = p1; p <= p2; p++) {
          e = cindex[p]; // check e is an unabsorbed element

          if (W[w + e] !== 0) {
            // dext = |Le\Lk|
            var dext = W[w + e] - mark;

            if (dext > 0) {
              // sum up the set differences
              d += dext; // keep e in Ei

              cindex[pn++] = e; // compute the hash of node i

              h += e;
            } else {
              // aggressive absorb. e->k
              cptr[e] = (0, _csFlip.csFlip)(k); // e is a dead element

              W[w + e] = 0;
            }
          }
        } // W[elen + i] = |Ei|


        W[elen + i] = pn - p1 + 1;
        var p3 = pn;
        var p4 = p1 + W[len + i]; // prune edges in Ai

        for (p = p2 + 1; p < p4; p++) {
          j = cindex[p]; // check node j dead or in Lk

          var nvj = W[nv + j];

          if (nvj <= 0) {
            continue;
          } // degree(i) += |j|


          d += nvj; // place j in node list of i

          cindex[pn++] = j; // compute hash for node i

          h += j;
        } // check for mass elimination


        if (d === 0) {
          // absorb i into k
          cptr[i] = (0, _csFlip.csFlip)(k);
          nvi = -W[nv + i]; // |Lk| -= |i|

          dk -= nvi; // |k| += W[nv + i]

          nvk += nvi;
          nel += nvi;
          W[nv + i] = 0; // node i is dead

          W[elen + i] = -1;
        } else {
          // update degree(i)
          W[degree + i] = Math.min(W[degree + i], d); // move first node to end

          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

          cindex[p1] = k; // new len of adj. list of node i

          W[len + i] = pn - p1 + 1; // finalize hash of i

          h = (h < 0 ? -h : h) % n; // place i in hash bucket

          W[next + i] = W[hhead + h];
          W[hhead + h] = i; // save hash of i in last[i]

          last[i] = h;
        }
      } // finalize |Lk|


      W[degree + k] = dk;
      lemax = Math.max(lemax, dk); // clear w

      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
      // If two nodes have identical adjacency lists, their hash functions wil be identical.

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check i is dead, skip it

        if (W[nv + i] >= 0) {
          continue;
        } // scan hash bucket of node i


        h = last[i];
        i = W[hhead + h]; // hash bucket will be empty

        W[hhead + h] = -1;

        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
          ln = W[len + i];
          eln = W[elen + i];

          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
            W[w + cindex[p]] = mark;
          }

          var jlast = i; // compare i with all j

          for (j = W[next + i]; j !== -1;) {
            var ok = W[len + j] === ln && W[elen + j] === eln;

            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
              // compare i and j
              if (W[w + cindex[p]] !== mark) {
                ok = 0;
              }
            } // check i and j are identical


            if (ok) {
              // absorb j into i
              cptr[j] = (0, _csFlip.csFlip)(i);
              W[nv + i] += W[nv + j];
              W[nv + j] = 0; // node j is dead

              W[elen + j] = -1; // delete j from hash bucket

              j = W[next + j];
              W[next + jlast] = j;
            } else {
              // j and i are different
              jlast = j;
              j = W[next + j];
            }
          }
        }
      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


      for (p = pk1, pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check  i is dead, skip it

        if ((nvi = -W[nv + i]) <= 0) {
          continue;
        } // restore W[nv + i]


        W[nv + i] = nvi; // compute external degree(i)

        d = W[degree + i] + dk - nvi;
        d = Math.min(d, n - nel - nvi);

        if (W[head + d] !== -1) {
          last[W[head + d]] = i;
        } // put i back in degree list


        W[next + i] = W[head + d];
        last[i] = -1;
        W[head + d] = i; // find new minimum degree

        mindeg = Math.min(mindeg, d);
        W[degree + i] = d; // place i in Lk

        cindex[p++] = i;
      } // # nodes absorbed into k


      W[nv + k] = nvk; // length of adj list of element k

      if ((W[len + k] = p - pk1) === 0) {
        // k is a root of the tree
        cptr[k] = -1; // k is now a dead element

        W[w + k] = 0;
      }

      if (elenk !== 0) {
        // free unused space in Lk
        cnz = p;
      }
    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
    // is computed. The tree is restored by unflipping all of ptr.
    // fix assembly tree


    for (i = 0; i < n; i++) {
      cptr[i] = (0, _csFlip.csFlip)(cptr[i]);
    }

    for (j = 0; j <= n; j++) {
      W[head + j] = -1;
    } // place unordered nodes in lists


    for (j = n; j >= 0; j--) {
      // skip if j is an element
      if (W[nv + j] > 0) {
        continue;
      } // place j in list of its parent


      W[next + j] = W[head + cptr[j]];
      W[head + cptr[j]] = j;
    } // place elements in lists


    for (e = n; e >= 0; e--) {
      // skip unless e is an element
      if (W[nv + e] <= 0) {
        continue;
      }

      if (cptr[e] !== -1) {
        // place e in list of its parent
        W[next + e] = W[head + cptr[e]];
        W[head + cptr[e]] = e;
      }
    } // postorder the assembly tree


    for (k = 0, i = 0; i <= n; i++) {
      if (cptr[i] === -1) {
        k = (0, _csTdfs.csTdfs)(i, k, W, head, next, P, w);
      }
    } // remove last item in array


    P.splice(P.length - 1, 1); // return P

    return P;
  };
  /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   *
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */

  function _createTargetMatrix(order, a, m, n, dense) {
    // compute A'
    var at = transpose(a); // check order = 1, matrix must be square

    if (order === 1 && n === m) {
      // C = A + A'
      return add(a, at);
    } // check order = 2, drop dense columns from M'


    if (order === 2) {
      // transpose arrays
      var tindex = at._index;
      var tptr = at._ptr; // new column index

      var p2 = 0; // loop A' columns (rows)

      for (var j = 0; j < m; j++) {
        // column j of AT starts here
        var p = tptr[j]; // new column j starts here

        tptr[j] = p2; // skip dense col j

        if (tptr[j + 1] - p > dense) {
          continue;
        } // map rows in column j of A


        for (var p1 = tptr[j + 1]; p < p1; p++) {
          tindex[p2++] = tindex[p];
        }
      } // finalize AT


      tptr[m] = p2; // recreate A from new transpose matrix

      a = transpose(at); // use A' * A

      return multiply(at, a);
    } // use A' * A, square or rectangular matrix


    return multiply(at, a);
  }
  /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */


  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
    // Initialize quotient graph
    for (var k = 0; k < n; k++) {
      W[len + k] = cptr[k + 1] - cptr[k];
    }

    W[len + n] = 0; // initialize workspace

    for (var i = 0; i <= n; i++) {
      // degree list i is empty
      W[head + i] = -1;
      last[i] = -1;
      W[next + i] = -1; // hash list i is empty

      W[hhead + i] = -1; // node i is just one node

      W[nv + i] = 1; // node i is alive

      W[w + i] = 1; // Ek of node i is empty

      W[elen + i] = 0; // degree of node i

      W[degree + i] = W[len + i];
    } // clear w


    var mark = _wclear(0, 0, W, w, n); // n is a dead element


    W[elen + n] = -2; // n is a root of assembly tree

    cptr[n] = -1; // n is a dead element

    W[w + n] = 0; // return mark

    return mark;
  }
  /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */


  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
    // result
    var nel = 0; // loop columns

    for (var i = 0; i < n; i++) {
      // degree @ i
      var d = W[degree + i]; // check node i is empty

      if (d === 0) {
        // element i is dead
        W[elen + i] = -2;
        nel++; // i is a root of assembly tree

        cptr[i] = -1;
        W[w + i] = 0;
      } else if (d > dense) {
        // absorb i into element n
        W[nv + i] = 0; // node i is dead

        W[elen + i] = -1;
        nel++;
        cptr[i] = (0, _csFlip.csFlip)(n);
        W[nv + n]++;
      } else {
        var h = W[head + d];

        if (h !== -1) {
          last[h] = i;
        } // put node i in degree list d


        W[next + i] = W[head + d];
        W[head + d] = i;
      }
    }

    return nel;
  }

  function _wclear(mark, lemax, W, w, n) {
    if (mark < 2 || mark + lemax < 0) {
      for (var k = 0; k < n; k++) {
        if (W[w + k] !== 0) {
          W[w + k] = 1;
        }
      }

      mark = 2;
    } // at this point, W [0..n-1] < mark holds


    return mark;
  }

  function _diag(i, j) {
    return i !== j;
  }
});
exports.createCsAmd = createCsAmd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csCounts.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csCounts.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsCounts = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _csLeaf = __webpack_require__(/*! ./csLeaf.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csLeaf.js");

var name = 'csCounts';
var dependencies = ['transpose'];
var createCsCounts = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var transpose = _ref.transpose;

  /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function (a, parent, post, ata) {
    // check inputs
    if (!a || !parent || !post) {
      return null;
    } // a matrix arrays


    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // variables

    var i, j, k, J, p, p0, p1; // workspace size

    var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

    var w = []; // (s)

    var ancestor = 0; // first n entries

    var maxfirst = n; // next n entries

    var prevleaf = 2 * n; // next n entries

    var first = 3 * n; // next n entries

    var head = 4 * n; // next n + 1 entries (used when ata is true)

    var next = 5 * n + 1; // last entries in workspace
    // clear workspace w[0..s-1]

    for (k = 0; k < s; k++) {
      w[k] = -1;
    } // allocate result


    var colcount = []; // (n)
    // AT = A'

    var at = transpose(a); // at arrays

    var tindex = at._index;
    var tptr = at._ptr; // find w[first + j]

    for (k = 0; k < n; k++) {
      j = post[k]; // colcount[j]=1 if j is a leaf

      colcount[j] = w[first + j] === -1 ? 1 : 0;

      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
        w[first + j] = k;
      }
    } // initialize ata if needed


    if (ata) {
      // invert post
      for (k = 0; k < n; k++) {
        w[post[k]] = k;
      } // loop rows (columns in AT)


      for (i = 0; i < m; i++) {
        // values in column i of AT
        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
          k = Math.min(k, w[tindex[p]]);
        } // place row i in linked list k


        w[next + i] = w[head + k];
        w[head + k] = i;
      }
    } // each node in its own set


    for (i = 0; i < n; i++) {
      w[ancestor + i] = i;
    }

    for (k = 0; k < n; k++) {
      // j is the kth node in postordered etree
      j = post[k]; // check j is not a root

      if (parent[j] !== -1) {
        colcount[parent[j]]--;
      } // J=j for LL'=A case


      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
        for (p = tptr[J]; p < tptr[J + 1]; p++) {
          i = tindex[p];
          var r = (0, _csLeaf.csLeaf)(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

          if (r.jleaf >= 1) {
            colcount[j]++;
          } // check account for overlap in q


          if (r.jleaf === 2) {
            colcount[r.q]--;
          }
        }
      }

      if (parent[j] !== -1) {
        w[ancestor + j] = parent[j];
      }
    } // sum up colcount's of each child


    for (j = 0; j < n; j++) {
      if (parent[j] !== -1) {
        colcount[parent[j]] += colcount[j];
      }
    }

    return colcount;
  };
});
exports.createCsCounts = createCsCounts;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csDfs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csDfs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csDfs = csDfs;

var _csMarked = __webpack_require__(/*! ./csMarked.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMarked.js");

var _csMark = __webpack_require__(/*! ./csMark.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMark.js");

var _csUnflip = __webpack_require__(/*! ./csUnflip.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csUnflip.js");

/**
 * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
 * at nodes in B (see csReach()).
 *
 * @param {Number}  j               The starting node for the DFS algorithm
 * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
 * @param {Number}  top             Start index in stack xi[top..n-1]
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
 *
 * @return {Number}                 New value of top
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csDfs(j, g, top, xi, pinv) {
  // g arrays
  var index = g._index;
  var ptr = g._ptr;
  var size = g._size; // columns

  var n = size[1]; // vars

  var i, p, p2; // initialize head

  var head = 0; // initialize the recursion stack

  xi[0] = j; // loop

  while (head >= 0) {
    // get j from the top of the recursion stack
    j = xi[head]; // apply permutation vector

    var jnew = pinv ? pinv[j] : j; // check node j is marked

    if (!(0, _csMarked.csMarked)(ptr, j)) {
      // mark node j as visited
      (0, _csMark.csMark)(ptr, j); // update stack (last n entries in xi)

      xi[n + head] = jnew < 0 ? 0 : (0, _csUnflip.csUnflip)(ptr[jnew]);
    } // node j done if no unvisited neighbors


    var done = 1; // examine all neighbors of j, stack (last n entries in xi)

    for (p = xi[n + head], p2 = jnew < 0 ? 0 : (0, _csUnflip.csUnflip)(ptr[jnew + 1]); p < p2; p++) {
      // consider neighbor node i
      i = index[p]; // check we have visited node i, skip it

      if ((0, _csMarked.csMarked)(ptr, i)) {
        continue;
      } // pause depth-first search of node j, update stack (last n entries in xi)


      xi[n + head] = p; // start dfs at node i

      xi[++head] = i; // node j is not done

      done = 0; // break, to start dfs(i)

      break;
    } // check depth-first search at node j is done


    if (done) {
      // remove j from the recursion stack
      head--; // and place in the output stack

      xi[--top] = j;
    }
  }

  return top;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csEtree.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csEtree.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csEtree = csEtree;

/**
 * Computes the elimination tree of Matrix A (using triu(A)) or the
 * elimination tree of A'A without forming A'A.
 *
 * @param {Matrix}  a               The A Matrix
 * @param {boolean} ata             A value of true the function computes the etree of A'A
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csEtree(a, ata) {
  // check inputs
  if (!a) {
    return null;
  } // a arrays


  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // rows & columns

  var m = asize[0];
  var n = asize[1]; // allocate result

  var parent = []; // (n)
  // allocate workspace

  var w = []; // (n + (ata ? m : 0))

  var ancestor = 0; // first n entries in w

  var prev = n; // last m entries (ata = true)

  var i, inext; // check we are calculating A'A

  if (ata) {
    // initialize workspace
    for (i = 0; i < m; i++) {
      w[prev + i] = -1;
    }
  } // loop columns


  for (var k = 0; k < n; k++) {
    // node k has no parent yet
    parent[k] = -1; // nor does k have an ancestor

    w[ancestor + k] = -1; // values in column k

    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
      // row
      var r = aindex[p]; // node

      i = ata ? w[prev + r] : r; // traverse from i to k

      for (; i !== -1 && i < k; i = inext) {
        // inext = ancestor of i
        inext = w[ancestor + i]; // path compression

        w[ancestor + i] = k; // check no anc., parent is k

        if (inext === -1) {
          parent[i] = k;
        }
      }

      if (ata) {
        w[prev + r] = k;
      }
    }
  }

  return parent;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFkeep.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFkeep.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csFkeep = csFkeep;

/**
 * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
 *
 * @param {Matrix}   a              The sparse matrix
 * @param {function} callback       The callback function, function will be invoked with the following args:
 *                                    - The entry row
 *                                    - The entry column
 *                                    - The entry value
 *                                    - The state parameter
 * @param {any}      other          The state
 *
 * @return                          The number of nonzero elements in the matrix
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFkeep(a, callback, other) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // columns

  var n = asize[1]; // nonzero items

  var nz = 0; // loop columns

  for (var j = 0; j < n; j++) {
    // get current location of col j
    var p = aptr[j]; // record new location of col j

    aptr[j] = nz;

    for (; p < aptr[j + 1]; p++) {
      // check we need to keep this item
      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
        // keep A(i,j)
        aindex[nz] = aindex[p]; // check we need to process values (pattern only)

        if (avalues) {
          avalues[nz] = avalues[p];
        } // increment nonzero items


        nz++;
      }
    }
  } // finalize A


  aptr[n] = nz; // trim arrays

  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

  if (avalues) {
    avalues.splice(nz, avalues.length - nz);
  } // return number of nonzero items


  return nz;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFlip.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFlip.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csFlip = csFlip;

/**
 * This function "flips" its input about the integer -1.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFlip(i) {
  // flip the value
  return -i - 2;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csIpvec.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csIpvec.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csIpvec = csIpvec;

/**
 * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
 *
 * @param {Array} p           The permutation vector of length n. null value denotes identity
 * @param {Array} b           The input vector
 *
 * @return {Array}            The output vector x = P'b
 */
function csIpvec(p, b) {
  // vars
  var k;
  var n = b.length;
  var x = []; // check permutation vector was provided, p = null denotes identity

  if (p) {
    // loop vector
    for (k = 0; k < n; k++) {
      // apply permutation
      x[p[k]] = b[k];
    }
  } else {
    // loop vector
    for (k = 0; k < n; k++) {
      // x[i] = b[i]
      x[k] = b[k];
    }
  }

  return x;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csLeaf.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csLeaf.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csLeaf = csLeaf;

/**
 * This function determines if j is a leaf of the ith row subtree.
 * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
 *
 * @param {Number}  i               The ith row subtree
 * @param {Number}  j               The node to test
 * @param {Array}   w               The workspace array
 * @param {Number}  first           The index offset within the workspace for the first array
 * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
 * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
 * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
 *
 * @return {Object}
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
  var s, sparent; // our result

  var jleaf = 0;
  var q; // check j is a leaf

  if (i <= j || w[first + j] <= w[maxfirst + i]) {
    return -1;
  } // update max first[j] seen so far


  w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

  var jprev = w[prevleaf + i];
  w[prevleaf + i] = j; // check j is first or subsequent leaf

  if (jprev === -1) {
    // 1st leaf, q = root of ith subtree
    jleaf = 1;
    q = i;
  } else {
    // update jleaf
    jleaf = 2; // q = least common ancester (jprev,j)

    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
      ;
    }

    for (s = jprev; s !== q; s = sparent) {
      // path compression
      sparent = w[ancestor + s];
      w[ancestor + s] = q;
    }
  }

  return {
    jleaf: jleaf,
    q: q
  };
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csLu.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csLu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsLu = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _csSpsolve = __webpack_require__(/*! ./csSpsolve.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csSpsolve.js");

var name = 'csLu';
var dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createCsLu = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var abs = _ref.abs,
      divideScalar = _ref.divideScalar,
      multiply = _ref.multiply,
      subtract = _ref.subtract,
      larger = _ref.larger,
      largerEq = _ref.largerEq,
      SparseMatrix = _ref.SparseMatrix;
  var csSpsolve = (0, _csSpsolve.createCsSpsolve)({
    divideScalar: divideScalar,
    multiply: multiply,
    subtract: subtract
  });
  /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csLu(m, s, tol) {
    // validate input
    if (!m) {
      return null;
    } // m arrays


    var size = m._size; // columns

    var n = size[1]; // symbolic analysis result

    var q;
    var lnz = 100;
    var unz = 100; // update symbolic analysis parameters

    if (s) {
      q = s.q;
      lnz = s.lnz || lnz;
      unz = s.unz || unz;
    } // L arrays


    var lvalues = []; // (lnz)

    var lindex = []; // (lnz)

    var lptr = []; // (n + 1)
    // L

    var L = new SparseMatrix({
      values: lvalues,
      index: lindex,
      ptr: lptr,
      size: [n, n]
    }); // U arrays

    var uvalues = []; // (unz)

    var uindex = []; // (unz)

    var uptr = []; // (n + 1)
    // U

    var U = new SparseMatrix({
      values: uvalues,
      index: uindex,
      ptr: uptr,
      size: [n, n]
    }); // inverse of permutation vector

    var pinv = []; // (n)
    // vars

    var i, p; // allocate arrays

    var x = []; // (n)

    var xi = []; // (2 * n)
    // initialize variables

    for (i = 0; i < n; i++) {
      // clear workspace
      x[i] = 0; // no rows pivotal yet

      pinv[i] = -1; // no cols of L yet

      lptr[i + 1] = 0;
    } // reset number of nonzero elements in L and U


    lnz = 0;
    unz = 0; // compute L(:,k) and U(:,k)

    for (var k = 0; k < n; k++) {
      // update ptr
      lptr[k] = lnz;
      uptr[k] = unz; // apply column permutations if needed

      var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

      var ipiv = -1;
      var a = -1; // loop xi[] from top -> n

      for (p = top; p < n; p++) {
        // x[i] is nonzero
        i = xi[p]; // check row i is not yet pivotal

        if (pinv[i] < 0) {
          // absolute value of x[i]
          var xabs = abs(x[i]); // check absoulte value is greater than pivot value

          if (larger(xabs, a)) {
            // largest pivot candidate so far
            a = xabs;
            ipiv = i;
          }
        } else {
          // x(i) is the entry U(pinv[i],k)
          uindex[unz] = pinv[i];
          uvalues[unz++] = x[i];
        }
      } // validate we found a valid pivot


      if (ipiv === -1 || a <= 0) {
        return null;
      } // update actual pivot column, give preference to diagonal value


      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
        ipiv = col;
      } // the chosen pivot


      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

      uindex[unz] = k;
      uvalues[unz++] = pivot; // ipiv is the kth pivot row

      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

      lindex[lnz] = ipiv;
      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

      for (p = top; p < n; p++) {
        // row
        i = xi[p]; // check x(i) is an entry in L(:,k)

        if (pinv[i] < 0) {
          // save unpermuted row in L
          lindex[lnz] = i; // scale pivot column

          lvalues[lnz++] = divideScalar(x[i], pivot);
        } // x[0..n-1] = 0 for next k


        x[i] = 0;
      }
    } // update ptr


    lptr[n] = lnz;
    uptr[n] = unz; // fix row indices of L for final pinv

    for (p = 0; p < lnz; p++) {
      lindex[p] = pinv[lindex[p]];
    } // trim arrays


    lvalues.splice(lnz, lvalues.length - lnz);
    lindex.splice(lnz, lindex.length - lnz);
    uvalues.splice(unz, uvalues.length - unz);
    uindex.splice(unz, uindex.length - unz); // return LU factor

    return {
      L: L,
      U: U,
      pinv: pinv
    };
  };
});
exports.createCsLu = createCsLu;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMark.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMark.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csMark = csMark;

var _csFlip = __webpack_require__(/*! ./csFlip.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFlip.js");

/**
 * Marks the node at w[j]
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMark(w, j) {
  // mark w[j]
  w[j] = (0, _csFlip.csFlip)(w[j]);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMarked.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMarked.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csMarked = csMarked;

/**
 * Checks if the node at w[j] is marked
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMarked(w, j) {
  // check node is marked
  return w[j] < 0;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csPermute.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csPermute.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csPermute = csPermute;

/**
 * Permutes a sparse matrix C = P * A * Q
 *
 * @param {SparseMatrix}  a         The Matrix A
 * @param {Array}   pinv            The row permutation vector
 * @param {Array}   q               The column permutation vector
 * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
 *
 * @return {Matrix}                 C = P * A * Q, null on error
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPermute(a, pinv, q, values) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size;
  var adt = a._datatype; // rows & columns

  var m = asize[0];
  var n = asize[1]; // c arrays

  var cvalues = values && a._values ? [] : null;
  var cindex = []; // (aptr[n])

  var cptr = []; // (n + 1)
  // initialize vars

  var nz = 0; // loop columns

  for (var k = 0; k < n; k++) {
    // column k of C is column q[k] of A
    cptr[k] = nz; // apply column permutation

    var j = q ? q[k] : k; // loop values in column j of A

    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
      // row i of A is row pinv[i] of C
      var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

      cindex[nz] = r; // check we need to populate values

      if (cvalues) {
        cvalues[nz] = avalues[t];
      } // increment number of nonzero elements


      nz++;
    }
  } // finalize the last column of C


  cptr[n] = nz; // return C matrix

  return a.createSparseMatrix({
    values: cvalues,
    index: cindex,
    ptr: cptr,
    size: [m, n],
    datatype: adt
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csPost.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csPost.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csPost = csPost;

var _csTdfs = __webpack_require__(/*! ./csTdfs.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csTdfs.js");

/**
 * Post order a tree of forest
 *
 * @param {Array}   parent          The tree or forest
 * @param {Number}  n               Number of columns
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPost(parent, n) {
  // check inputs
  if (!parent) {
    return null;
  } // vars


  var k = 0;
  var j; // allocate result

  var post = []; // (n)
  // workspace, head: first n entries, next: next n entries, stack: last n entries

  var w = []; // (3 * n)

  var head = 0;
  var next = n;
  var stack = 2 * n; // initialize workspace

  for (j = 0; j < n; j++) {
    // empty linked lists
    w[head + j] = -1;
  } // traverse nodes in reverse order


  for (j = n - 1; j >= 0; j--) {
    // check j is a root
    if (parent[j] === -1) {
      continue;
    } // add j to list of its parent


    w[next + j] = w[head + parent[j]];
    w[head + parent[j]] = j;
  } // loop nodes


  for (j = 0; j < n; j++) {
    // skip j if it is not a root
    if (parent[j] !== -1) {
      continue;
    } // depth-first search


    k = (0, _csTdfs.csTdfs)(j, k, w, head, next, post, stack);
  }

  return post;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csReach.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csReach.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csReach = csReach;

var _csMarked = __webpack_require__(/*! ./csMarked.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMarked.js");

var _csMark = __webpack_require__(/*! ./csMark.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csMark.js");

var _csDfs = __webpack_require__(/*! ./csDfs.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csDfs.js");

/**
 * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
 * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
 * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
 *
 * @param {Matrix}  g               The G matrix
 * @param {Matrix}  b               The B matrix
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector
 *
 * @return {Number}                 The index for the nonzero pattern
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csReach(g, b, k, xi, pinv) {
  // g arrays
  var gptr = g._ptr;
  var gsize = g._size; // b arrays

  var bindex = b._index;
  var bptr = b._ptr; // columns

  var n = gsize[1]; // vars

  var p, p0, p1; // initialize top

  var top = n; // loop column indeces in B

  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
    // node i
    var i = bindex[p]; // check node i is marked

    if (!(0, _csMarked.csMarked)(gptr, i)) {
      // start a dfs at unmarked node i
      top = (0, _csDfs.csDfs)(i, g, top, xi, pinv);
    }
  } // loop columns from top -> n - 1


  for (p = top; p < n; p++) {
    // restore G
    (0, _csMark.csMark)(gptr, xi[p]);
  }

  return top;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csSpsolve.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csSpsolve.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsSpsolve = void 0;

var _csReach = __webpack_require__(/*! ./csReach.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csReach.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'csSpsolve';
var dependencies = ['divideScalar', 'multiply', 'subtract'];
var createCsSpsolve = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var divideScalar = _ref.divideScalar,
      multiply = _ref.multiply,
      subtract = _ref.subtract;

  /**
   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function csSpsolve(g, b, k, xi, x, pinv, lo) {
    // g arrays
    var gvalues = g._values;
    var gindex = g._index;
    var gptr = g._ptr;
    var gsize = g._size; // columns

    var n = gsize[1]; // b arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr; // vars

    var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

    var top = (0, _csReach.csReach)(g, b, k, xi, pinv); // clear x

    for (p = top; p < n; p++) {
      x[xi[p]] = 0;
    } // scatter b


    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
      x[bindex[p]] = bvalues[p];
    } // loop columns


    for (var px = top; px < n; px++) {
      // x array index for px
      var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

      var J = pinv ? pinv[j] : j; // check column J is empty

      if (J < 0) {
        continue;
      } // column value indeces in G, p0 <= p < p1


      p0 = gptr[J];
      p1 = gptr[J + 1]; // x(j) /= G(j,j)

      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

      p = lo ? p0 + 1 : p0;
      q = lo ? p1 : p1 - 1; // loop

      for (; p < q; p++) {
        // row
        var i = gindex[p]; // x(i) -= G(i,j) * x(j)

        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
      }
    } // return top of stack


    return top;
  };
});
exports.createCsSpsolve = createCsSpsolve;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csSqr.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csSqr.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsSqr = void 0;

var _csPermute = __webpack_require__(/*! ./csPermute.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csPermute.js");

var _csPost = __webpack_require__(/*! ./csPost.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csPost.js");

var _csEtree = __webpack_require__(/*! ./csEtree.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csEtree.js");

var _csAmd = __webpack_require__(/*! ./csAmd.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csAmd.js");

var _csCounts = __webpack_require__(/*! ./csCounts.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csCounts.js");

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'csSqr';
var dependencies = ['add', 'multiply', 'transpose'];
var createCsSqr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var add = _ref.add,
      multiply = _ref.multiply,
      transpose = _ref.transpose;
  var csAmd = (0, _csAmd.createCsAmd)({
    add: add,
    multiply: multiply,
    transpose: transpose
  });
  var csCounts = (0, _csCounts.createCsCounts)({
    transpose: transpose
  });
  /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see csAmd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csSqr(order, a, qr) {
    // a arrays
    var aptr = a._ptr;
    var asize = a._size; // columns

    var n = asize[1]; // vars

    var k; // symbolic analysis result

    var s = {}; // fill-reducing ordering

    s.q = csAmd(order, a); // validate results

    if (order && !s.q) {
      return null;
    } // QR symbolic analysis


    if (qr) {
      // apply permutations if needed
      var c = order ? (0, _csPermute.csPermute)(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

      s.parent = (0, _csEtree.csEtree)(c, 1); // post order elimination tree

      var post = (0, _csPost.csPost)(s.parent, n); // col counts chol(C'*C)

      s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

      if (c && s.parent && s.cp && _vcount(c, s)) {
        // calculate number of nonzero elements
        for (s.unz = 0, k = 0; k < n; k++) {
          s.unz += s.cp[k];
        }
      }
    } else {
      // for LU factorization only, guess nnz(L) and nnz(U)
      s.unz = 4 * aptr[n] + n;
      s.lnz = s.unz;
    } // return result S


    return s;
  };
  /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */

  function _vcount(a, s) {
    // a arrays
    var aptr = a._ptr;
    var aindex = a._index;
    var asize = a._size; // rows & columns

    var m = asize[0];
    var n = asize[1]; // initialize s arrays

    s.pinv = []; // (m + n)

    s.leftmost = []; // (m)
    // vars

    var parent = s.parent;
    var pinv = s.pinv;
    var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

    var w = []; // (m + 3 * n)

    var next = 0;
    var head = m;
    var tail = m + n;
    var nque = m + 2 * n; // vars

    var i, k, p, p0, p1; // initialize w

    for (k = 0; k < n; k++) {
      // queue k is empty
      w[head + k] = -1;
      w[tail + k] = -1;
      w[nque + k] = 0;
    } // initialize row arrays


    for (i = 0; i < m; i++) {
      leftmost[i] = -1;
    } // loop columns backwards


    for (k = n - 1; k >= 0; k--) {
      // values & index for column k
      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // leftmost[i] = min(find(A(i,:)))
        leftmost[aindex[p]] = k;
      }
    } // scan rows in reverse order


    for (i = m - 1; i >= 0; i--) {
      // row i is not yet ordered
      pinv[i] = -1;
      k = leftmost[i]; // check row i is empty

      if (k === -1) {
        continue;
      } // first row in queue k


      if (w[nque + k]++ === 0) {
        w[tail + k] = i;
      } // put i at head of queue k


      w[next + i] = w[head + k];
      w[head + k] = i;
    }

    s.lnz = 0;
    s.m2 = m; // find row permutation and nnz(V)

    for (k = 0; k < n; k++) {
      // remove row i from queue k
      i = w[head + k]; // count V(k,k) as nonzero

      s.lnz++; // add a fictitious row

      if (i < 0) {
        i = s.m2++;
      } // associate row i with V(:,k)


      pinv[i] = k; // skip if V(k+1:m,k) is empty

      if (--nque[k] <= 0) {
        continue;
      } // nque[k] is nnz (V(k+1:m,k))


      s.lnz += w[nque + k]; // move all rows to parent of k

      var pa = parent[k];

      if (pa !== -1) {
        if (w[nque + pa] === 0) {
          w[tail + pa] = w[tail + k];
        }

        w[next + w[tail + k]] = w[head + pa];
        w[head + pa] = w[next + i];
        w[nque + pa] += w[nque + k];
      }
    }

    for (i = 0; i < m; i++) {
      if (pinv[i] < 0) {
        pinv[i] = k++;
      }
    }

    return true;
  }
});
exports.createCsSqr = createCsSqr;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csTdfs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csTdfs.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csTdfs = csTdfs;

/**
 * Depth-first search and postorder of a tree rooted at node j
 *
 * @param {Number}  j               The tree node
 * @param {Number}  k
 * @param {Array}   w               The workspace array
 * @param {Number}  head            The index offset within the workspace for the head array
 * @param {Number}  next            The index offset within the workspace for the next array
 * @param {Array}   post            The post ordering array
 * @param {Number}  stack           The index offset within the workspace for the stack array
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csTdfs(j, k, w, head, next, post, stack) {
  // variables
  var top = 0; // place j on the stack

  w[stack] = j; // while (stack is not empty)

  while (top >= 0) {
    // p = top of stack
    var p = w[stack + top]; // i = youngest child of p

    var i = w[head + p];

    if (i === -1) {
      // p has no unordered children left
      top--; // node p is the kth postordered node

      post[k++] = p;
    } else {
      // remove i from children of p
      w[head + p] = w[next + i]; // increment top

      ++top; // start dfs on child node i

      w[stack + top] = i;
    }
  }

  return k;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csUnflip.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/algebra/sparse/csUnflip.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.csUnflip = csUnflip;

var _csFlip = __webpack_require__(/*! ./csFlip.js */ "./node_modules/mathjs/lib/cjs/function/algebra/sparse/csFlip.js");

/**
 * Flips the value if it is negative of returns the same value otherwise.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csUnflip(i) {
  // flip the value if it is negative
  return i < 0 ? (0, _csFlip.csFlip)(i) : i;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/abs.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/abs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAbs = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'abs';
var dependencies = ['typed'];
var createAbs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5)                // returns number 3.5
   *    math.abs(-4.2)               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  return typed(name, {
    number: _index.absNumber,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      return x.abs();
    },
    Fraction: function Fraction(x) {
      return x.abs();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since abs(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return x.abs();
    }
  });
});
exports.createAbs = createAbs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/add.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/add.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAdd = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm04.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'add';
var dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
var createAdd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      addScalar = _ref.addScalar,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;
  var algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed: typed
  });
  var algorithm04 = (0, _algorithm2.createAlgorithm04)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm3.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3)               // returns number 5
   *    math.add(2, 3, 4)            // returns number 9
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(-4, 1)
   *    math.add(a, b)               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   *    const c = math.unit('5 cm')
   *    const d = math.unit('2.1 mm')
   *    math.add(c, d)               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4")         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */

  return typed(name, (0, _object.extend)({
    // we extend the signatures of addScalar with signatures dealing with matrices
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, addScalar);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, addScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, addScalar, true);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, addScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, addScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, addScalar, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, addScalar, true);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, addScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },
    'any, any': addScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = this(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = this(result, rest[i]);
      }

      return result;
    }
  }, addScalar.signatures));
});
exports.createAdd = createAdd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAddScalar = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'addScalar';
var dependencies = ['typed'];
var createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
   * @private
   */
  return typed(name, {
    'number, number': _index.addNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.add(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.plus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.add(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');
      var res = x.clone();
      res.value = this(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });
});
exports.createAddScalar = createAddScalar;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/cbrt.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/cbrt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCbrt = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'cbrt';
var dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
var createCbrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      isNegative = _ref.isNegative,
      unaryMinus = _ref.unaryMinus,
      matrix = _ref.matrix,
      Complex = _ref.Complex,
      BigNumber = _ref.BigNumber,
      Fraction = _ref.Fraction;

  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27)                  // returns 3
   *    math.cube(3)                   // returns 27
   *    math.cbrt(-64)                 // returns -4
   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
   *
   *    const x = math.complex('8i')
   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true)             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
  return typed(name, {
    number: _index.cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    Complex: _cbrtComplex,
    'Complex, boolean': _cbrtComplex,
    BigNumber: function BigNumber(x) {
      return x.cbrt();
    },
    Unit: _cbrtUnit,
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */

  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
    var arg3 = x.arg() / 3;
    var abs = x.abs(); // principal root:

    var principal = new Complex((0, _index.cbrtNumber)(abs), 0).mul(new Complex(0, arg3).exp());

    if (allRoots) {
      var all = [principal, new Complex((0, _index.cbrtNumber)(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex((0, _index.cbrtNumber)(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
      return config.matrix === 'Array' ? all : matrix(all);
    } else {
      return principal;
    }
  }
  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */


  function _cbrtUnit(x) {
    if (x.value && (0, _is.isComplex)(x.value)) {
      var result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0 / 3); // Compute the units

      result.value = _cbrtComplex(x.value); // Compute the value

      return result;
    } else {
      var negate = isNegative(x.value);

      if (negate) {
        x.value = unaryMinus(x.value);
      } // TODO: create a helper function for this


      var third;

      if ((0, _is.isBigNumber)(x.value)) {
        third = new BigNumber(1).div(3);
      } else if ((0, _is.isFraction)(x.value)) {
        third = new Fraction(1, 3);
      } else {
        third = 1 / 3;
      }

      var _result = x.pow(third);

      if (negate) {
        _result.value = unaryMinus(_result.value);
      }

      return _result;
    }
  }
});
exports.createCbrt = createCbrt;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/ceil.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/ceil.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCeil = void 0;

var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));

var _decimal = _interopRequireDefault(__webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js"));

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'ceil';
var dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];
var createCeil = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      round = _ref.round,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar;
  var algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed: typed
  });
  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *    math.ceil(x, n)
   *
   * Examples:
   *
   *    math.ceil(3.2)               // returns number 4
   *    math.ceil(3.8)               // returns number 4
   *    math.ceil(-4.2)              // returns number -4
   *    math.ceil(-4.7)              // returns number -4
   *
   *    math.ceil(3.212, 2)          // returns number 3.22
   *    math.ceil(3.288, 2)          // returns number 3.29
   *    math.ceil(-4.212, 2)         // returns number -4.21
   *    math.ceil(-4.782, 2)         // returns number -4.78
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.ceil(c)                 // returns Complex 4 - 2i
   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i
   *
   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed('ceil', {
    number: function number(x) {
      if ((0, _number.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return (0, _index.ceilNumber)(x);
      }
    },
    'number, number': function numberNumber(x, n) {
      if ((0, _number.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        var _$split = "".concat(x, "e").split('e'),
            _$split2 = (0, _slicedToArray2["default"])(_$split, 2),
            number = _$split2[0],
            exponent = _$split2[1];

        var result = Math.ceil(Number("".concat(number, "e").concat(Number(exponent) + n)));

        var _$split3 = "".concat(result, "e").split('e');

        var _$split4 = (0, _slicedToArray2["default"])(_$split3, 2);

        number = _$split4[0];
        exponent = _$split4[1];
        return Number("".concat(number, "e").concat(Number(exponent) - n));
      }
    },
    Complex: function Complex(x) {
      return x.ceil();
    },
    'Complex, number': function ComplexNumber(x, n) {
      return x.ceil(n);
    },
    BigNumber: function BigNumber(x) {
      if ((0, _nearlyEqual.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.ceil();
      }
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if ((0, _nearlyEqual.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        return x.toDecimalPlaces(n.toNumber(), _decimal["default"].ROUND_CEIL);
      }
    },
    Fraction: function Fraction(x) {
      return x.ceil();
    },
    'Fraction, number': function FractionNumber(x, n) {
      return x.ceil(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
      var _this = this;

      // deep map collection, skip zeros since ceil(0) = 0
      return (0, _collection.deepMap)(x, function (i) {
        return _this(i, n);
      }, true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createCeil = createCeil;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/cube.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/cube.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCube = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'cube';
var dependencies = ['typed'];
var createCube = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2)            // returns number 8
   *    math.pow(2, 3)          // returns number 8
   *    math.cube(4)            // returns number 64
   *    4 * 4 * 4               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  return typed(name, {
    number: _index.cubeNumber,
    Complex: function Complex(x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },
    BigNumber: function BigNumber(x) {
      return x.times(x).times(x);
    },
    Fraction: function Fraction(x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cube(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return x.pow(3);
    }
  });
});
exports.createCube = createCube;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/divide.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/divide.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDivide = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'divide';
var dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
var createDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      multiply = _ref.multiply,
      equalScalar = _ref.equalScalar,
      divideScalar = _ref.divideScalar,
      inv = _ref.inv;
  var algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed: typed
  });
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3)            // returns number 0.6666666666666666
   *
   *    const a = math.complex(5, 14)
   *    const b = math.complex(4, 1)
   *    math.divide(a, b)            // returns Complex 2 + 3i
   *
   *    const c = [[7, -6], [13, -4]]
   *    const d = [[1, 2], [4, 3]]
   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
   *
   *    const e = math.unit('18 km')
   *    math.divide(e, 4.5)          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */

  return typed('divide', (0, _object.extend)({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array | Matrix': function anyArrayMatrix(x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));
});
exports.createDivide = createDivide;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/divideScalar.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDivideScalar = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'divideScalar';
var dependencies = ['typed', 'numeric'];
var createDivideScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      numeric = _ref.numeric;

  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
   * @private
   */
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x / y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.div(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.div(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.div(y);
    },
    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, (0, _is.typeOf)(y));
      res.value = this(res.value === null ? res._normalize(one) : res.value, y);
      return res;
    },
    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
      var res = y.clone();
      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, (0, _is.typeOf)(x));
      res.value = this(x, y.value === null ? y._normalize(one) : y.value);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.divide(y);
    }
  });
});
exports.createDivideScalar = createDivideScalar;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/dotDivide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/dotDivide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDotDivide = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm7 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'dotDivide';
var dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
var createDotDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      divideScalar = _ref.divideScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm3.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm5.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm6.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm7.createAlgorithm14)({
    typed: typed
  });
  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4)   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */

  return typed(name, {
    'any, any': divideScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, divideScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, divideScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, divideScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, divideScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, divideScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, divideScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });
});
exports.createDotDivide = createDotDivide;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/dotMultiply.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/dotMultiply.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDotMultiply = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm09.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm09.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'dotMultiply';
var dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
var createDotMultiply = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      multiplyScalar = _ref.multiplyScalar;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm09 = (0, _algorithm2.createAlgorithm09)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm3.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4) // returns 8
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */

  return typed(name, {
    'any, any': multiplyScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, multiplyScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, multiplyScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, multiplyScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, multiplyScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });
});
exports.createDotMultiply = createDotMultiply;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/dotPow.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/dotPow.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDotPow = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'dotPow';
var dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
var createDotPow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar,
      matrix = _ref.matrix,
      pow = _ref.pow,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = (0, _algorithm3.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm4.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm6.createAlgorithm14)({
    typed: typed
  });
  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3)            // returns number 8
   *
   *    const a = [[1, 2], [4, 3]]
   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */

  return typed(name, {
    'any, any': pow,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, pow, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, pow, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, pow, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, pow);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createDotPow = createDotPow;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/exp.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/exp.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createExp = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'exp';
var dependencies = ['typed'];
var createExp = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2)                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
   *    math.log(math.exp(2))        // returns number 2
   *
   *    math.exp([1, 2, 3])
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    expm1, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  return typed(name, {
    number: _index.expNumber,
    Complex: function Complex(x) {
      return x.exp();
    },
    BigNumber: function BigNumber(x) {
      return x.exp();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createExp = createExp;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/expm1.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/expm1.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createExpm1 = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'expm1';
var dependencies = ['typed', 'Complex'];
var createExpm1 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _Complex = _ref.Complex;

  /**
   * Calculate the value of subtracting 1 from the exponential value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.expm1(x)
   *
   * Examples:
   *
   *    math.expm1(2)                      // returns number 6.38905609893065
   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
   *    math.log(math.expm1(2) + 1)        // returns number 2
   *
   *    math.expm1([1, 2, 3])
   *    // returns Array [
   *    //   1.718281828459045,
   *    //   6.3890560989306495,
   *    //   19.085536923187668
   *    // ]
   *
   * See also:
   *
   *    exp, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  return typed(name, {
    number: _index.expm1Number,
    Complex: function Complex(x) {
      var r = Math.exp(x.re);
      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
    },
    BigNumber: function BigNumber(x) {
      return x.exp().minus(1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createExpm1 = createExpm1;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/fix.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/fix.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFix = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'fix';
var dependencies = ['typed', 'Complex', 'matrix', 'ceil', 'floor'];
var createFix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _Complex = _ref.Complex,
      matrix = _ref.matrix,
      ceil = _ref.ceil,
      floor = _ref.floor;
  var algorithm14 = (0, _algorithm.createAlgorithm14)({
    typed: typed
  });
  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2)                // returns number 3
   *    math.fix(3.8)                // returns number 3
   *    math.fix(-4.2)               // returns number -4
   *    math.fix(-4.7)               // returns number -4
   *
   *    math.fix(3.12, 1)                // returns number 3.1
   *    math.fix(3.18, 1)                // returns number 3.1
   *    math.fix(-4.12, 1)               // returns number -4.1
   *    math.fix(-4.17, 1)               // returns number -4.1
   *
   *    const c = math.complex(3.22, -2.78)
   *    math.fix(c)                  // returns Complex 3 - 2i
   *    math.fix(c, 1)               // returns Complex 3.2 - 2.7i
   *
   *    math.fix([3.2, 3.8, -4.7])      // returns Array [3, 3, -4]
   *    math.fix([3.2, 3.8, -4.7], 1)   // returns Array [3.2, 3.8, -4.7]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x    Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                             Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}     Rounded value
   */

  return typed('fix', {
    number: function number(x) {
      return x > 0 ? floor(x) : ceil(x);
    },
    'number, number | BigNumber': function numberNumberBigNumber(x, n) {
      return x > 0 ? floor(x, n) : ceil(x, n);
    },
    Complex: function Complex(x) {
      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
    },
    'Complex, number | BigNumber': function ComplexNumberBigNumber(x, n) {
      return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));
    },
    BigNumber: function BigNumber(x) {
      return x.isNegative() ? ceil(x) : floor(x);
    },
    'BigNumber, number | BigNumber': function BigNumberNumberBigNumber(x, n) {
      return x.isNegative() ? ceil(x, n) : floor(x, n);
    },
    Fraction: function Fraction(x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },
    'Fraction, number | BigNumber': function FractionNumberBigNumber(x, n) {
      return x.s < 0 ? x.ceil(n) : x.floor(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since fix(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(x, n) {
      var _this = this;

      // deep map collection, skip zeros since fix(0) = 0
      return (0, _collection.deepMap)(x, function (i) {
        return _this(i, n);
      }, true);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createFix = createFix;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/floor.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/floor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFloor = void 0;

var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));

var _decimal = _interopRequireDefault(__webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js"));

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'floor';
var dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];
var createFloor = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      round = _ref.round,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar;
  var algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed: typed
  });
  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *    math.floor(x, n)
   *
   * Examples:
   *
   *    math.floor(3.2)              // returns number 3
   *    math.floor(3.8)              // returns number 3
   *    math.floor(-4.2)             // returns number -5
   *    math.floor(-4.7)             // returns number -5
   *
   *    math.floor(3.212, 2)          // returns number 3.21
   *    math.floor(3.288, 2)          // returns number 3.28
   *    math.floor(-4.212, 2)         // returns number -4.22
   *    math.floor(-4.782, 2)         // returns number -4.79
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.floor(c)                 // returns Complex 3 - 3i
   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i
   *
   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]
   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed('floor', {
    number: function number(x) {
      if ((0, _number.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return Math.floor(x);
      }
    },
    'number, number': function numberNumber(x, n) {
      if ((0, _number.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        var _$split = "".concat(x, "e").split('e'),
            _$split2 = (0, _slicedToArray2["default"])(_$split, 2),
            number = _$split2[0],
            exponent = _$split2[1];

        var result = Math.floor(Number("".concat(number, "e").concat(Number(exponent) + n)));

        var _$split3 = "".concat(result, "e").split('e');

        var _$split4 = (0, _slicedToArray2["default"])(_$split3, 2);

        number = _$split4[0];
        exponent = _$split4[1];
        return Number("".concat(number, "e").concat(Number(exponent) - n));
      }
    },
    Complex: function Complex(x) {
      return x.floor();
    },
    'Complex, number': function ComplexNumber(x, n) {
      return x.floor(n);
    },
    BigNumber: function BigNumber(x) {
      if ((0, _nearlyEqual.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.floor();
      }
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if ((0, _nearlyEqual.nearlyEqual)(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        return x.toDecimalPlaces(n.toNumber(), _decimal["default"].ROUND_FLOOR);
      }
    },
    Fraction: function Fraction(x) {
      return x.floor();
    },
    'Fraction, number': function FractionNumber(x, n) {
      return x.floor(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since floor(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
      var _this = this;

      // deep map collection, skip zeros since ceil(0) = 0
      return (0, _collection.deepMap)(x, function (i) {
        return _this(i, n);
      }, true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createFloor = createFloor;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/gcd.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/gcd.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createGcd = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm04.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'gcd';
var dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createGcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed: typed
  });
  var algorithm04 = (0, _algorithm2.createAlgorithm04)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm3.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12)              // returns 4
   *    math.gcd(-4, 6)              // returns 2
   *    math.gcd(25, 15, -10)        // returns 5
   *
   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */

  return typed(name, {
    'number, number': _index.gcdNumber,
    'BigNumber, BigNumber': _gcdBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.gcd(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm10(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = this(a, b);

      for (var i = 0; i < args.length; i++) {
        res = this(res, args[i]);
      }

      return res;
    }
  });
  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */

  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm


    var zero = new BigNumber(0);

    while (!b.isZero()) {
      var r = a.mod(b);
      a = b;
      b = r;
    }

    return a.lt(zero) ? a.neg() : a;
  }
});
exports.createGcd = createGcd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/hypot.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/hypot.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createHypot = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var name = 'hypot';
var dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
var createHypot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      sqrt = _ref.sqrt,
      smaller = _ref.smaller,
      isPositive = _ref.isPositive;

  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4)      // 5
   *     math.hypot(3, 4, 5)   // 7.0710678118654755
   *     math.hypot([3, 4, 5]) // 7.0710678118654755
   *     math.hypot(-2)        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
   *                                                          Matrix and Array input is flattened and returns a
   *                                                          single number for the whole matrix.
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
  return typed(name, {
    '... number | BigNumber': _hypot,
    Array: function Array(x) {
      return this.apply(this, (0, _array.flatten)(x));
    },
    Matrix: function Matrix(x) {
      return this.apply(this, (0, _array.flatten)(x.toArray()));
    }
  });
  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */

  function _hypot(args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    var result = 0;
    var largest = 0;

    for (var i = 0; i < args.length; i++) {
      var value = abs(args[i]);

      if (smaller(largest, value)) {
        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
        result = addScalar(result, 1);
        largest = value;
      } else {
        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
      }
    }

    return multiplyScalar(largest, sqrt(result));
  }
});
exports.createHypot = createHypot;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/lcm.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/lcm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLcm = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'lcm';
var dependencies = ['typed', 'matrix', 'equalScalar'];
var createLcm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = (0, _algorithm2.createAlgorithm06)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm3.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6)               // returns 12
   *    math.lcm(6, 21)              // returns 42
   *    math.lcm(6, 21, 5)           // returns 210
   *
   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */

  return typed(name, {
    'number, number': _index.lcmNumber,
    'BigNumber, BigNumber': _lcmBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.lcm(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm11(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = this(a, b);

      for (var i = 0; i < args.length; i++) {
        res = this(res, args[i]);
      }

      return res;
    }
  });
  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */

  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }

    if (a.isZero()) {
      return a;
    }

    if (b.isZero()) {
      return b;
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead


    var prod = a.times(b);

    while (!b.isZero()) {
      var t = b;
      b = a.mod(t);
      a = t;
    }

    return prod.div(a).abs();
  }
});
exports.createLcm = createLcm;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/log.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/log.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLog = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'log';
var dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
var createLog = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      divideScalar = _ref.divideScalar,
      Complex = _ref.Complex;

  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5)                  // returns 1.252762968495368
   *    math.exp(math.log(2.4))        // returns 2.4
   *
   *    math.pow(10, 4)                // returns 10000
   *    math.log(10000, 10)            // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *
   *    math.log(1024, 2)              // returns 10
   *    math.pow(2, 10)                // returns 1024
   *
   * See also:
   *
   *    exp, log2, log10, log1p
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return (0, _index.logNumber)(x);
      } else {
        // negative value -> complex value computation
        return new Complex(x, 0).log();
      }
    },
    Complex: function Complex(x) {
      return x.log();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      } else {
        // downgrade to number, return Complex valued result
        return new Complex(x.toNumber(), 0).log();
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(this(x), this(base));
    }
  });
});
exports.createLog = createLog;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/log10.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/log10.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLog10 = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'log10';
var dependencies = ['typed', 'config', 'Complex'];
var createLog10 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      _Complex = _ref.Complex;

  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001)            // returns -5
   *    math.log10(10000)              // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *    math.pow(10, 4)                // returns 10000
   *
   * See also:
   *
   *    exp, log, log1p, log2
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return (0, _index.log10Number)(x);
      } else {
        // negative value -> complex value computation
        return new _Complex(x, 0).log().div(Math.LN10);
      }
    },
    Complex: function Complex(x) {
      return new _Complex(x).log().div(Math.LN10);
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      } else {
        // downgrade to number, return Complex valued result
        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createLog10 = createLog10;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/log1p.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/log1p.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLog1p = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var name = 'log1p';
var dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
var createLog1p = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      divideScalar = _ref.divideScalar,
      log = _ref.log,
      Complex = _ref.Complex;

  /**
   * Calculate the logarithm of a `value+1`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log1p(x)
   *    math.log1p(x, base)
   *
   * Examples:
   *
   *    math.log1p(2.5)                 // returns 1.252762968495368
   *    math.exp(math.log1p(1.4))       // returns 2.4
   *
   *    math.pow(10, 4)                 // returns 10000
   *    math.log1p(9999, 10)            // returns 4
   *    math.log1p(9999) / math.log(10) // returns 4
   *
   * See also:
   *
   *    exp, log, log2, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm of `x+1`.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x+1` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x+1`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= -1 || config.predictable) {
        return (0, _number.log1p)(x);
      } else {
        // negative value -> complex value computation
        return _log1pComplex(new Complex(x, 0));
      }
    },
    Complex: _log1pComplex,
    BigNumber: function BigNumber(x) {
      var y = x.plus(1);

      if (!y.isNegative() || config.predictable) {
        return y.ln();
      } else {
        // downgrade to number, return Complex valued result
        return _log1pComplex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log1p(x, base)
      return divideScalar(this(x), log(base));
    }
  });
  /**
   * Calculate the natural logarithm of a complex number + 1
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log1pComplex(x) {
    var xRe1p = x.re + 1;
    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
  }
});
exports.createLog1p = createLog1p;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/log2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/log2.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLog2 = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'log2';
var dependencies = ['typed', 'config', 'Complex'];
var createLog2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log2(x)
   *
   * Examples:
   *
   *    math.log2(0.03125)           // returns -5
   *    math.log2(16)                // returns 4
   *    math.log2(16) / math.log2(2) // returns 4
   *    math.pow(2, 4)               // returns 16
   *
   * See also:
   *
   *    exp, log, log1p, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 2-base logarithm of `x`
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return (0, _index.log2Number)(x);
      } else {
        // negative value -> complex value computation
        return _log2Complex(new Complex(x, 0));
      }
    },
    Complex: _log2Complex,
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log(2);
      } else {
        // downgrade to number, return Complex valued result
        return _log2Complex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
  /**
   * Calculate log2 for a complex value
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log2Complex(x) {
    var newX = Math.sqrt(x.re * x.re + x.im * x.im);
    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
  }
});
exports.createLog2 = createLog2;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/mod.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/mod.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMod = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm7 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'mod';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createMod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed: typed
  });
  var algorithm05 = (0, _algorithm3.createAlgorithm05)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm5.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm6.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm7.createAlgorithm14)({
    typed: typed
  });
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See https://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3)                // returns 2
   *    math.mod(11, 2)               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0
   *    }
   *
   *    isOdd(2)                      // returns false
   *    isOdd(3)                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */

  return typed(name, {
    'number, number': _index.modNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isNeg()) {
        throw new Error('Cannot calculate mod for a negative divisor');
      }

      return y.isZero() ? x : x.mod(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.compare(0) < 0) {
        throw new Error('Cannot calculate mod for a negative divisor');
      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend


      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createMod = createMod;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/multiply.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/multiply.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMultiply = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'multiply';
var dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
var createMultiply = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      addScalar = _ref.addScalar,
      multiplyScalar = _ref.multiplyScalar,
      equalScalar = _ref.equalScalar,
      dot = _ref.dot;
  var algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed: typed
  });

  function _validateMatrixDimensions(size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }

            break;

          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }

            break;

          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */


  function _multiplyVectorVector(a, b, n) {
    // check empty vector
    if (n === 0) {
      throw new Error('Cannot multiply two empty vectors');
    }

    return dot(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorMatrix(a, b) {
    // process storage
    if (b.storage() !== 'dense') {
      throw new Error('Support for SparseMatrix not implemented');
    }

    return _multiplyVectorDenseMatrix(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var alength = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix columns

    for (var j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      var sum = mf(adata[0], bdata[0][j]); // loop vector

      for (var i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }

      c[j] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */


  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
    'DenseMatrix, any': _multiplyDenseMatrixVector,
    'SparseMatrix, any': _multiplySparseMatrixVector
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */


  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M)
   */


  function _multiplyDenseMatrixVector(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // sum (do not initialize it with zero)

      var sum = mf(row[0], bdata[0]); // loop matrix a columns

      for (var j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }

      c[i] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */


  function _multiplyDenseMatrixDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // initialize row array

      c[i] = []; // loop matrix b columns

      for (var j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

        for (var x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }

        c[i][j] = sum;
      }
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */


  function _multiplyDenseMatrixSparseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate b matrix

    if (!bvalues) {
      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
    } // rows & columns


    var arows = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = b.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // indeces in column jb

      var kb0 = bptr[jb];
      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

      if (kb1 > kb0) {
        // last row mark processed
        var last = 0; // loop a rows

        for (var i = 0; i < arows; i++) {
          // column mark
          var mark = i + 1; // C[i, jb]

          var cij = void 0; // values in b column j

          for (var kb = kb0; kb < kb1; kb++) {
            // row
            var ib = bindex[kb]; // check value has been initialized

            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]); // update mark

              last = mark;
            } else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          } // check column has been processed and value != 0


          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1)
   */


  function _multiplySparseMatrixVector(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0]; // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // workspace


    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // update ptr

    cptr[0] = 0; // rows in b

    for (var ib = 0; ib < brows; ib++) {
      // b[ib]
      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          var ia = aindex[ka]; // check value exists in current j

          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true; // add i to pattern of C

            cindex.push(ia); // x(ia) = A

            x[ia] = mf(vbi, avalues[ka]);
          } else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    } // copy values from x to column jb of c


    for (var p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      var ic = cindex[p]; // copy value

      cvalues[p] = x[ic];
    } // update ptr


    cptr[1] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixDenseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0];
    var bcolumns = b._size[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // rows in jb

      for (var ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            var ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(vbij, avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      } // copy values from x to column jb of c


      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        var ic = cindex[p]; // copy value

        cvalues[p] = x[ic];
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixSparseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

    var values = avalues && bvalues; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // variables

    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // B values & index in j

      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb]; // check we need to process values

        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(bvalues[kb], avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        } else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia);
            }
          }
        }
      } // check we need to process matrix values (pattern matrix)


      if (values) {
        // copy values from x to column jb of c
        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2)        // returns number 20.8
   *    math.multiply(2, 3, 4)       // returns number 24
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.multiply(a, b)          // returns Complex 5 + 14i
   *
   *    const c = [[1, 2], [4, 3]]
   *    const d = [[1, 2, 3], [3, -4, 7]]
   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    const e = math.unit('2.1 km')
   *    math.multiply(3, e)          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */


  return typed(name, (0, _object.extend)({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    'Array, Array': function ArrayArray(x, y) {
      // check dimensions
      _validateMatrixDimensions((0, _array.arraySize)(x), (0, _array.arraySize)(y)); // use dense matrix implementation


      var m = this(matrix(x), matrix(y)); // return array or scalar

      return (0, _is.isMatrix)(m) ? m.valueOf() : m;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // dimensions
      var xsize = x.size();
      var ysize = y.size(); // check dimensions

      _validateMatrixDimensions(xsize, ysize); // process dimensions


      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        } // Vector * Matrix


        return _multiplyVectorMatrix(x, y);
      } // process y dimensions


      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      } // Matrix * Matrix


      return _multiplyMatrixMatrix(x, y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use Matrix * Matrix implementation
      return this(x, matrix(y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use Matrix * Matrix implementation
      return this(matrix(x, y.storage()), y);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },
    'any, any': multiplyScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = this(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = this(result, rest[i]);
      }

      return result;
    }
  }, multiplyScalar.signatures));
});
exports.createMultiply = createMultiply;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/multiplyScalar.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMultiplyScalar = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'multiplyScalar';
var dependencies = ['typed'];
var createMultiplyScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
   * @private
   */
  return typed('multiplyScalar', {
    'number, number': _index.multiplyNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.mul(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.times(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mul(y);
    },
    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
      var res = y.clone();
      res.value = res.value === null ? res._normalize(x) : this(res.value, x);
      return res;
    },
    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
      var res = x.clone();
      res.value = res.value === null ? res._normalize(y) : this(res.value, y);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.multiply(y);
    }
  });
});
exports.createMultiplyScalar = createMultiplyScalar;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/norm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/norm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNorm = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'norm';
var dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];
var createNorm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      pow = _ref.pow,
      conj = _ref.conj,
      sqrt = _ref.sqrt,
      multiply = _ref.multiply,
      equalScalar = _ref.equalScalar,
      larger = _ref.larger,
      smaller = _ref.smaller,
      matrix = _ref.matrix,
      ctranspose = _ref.ctranspose,
      eigs = _ref.eigs;

  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5)                         // returns 3.5
   *    math.norm(-3.5)                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4))         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity)        // returns 3
   *    math.norm([1, 2, -3], -Infinity)       // returns 1
   *
   *    math.norm([3, 4], 2)                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
  return typed(name, {
    number: Math.abs,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    "boolean": function boolean(x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },
    Array: function Array(x) {
      return _norm(matrix(x), 2);
    },
    Matrix: function Matrix(x) {
      return _norm(x, 2);
    },
    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return this(x);
    },
    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
      return _norm(matrix(x), p);
    },
    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
      return _norm(x, p);
    }
  });
  /**
   * Calculate the plus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _vectorNormPlusInfinity(x) {
    // norm(x, Infinity) = max(abs(x))
    var pinf = 0; // skip zeros since abs(0) === 0

    x.forEach(function (value) {
      var v = abs(value);

      if (larger(v, pinf)) {
        pinf = v;
      }
    }, true);
    return pinf;
  }
  /**
   * Calculate the minus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _vectorNormMinusInfinity(x) {
    // norm(x, -Infinity) = min(abs(x))
    var ninf; // skip zeros since abs(0) === 0

    x.forEach(function (value) {
      var v = abs(value);

      if (!ninf || smaller(v, ninf)) {
        ninf = v;
      }
    }, true);
    return ninf || 0;
  }
  /**
   * Calculate the norm for a vector
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */


  function _vectorNorm(x, p) {
    // check p
    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
      return _vectorNormPlusInfinity(x);
    }

    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
      return _vectorNormMinusInfinity(x);
    }

    if (p === 'fro') {
      return _norm(x, 2);
    }

    if (typeof p === 'number' && !isNaN(p)) {
      // check p != 0
      if (!equalScalar(p, 0)) {
        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
        var n = 0; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          n = add(pow(abs(value), p), n);
        }, true);
        return pow(n, 1 / p);
      }

      return Number.POSITIVE_INFINITY;
    } // invalid parameter value


    throw new Error('Unsupported parameter value');
  }
  /**
   * Calculate the Frobenius norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormFrobenius(x) {
    // norm(x) = sqrt(sum(diag(x'x)))
    var fro = 0;
    x.forEach(function (value, index) {
      fro = add(fro, multiply(value, conj(value)));
    });
    return abs(sqrt(fro));
  }
  /**
   * Calculate the norm L1 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormOne(x) {
    // norm(x) = the largest column sum
    var c = []; // result

    var maxc = 0; // skip zeros since abs(0) == 0

    x.forEach(function (value, index) {
      var j = index[1];
      var cj = add(c[j] || 0, abs(value));

      if (larger(cj, maxc)) {
        maxc = cj;
      }

      c[j] = cj;
    }, true);
    return maxc;
  }
  /**
   * Calculate the norm L2 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormTwo(x) {
    // norm(x) = sqrt( max eigenvalue of A*.A)
    var sizeX = x.size();

    if (sizeX[0] !== sizeX[1]) {
      throw new RangeError('Invalid matrix dimensions');
    }

    var tx = ctranspose(x);
    var squaredX = multiply(tx, x);
    var eigenVals = eigs(squaredX).values.toArray();
    var rho = eigenVals[eigenVals.length - 1];
    return abs(sqrt(rho));
  }
  /**
   * Calculate the infinity norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNormInfinity(x) {
    // norm(x) = the largest row sum
    var r = []; // result

    var maxr = 0; // skip zeros since abs(0) == 0

    x.forEach(function (value, index) {
      var i = index[0];
      var ri = add(r[i] || 0, abs(value));

      if (larger(ri, maxr)) {
        maxr = ri;
      }

      r[i] = ri;
    }, true);
    return maxr;
  }
  /**
   * Calculate the norm for a 2D Matrix (M*N)
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */


  function _matrixNorm(x, p) {
    // check p
    if (p === 1) {
      return _matrixNormOne(x);
    }

    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
      return _matrixNormInfinity(x);
    }

    if (p === 'fro') {
      return _matrixNormFrobenius(x);
    }

    if (p === 2) {
      return _matrixNormTwo(x);
    } // invalid parameter value


    throw new Error('Unsupported parameter value ' + p);
  }
  /**
   * Calculate the norm for an array
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */


  function _norm(x, p) {
    // size
    var sizeX = x.size(); // check if it is a vector

    if (sizeX.length === 1) {
      return _vectorNorm(x, p);
    } // MxN matrix


    if (sizeX.length === 2) {
      if (sizeX[0] && sizeX[1]) {
        return _matrixNorm(x, p);
      } else {
        throw new RangeError('Invalid matrix dimensions');
      }
    }
  }
});
exports.createNorm = createNorm;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/nthRoot.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/nthRoot.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNthRootNumber = exports.createNthRoot = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'nthRoot';
var dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
var createNthRoot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      _BigNumber = _ref.BigNumber;
  var algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed: typed
  });
  var algorithm02 = (0, _algorithm2.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = (0, _algorithm3.createAlgorithm06)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm6.createAlgorithm14)({
    typed: typed
  });
  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
   *     math.sqrt(9)          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */

  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
  return typed(name, {
    number: function number(x) {
      return (0, _index.nthRootNumber)(x, 2);
    },
    'number, number': _index.nthRootNumber,
    BigNumber: function BigNumber(x) {
      return _bigNthRoot(x, new _BigNumber(2));
    },
    Complex: function Complex(x) {
      throw new Error(complexErr);
    },
    'Complex, number': function ComplexNumber(x, y) {
      throw new Error(complexErr);
    },
    'BigNumber, BigNumber': _bigNthRoot,
    'Array | Matrix': function ArrayMatrix(x) {
      return this(x, 2);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse + sparse
        return algorithm06(x, y, this);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // dense + sparse
        return algorithm01(x, y, this, false);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse - scalar
        return algorithm11(y, x, this, true);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * https://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */

  function _bigNthRoot(a, root) {
    var precision = _BigNumber.precision;

    var Big = _BigNumber.clone({
      precision: precision + 2
    });

    var zero = new _BigNumber(0);
    var one = new Big(1);
    var inv = root.isNegative();

    if (inv) {
      root = root.neg();
    }

    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }

    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    } // edge cases zero and infinity


    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }

    if (!a.isFinite()) {
      return inv ? zero : a;
    }

    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1

    x = a.isNeg() ? x.neg() : x;
    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
});
exports.createNthRoot = createNthRoot;
var createNthRootNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {
  var typed = _ref2.typed;
  return typed(name, {
    number: _index.nthRootNumber,
    'number, number': _index.nthRootNumber
  });
});
exports.createNthRootNumber = createNthRootNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/nthRoots.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/nthRoots.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNthRoots = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'nthRoots';
var dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
var createNthRoots = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      divideScalar = _ref.divideScalar,
      Complex = _ref.Complex;

  /**
   * Each function here returns a real multiple of i as a Complex value.
   * @param  {number} val
   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
   */
  // This is used to fix float artifacts for zero-valued components.
  var _calculateExactResult = [function realPos(val) {
    return new Complex(val, 0);
  }, function imagPos(val) {
    return new Complex(0, val);
  }, function realNeg(val) {
    return new Complex(-val, 0);
  }, function imagNeg(val) {
    return new Complex(0, -val);
  }];
  /**
   * Calculate the nth root of a Complex Number a using De Movire's Theorem.
   * @param  {Complex} a
   * @param  {number} root
   * @return {Array} array of n Complex Roots
   */

  function _nthComplexRoots(a, root) {
    if (root < 0) throw new Error('Root must be greater than zero');
    if (root === 0) throw new Error('Root must be non-zero');
    if (root % 1 !== 0) throw new Error('Root must be an integer');
    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
    var aIsNumeric = typeof a === 'number';
    var offset; // determine the offset (argument of a)/(pi/2)

    if (aIsNumeric || a.re === 0 || a.im === 0) {
      if (aIsNumeric) {
        offset = 2 * +(a < 0); // numeric value on the real axis
      } else if (a.im === 0) {
        offset = 2 * +(a.re < 0); // complex value on the real axis
      } else {
        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
      }
    }

    var arg = a.arg();
    var abs = a.abs();
    var roots = [];
    var r = Math.pow(abs, 1 / root);

    for (var k = 0; k < root; k++) {
      var halfPiFactor = (offset + 4 * k) / root;
      /**
       * If (offset + 4*k)/root is an integral multiple of pi/2
       * then we can produce a more exact result.
       */

      if (halfPiFactor === Math.round(halfPiFactor)) {
        roots.push(_calculateExactResult[halfPiFactor % 4](r));
        continue;
      }

      roots.push(new Complex({
        r: r,
        phi: (arg + 2 * Math.PI * k) / root
      }));
    }

    return roots;
  }
  /**
   * Calculate the nth roots of a value.
   * An nth root of a positive real number A,
   * is a positive real solution of the equation "x^root = A".
   * This function returns an array of complex values.
   *
   * Syntax:
   *
   *    math.nthRoots(x)
   *    math.nthRoots(x, root)
   *
   * Examples:
   *
   *    math.nthRoots(1)
   *    // returns [
   *    //   {re: 1, im: 0},
   *    //   {re: -1, im: 0}
   *    // ]
   *    nthRoots(1, 3)
   *    // returns [
   *    //   { re: 1, im: 0 },
   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
   *    ]
   *
   * See also:
   *
   *    nthRoot, pow, sqrt
   *
   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex}            Rounded value
   */


  return typed(name, {
    Complex: function Complex(x) {
      return _nthComplexRoots(x, 2);
    },
    'Complex, number': _nthComplexRoots
  });
});
exports.createNthRoots = createNthRoots;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/pow.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/pow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createPow = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'pow';
var dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];
var createPow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      identity = _ref.identity,
      multiply = _ref.multiply,
      matrix = _ref.matrix,
      number = _ref.number,
      fraction = _ref.fraction,
      Complex = _ref.Complex;

  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3)               // returns number 8
   *
   *    const a = math.complex(2, 3)
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    const b = [[1, 2], [4, 3]]
   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                          The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
  return typed(name, {
    'number, number': _pow,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.pow(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      } else {
        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      var result = x.pow(y);

      if (result != null) {
        return result;
      }

      if (config.predictable) {
        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');
      } else {
        return _pow(x.valueOf(), y.valueOf());
      }
    },
    'Array, number': _powArray,
    'Array, BigNumber': function ArrayBigNumber(x, y) {
      return _powArray(x, y.toNumber());
    },
    'Matrix, number': _powMatrix,
    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
      return _powMatrix(x, y.toNumber());
    },
    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
      return x.pow(y);
    }
  });
  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */

  function _pow(x, y) {
    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !(0, _number.isInteger)(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        var yFrac = fraction(y);
        var yNum = number(yFrac);

        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if (yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      } catch (ex) {// fraction() throws an error if y is Infinity, etc.
      } // Unable to express y as a fraction, so continue on

    } // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity


    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
      return NaN;
    }

    if ((0, _number.isInteger)(y) || x >= 0 || config.predictable) {
      return (0, _index.powNumber)(x, y);
    } else {
      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }

      return new Complex(x, 0).pow(y, 0);
    }
  }
  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */


  function _powArray(x, y) {
    if (!(0, _number.isInteger)(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    } // verify that A is a 2 dimensional square matrix


    var s = (0, _array.arraySize)(x);

    if (s.length !== 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }

    if (s[0] !== s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }

    var res = identity(s[0]).valueOf();
    var px = x;

    while (y >= 1) {
      if ((y & 1) === 1) {
        res = multiply(px, res);
      }

      y >>= 1;
      px = multiply(px, px);
    }

    return res;
  }
  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */


  function _powMatrix(x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }
});
exports.createPow = createPow;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/round.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/round.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRoundNumber = exports.createRound = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var NO_INT = 'Number of decimals in function round must be an integer';
var name = 'round';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
var createRound = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm2.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm14 = (0, _algorithm3.createAlgorithm14)({
    typed: typed
  });
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.22)             // returns number 3
   *    math.round(3.82)             // returns number 4
   *    math.round(-4.2)             // returns number -4
   *    math.round(-4.7)             // returns number -5
   *    math.round(3.22, 1)          // returns number 3.2
   *    math.round(3.88, 1)          // returns number 3.9
   *    math.round(-4.21, 1)         // returns number -4.2
   *    math.round(-4.71, 1)         // returns number -4.7
   *    math.round(math.pi, 3)       // returns number 3.142
   *    math.round(123.45678, 2)     // returns number 123.46
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.round(c)                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed(name, _objectSpread(_objectSpread({}, roundNumberSignatures), {}, {
    Complex: function Complex(x) {
      return x.round();
    },
    'Complex, number': function ComplexNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Complex, BigNumber': function ComplexBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      var _n = n.toNumber();

      return x.round(_n);
    },
    'number, BigNumber': function numberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return new BigNumber(x).toDecimalPlaces(n.toNumber());
    },
    BigNumber: function BigNumber(x) {
      return x.toDecimalPlaces(0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return x.toDecimalPlaces(n.toNumber());
    },
    Fraction: function Fraction(x) {
      return x.round();
    },
    'Fraction, number': function FractionNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since round(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm12(y, x, this, true);
    },
    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  }));
});
exports.createRound = createRound;
var roundNumberSignatures = {
  number: _index.roundNumber,
  'number, number': function numberNumber(x, n) {
    if (!(0, _number.isInteger)(n)) {
      throw new TypeError(NO_INT);
    }

    if (n < 0 || n > 15) {
      throw new Error('Number of decimals in function round must be in the range of 0-15');
    }

    return (0, _index.roundNumber)(x, n);
  }
};
var createRoundNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {
  var typed = _ref2.typed;
  return typed(name, roundNumberSignatures);
});
exports.createRoundNumber = createRoundNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/sign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/sign.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSign = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'sign';
var dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];
var createSign = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber,
      complex = _ref.complex,
      _Fraction = _ref.Fraction;

  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 0
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5)               // returns 1
   *    math.sign(-4.2)              // returns -1
   *    math.sign(0)                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  return typed(name, {
    number: _index.signNumber,
    Complex: function Complex(x) {
      return x.im === 0 ? complex((0, _index.signNumber)(x.re)) : x.sign();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x.cmp(0));
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x.s, 1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sign(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return this(x.value);
    }
  });
});
exports.createSign = createSign;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSqrt = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'sqrt';
var dependencies = ['config', 'typed', 'Complex'];
var createSqrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      Complex = _ref.Complex;

  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25)                // returns 5
   *    math.square(5)               // returns 25
   *    math.sqrt(-4)                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt, sqrtm
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  return typed('sqrt', {
    number: _sqrtNumber,
    Complex: function Complex(x) {
      return x.sqrt();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      } else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }
  });
  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */

  function _sqrtNumber(x) {
    if (isNaN(x)) {
      return NaN;
    } else if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    } else {
      return new Complex(x, 0).sqrt();
    }
  }
});
exports.createSqrt = createSqrt;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/square.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/square.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSquare = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'square';
var dependencies = ['typed'];
var createSquare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2)           // returns number 4
   *    math.square(3)           // returns number 9
   *    math.pow(3, 2)           // returns number 9
   *    math.multiply(3, 3)      // returns number 9
   *
   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  return typed(name, {
    number: _index.squareNumber,
    Complex: function Complex(x) {
      return x.mul(x);
    },
    BigNumber: function BigNumber(x) {
      return x.times(x);
    },
    Fraction: function Fraction(x) {
      return x.mul(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since square(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    Unit: function Unit(x) {
      return x.pow(2);
    }
  });
});
exports.createSquare = createSquare;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/subtract.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/subtract.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSubtract = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'subtract';
var dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
var createSubtract = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      addScalar = _ref.addScalar,
      unaryMinus = _ref.unaryMinus,
      DenseMatrix = _ref.DenseMatrix;
  // TODO: split function subtract in two: subtract and subtractScalar
  var algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed: typed
  });
  var algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed: typed
  });
  var algorithm05 = (0, _algorithm3.createAlgorithm05)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm4.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm6.createAlgorithm14)({
    typed: typed
  });
  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2)        // returns number 3.3
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.subtract(a, b)          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
   *
   *    const c = math.unit('2.1 km')
   *    const d = math.unit('500m')
   *    math.subtract(c, d)          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */

  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x - y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.sub(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.minus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.sub(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }

      if (y.value === null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }

      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }

      var res = x.clone();
      res.value = this(res.value, y.value);
      res.fixPrefix = false;
      return res;
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, unaryMinus(y), addScalar);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
/**
 * Check whether matrix x and y have the same number of dimensions.
 * Throws a DimensionError when dimensions are not equal
 * @param {Matrix} x
 * @param {Matrix} y
 */

exports.createSubtract = createSubtract;

function checkEqualDimensions(x, y) {
  var xsize = x.size();
  var ysize = y.size();

  if (xsize.length !== ysize.length) {
    throw new _DimensionError.DimensionError(xsize.length, ysize.length);
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/unaryMinus.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/unaryMinus.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnaryMinus = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'unaryMinus';
var dependencies = ['typed'];
var createUnaryMinus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5)      // returns -3.5
   *    math.unaryMinus(-4.2)     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
  return typed(name, {
    number: _index.unaryMinusNumber,
    Complex: function Complex(x) {
      return x.neg();
    },
    BigNumber: function BigNumber(x) {
      return x.neg();
    },
    Fraction: function Fraction(x) {
      return x.neg();
    },
    Unit: function Unit(x) {
      var res = x.clone();
      res.value = this(x.value);
      return res;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    } // TODO: add support for string

  });
});
exports.createUnaryMinus = createUnaryMinus;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/unaryPlus.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnaryPlus = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'unaryPlus';
var dependencies = ['typed', 'config', 'BigNumber'];
var createUnaryPlus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      BigNumber = _ref.BigNumber;

  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5)      // returns 3.5
   *    math.unaryPlus(1)     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
  return typed(name, {
    number: _index.unaryPlusNumber,
    Complex: function Complex(x) {
      return x; // complex numbers are immutable
    },
    BigNumber: function BigNumber(x) {
      return x; // bignumbers are immutable
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },
    Unit: function Unit(x) {
      return x.clone();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    },
    'boolean | string': function booleanString(x) {
      // convert to a number or bignumber
      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
    }
  });
});
exports.createUnaryPlus = createUnaryPlus;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/arithmetic/xgcd.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createXgcd = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'xgcd';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createXgcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber;

  /**
   * Calculate the extended greatest common divisor for two values.
   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12)             // returns [4, -1, 1]
   *    math.gcd(8, 12)              // returns 4
   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
  return typed(name, {
    'number, number': function numberNumber(a, b) {
      var res = (0, _index.xgcdNumber)(a, b);
      return config.matrix === 'Array' ? res : matrix(res);
    },
    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

  });
  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */

  function _xgcdBigNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var // used to swap two variables
    t;
    var // quotient
    q;
    var // remainder
    r;
    var zero = new BigNumber(0);
    var one = new BigNumber(1);
    var x = zero;
    var lastx = one;
    var y = one;
    var lasty = zero;

    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);
      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;
      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;
      a = b;
      b = r;
    }

    var res;

    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    } else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }

    return config.matrix === 'Array' ? res : matrix(res);
  }
});
exports.createXgcd = createXgcd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/bitAnd.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/bitAnd.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBitAnd = void 0;

var _bitwise = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'bitAnd';
var dependencies = ['typed', 'matrix', 'equalScalar'];
var createBitAnd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = (0, _algorithm5.createAlgorithm06)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */

  return typed(name, {
    'number, number': _index.bitAndNumber,
    'BigNumber, BigNumber': _bitwise.bitAndBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createBitAnd = createBitAnd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/bitNot.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBitNot = void 0;

var _bitwise = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'bitNot';
var dependencies = ['typed'];
var createBitNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
  return typed(name, {
    number: _index.bitNotNumber,
    BigNumber: _bitwise.bitNotBigNumber,
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createBitNot = createBitNot;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/bitOr.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/bitOr.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBitOr = void 0;

var _bitwise = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm04.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'bitOr';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createBitOr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed: typed
  });
  var algorithm04 = (0, _algorithm4.createAlgorithm04)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm3.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm2.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm.createAlgorithm14)({
    typed: typed
  });
  /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */

  return typed(name, {
    'number, number': _index.bitOrNumber,
    'BigNumber, BigNumber': _bitwise.bitOrBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createBitOr = createBitOr;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/bitXor.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/bitXor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBitXor = void 0;

var _bitwise = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'bitXor';
var dependencies = ['typed', 'matrix', 'DenseMatrix'];
var createBitXor = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */

  return typed(name, {
    'number, number': _index.bitXorNumber,
    'BigNumber, BigNumber': _bitwise.bitXor,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createBitXor = createBitXor;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/leftShift.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/leftShift.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLeftShift = void 0;

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm7 = __webpack_require__(/*! ../../type/matrix/utils/algorithm08.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var _bitwise = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js");

var name = 'leftShift';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createLeftShift = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed: typed
  });
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = (0, _algorithm7.createAlgorithm08)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm6.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */

  return typed(name, {
    'number, number': _index.leftShiftNumber,
    'BigNumber, BigNumber': _bitwise.leftShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});
exports.createLeftShift = createLeftShift;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/rightArithShift.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/rightArithShift.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRightArithShift = void 0;

var _bitwise = __webpack_require__(/*! ../../utils/bignumber/bitwise.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm7 = __webpack_require__(/*! ../../type/matrix/utils/algorithm08.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'rightArithShift';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightArithShift = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed: typed
  });
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = (0, _algorithm7.createAlgorithm08)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm6.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */

  return typed(name, {
    'number, number': _index.rightArithShiftNumber,
    'BigNumber, BigNumber': _bitwise.rightArithShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});
exports.createRightArithShift = createRightArithShift;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/bitwise/rightLogShift.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/bitwise/rightLogShift.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRightLogShift = void 0;

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm01.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm10.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js");

var _algorithm7 = __webpack_require__(/*! ../../type/matrix/utils/algorithm08.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'rightLogShift';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightLogShift = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed: typed
  });
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = (0, _algorithm7.createAlgorithm08)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = (0, _algorithm6.createAlgorithm10)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

  return typed(name, {
    'number, number': _index.rightLogShiftNumber,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});
exports.createRightLogShift = createRightLogShift;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/combinatorics/bellNumbers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/combinatorics/bellNumbers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBellNumbers = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'bellNumbers';
var dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
var createBellNumbers = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger,
      stirlingS2 = _ref.stirlingS2;

  /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function bellNumbers');
      } // Sum (k=0, n) S(n,k).


      var result = 0;

      for (var i = 0; i <= n; i++) {
        result = addScalar(result, stirlingS2(n, i));
      }

      return result;
    }
  });
});
exports.createBellNumbers = createBellNumbers;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/combinatorics/catalan.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/combinatorics/catalan.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCatalan = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'catalan';
var dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
var createCatalan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      divideScalar = _ref.divideScalar,
      multiplyScalar = _ref.multiplyScalar,
      combinations = _ref.combinations,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger;

  /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function catalan');
      }

      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
    }
  });
});
exports.createCatalan = createCatalan;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/combinatorics/composition.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/combinatorics/composition.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createComposition = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'composition';
var dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
var createComposition = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      combinations = _ref.combinations,
      isPositive = _ref.isPositive,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger,
      larger = _ref.larger;

  /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
  return typed(name, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
        throw new TypeError('Positive integer value expected in function composition');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function composition');
      }

      return combinations(addScalar(n, -1), addScalar(k, -1));
    }
  });
});
exports.createComposition = createComposition;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createStirlingS2 = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'stirlingS2';
var dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];
var createStirlingS2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      pow = _ref.pow,
      factorial = _ref.factorial,
      combinations = _ref.combinations,
      isNegative = _ref.isNegative,
      isInteger = _ref.isInteger,
      larger = _ref.larger;

  /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
  return typed(name, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
        throw new TypeError('Non-negative integer value expected in function stirlingS2');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function stirlingS2');
      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]


      var kFactorial = factorial(k);
      var result = 0;

      for (var i = 0; i <= k; i++) {
        var negativeOne = pow(-1, subtract(k, i));
        var kChooseI = combinations(k, i);
        var iPower = pow(i, n);
        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
      }

      return divideScalar(result, kFactorial);
    }
  });
});
exports.createStirlingS2 = createStirlingS2;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/complex/arg.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/complex/arg.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createArg = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'arg';
var dependencies = ['typed'];
var createArg = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */
  return typed(name, {
    number: function number(x) {
      return Math.atan2(0, x);
    },
    BigNumber: function BigNumber(x) {
      return x.constructor.atan2(0, x);
    },
    Complex: function Complex(x) {
      return x.arg();
    },
    // TODO: implement BigNumber support for function arg
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createArg = createArg;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/complex/conj.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/complex/conj.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createConj = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'conj';
var dependencies = ['typed'];
var createConj = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
  return typed(name, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.conjugate();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createConj = createConj;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/complex/im.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/complex/im.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIm = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'im';
var dependencies = ['typed'];
var createIm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
  return typed(name, {
    number: function number(x) {
      return 0;
    },
    BigNumber: function BigNumber(x) {
      return x.mul(0);
    },
    Fraction: function Fraction(x) {
      return x.mul(0);
    },
    Complex: function Complex(x) {
      return x.im;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIm = createIm;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/complex/re.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/complex/re.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRe = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 're';
var dependencies = ['typed'];
var createRe = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
  return typed(name, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Fraction: function Fraction(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.re;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createRe = createRe;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/geometry/distance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/geometry/distance.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDistance = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'distance';
var dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
var createDistance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      unaryMinus = _ref.unaryMinus,
      sqrt = _ref.sqrt,
      abs = _ref.abs;

  /**
    * Calculates:
    *    The eucledian distance between two points in N-dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */
  return typed(name, {
    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
      if (x.length === 2 && y.length === 2 && z.length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
        var constant = x[1];
        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
        }

        if (!_2d(z)) {
          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
          var constant = x.pointX;
          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array, Array': function ArrayArray(x, y) {
      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
      if (x.length === 2 && y.length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
      } else if (x.length === 3 && y.length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      } else if (x.length === y.length && x.length > 0) {
        // Point to Point N-dimensions
        if (!_containsOnlyNumbers(x)) {
          throw new TypeError('All values of an array should be numbers or BigNumbers');
        }

        if (!_containsOnlyNumbers(y)) {
          throw new TypeError('All values of an array should be numbers or BigNumbers');
        }

        return _euclideanDistance(x, y);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object': function ObjectObject(x, y) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
        }

        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
        }

        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
        }

        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    Array: function Array(arr) {
      if (!_pairwise(arr)) {
        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
      }

      return _distancePairwise(arr);
    }
  });

  function _isNumber(a) {
    // distance supports numbers and bignumbers
    return typeof a === 'number' || (0, _is.isBigNumber)(a);
  }

  function _2d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]);
  }

  function _3d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
  }

  function _containsOnlyNumbers(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (!Array.isArray(a)) {
      a = _objectToArray(a);
    }

    return a.every(_isNumber);
  }

  function _parametricLine(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
  }

  function _objectToArray(o) {
    var keys = Object.keys(o);
    var a = [];

    for (var i = 0; i < keys.length; i++) {
      a.push(o[keys[i]]);
    }

    return a;
  }

  function _pairwise(a) {
    // checks for valid arguments passed to _distancePairwise(Array)
    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
      if (a.some(function (aI) {
        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);
      })) {
        return false;
      }
    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
      if (a.some(function (aI) {
        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);
      })) {
        return false;
      }
    } else {
      return false;
    }

    return true;
  }

  function _distancePointLine2D(x, y, a, b, c) {
    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
    return divideScalar(num, den);
  }

  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
    return divideScalar(num, den);
  }

  function _euclideanDistance(x, y) {
    var vectorSize = x.length;
    var result = 0;
    var diff = 0;

    for (var i = 0; i < vectorSize; i++) {
      diff = subtract(x[i], y[i]);
      result = addScalar(multiplyScalar(diff, diff), result);
    }

    return sqrt(result);
  }

  function _distancePairwise(a) {
    var result = [];
    var pointA = [];
    var pointB = [];

    for (var i = 0; i < a.length - 1; i++) {
      for (var j = i + 1; j < a.length; j++) {
        if (a[0].length === 2) {
          pointA = [a[i][0], a[i][1]];
          pointB = [a[j][0], a[j][1]];
        } else if (a[0].length === 3) {
          pointA = [a[i][0], a[i][1], a[i][2]];
          pointB = [a[j][0], a[j][1], a[j][2]];
        }

        result.push(_euclideanDistance(pointA, pointB));
      }
    }

    return result;
  }
});
exports.createDistance = createDistance;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/geometry/intersect.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/geometry/intersect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIntersect = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'intersect';
var dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten'];
var createIntersect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      abs = _ref.abs,
      add = _ref.add,
      addScalar = _ref.addScalar,
      matrix = _ref.matrix,
      multiply = _ref.multiply,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      subtract = _ref.subtract,
      smaller = _ref.smaller,
      equalScalar = _ref.equalScalar,
      flatten = _ref.flatten;

  /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR undefined if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
  return typed('intersect', {
    'Array, Array, Array': _AAA,
    'Array, Array, Array, Array': _AAAA,
    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());

      return arr === null ? null : matrix(arr);
    },
    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
      // TODO: output matrix type should match input matrix type
      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());

      return arr === null ? null : matrix(arr);
    }
  });

  function _AAA(x, y, plane) {
    x = _coerceArr(x);
    y = _coerceArr(y);
    plane = _coerceArr(plane);

    if (!_3d(x)) {
      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
    }

    if (!_3d(y)) {
      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
    }

    if (!_4d(plane)) {
      throw new TypeError('Array with 4 numbers expected as third argument');
    }

    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
  }

  function _AAAA(w, x, y, z) {
    w = _coerceArr(w);
    x = _coerceArr(x);
    y = _coerceArr(y);
    z = _coerceArr(z);

    if (w.length === 2) {
      if (!_2d(w)) {
        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
      }

      if (!_2d(x)) {
        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
      }

      if (!_2d(y)) {
        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
      }

      if (!_2d(z)) {
        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
      }

      return _intersect2d(w, x, y, z);
    } else if (w.length === 3) {
      if (!_3d(w)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
      }

      if (!_3d(x)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
      }

      if (!_3d(y)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
      }

      if (!_3d(z)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
      }

      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
    } else {
      throw new TypeError('Arrays with two or thee dimensional points expected');
    }
  }
  /** Coerce row and column 2-dim arrays to 1-dim array */


  function _coerceArr(arr) {
    // row matrix
    if (arr.length === 1) return arr[0]; // column matrix

    if (arr.length > 1 && Array.isArray(arr[0])) {
      if (arr.every(function (el) {
        return Array.isArray(el) && el.length === 1;
      })) return flatten(arr);
    }

    return arr;
  }

  function _isNumeric(a) {
    // intersect supports numbers and bignumbers
    return typeof a === 'number' || (0, _is.isBigNumber)(a);
  }

  function _2d(x) {
    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
  }

  function _3d(x) {
    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
  }

  function _4d(x) {
    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
  }

  function _intersect2d(p1a, p1b, p2a, p2b) {
    var o1 = p1a;
    var o2 = p2a;
    var d1 = subtract(o1, p1b);
    var d2 = subtract(o2, p2b);
    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));

    if (smaller(abs(det), config.epsilon)) {
      return null;
    }

    var d20o11 = multiplyScalar(d2[0], o1[1]);
    var d21o10 = multiplyScalar(d2[1], o1[0]);
    var d20o21 = multiplyScalar(d2[0], o2[1]);
    var d21o20 = multiplyScalar(d2[1], o2[0]);
    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
    return add(multiply(d1, t), o1);
  }

  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
    return addScalar(addScalar(add1, add2), add3);
  }

  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));

    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
      return [pax, pay, paz];
    } else {
      return null;
    }
  }

  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
    var x1x = multiplyScalar(x1, x);
    var x2x = multiplyScalar(x2, x);
    var y1y = multiplyScalar(y1, y);
    var y2y = multiplyScalar(y2, y);
    var z1z = multiplyScalar(z1, z);
    var z2z = multiplyScalar(z2, z);
    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);
    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);
    var t = divideScalar(numerator, denominator);
    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
  }
});
exports.createIntersect = createIntersect;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/logical/and.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/logical/and.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAnd = void 0;

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm06.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'and';
var dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
var createAnd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      zeros = _ref.zeros,
      not = _ref.not;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = (0, _algorithm5.createAlgorithm06)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */

  return typed(name, {
    'number, number': _index.andNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});
exports.createAnd = createAnd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/logical/not.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/logical/not.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNot = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'not';
var dependencies = ['typed'];
var createNot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
  return typed(name, {
    number: _index.notNumber,
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    BigNumber: function BigNumber(x) {
      return x.isZero() || x.isNaN();
    },
    Unit: function Unit(x) {
      return x.value !== null ? this(x.value) : true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createNot = createNot;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/logical/or.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/logical/or.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createOr = void 0;

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'or';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createOr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm05 = (0, _algorithm5.createAlgorithm05)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm2.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */

  return typed(name, {
    'number, number': _index.orNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createOr = createOr;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/logical/xor.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/logical/xor.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createXor = void 0;

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'xor';
var dependencies = ['typed', 'matrix', 'DenseMatrix'];
var createXor = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */

  return typed(name, {
    'number, number': _index.xorNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createXor = createXor;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/apply.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/apply.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createApply = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _IndexError = __webpack_require__(/*! ../../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

var name = 'apply';
var dependencies = ['typed', 'isInteger'];
var createApply = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      isInteger = _ref.isInteger;

  /**
   * Apply a function that maps an array to a scalar
   * along a given axis of a matrix or array.
   * Returns a new matrix or array with one less dimension than the input.
   *
   * Syntax:
   *
   *     math.apply(A, dim, callback)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [3, 4]]
   *    const sum = math.sum
   *
   *    math.apply(A, 0, sum)             // returns [4, 6]
   *    math.apply(A, 1, sum)             // returns [3, 7]
   *
   * See also:
   *
   *    map, filter, forEach
   *
   * @param {Array | Matrix} array   The input Matrix
   * @param {number} dim             The dimension along which the callback is applied
   * @param {Function} callback      The callback function that is applied. This Function
   *                                 should take an array or 1-d matrix as an input and
   *                                 return a number.
   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
   */
  return typed(name, {
    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
      if (!isInteger(dim)) {
        throw new TypeError('Integer number expected for dimension');
      }

      var size = Array.isArray(mat) ? (0, _array.arraySize)(mat) : mat.size();

      if (dim < 0 || dim >= size.length) {
        throw new _IndexError.IndexError(dim, size.length);
      }

      if ((0, _is.isMatrix)(mat)) {
        return mat.create(_apply(mat.valueOf(), dim, callback));
      } else {
        return _apply(mat, dim, callback);
      }
    }
  });
});
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

exports.createApply = createApply;

function _apply(mat, dim, callback) {
  var i, ret, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      return callback(mat);
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _apply(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _apply(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/column.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/column.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createColumn = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var name = 'column';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
var createColumn = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;

  /**
   * Return a column from a Matrix.
   *
   * Syntax:
   *
   *     math.column(value, index)
   *
   * Example:
   *
   *     // get a column
   *     const d = [[1, 2], [3, 4]]
   *     math.column(d, 1) // returns [[2], [4]]
   *
   * See also:
   *
   *     row
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} column           The index of the column
   * @return {Array | Matrix}         The retrieved column
   */
  return typed(name, {
    'Matrix, number': _column,
    'Array, number': function ArrayNumber(value, column) {
      return _column(matrix((0, _object.clone)(value)), column).valueOf();
    }
  });
  /**
   * Retrieve a column of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} column  The index of the column
   * @return {Matrix}        The retrieved column
   */

  function _column(value, column) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    (0, _array.validateIndex)(column, value.size()[1]);
    var rowRange = range(0, value.size()[0]);
    var index = new Index(rowRange, column);
    return value.subset(index);
  }
});
exports.createColumn = createColumn;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/concat.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createConcat = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _IndexError = __webpack_require__(/*! ../../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

var _DimensionError = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'concat';
var dependencies = ['typed', 'matrix', 'isInteger'];
var createConcat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      isInteger = _ref.isInteger;

  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [5, 6]]
   *    const B = [[3, 4], [7, 8]]
   *
   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world') // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
  return typed(name, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
      var i;
      var len = args.length;
      var dim = -1; // zero-based dimension

      var prevDim;
      var asMatrix = false;
      var matrices = []; // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

        if ((0, _is.isMatrix)(arg)) {
          asMatrix = true;
        }

        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          } // last argument contains the dimension on which to concatenate


          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          if (dim < 0 || i > 0 && dim > prevDim) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new _IndexError.IndexError(dim, prevDim + 1);
          }
        } else {
          // this is a matrix or array
          var m = (0, _object.clone)(arg).valueOf();
          var size = (0, _array.arraySize)(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

          if (i > 0 && dim !== prevDim) {
            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);
          }
        }
      }

      if (matrices.length === 0) {
        throw new SyntaxError('At least one matrix expected');
      }

      var res = matrices.shift();

      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }

      return asMatrix ? matrix(res) : res;
    },
    '...string': function string(args) {
      return args.join('');
    }
  });
});
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */

exports.createConcat = createConcat;

function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length !== b.length) {
      throw new _DimensionError.DimensionError(a.length, b.length);
    }

    var c = [];

    for (var i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }

    return c;
  } else {
    // concatenate this dimension
    return a.concat(b);
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/count.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/count.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCount = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'count';
var dependencies = ['typed', 'size', 'prod'];
var createCount = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      prod = _ref.prod;

  /**
   * Count the number of elements of a matrix, array or string.
   *
   * Syntax:
   *
   *     math.count(x)
   *
   * Examples:
   *
   *     math.count('hello world')        // returns 11
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.count(A)                    // returns 6
   *     math.count(math.range(1,6))      // returns 5
   *
   * See also:
   *
   *     size
   *
   * @param {string | Array | Matrix} x  A matrix or string
   * @return {number} An integer with the elements in `x`.
   */
  return typed(name, {
    string: function string(x) {
      return x.length;
    },
    'Matrix | Array': function MatrixArray(x) {
      return prod(size(x));
    }
  });
});
exports.createCount = createCount;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/cross.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/cross.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCross = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'cross';
var dependencies = ['typed', 'matrix', 'subtract', 'multiply'];
var createCross = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      subtract = _ref.subtract,
      multiply = _ref.multiply;

  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
  return typed(name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_cross(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_cross(x, y.toArray()));
    },
    'Array, Array': _cross
  });
  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */

  function _cross(x, y) {
    var highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);
    x = (0, _array.squeeze)(x);
    y = (0, _array.squeeze)(y);
    var xSize = (0, _array.arraySize)(x);
    var ySize = (0, _array.arraySize)(y);

    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }

    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
});
exports.createCross = createCross;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/ctranspose.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/ctranspose.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCtranspose = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ctranspose';
var dependencies = ['typed', 'transpose', 'conj'];
var createCtranspose = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      transpose = _ref.transpose,
      conj = _ref.conj;

  /**
   * Transpose and complex conjugate a matrix. All values of the matrix are
   * reflected over its main diagonal and then the complex conjugate is
   * taken. This is equivalent to complex conjugation for scalars and
   * vectors.
   *
   * Syntax:
   *
   *     math.ctranspose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
   *
   * See also:
   *
   *     transpose, diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be ctransposed
   * @return {Array | Matrix}   The ctransposed matrix
   */
  return typed(name, {
    any: function any(x) {
      return conj(transpose(x));
    }
  });
});
exports.createCtranspose = createCtranspose;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/det.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/det.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDet = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'det';
var dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];
var createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      unaryMinus = _ref.unaryMinus,
      lup = _ref.lup;

  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]) // returns -2
   *
   *    const A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A) // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
  return typed(name, {
    any: function any(x) {
      return (0, _object.clone)(x);
    },
    'Array | Matrix': function det(x) {
      var size;

      if ((0, _is.isMatrix)(x)) {
        size = x.size();
      } else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      } else {
        // a scalar
        size = [];
      }

      switch (size.length) {
        case 0:
          // scalar
          return (0, _object.clone)(x);

        case 1:
          // vector
          if (size[0] === 1) {
            return (0, _object.clone)(x.valueOf()[0]);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        case 2:
          {
            // two dimensional array
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              return _det(x.clone().valueOf(), rows, cols);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
            }
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    }
  });
  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */

  function _det(matrix, rows, cols) {
    if (rows === 1) {
      // this is a 1 x 1 matrix
      return (0, _object.clone)(matrix[0][0]);
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
    } else {
      // Compute the LU decomposition
      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

      var det = decomp.U[0][0];

      for (var _i = 1; _i < rows; _i++) {
        det = multiply(det, decomp.U[_i][_i]);
      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
      // This can be determined by counting the cycles. This is roughly a linear time algorithm.


      var evenCycles = 0;
      var i = 0;
      var visited = [];

      while (true) {
        while (visited[i]) {
          i++;
        }

        if (i >= rows) break;
        var j = i;
        var cycleLen = 0;

        while (!visited[decomp.p[j]]) {
          visited[decomp.p[j]] = true;
          j = decomp.p[j];
          cycleLen++;
        }

        if (cycleLen % 2 === 0) {
          evenCycles++;
        }
      }

      return evenCycles % 2 === 0 ? det : unaryMinus(det);
    }
  }
});
exports.createDet = createDet;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/diag.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/diag.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDiag = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'diag';
var dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
var createDiag = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
   *    math.diag(a)   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, identity
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
  return typed(name, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    Array: function Array(x) {
      return _diag(x, 0, (0, _array.arraySize)(x), null);
    },
    'Array, number': function ArrayNumber(x, k) {
      return _diag(x, k, (0, _array.arraySize)(x), null);
    },
    'Array, BigNumber': function ArrayBigNumber(x, k) {
      return _diag(x, k.toNumber(), (0, _array.arraySize)(x), null);
    },
    'Array, string': function ArrayString(x, format) {
      return _diag(x, 0, (0, _array.arraySize)(x), format);
    },
    'Array, number, string': function ArrayNumberString(x, k, format) {
      return _diag(x, k, (0, _array.arraySize)(x), format);
    },
    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), (0, _array.arraySize)(x), format);
    },
    Matrix: function Matrix(x) {
      return _diag(x, 0, x.size(), x.storage());
    },
    'Matrix, number': function MatrixNumber(x, k) {
      return _diag(x, k, x.size(), x.storage());
    },
    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },
    'Matrix, string': function MatrixString(x, format) {
      return _diag(x, 0, x.size(), format);
    },
    'Matrix, number, string': function MatrixNumberString(x, k, format) {
      return _diag(x, k, x.size(), format);
    },
    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });
  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */

  function _diag(x, k, size, format) {
    if (!(0, _number.isInteger)(k)) {
      throw new TypeError('Second parameter in function diag must be an integer');
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // check dimensions

    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }

    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }

  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    var ms = [l + kSub, l + kSuper];

    if (format && format !== 'sparse' && format !== 'dense') {
      throw new TypeError("Unknown matrix type ".concat(format, "\""));
    } // create diagonal matrix


    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

    return format !== null ? m : m.valueOf();
  }

  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if ((0, _is.isMatrix)(x)) {
      // get diagonal matrix
      var dm = x.diagonal(k); // check we need to return a matrix

      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage()) {
          return matrix(dm, format);
        }

        return dm;
      }

      return dm.valueOf();
    } // vector size


    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

    var vector = []; // loop diagonal

    for (var i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    } // check we need to return a matrix


    return format !== null ? matrix(vector) : vector;
  }
});
exports.createDiag = createDiag;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/diff.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/diff.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDiff = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'diff';
var dependencies = ['typed', 'matrix', 'subtract', 'number'];
var createDiff = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      subtract = _ref.subtract,
      number = _ref.number;

  /**
   * Create a new matrix or array of the difference between elements of the given array
   * The optional dim parameter lets you specify the dimension to evaluate the difference of
   * If no dimension parameter is passed it is assumed as dimension 0
   *
   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber
   * Arrays must be 'rectangular' meaning arrays like [1, 2]
   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays
   *
   * Syntax:
   *
   *     math.diff(arr)
   *     math.diff(arr, dim)
   *
   * Examples:
   *
   *     const arr = [1, 2, 4, 7, 0]
   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)
   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])
   *
   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]
   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *
   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3
   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed
   *
   *     // These will all produce the same result
   *     math.diff([[1, 2], [3, 4]])
   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])
   *     math.diff([[1, 2], math.matrix([3, 4])])
   *     math.diff([math.matrix([1, 2]), [3, 4]])
   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix
   *
   * See Also:
   *
   *      sum
   *      subtract
   *      partitionSelect
   *
   * @param {Array | Matrix} arr    An array or matrix
   * @param {number} dim            Dimension
   * @return {Array | Matrix}       Difference between array elements in given dimension
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(arr) {
      // No dimension specified => assume dimension 0
      if ((0, _is.isMatrix)(arr)) {
        return matrix(_diff(arr.toArray()));
      } else {
        return _diff(arr);
      }
    },
    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {
      if (!(0, _number.isInteger)(dim)) throw new RangeError('Dimension must be a whole number');

      if ((0, _is.isMatrix)(arr)) {
        return matrix(_recursive(arr.toArray(), dim));
      } else {
        return _recursive(arr, dim);
      }
    },
    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {
      return this(arr, number(dim));
    }
  });
  /**
   * Recursively find the correct dimension in the array/matrix
   * Then Apply _diff to that dimension
   *
   * @param {Array} arr      The array
   * @param {number} dim     Dimension
   * @return {Array}         resulting array
   */

  function _recursive(arr, dim) {
    if ((0, _is.isMatrix)(arr)) {
      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly
    }

    if (!Array.isArray(arr)) {
      throw RangeError('Array/Matrix does not have that many dimensions');
    }

    if (dim > 0) {
      var result = [];
      arr.forEach(function (element) {
        result.push(_recursive(element, dim - 1));
      });
      return result;
    } else if (dim === 0) {
      return _diff(arr);
    } else {
      throw RangeError('Cannot have negative dimension');
    }
  }
  /**
   * Difference between elements in the array
   *
   * @param {Array} arr      An array
   * @return {Array}         resulting array
   */


  function _diff(arr) {
    var result = [];
    var size = arr.length;

    if (size < 2) {
      return arr;
    }

    for (var i = 1; i < size; i++) {
      result.push(_ElementDiff(arr[i - 1], arr[i]));
    }

    return result;
  }
  /**
   * Difference between 2 objects
   *
   * @param {Object} obj1    First object
   * @param {Object} obj2    Second object
   * @return {Array}         resulting array
   */


  function _ElementDiff(obj1, obj2) {
    // Convert matrices to arrays
    if ((0, _is.isMatrix)(obj1)) obj1 = obj1.toArray();
    if ((0, _is.isMatrix)(obj2)) obj2 = obj2.toArray();
    var obj1IsArray = Array.isArray(obj1);
    var obj2IsArray = Array.isArray(obj2);

    if (obj1IsArray && obj2IsArray) {
      return _ArrayDiff(obj1, obj2);
    }

    if (!obj1IsArray && !obj2IsArray) {
      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)
    }

    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');
  }
  /**
   * Difference of elements in 2 arrays
   *
   * @param {Array} arr1     Array 1
   * @param {Array} arr2     Array 2
   * @return {Array}         resulting array
   */


  function _ArrayDiff(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      throw RangeError('Not all sub-arrays have the same length');
    }

    var result = [];
    var size = arr1.length;

    for (var i = 0; i < size; i++) {
      result.push(_ElementDiff(arr1[i], arr2[i]));
    }

    return result;
  }
});
exports.createDiff = createDiff;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/dot.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/dot.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDot = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'dot';
var dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
var createDot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      addScalar = _ref.addScalar,
      multiplyScalar = _ref.multiplyScalar,
      conj = _ref.conj,
      size = _ref.size;

  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
   *
   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
  return typed(name, {
    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
    'SparseMatrix, SparseMatrix': _sparseDot
  });

  function _validateDim(x, y) {
    var xSize = _size(x);

    var ySize = _size(y);

    var xLen, yLen;

    if (xSize.length === 1) {
      xLen = xSize[0];
    } else if (xSize.length === 2 && xSize[1] === 1) {
      xLen = xSize[0];
    } else {
      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
    }

    if (ySize.length === 1) {
      yLen = ySize[0];
    } else if (ySize.length === 2 && ySize[1] === 1) {
      yLen = ySize[0];
    } else {
      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
    }

    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
    return xLen;
  }

  function _denseDot(a, b) {
    var N = _validateDim(a, b);

    var adata = (0, _is.isMatrix)(a) ? a._data : a;
    var adt = (0, _is.isMatrix)(a) ? a._datatype : undefined;
    var bdata = (0, _is.isMatrix)(b) ? b._data : b;
    var bdt = (0, _is.isMatrix)(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)

    var aIsColumn = _size(a).length === 2;
    var bIsColumn = _size(b).length === 2;
    var add = addScalar;
    var mul = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      var dt = adt; // find signatures that matches (dt, dt)

      add = typed.find(addScalar, [dt, dt]);
      mul = typed.find(multiplyScalar, [dt, dt]);
    } // both vectors 1-dimensional


    if (!aIsColumn && !bIsColumn) {
      var c = mul(conj(adata[0]), bdata[0]);

      for (var i = 1; i < N; i++) {
        c = add(c, mul(conj(adata[i]), bdata[i]));
      }

      return c;
    } // a is 1-dim, b is column


    if (!aIsColumn && bIsColumn) {
      var _c = mul(conj(adata[0]), bdata[0][0]);

      for (var _i = 1; _i < N; _i++) {
        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
      }

      return _c;
    } // a is column, b is 1-dim


    if (aIsColumn && !bIsColumn) {
      var _c2 = mul(conj(adata[0][0]), bdata[0]);

      for (var _i2 = 1; _i2 < N; _i2++) {
        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
      }

      return _c2;
    } // both vectors are column


    if (aIsColumn && bIsColumn) {
      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);

      for (var _i3 = 1; _i3 < N; _i3++) {
        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
      }

      return _c3;
    }
  }

  function _sparseDot(x, y) {
    _validateDim(x, y);

    var xindex = x._index;
    var xvalues = x._values;
    var yindex = y._index;
    var yvalues = y._values; // TODO optimize add & mul using datatype

    var c = 0;
    var add = addScalar;
    var mul = multiplyScalar;
    var i = 0;
    var j = 0;

    while (i < xindex.length && j < yindex.length) {
      var I = xindex[i];
      var J = yindex[j];

      if (I < J) {
        i++;
        continue;
      }

      if (I > J) {
        j++;
        continue;
      }

      if (I === J) {
        c = add(c, mul(xvalues[i], yvalues[j]));
        i++;
        j++;
      }
    }

    return c;
  } // TODO remove this once #1771 is fixed


  function _size(x) {
    return (0, _is.isMatrix)(x) ? x.size() : size(x);
  }
});
exports.createDot = createDot;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/eigs.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/eigs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createEigs = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _complexEigs = __webpack_require__(/*! ./eigs/complexEigs.js */ "./node_modules/mathjs/lib/cjs/function/matrix/eigs/complexEigs.js");

var _realSymetric = __webpack_require__(/*! ./eigs/realSymetric.js */ "./node_modules/mathjs/lib/cjs/function/matrix/eigs/realSymetric.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'eigs'; // The absolute state of math.js's dependency system:

var dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];
var createEigs = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var config = _ref.config,
      typed = _ref.typed,
      matrix = _ref.matrix,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      equal = _ref.equal,
      abs = _ref.abs,
      atan = _ref.atan,
      cos = _ref.cos,
      sin = _ref.sin,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      inv = _ref.inv,
      bignumber = _ref.bignumber,
      multiply = _ref.multiply,
      add = _ref.add,
      larger = _ref.larger,
      column = _ref.column,
      flatten = _ref.flatten,
      number = _ref.number,
      complex = _ref.complex,
      sqrt = _ref.sqrt,
      diag = _ref.diag,
      qr = _ref.qr,
      usolve = _ref.usolve,
      usolveAll = _ref.usolveAll,
      im = _ref.im,
      re = _ref.re,
      smaller = _ref.smaller,
      matrixFromColumns = _ref.matrixFromColumns,
      dot = _ref.dot;
  var doRealSymetric = (0, _realSymetric.createRealSymmetric)({
    config: config,
    addScalar: addScalar,
    subtract: subtract,
    column: column,
    flatten: flatten,
    equal: equal,
    abs: abs,
    atan: atan,
    cos: cos,
    sin: sin,
    multiplyScalar: multiplyScalar,
    inv: inv,
    bignumber: bignumber,
    complex: complex,
    multiply: multiply,
    add: add
  });
  var doComplexEigs = (0, _complexEigs.createComplexEigs)({
    config: config,
    addScalar: addScalar,
    subtract: subtract,
    multiply: multiply,
    multiplyScalar: multiplyScalar,
    flatten: flatten,
    divideScalar: divideScalar,
    sqrt: sqrt,
    abs: abs,
    bignumber: bignumber,
    diag: diag,
    qr: qr,
    inv: inv,
    usolve: usolve,
    usolveAll: usolveAll,
    equal: equal,
    complex: complex,
    larger: larger,
    smaller: smaller,
    matrixFromColumns: matrixFromColumns,
    dot: dot
  });
  /**
   * Compute eigenvalues and eigenvectors of a matrix. The eigenvalues are sorted by their absolute value, ascending.
   * An eigenvalue with multiplicity k will be listed k times. The eigenvectors are returned as columns of a matrix –
   * the eigenvector that belongs to the j-th eigenvalue in the list (eg. `values[j]`) is the j-th column (eg. `column(vectors, j)`).
   * If the algorithm fails to converge, it will throw an error – in that case, however, you may still find useful information
   * in `err.values` and `err.vectors`.
   *
   * Syntax:
   *
   *     math.eigs(x, [prec])
   *
   * Examples:
   *
   *     const { eigs, multiply, column, transpose } = math
   *     const H = [[5, 2.3], [2.3, 1]]
   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}
   *     const E = ans.values
   *     const U = ans.vectors
   *     multiply(H, column(U, 0)) // returns multiply(E[0], column(U, 0))
   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H
   *     E[0] == UTxHxU[0][0]  // returns true
   *
   * See also:
   *
   *     inv
   *
   * @param {Array | Matrix} x  Matrix to be diagonalized
   *
   * @param {number | BigNumber} [prec] Precision, default value: 1e-15
   * @return {{values: Array|Matrix, vectors: Array|Matrix}} Object containing an array of eigenvalues and a matrix with eigenvectors as columns.
   *
   */

  return typed('eigs', {
    Array: function Array(x) {
      var mat = matrix(x);
      return computeValuesAndVectors(mat);
    },
    'Array, number|BigNumber': function ArrayNumberBigNumber(x, prec) {
      var mat = matrix(x);
      return computeValuesAndVectors(mat, prec);
    },
    Matrix: function Matrix(mat) {
      var _computeValuesAndVect = computeValuesAndVectors(mat),
          values = _computeValuesAndVect.values,
          vectors = _computeValuesAndVect.vectors;

      return {
        values: matrix(values),
        vectors: matrix(vectors)
      };
    },
    'Matrix, number|BigNumber': function MatrixNumberBigNumber(mat, prec) {
      var _computeValuesAndVect2 = computeValuesAndVectors(mat, prec),
          values = _computeValuesAndVect2.values,
          vectors = _computeValuesAndVect2.vectors;

      return {
        values: matrix(values),
        vectors: matrix(vectors)
      };
    }
  });

  function computeValuesAndVectors(mat, prec) {
    if (prec === undefined) {
      prec = config.epsilon;
    }

    var size = mat.size();

    if (size.length !== 2 || size[0] !== size[1]) {
      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');
    }

    var arr = mat.toArray();
    var N = size[0];

    if (isReal(arr, N, prec)) {
      coerceReal(arr, N);

      if (isSymmetric(arr, N, prec)) {
        var _type = coerceTypes(mat, arr, N);

        return doRealSymetric(arr, N, prec, _type);
      }
    }

    var type = coerceTypes(mat, arr, N);
    return doComplexEigs(arr, N, prec, type);
  }
  /** @return {boolean} */


  function isSymmetric(arr, N, prec) {
    for (var i = 0; i < N; i++) {
      for (var j = i; j < N; j++) {
        // TODO proper comparison of bignum and frac
        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {
          return false;
        }
      }
    }

    return true;
  }
  /** @return {boolean} */


  function isReal(arr, N, prec) {
    for (var i = 0; i < N; i++) {
      for (var j = 0; j < N; j++) {
        // TODO proper comparison of bignum and frac
        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {
          return false;
        }
      }
    }

    return true;
  }

  function coerceReal(arr, N) {
    for (var i = 0; i < N; i++) {
      for (var j = 0; j < N; j++) {
        arr[i][j] = re(arr[i][j]);
      }
    }
  }
  /** @return {'number' | 'BigNumber' | 'Complex'} */


  function coerceTypes(mat, arr, N) {
    /** @type {string} */
    var type = mat.datatype();

    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {
      return type;
    }

    var hasNumber = false;
    var hasBig = false;
    var hasComplex = false;

    for (var i = 0; i < N; i++) {
      for (var j = 0; j < N; j++) {
        var el = arr[i][j];

        if ((0, _is.isNumber)(el) || (0, _is.isFraction)(el)) {
          hasNumber = true;
        } else if ((0, _is.isBigNumber)(el)) {
          hasBig = true;
        } else if ((0, _is.isComplex)(el)) {
          hasComplex = true;
        } else {
          throw TypeError('Unsupported type in Matrix: ' + (0, _is.typeOf)(el));
        }
      }
    }

    if (hasBig && hasComplex) {
      console.warn('Complex BigNumbers not supported, this operation will lose precission.');
    }

    if (hasComplex) {
      for (var _i = 0; _i < N; _i++) {
        for (var _j = 0; _j < N; _j++) {
          arr[_i][_j] = complex(arr[_i][_j]);
        }
      }

      return 'Complex';
    }

    if (hasBig) {
      for (var _i2 = 0; _i2 < N; _i2++) {
        for (var _j2 = 0; _j2 < N; _j2++) {
          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);
        }
      }

      return 'BigNumber';
    }

    if (hasNumber) {
      for (var _i3 = 0; _i3 < N; _i3++) {
        for (var _j3 = 0; _j3 < N; _j3++) {
          arr[_i3][_j3] = number(arr[_i3][_j3]);
        }
      }

      return 'number';
    } else {
      throw TypeError('Matrix contains unsupported types only.');
    }
  }
});
exports.createEigs = createEigs;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/eigs/complexEigs.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/eigs/complexEigs.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createComplexEigs = createComplexEigs;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _object = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function createComplexEigs(_ref) {
  var addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      flatten = _ref.flatten,
      multiply = _ref.multiply,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      sqrt = _ref.sqrt,
      abs = _ref.abs,
      bignumber = _ref.bignumber,
      diag = _ref.diag,
      inv = _ref.inv,
      qr = _ref.qr,
      usolve = _ref.usolve,
      usolveAll = _ref.usolveAll,
      equal = _ref.equal,
      complex = _ref.complex,
      larger = _ref.larger,
      smaller = _ref.smaller,
      matrixFromColumns = _ref.matrixFromColumns,
      dot = _ref.dot;

  /**
   * @param {number[][]} arr the matrix to find eigenvalues of
   * @param {number} N size of the matrix
   * @param {number|BigNumber} prec precision, anything lower will be considered zero
   * @param {'number'|'BigNumber'|'Complex'} type
   * @param {boolean} findVectors should we find eigenvectors?
   *
   * @returns {{ values: number[], vectors: number[][] }}
   */
  function complexEigs(arr, N, prec, type, findVectors) {
    if (findVectors === undefined) {
      findVectors = true;
    } // TODO check if any row/col are zero except the diagonal
    // make sure corresponding rows and columns have similar magnitude
    // important because of numerical stability


    var R = balance(arr, N, prec, type, findVectors); // R is the row transformation matrix
    // A' = R A R⁻¹, A is the original matrix
    // (if findVectors is false, R is undefined)
    // TODO if magnitudes of elements vary over many orders,
    // move greatest elements to the top left corner
    // using similarity transformations, reduce the matrix
    // to Hessenberg form (upper triangular plus one subdiagonal row)
    // updates the transformation matrix R with new row operationsq

    reduceToHessenberg(arr, N, prec, type, findVectors, R); // find eigenvalues

    var _iterateUntilTriangul = iterateUntilTriangular(arr, N, prec, type, findVectors),
        values = _iterateUntilTriangul.values,
        C = _iterateUntilTriangul.C; // values is the list of eigenvalues, C is the column
    // transformation matrix that transforms the hessenberg
    // matrix to upper triangular
    // compose transformations A → hess. and hess. → triang.


    C = multiply(inv(R), C);
    var vectors;

    if (findVectors) {
      vectors = findEigenvectors(arr, N, C, values, prec, type);
      vectors = matrixFromColumns.apply(void 0, (0, _toConsumableArray2["default"])(vectors));
    }

    return {
      values: values,
      vectors: vectors
    };
  }
  /**
   * @param {number[][]} arr
   * @param {number} N
   * @param {number} prec
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {number[][]}
   */


  function balance(arr, N, prec, type, findVectors) {
    var big = type === 'BigNumber';
    var cplx = type === 'Complex';
    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // base of the floating-point arithmetic

    var radix = big ? bignumber(10) : 2;
    var radixSq = multiplyScalar(radix, radix); // the diagonal transformation matrix R

    var Rdiag;

    if (findVectors) {
      Rdiag = Array(N).fill(one);
    } // this isn't the only time we loop thru the matrix...


    var last = false;

    while (!last) {
      // ...haha I'm joking! unless...
      last = true;

      for (var i = 0; i < N; i++) {
        // compute the taxicab norm of i-th column and row
        // TODO optimize for complex numbers
        var colNorm = zero;
        var rowNorm = zero;

        for (var j = 0; j < N; j++) {
          if (i === j) continue;
          var c = abs(arr[i][j]);
          colNorm = addScalar(colNorm, c);
          rowNorm = addScalar(rowNorm, c);
        }

        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {
          // find integer power closest to balancing the matrix
          // (we want to scale only by integer powers of radix,
          // so that we don't lose any precision due to round-off)
          var f = one;
          var _c = colNorm;
          var rowDivRadix = divideScalar(rowNorm, radix);
          var rowMulRadix = multiplyScalar(rowNorm, radix);

          while (smaller(_c, rowDivRadix)) {
            _c = multiplyScalar(_c, radixSq);
            f = multiplyScalar(f, radix);
          }

          while (larger(_c, rowMulRadix)) {
            _c = divideScalar(_c, radixSq);
            f = divideScalar(f, radix);
          } // check whether balancing is needed
          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)


          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95)); // apply balancing similarity transformation

          if (condition) {
            // we should loop once again to check whether
            // another rebalancing is needed
            last = false;
            var g = divideScalar(1, f);

            for (var _j = 0; _j < N; _j++) {
              if (i === _j) {
                continue;
              }

              arr[i][_j] = multiplyScalar(arr[i][_j], f);
              arr[_j][i] = multiplyScalar(arr[_j][i], g);
            } // keep track of transformations


            if (findVectors) {
              Rdiag[i] = multiplyScalar(Rdiag[i], f);
            }
          }
        }
      }
    } // return the diagonal row transformation matrix


    return diag(Rdiag);
  }
  /**
   * @param {number[][]} arr
   * @param {number} N
   * @param {number} prec
   * @param {'number'|'BigNumber'|'Complex'} type
   * @param {boolean} findVectors
   * @param {number[][]} R the row transformation matrix that will be modified
   */


  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {
    var big = type === 'BigNumber';
    var cplx = type === 'Complex';
    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;

    if (big) {
      prec = bignumber(prec);
    }

    for (var i = 0; i < N - 2; i++) {
      // Find the largest subdiag element in the i-th col
      var maxIndex = 0;
      var max = zero;

      for (var j = i + 1; j < N; j++) {
        var el = arr[j][i];

        if (smaller(abs(max), abs(el))) {
          max = el;
          maxIndex = j;
        }
      } // This col is pivoted, no need to do anything


      if (smaller(abs(max), prec)) {
        continue;
      }

      if (maxIndex !== i + 1) {
        // Interchange maxIndex-th and (i+1)-th row
        var tmp1 = arr[maxIndex];
        arr[maxIndex] = arr[i + 1];
        arr[i + 1] = tmp1; // Interchange maxIndex-th and (i+1)-th column

        for (var _j2 = 0; _j2 < N; _j2++) {
          var tmp2 = arr[_j2][maxIndex];
          arr[_j2][maxIndex] = arr[_j2][i + 1];
          arr[_j2][i + 1] = tmp2;
        } // keep track of transformations


        if (findVectors) {
          var tmp3 = R[maxIndex];
          R[maxIndex] = R[i + 1];
          R[i + 1] = tmp3;
        }
      } // Reduce following rows and columns


      for (var _j3 = i + 2; _j3 < N; _j3++) {
        var n = divideScalar(arr[_j3][i], max);

        if (n === 0) {
          continue;
        } // from j-th row subtract n-times (i+1)th row


        for (var k = 0; k < N; k++) {
          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));
        } // to (i+1)th column add n-times j-th column


        for (var _k = 0; _k < N; _k++) {
          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));
        } // keep track of transformations


        if (findVectors) {
          for (var _k2 = 0; _k2 < N; _k2++) {
            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));
          }
        }
      }
    }

    return R;
  }
  /**
   * @returns {{values: values, C: Matrix}}
   * @see Press, Wiliams: Numerical recipes in Fortran 77
   * @see https://en.wikipedia.org/wiki/QR_algorithm
   */


  function iterateUntilTriangular(A, N, prec, type, findVectors) {
    var big = type === 'BigNumber';
    var cplx = type === 'Complex';
    var one = big ? bignumber(1) : cplx ? complex(1) : 1;

    if (big) {
      prec = bignumber(prec);
    } // The Francis Algorithm
    // The core idea of this algorithm is that doing successive
    // A' = Q⁺AQ transformations will eventually converge to block-
    // upper-triangular with diagonal blocks either 1x1 or 2x2.
    // The Q here is the one from the QR decomposition, A = QR.
    // Since the eigenvalues of a block-upper-triangular matrix are
    // the eigenvalues of its diagonal blocks and we know how to find
    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.


    var arr = (0, _object.clone)(A); // the list of converged eigenvalues

    var lambdas = []; // size of arr, which will get smaller as eigenvalues converge

    var n = N; // the diagonal of the block-diagonal matrix that turns
    // converged 2x2 matrices into upper triangular matrices

    var Sdiag = []; // N×N matrix describing the overall transformation done during the QR algorithm

    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined; // n×n matrix describing the QR transformations done since last convergence

    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined; // last eigenvalue converged before this many steps

    var lastConvergenceBefore = 0;

    while (lastConvergenceBefore <= 100) {
      lastConvergenceBefore += 1; // TODO if the convergence is slow, do something clever
      // Perform the factorization

      var k = 0; // TODO set close to an eigenvalue

      for (var i = 0; i < n; i++) {
        arr[i][i] = subtract(arr[i][i], k);
      } // TODO do an implicit QR transformation


      var _qr = qr(arr),
          Q = _qr.Q,
          R = _qr.R;

      arr = multiply(R, Q);

      for (var _i = 0; _i < n; _i++) {
        arr[_i][_i] = addScalar(arr[_i][_i], k);
      } // keep track of transformations


      if (findVectors) {
        Qpartial = multiply(Qpartial, Q);
      } // The rightmost diagonal element converged to an eigenvalue


      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {
        lastConvergenceBefore = 0;
        lambdas.push(arr[n - 1][n - 1]); // keep track of transformations

        if (findVectors) {
          Sdiag.unshift([[1]]);
          inflateMatrix(Qpartial, N);
          Qtotal = multiply(Qtotal, Qpartial);

          if (n > 1) {
            Qpartial = diag(Array(n - 1).fill(one));
          }
        } // reduce the matrix size


        n -= 1;
        arr.pop();

        for (var _i2 = 0; _i2 < n; _i2++) {
          arr[_i2].pop();
        } // The rightmost diagonal 2x2 block converged

      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {
        lastConvergenceBefore = 0;
        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);
        lambdas.push.apply(lambdas, (0, _toConsumableArray2["default"])(ll)); // keep track of transformations

        if (findVectors) {
          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));
          inflateMatrix(Qpartial, N);
          Qtotal = multiply(Qtotal, Qpartial);

          if (n > 2) {
            Qpartial = diag(Array(n - 2).fill(one));
          }
        } // reduce the matrix size


        n -= 2;
        arr.pop();
        arr.pop();

        for (var _i3 = 0; _i3 < n; _i3++) {
          arr[_i3].pop();

          arr[_i3].pop();
        }
      }

      if (n === 0) {
        break;
      }
    } // standard sorting


    lambdas.sort(function (a, b) {
      return +subtract(abs(a), abs(b));
    }); // the algorithm didn't converge

    if (lastConvergenceBefore > 100) {
      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));
      err.values = lambdas;
      err.vectors = [];
      throw err;
    } // combine the overall QR transformation Qtotal with the subsequent
    // transformation S that turns the diagonal 2x2 blocks to upper triangular


    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;
    return {
      values: lambdas,
      C: C
    };
  }
  /**
   * @param {Matrix} A original matrix
   * @param {number} N size of A
   * @param {Matrix} C column transformation matrix that turns A into upper triangular
   * @param {number[]} values array of eigenvalues of A
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {number[][]} eigenvalues
   */


  function findEigenvectors(A, N, C, values, prec, type) {
    var Cinv = inv(C);
    var U = multiply(Cinv, A, C);
    var big = type === 'BigNumber';
    var cplx = type === 'Complex';
    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // turn values into a kind of "multiset"
    // this way it is easier to find eigenvectors

    var uniqueValues = [];
    var multiplicities = [];

    var _iterator = _createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _λ = _step.value;

        var _i4 = indexOf(uniqueValues, _λ, equal);

        if (_i4 === -1) {
          uniqueValues.push(_λ);
          multiplicities.push(1);
        } else {
          multiplicities[_i4] += 1;
        }
      } // find eigenvectors by solving U − λE = 0
      // TODO replace with an iterative eigenvector algorithm
      // (this one might fail for imprecise eigenvalues)

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var vectors = [];
    var len = uniqueValues.length;
    var b = Array(N).fill(zero);
    var E = diag(Array(N).fill(one)); // eigenvalues for which usolve failed (due to numerical error)

    var failedLambdas = [];

    for (var i = 0; i < len; i++) {
      var λ = uniqueValues[i];

      var _A = subtract(U, multiply(λ, E)); // the characteristic matrix


      var solutions = usolveAll(_A, b);
      solutions = solutions.map(function (v) {
        return multiply(C, v);
      });
      solutions.shift(); // ignore the null vector
      // looks like we missed something, try inverse iteration

      while (solutions.length < multiplicities[i]) {
        var approxVec = inverseIterate(_A, N, solutions, prec, type);

        if (approxVec == null) {
          // no more vectors were found
          failedLambdas.push(λ);
          break;
        }

        solutions.push(approxVec);
      }

      vectors.push.apply(vectors, (0, _toConsumableArray2["default"])(solutions.map(function (v) {
        return flatten(v);
      })));
    }

    if (failedLambdas.length !== 0) {
      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));
      err.values = values;
      err.vectors = vectors;
      throw err;
    }

    return vectors;
  }
  /**
   * Compute the eigenvalues of an 2x2 matrix
   * @return {[number,number]}
   */


  function eigenvalues2x2(a, b, c, d) {
    // λ± = ½ trA ± ½ √( tr²A - 4 detA )
    var trA = addScalar(a, d);
    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));
    var x = multiplyScalar(trA, 0.5);
    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);
    return [addScalar(x, y), subtract(x, y)];
  }
  /**
   * For an 2x2 matrix compute the transformation matrix S,
   * so that SAS⁻¹ is an upper triangular matrix
   * @return {[[number,number],[number,number]]}
   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf
   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html
   */


  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {
    var big = type === 'BigNumber';
    var cplx = type === 'Complex';
    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;
    var one = big ? bignumber(1) : cplx ? complex(1) : 1; // matrix is already upper triangular
    // return an identity matrix

    if (smaller(abs(c), prec)) {
      return [[one, zero], [zero, one]];
    } // matrix is diagonalizable
    // return its eigenvectors as columns


    if (larger(abs(subtract(l1, l2)), prec)) {
      return [[subtract(l1, d), subtract(l2, d)], [c, c]];
    } // matrix is not diagonalizable
    // compute off-diagonal elements of N = A - λI
    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )
    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )


    var na = subtract(a, l1);
    var nb = subtract(b, l1);
    var nc = subtract(c, l1);
    var nd = subtract(d, l1);

    if (smaller(abs(nb), prec)) {
      return [[na, one], [nc, zero]];
    } else {
      return [[nb, zero], [nd, one]];
    }
  }
  /**
   * Enlarge the matrix from n×n to N×N, setting the new
   * elements to 1 on diagonal and 0 elsewhere
   */


  function inflateMatrix(arr, N) {
    // add columns
    for (var i = 0; i < arr.length; i++) {
      var _arr$i;

      (_arr$i = arr[i]).push.apply(_arr$i, (0, _toConsumableArray2["default"])(Array(N - arr[i].length).fill(0)));
    } // add rows


    for (var _i5 = arr.length; _i5 < N; _i5++) {
      arr.push(Array(N).fill(0));
      arr[_i5][_i5] = 1;
    }

    return arr;
  }
  /**
   * Create a block-diagonal matrix with the given square matrices on the diagonal
   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal
   * @param {number} N the size of the resulting matrix
   */


  function blockDiag(arr, N) {
    var M = [];

    for (var i = 0; i < N; i++) {
      M[i] = Array(N).fill(0);
    }

    var I = 0;

    var _iterator2 = _createForOfIteratorHelper(arr),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var sub = _step2.value;
        var n = sub.length;

        for (var _i6 = 0; _i6 < n; _i6++) {
          for (var j = 0; j < n; j++) {
            M[I + _i6][I + j] = sub[_i6][j];
          }
        }

        I += n;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return M;
  }
  /**
   * Finds the index of an element in an array using a custom equality function
   * @template T
   * @param {Array<T>} arr array in which to search
   * @param {T} el the element to find
   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`
   * @returns {number} the index of `el`, or -1 when it's not in `arr`
   */


  function indexOf(arr, el, fn) {
    for (var i = 0; i < arr.length; i++) {
      if (fn(arr[i], el)) {
        return i;
      }
    }

    return -1;
  }
  /**
   * Provided a near-singular upper-triangular matrix A and a list of vectors,
   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal
   * to each vector in the list
   * @template T
   * @param {T[][]} A near-singular square matrix
   * @param {number} N dimension
   * @param {T[][]} orthog list of vectors
   * @param {number} prec epsilon
   * @param {'number'|'BigNumber'|'Complex'} type
   * @return {T[] | null} eigenvector
   *
   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration
   */


  function inverseIterate(A, N, orthog, prec, type) {
    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;
    var b; // the vector
    // you better choose a random vector before I count to five

    var i = 0;

    while (true) {
      b = randomOrthogonalVector(N, orthog, type);
      b = usolve(A, b);

      if (larger(norm(b), largeNum)) {
        break;
      }

      if (++i >= 5) {
        return null;
      }
    } // you better converge before I count to ten


    i = 0;

    while (true) {
      var c = usolve(A, b);

      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {
        break;
      }

      if (++i >= 10) {
        return null;
      }

      b = normalize(c);
    }

    return b;
  }
  /**
   * Generates a random unit vector of dimension N, orthogonal to each vector in the list
   * @template T
   * @param {number} N dimension
   * @param {T[][]} orthog list of vectors
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {T[]} random vector
   */


  function randomOrthogonalVector(N, orthog, type) {
    var big = type === 'BigNumber';
    var cplx = type === 'Complex'; // generate random vector with the correct type

    var v = Array(N).fill(0).map(function (_) {
      return 2 * Math.random() - 1;
    });

    if (big) {
      v = v.map(function (n) {
        return bignumber(n);
      });
    }

    if (cplx) {
      v = v.map(function (n) {
        return complex(n);
      });
    } // project to orthogonal complement


    v = orthogonalComplement(v, orthog); // normalize

    return normalize(v, type);
  }
  /**
   * Project vector v to the orthogonal complement of an array of vectors
   */


  function orthogonalComplement(v, orthog) {
    var _iterator3 = _createForOfIteratorHelper(orthog),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var w = _step3.value;
        // v := v − (w, v)/∥w∥² w
        v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return v;
  }
  /**
   * Calculate the norm of a vector.
   * We can't use math.norm because factory can't handle circular dependency.
   * Seriously, I'm really fed up with factory.
   */


  function norm(v) {
    return abs(sqrt(dot(v, v)));
  }
  /**
   * Normalize a vector
   * @template T
   * @param {T[]} v
   * @param {'number'|'BigNumber'|'Complex'} type
   * @returns {T[]} normalized vec
   */


  function normalize(v, type) {
    var big = type === 'BigNumber';
    var cplx = type === 'Complex';
    var one = big ? bignumber(1) : cplx ? complex(1) : 1;
    return multiply(divideScalar(one, norm(v)), v);
  }

  return complexEigs;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/eigs/realSymetric.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/eigs/realSymetric.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRealSymmetric = createRealSymmetric;

var _object = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

function createRealSymmetric(_ref) {
  var config = _ref.config,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      abs = _ref.abs,
      atan = _ref.atan,
      cos = _ref.cos,
      sin = _ref.sin,
      multiplyScalar = _ref.multiplyScalar,
      inv = _ref.inv,
      bignumber = _ref.bignumber,
      multiply = _ref.multiply,
      add = _ref.add;

  /**
   * @param {number[] | BigNumber[]} arr
   * @param {number} N
   * @param {number} prec
   * @param {'number' | 'BigNumber'} type
   */
  function main(arr, N) {
    var prec = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.epsilon;
    var type = arguments.length > 3 ? arguments[3] : undefined;

    if (type === 'number') {
      return diag(arr, prec);
    }

    if (type === 'BigNumber') {
      return diagBig(arr, prec);
    }

    throw TypeError('Unsupported data type: ' + type);
  } // diagonalization implementation for number (efficient)


  function diag(x, precision) {
    var N = x.length;
    var e0 = Math.abs(precision / N);
    var psi;
    var Sij = new Array(N); // Sij is Identity Matrix

    for (var i = 0; i < N; i++) {
      Sij[i] = createArray(N, 0);
      Sij[i][i] = 1.0;
    } // initial error


    var Vab = getAij(x);

    while (Math.abs(Vab[1]) >= Math.abs(e0)) {
      var _i = Vab[0][0];
      var j = Vab[0][1];
      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
      x = x1(x, psi, _i, j);
      Sij = Sij1(Sij, psi, _i, j);
      Vab = getAij(x);
    }

    var Ei = createArray(N, 0); // eigenvalues

    for (var _i2 = 0; _i2 < N; _i2++) {
      Ei[_i2] = x[_i2][_i2];
    }

    return sorting((0, _object.clone)(Ei), (0, _object.clone)(Sij));
  } // diagonalization implementation for bigNumber


  function diagBig(x, precision) {
    var N = x.length;
    var e0 = abs(precision / N);
    var psi;
    var Sij = new Array(N); // Sij is Identity Matrix

    for (var i = 0; i < N; i++) {
      Sij[i] = createArray(N, 0);
      Sij[i][i] = 1.0;
    } // initial error


    var Vab = getAijBig(x);

    while (abs(Vab[1]) >= abs(e0)) {
      var _i3 = Vab[0][0];
      var j = Vab[0][1];
      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
      x = x1Big(x, psi, _i3, j);
      Sij = Sij1Big(Sij, psi, _i3, j);
      Vab = getAijBig(x);
    }

    var Ei = createArray(N, 0); // eigenvalues

    for (var _i4 = 0; _i4 < N; _i4++) {
      Ei[_i4] = x[_i4][_i4];
    } // return [clone(Ei), clone(Sij)]


    return sorting((0, _object.clone)(Ei), (0, _object.clone)(Sij));
  } // get angle


  function getTheta(aii, ajj, aij) {
    var denom = ajj - aii;

    if (Math.abs(denom) <= config.epsilon) {
      return Math.PI / 4.0;
    } else {
      return 0.5 * Math.atan(2.0 * aij / (ajj - aii));
    }
  } // get angle


  function getThetaBig(aii, ajj, aij) {
    var denom = subtract(ajj, aii);

    if (abs(denom) <= config.epsilon) {
      return bignumber(-1).acos().div(4);
    } else {
      return multiplyScalar(0.5, atan(multiply(2.0, aij, inv(denom))));
    }
  } // update eigvec


  function Sij1(Sij, theta, i, j) {
    var N = Sij.length;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var Ski = createArray(N, 0);
    var Skj = createArray(N, 0);

    for (var k = 0; k < N; k++) {
      Ski[k] = c * Sij[k][i] - s * Sij[k][j];
      Skj[k] = s * Sij[k][i] + c * Sij[k][j];
    }

    for (var _k = 0; _k < N; _k++) {
      Sij[_k][i] = Ski[_k];
      Sij[_k][j] = Skj[_k];
    }

    return Sij;
  } // update eigvec for overlap


  function Sij1Big(Sij, theta, i, j) {
    var N = Sij.length;
    var c = cos(theta);
    var s = sin(theta);
    var Ski = createArray(N, bignumber(0));
    var Skj = createArray(N, bignumber(0));

    for (var k = 0; k < N; k++) {
      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
    }

    for (var _k2 = 0; _k2 < N; _k2++) {
      Sij[_k2][i] = Ski[_k2];
      Sij[_k2][j] = Skj[_k2];
    }

    return Sij;
  } // update matrix


  function x1Big(Hij, theta, i, j) {
    var N = Hij.length;
    var c = bignumber(cos(theta));
    var s = bignumber(sin(theta));
    var c2 = multiplyScalar(c, c);
    var s2 = multiplyScalar(s, s);
    var Aki = createArray(N, bignumber(0));
    var Akj = createArray(N, bignumber(0)); // 2cs Hij

    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii

    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i

    for (var k = 0; k < N; k++) {
      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
    } // Modify Hij


    Hij[i][i] = Aii;
    Hij[j][j] = Ajj;
    Hij[i][j] = bignumber(0);
    Hij[j][i] = bignumber(0); // 0  to i

    for (var _k3 = 0; _k3 < N; _k3++) {
      if (_k3 !== i && _k3 !== j) {
        Hij[i][_k3] = Aki[_k3];
        Hij[_k3][i] = Aki[_k3];
        Hij[j][_k3] = Akj[_k3];
        Hij[_k3][j] = Akj[_k3];
      }
    }

    return Hij;
  } // update matrix


  function x1(Hij, theta, i, j) {
    var N = Hij.length;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var c2 = c * c;
    var s2 = s * s;
    var Aki = createArray(N, 0);
    var Akj = createArray(N, 0); //  Aii

    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i

    for (var k = 0; k < N; k++) {
      Aki[k] = c * Hij[i][k] - s * Hij[j][k];
      Akj[k] = s * Hij[i][k] + c * Hij[j][k];
    } // Modify Hij


    Hij[i][i] = Aii;
    Hij[j][j] = Ajj;
    Hij[i][j] = 0;
    Hij[j][i] = 0; // 0  to i

    for (var _k4 = 0; _k4 < N; _k4++) {
      if (_k4 !== i && _k4 !== j) {
        Hij[i][_k4] = Aki[_k4];
        Hij[_k4][i] = Aki[_k4];
        Hij[j][_k4] = Akj[_k4];
        Hij[_k4][j] = Akj[_k4];
      }
    }

    return Hij;
  } // get max off-diagonal value from Upper Diagonal


  function getAij(Mij) {
    var N = Mij.length;
    var maxMij = 0;
    var maxIJ = [0, 1];

    for (var i = 0; i < N; i++) {
      for (var j = i + 1; j < N; j++) {
        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
          maxMij = Math.abs(Mij[i][j]);
          maxIJ = [i, j];
        }
      }
    }

    return [maxIJ, maxMij];
  } // get max off-diagonal value from Upper Diagonal


  function getAijBig(Mij) {
    var N = Mij.length;
    var maxMij = 0;
    var maxIJ = [0, 1];

    for (var i = 0; i < N; i++) {
      for (var j = i + 1; j < N; j++) {
        if (abs(maxMij) < abs(Mij[i][j])) {
          maxMij = abs(Mij[i][j]);
          maxIJ = [i, j];
        }
      }
    }

    return [maxIJ, maxMij];
  } // sort results


  function sorting(E, S) {
    var N = E.length;
    var values = Array(N);
    var vectors = Array(N);

    for (var k = 0; k < N; k++) {
      vectors[k] = Array(N);
    }

    for (var i = 0; i < N; i++) {
      var minID = 0;
      var minE = E[0];

      for (var j = 0; j < E.length; j++) {
        if (abs(E[j]) < abs(minE)) {
          minID = j;
          minE = E[minID];
        }
      }

      values[i] = E.splice(minID, 1)[0];

      for (var _k5 = 0; _k5 < N; _k5++) {
        vectors[_k5][i] = S[_k5][minID];

        S[_k5].splice(minID, 1);
      }
    }

    return {
      values: values,
      vectors: vectors
    };
  }
  /**
   * Create an array of a certain size and fill all items with an initial value
   * @param {number} size
   * @param {number} value
   * @return {number[]}
   */


  function createArray(size, value) {
    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
    var array = new Array(size);

    for (var i = 0; i < size; i++) {
      array[i] = value;
    }

    return array;
  }

  return main;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/expm.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/expm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createExpm = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'expm';
var dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
var createExpm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      identity = _ref.identity,
      inv = _ref.inv,
      multiply = _ref.multiply;

  /**
   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
   * Not to be confused with exp(a), which performs element-wise
   * exponentiation.
   *
   * The exponential is calculated using the Padé approximant with scaling and
   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
   * Matrix," by Moler and Van Loan.
   *
   * Syntax:
   *
   *     math.expm(x)
   *
   * Examples:
   *
   *     const A = [[0,2],[0,0]]
   *     math.expm(A)        // returns [[1,2],[0,1]]
   *
   * See also:
   *
   *     exp
   *
   * @param {Matrix} x  A square Matrix
   * @return {Matrix}   The exponential of x
   */
  return typed(name, {
    Matrix: function Matrix(A) {
      // Check matrix size
      var size = A.size();

      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
      }

      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
      // will be affected by round-off error)

      var eps = 1e-15; // The Padé approximant is not so accurate when the values of A
      // are "large", so scale A by powers of two. Then compute the
      // exponential, and square the result repeatedly according to
      // the identity e^A = (e^(A/m))^m
      // Compute infinity-norm of A, ||A||, to see how "big" it is

      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
      // Padé approximant to reach the desired accuracy

      var params = findParams(infNorm, eps);
      var q = params.q;
      var j = params.j; // The Pade approximation to e^A is:
      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
      // where
      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
      // Scale A by 1 / 2^j

      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

      var N = identity(n);
      var D = identity(n); // Initialization (i=0)

      var factor = 1; // Initialization (i=1)

      var AposToI = Apos; // Cloning not necessary

      var alternate = -1;

      for (var i = 1; i <= q; i++) {
        if (i > 1) {
          AposToI = multiply(AposToI, Apos);
          alternate = -alternate;
        }

        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
        N = add(N, multiply(factor, AposToI));
        D = add(D, multiply(factor * alternate, AposToI));
      }

      var R = multiply(inv(D), N); // Square j times

      for (var _i = 0; _i < j; _i++) {
        R = multiply(R, R);
      }

      return (0, _is.isSparseMatrix)(A) ? A.createSparseMatrix(R) : R;
    }
  });

  function infinityNorm(A) {
    var n = A.size()[0];
    var infNorm = 0;

    for (var i = 0; i < n; i++) {
      var rowSum = 0;

      for (var j = 0; j < n; j++) {
        rowSum += abs(A.get([i, j]));
      }

      infNorm = Math.max(rowSum, infNorm);
    }

    return infNorm;
  }
  /**
   * Find the best parameters for the Pade approximant given
   * the matrix norm and desired accuracy. Returns the first acceptable
   * combination in order of increasing computational load.
   */


  function findParams(infNorm, eps) {
    var maxSearchSize = 30;

    for (var k = 0; k < maxSearchSize; k++) {
      for (var q = 0; q <= k; q++) {
        var j = k - q;

        if (errorEstimate(infNorm, q, j) < eps) {
          return {
            q: q,
            j: j
          };
        }
      }
    }

    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
  }
  /**
   * Returns the estimated error of the Pade approximant for the given
   * parameters.
   */


  function errorEstimate(infNorm, q, j) {
    var qfac = 1;

    for (var i = 2; i <= q; i++) {
      qfac *= i;
    }

    var twoqfac = qfac;

    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
      twoqfac *= _i2;
    }

    var twoqp1fac = twoqfac * (2 * q + 1);
    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
  }
});
exports.createExpm = createExpm;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/filter.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/filter.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFilter = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'filter';
var dependencies = ['typed'];
var createFilter = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
  return typed('filter', {
    'Array, function': _filterCallback,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filterCallback(x.toArray(), test));
    },
    'Array, RegExp': _array.filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create((0, _array.filterRegExp)(x.toArray(), test));
    }
  });
});
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

exports.createFilter = createFilter;

function _filterCallback(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0, _function.maxArgumentCount)(callback);
  return (0, _array.filter)(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index]);
    } else {
      // 3 or -1
      return callback(value, [index], array);
    }
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/flatten.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/flatten.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFlatten = void 0;

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'flatten';
var dependencies = ['typed', 'matrix'];
var createFlatten = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   * It is guaranteed to always return a clone of the argument.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
  return typed(name, {
    Array: function Array(x) {
      return (0, _array.flatten)((0, _object.clone)(x));
    },
    Matrix: function Matrix(x) {
      var flat = (0, _array.flatten)((0, _object.clone)(x.toArray())); // TODO: return the same matrix type as x

      return matrix(flat);
    }
  });
});
exports.createFlatten = createFlatten;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/forEach.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/forEach.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createForEach = void 0;

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'forEach';
var dependencies = ['typed'];
var createForEach = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value)
   *    })
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  return typed(name, {
    'Array, function': _forEach,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.forEach(callback);
    }
  });
});
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */

exports.createForEach = createForEach;

function _forEach(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0, _function.maxArgumentCount)(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      (0, _array.forEach)(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      } else if (args === 2) {
        callback(value, index);
      } else {
        // 3 or -1
        callback(value, index, array);
      }
    }
  };

  recurse(array, []);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/getMatrixDataType.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/getMatrixDataType.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createGetMatrixDataType = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'getMatrixDataType';
var dependencies = ['typed'];
var createGetMatrixDataType = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Find the data type of all elements in a matrix or array,
   * for example 'number' if all items are a number and 'Complex' if all values
   * are complex numbers.
   * If a matrix contains more than one data type, it will return 'mixed'.
   *
   * Syntax:
   *
   *    math.getMatrixDataType(x)
   *
   * Examples:
   *
   *    const x = [ [1, 2, 3], [4, 5, 6] ]
   *    const mixedX = [ [1, true], [2, 3] ]
   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
   *    const sparse = math.sparse(x)
   *    const dense = math.matrix(x)
   *    math.getMatrixDataType(x)   // returns 'number'
   *    math.getMatrixDataType(sparse)   // returns 'number'
   *    math.getMatrixDataType(dense)   // returns 'number'
   *    math.getMatrixDataType(mixedX) // returns 'mixed'
   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
   *    math.getMatrixDataType(unitX) // returns 'Unit'
   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
   *
   * See also:
   *  SparseMatrix, DenseMatrix
   *
   * @param {...Matrix | Array} x   The Matrix with values.
   *
   * @return {string} A string representation of the matrix type
   */
  return typed(name, {
    Array: function Array(x) {
      return (0, _array.getArrayDataType)(x, _is.typeOf);
    },
    Matrix: function Matrix(x) {
      return x.getDataType();
    }
  });
});
exports.createGetMatrixDataType = createGetMatrixDataType;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/identity.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/identity.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIdentity = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'identity';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
var createIdentity = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.identity(n)
   *    math.identity(n, format)
   *    math.identity(m, n)
   *    math.identity(m, n, format)
   *    math.identity([m, n])
   *    math.identity([m, n], format)
   *
   * Examples:
   *
   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
  return typed(name, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber': function numberBigNumber(rows) {
      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, string': function numberBigNumberString(rows, format) {
      return _identity(rows, rows, format);
    },
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
      return _identity(rows, cols, format);
    },
    Array: function Array(size) {
      return _identityVector(size);
    },
    'Array, string': function ArrayString(size, format) {
      return _identityVector(size, format);
    },
    Matrix: function Matrix(size) {
      return _identityVector(size.valueOf(), size.storage());
    },
    'Matrix, string': function MatrixString(size, format) {
      return _identityVector(size.valueOf(), format);
    }
  });

  function _identityVector(size, format) {
    switch (size.length) {
      case 0:
        return format ? matrix(format) : [];

      case 1:
        return _identity(size[0], size[0], format);

      case 2:
        return _identity(size[0], size[1], format);

      default:
        throw new Error('Vector containing two values expected');
    }
  }
  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */


  function _identity(rows, cols, format) {
    // BigNumber constructor with the right precision
    var Big = (0, _is.isBigNumber)(rows) || (0, _is.isBigNumber)(cols) ? BigNumber : null;
    if ((0, _is.isBigNumber)(rows)) rows = rows.toNumber();
    if ((0, _is.isBigNumber)(cols)) cols = cols.toNumber();

    if (!(0, _number.isInteger)(rows) || rows < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    if (!(0, _number.isInteger)(cols) || cols < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    var one = Big ? new BigNumber(1) : 1;
    var defaultValue = Big ? new Big(0) : 0;
    var size = [rows, cols]; // check we need to return a matrix

    if (format) {
      // create diagonal matrix (use optimized implementation for storage format)
      if (format === 'sparse') {
        return SparseMatrix.diagonal(size, one, 0, defaultValue);
      }

      if (format === 'dense') {
        return DenseMatrix.diagonal(size, one, 0, defaultValue);
      }

      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    } // create and resize array


    var res = (0, _array.resize)([], size, defaultValue); // fill in ones on the diagonal

    var minimum = rows < cols ? rows : cols; // fill diagonal

    for (var d = 0; d < minimum; d++) {
      res[d][d] = one;
    }

    return res;
  }
});
exports.createIdentity = createIdentity;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/inv.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/inv.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createInv = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var name = 'inv';
var dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
var createInv = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divideScalar = _ref.divideScalar,
      addScalar = _ref.addScalar,
      multiply = _ref.multiply,
      unaryMinus = _ref.unaryMinus,
      det = _ref.det,
      identity = _ref.identity,
      abs = _ref.abs;

  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4)                 // returns 0.25
   *     1 / 4                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(x) {
      var size = (0, _is.isMatrix)(x) ? x.size() : (0, _array.arraySize)(x);

      switch (size.length) {
        case 1:
          // vector
          if (size[0] === 1) {
            if ((0, _is.isMatrix)(x)) {
              return matrix([divideScalar(1, x.valueOf()[0])]);
            } else {
              return [divideScalar(1, x[0])];
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        case 2:
          // two dimensional array
          {
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              if ((0, _is.isMatrix)(x)) {
                return matrix(_inv(x.valueOf(), rows, cols), x.storage());
              } else {
                // return an Array
                return _inv(x, rows, cols);
              }
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
            }
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    },
    any: function any(x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });
  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */

  function _inv(mat, rows, cols) {
    var r, s, f, value, temp;

    if (rows === 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];

      if (value === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(1, value)]];
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      var d = det(mat);

      if (d === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
    } else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      https://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm
      // make a copy of the matrix (only the arrays, not of the elements)
      var A = mat.concat();

      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      } // create an identity matrix which in the end will contain the
      // matrix inverse


      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

      for (var c = 0; c < cols; c++) {
        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
        var ABig = abs(A[c][c]);
        var rBig = c;
        r = c + 1;

        while (r < rows) {
          if (abs(A[r][c]) > ABig) {
            ABig = abs(A[r][c]);
            rBig = r;
          }

          r++;
        }

        if (ABig === 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }

        r = rBig;

        if (r !== c) {
          temp = A[c];
          A[c] = A[r];
          A[r] = temp;
          temp = B[c];
          B[c] = B[r];
          B[r] = temp;
        } // eliminate non-zero values on the other rows at column c


        var Ac = A[c];
        var Bc = B[c];

        for (r = 0; r < rows; r++) {
          var Ar = A[r];
          var Br = B[r];

          if (r !== c) {
            // eliminate value at column c and row r
            if (Ar[c] !== 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
              // at column c

              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }

              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
              }
            }
          } else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];

            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }

            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }

      return B;
    }
  }
});
exports.createInv = createInv;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/kron.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/kron.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createKron = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'kron';
var dependencies = ['typed', 'matrix', 'multiplyScalar'];
var createKron = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      multiplyScalar = _ref.multiplyScalar;

  /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4])
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */
  return typed(name, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_kron(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_kron(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_kron(x, y.toArray()));
    },
    'Array, Array': _kron
  });
  /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */

  function _kron(a, b) {
    // Deal with the dimensions of the matricies.
    if ((0, _array.arraySize)(a).length === 1) {
      // Wrap it in a 2D Matrix
      a = [a];
    }

    if ((0, _array.arraySize)(b).length === 1) {
      // Wrap it in a 2D Matrix
      b = [b];
    }

    if ((0, _array.arraySize)(a).length > 2 || (0, _array.arraySize)(b).length > 2) {
      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
    }

    var t = [];
    var r = [];
    return a.map(function (a) {
      return b.map(function (b) {
        r = [];
        t.push(r);
        return a.map(function (y) {
          return b.map(function (x) {
            return r.push(multiplyScalar(y, x));
          });
        });
      });
    }) && t;
  }
});
exports.createKron = createKron;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/map.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/map.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMap = void 0;

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'map';
var dependencies = ['typed'];
var createMap = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value
   *    })  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  return typed(name, {
    'Array, function': _map,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.map(callback);
    }
  });
});
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */

exports.createMap = createMap;

function _map(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = (0, _function.maxArgumentCount)(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      } else if (args === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, array);
      }
    }
  };

  return recurse(array, []);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/matrixFromColumns.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/matrixFromColumns.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMatrixFromColumns = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var name = 'matrixFromColumns';
var dependencies = ['typed', 'matrix', 'flatten', 'size'];
var createMatrixFromColumns = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      flatten = _ref.flatten,
      size = _ref.size;

  /**
   * Create a dense matrix from vectors as individual columns.
   * If you pass row vectors, they will be transposed (but not conjugated!)
   *
   * Syntax:
   *
   *    math.matrixFromColumns(...arr)
   *    math.matrixFromColumns(col1, col2)
   *    math.matrixFromColumns(col1, col2, col3)
   *
   * Examples:
   *
   *    math.matrixFromColumns([1, 2, 3], [[4],[5],[6]])
   *    math.matrixFromColumns(...vectors)
   *
   * See also:
   *
   *    matrix, matrixFromRows, matrixFromFunction, zeros
   *
   * @param {... Array | Matrix} cols Multiple columns
   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
   */
  return typed(name, {
    '...Array': function Array(arr) {
      return _createArray(arr);
    },
    '...Matrix': function Matrix(arr) {
      return matrix(_createArray(arr.map(function (m) {
        return m.toArray();
      })));
    } // TODO implement this properly for SparseMatrix

  });

  function _createArray(arr) {
    if (arr.length === 0) throw new TypeError('At least one column is needed to construct a matrix.');
    var N = checkVectorTypeAndReturnLength(arr[0]); // create an array with empty rows

    var result = [];

    for (var i = 0; i < N; i++) {
      result[i] = [];
    } // loop columns


    var _iterator = _createForOfIteratorHelper(arr),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var col = _step.value;
        var colLength = checkVectorTypeAndReturnLength(col);

        if (colLength !== N) {
          throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (colLength | 0));
        }

        var f = flatten(col); // push a value to each row

        for (var _i = 0; _i < N; _i++) {
          result[_i].push(f[_i]);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return result;
  }

  function checkVectorTypeAndReturnLength(vec) {
    var s = size(vec);

    if (s.length === 1) {
      // 1D vector
      return s[0];
    } else if (s.length === 2) {
      // 2D vector
      if (s[0] === 1) {
        // row vector
        return s[1];
      } else if (s[1] === 1) {
        // col vector
        return s[0];
      } else {
        throw new TypeError('At least one of the arguments is not a vector.');
      }
    } else {
      throw new TypeError('Only one- or two-dimensional vectors are supported.');
    }
  }
});
exports.createMatrixFromColumns = createMatrixFromColumns;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/matrixFromFunction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/matrixFromFunction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMatrixFromFunction = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'matrixFromFunction';
var dependencies = ['typed', 'matrix', 'isZero'];
var createMatrixFromFunction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      isZero = _ref.isZero;

  /**
   * Create a matrix by evaluating a generating function at each index.
   * The simplest overload returns a multi-dimensional array as long as `size` is an array.
   * Passing `size` as a Matrix or specifying a `format` will result in returning a Matrix.
   *
   * Syntax:
   *
   *    math.matrixFromFunction(size, fn)
   *    math.matrixFromFunction(size, fn, format)
   *    math.matrixFromFunction(size, fn, format, datatype)
   *    math.matrixFromFunction(size, format, fn)
   *    math.matrixFromFunction(size, format, datatype, fn)
   *
   * Examples:
   *
   *    math.matrixFromFunction([3,3], i => i[0] - i[1]) // an antisymmetric matrix
   *    math.matrixFromFunction([100, 100], 'sparse', i => i[0] - i[1] === 1 ? 4 : 0) // a sparse subdiagonal matrix
   *    math.matrixFromFunction([5], i => math.random()) // a random vector
   *
   * See also:
   *
   *    matrix, zeros
   *
   * @param {Array | Matrix} size   The size of the matrix to be created
   * @param {function} fn           Callback function invoked for every entry in the matrix
   * @param {string} [format]       The Matrix storage format, either `'dense'` or `'sparse'`
   * @param {string} [datatype]     Type of the values
   * @return {Array | Matrix} Returns the created matrix
   */
  return typed(name, {
    'Array | Matrix, function, string, string': function ArrayMatrixFunctionStringString(size, fn, format, datatype) {
      return _create(size, fn, format, datatype);
    },
    'Array | Matrix, function, string': function ArrayMatrixFunctionString(size, fn, format) {
      return _create(size, fn, format);
    },
    'Matrix, function': function MatrixFunction(size, fn) {
      return _create(size, fn, 'dense');
    },
    'Array, function': function ArrayFunction(size, fn) {
      return _create(size, fn, 'dense').toArray();
    },
    'Array | Matrix, string, function': function ArrayMatrixStringFunction(size, format, fn) {
      return _create(size, fn, format);
    },
    'Array | Matrix, string, string, function': function ArrayMatrixStringStringFunction(size, format, datatype, fn) {
      return _create(size, fn, format, datatype);
    }
  });

  function _create(size, fn, format, datatype) {
    var m;

    if (datatype !== undefined) {
      m = matrix(format, datatype);
    } else {
      m = matrix(format);
    }

    m.resize(size);
    m.forEach(function (_, index) {
      var val = fn(index);
      if (isZero(val)) return;
      m.set(index, val);
    });
    return m;
  }
});
exports.createMatrixFromFunction = createMatrixFromFunction;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/matrixFromRows.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/matrixFromRows.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMatrixFromRows = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var name = 'matrixFromRows';
var dependencies = ['typed', 'matrix', 'flatten', 'size'];
var createMatrixFromRows = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      flatten = _ref.flatten,
      size = _ref.size;

  /**
   * Create a dense matrix from vectors as individual rows.
   * If you pass column vectors, they will be transposed (but not conjugated!)
   *
   * Syntax:
   *
   *    math.matrixFromRows(...arr)
   *    math.matrixFromRows(row1, row2)
   *    math.matrixFromRows(row1, row2, row3)
   *
   * Examples:
   *
   *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])
   *    math.matrixFromRows(...vectors)
   *
   * See also:
   *
   *    matrix, matrixFromColumns, matrixFromFunction, zeros
   *
   * @param {... Array | Matrix} rows  Multiple rows
   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned
   */
  return typed(name, {
    '...Array': function Array(arr) {
      return _createArray(arr);
    },
    '...Matrix': function Matrix(arr) {
      return matrix(_createArray(arr.map(function (m) {
        return m.toArray();
      })));
    } // TODO implement this properly for SparseMatrix

  });

  function _createArray(arr) {
    if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');
    var N = checkVectorTypeAndReturnLength(arr[0]);
    var result = [];

    var _iterator = _createForOfIteratorHelper(arr),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var row = _step.value;
        var rowLength = checkVectorTypeAndReturnLength(row);

        if (rowLength !== N) {
          throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));
        }

        result.push(flatten(row));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return result;
  }

  function checkVectorTypeAndReturnLength(vec) {
    var s = size(vec);

    if (s.length === 1) {
      // 1D vector
      return s[0];
    } else if (s.length === 2) {
      // 2D vector
      if (s[0] === 1) {
        // row vector
        return s[1];
      } else if (s[1] === 1) {
        // col vector
        return s[0];
      } else {
        throw new TypeError('At least one of the arguments is not a vector.');
      }
    } else {
      throw new TypeError('Only one- or two-dimensional vectors are supported.');
    }
  }
});
exports.createMatrixFromRows = createMatrixFromRows;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/ones.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/ones.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createOnes = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ones';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createOnes = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber;

  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3)                   // returns [1, 1, 1]
   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
  return typed('ones', {
    '': function _() {
      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _ones(size, format);
      } else if (config.matrix === 'Array') {
        return _ones(size);
      } else {
        return _ones(size, 'default');
      }
    },
    Array: _ones,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _ones(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _ones(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _ones(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return (0, _array.resize)(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if ((0, _is.isBigNumber)(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
});
exports.createOnes = createOnes;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createPartitionSelect = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'partitionSelect';
var dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];
var createPartitionSelect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      isNumeric = _ref.isNumeric,
      isNaN = _ref.isNaN,
      compare = _ref.compare;
  var asc = compare;

  var desc = function desc(a, b) {
    return -compare(a, b);
  };
  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */


  return typed(name, {
    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
      return _partitionSelect(x, k, asc);
    },
    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      } else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      } else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },
    'Array | Matrix, number, function': _partitionSelect
  });

  function _partitionSelect(x, k, compare) {
    if (!(0, _number.isInteger)(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }

    if ((0, _is.isMatrix)(x)) {
      var size = x.size();

      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return quickSelect(x.valueOf(), k, compare);
    }

    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }
  /**
   * Quickselect algorithm.
   * Code adapted from:
   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */


  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    } // check for NaN values since these can cause an infinite while loop


    for (var i = 0; i < arr.length; i++) {
      if (isNumeric(arr[i]) && isNaN(arr[i])) {
        return arr[i]; // return NaN
      }
    }

    var from = 0;
    var to = arr.length - 1; // if from == to we reached the kth element

    while (from < to) {
      var r = from;
      var w = to;
      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) {
          // put the large values at the end
          var tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else {
          // the value is smaller than the pivot, skip
          ++r;
        }
      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


      if (compare(arr[r], pivot) > 0) {
        --r;
      } // the r pointer is on the end of the first k elements


      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }

    return arr[k];
  }
});
exports.createPartitionSelect = createPartitionSelect;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/range.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/range.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRange = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _noop = __webpack_require__(/*! ../../utils/noop.js */ "./node_modules/mathjs/lib/cjs/utils/noop.js");

var name = 'range';
var dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRange = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      bignumber = _ref.bignumber,
      smaller = _ref.smaller,
      smallerEq = _ref.smallerEq,
      larger = _ref.larger,
      largerEq = _ref.largerEq;

  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6)        // [2, 3, 4, 5]
   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6')     // [2, 3, 4, 5]
   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
  return typed(name, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    string: _strRange,
    'string, boolean': _strRange,
    'number, number': function numberNumber(start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function numberNumberNumber(start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
      var BigNumber = start.constructor;
      return _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
      var BigNumber = start.constructor;
      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
    }
  });

  function _out(arr) {
    if (config.matrix === 'Matrix') {
      return matrix ? matrix(arr) : (0, _noop.noMatrix)();
    }

    return arr;
  }

  function _strRange(str, includeEnd) {
    var r = _parse(str);

    if (!r) {
      throw new SyntaxError('String "' + str + '" is no valid range');
    }

    var fn;

    if (config.number === 'BigNumber') {
      if (bignumber === undefined) {
        (0, _noop.noBignumber)();
      }

      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
    } else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }
  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeEx(start, end, step) {
    var array = [];
    var x = start;

    if (step > 0) {
      while (smaller(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (larger(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeInc(start, end, step) {
    var array = [];
    var x = start;

    if (step > 0) {
      while (smallerEq(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (largerEq(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeEx(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;

    if (step.gt(zero)) {
      while (smaller(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (larger(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeInc(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;

    if (step.gt(zero)) {
      while (smallerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (largerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */


  function _parse(str) {
    var args = str.split(':'); // number

    var nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };

      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };

      default:
        return null;
    }
  }
});
exports.createRange = createRange;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/reshape.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/reshape.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createReshape = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'reshape';
var dependencies = ['typed', 'isInteger', 'matrix'];
var createReshape = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      isInteger = _ref.isInteger;

  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4])
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4])
   *     // returns Array [1, 2, 3, 4]
   *
   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
   *     math.reshape(x, [2, 2, 2])
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   *    math.reshape([1, 2, 3, 4], [-1, 2])
   *    // returns Matrix [[1, 2], [3, 4]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension. One -1 is allowed as wildcard,
   *                                which calculates this dimension automatically.
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */
  return typed(name, {
    'Matrix, Array': function MatrixArray(x, sizes) {
      return x.reshape(sizes);
    },
    'Array, Array': function ArrayArray(x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return (0, _array.reshape)(x, sizes);
    }
  });
});
exports.createReshape = createReshape;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/resize.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/resize.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createResize = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _DimensionError = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _ArgumentsError = __webpack_require__(/*! ../../error/ArgumentsError.js */ "./node_modules/mathjs/lib/cjs/error/ArgumentsError.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'resize';
var dependencies = ['config', 'matrix'];
var createResize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var config = _ref.config,
      matrix = _ref.matrix;

  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function
  return function resize(x, size, defaultValue) {
    if (arguments.length !== 2 && arguments.length !== 3) {
      throw new _ArgumentsError.ArgumentsError('resize', arguments.length, 2, 3);
    }

    if ((0, _is.isMatrix)(size)) {
      size = size.valueOf(); // get Array
    }

    if ((0, _is.isBigNumber)(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return !(0, _is.isBigNumber)(value) ? value : value.toNumber();
      });
    } // check x is a Matrix


    if ((0, _is.isMatrix)(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }

    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    } // check result should be a matrix


    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

    if (size.length === 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }

      return (0, _object.clone)(x);
    } else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }

      x = (0, _object.clone)(x);
      var res = (0, _array.resize)(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };
  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */

  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultChar = ' ';
    }

    if (size.length !== 1) {
      throw new _DimensionError.DimensionError(size.length, 1);
    }

    var len = size[0];

    if (typeof len !== 'number' || !(0, _number.isInteger)(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');
    }

    if (str.length > len) {
      return str.substring(0, len);
    } else if (str.length < len) {
      var res = str;

      for (var i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }

      return res;
    } else {
      return str;
    }
  }
});
exports.createResize = createResize;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/rotate.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/rotate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRotate = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var name = 'rotate';
var dependencies = ['typed', 'multiply', 'rotationMatrix'];
var createRotate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      multiply = _ref.multiply,
      rotationMatrix = _ref.rotationMatrix;

  /**
     * Rotate a vector of size 1x2 counter-clockwise by a given angle
     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis
     *
     * Syntax:
     *
     *    math.rotate(w, theta)
     *    math.rotate(w, theta, v)
     *
     * Examples:
     *
     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])
     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])
     *
     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])
     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])
     *
     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])
     *
     * See also:
     *
     *    matrix, rotationMatrix
     *
     * @param {Array | Matrix} w                             Vector to rotate
     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
     * @param {Array | Matrix} [v]                           Rotation axis
     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w
     */
  return typed(name, {
    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {
      _validateSize(w, 2);

      var matrixRes = multiply(rotationMatrix(theta), w);
      return matrixRes.toArray();
    },
    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {
      _validateSize(w, 2);

      return multiply(rotationMatrix(theta), w);
    },
    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
      _validateSize(w, 3);

      var matrixRes = multiply(rotationMatrix(theta, v), w);
      return matrixRes;
    },
    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
      _validateSize(w, 3);

      return multiply(rotationMatrix(theta, v), w);
    }
  });

  function _validateSize(v, expectedSize) {
    var actualSize = Array.isArray(v) ? (0, _array.arraySize)(v) : v.size();

    if (actualSize.length > 2) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }

    if (actualSize.length === 2 && actualSize[1] !== 1) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }

    if (actualSize[0] !== expectedSize) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }
  }
});
exports.createRotate = createRotate;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/rotationMatrix.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/rotationMatrix.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRotationMatrix = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'rotationMatrix';
var dependencies = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];
var createRotationMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      multiplyScalar = _ref.multiplyScalar,
      addScalar = _ref.addScalar,
      unaryMinus = _ref.unaryMinus,
      norm = _ref.norm,
      BigNumber = _ref.BigNumber,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix,
      cos = _ref.cos,
      sin = _ref.sin;

  /**
   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).
   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).
   *
   * Syntax:
   *
   *    math.rotationMatrix(theta)
   *    math.rotationMatrix(theta, format)
   *    math.rotationMatrix(theta, [v])
   *    math.rotationMatrix(theta, [v], format)
   *
   * Examples:
   *
   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]
   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]
   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]
   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]
   *
   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]
   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
   *
   *
   * See also:
   *
   *    matrix, cos, sin
   *
   *
   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
   * @param {Array | Matrix} [v]                           Rotation axis
   * @param {string} [format]                              Result Matrix storage format
   * @return {Array | Matrix}                              Rotation matrix
   */
  return typed(name, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {
      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {
      return _rotationMatrix2x2(theta, format);
    },
    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {
      var matrixV = matrix(v);

      _validateVector(matrixV);

      return _rotationMatrix3x3(theta, matrixV, undefined);
    },
    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {
      _validateVector(v);

      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);
      return _rotationMatrix3x3(theta, v, storageType);
    },
    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {
      var matrixV = matrix(v);

      _validateVector(matrixV);

      return _rotationMatrix3x3(theta, matrixV, format);
    },
    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {
      _validateVector(v);

      return _rotationMatrix3x3(theta, v, format);
    }
  });
  /**
   * Returns 2x2 matrix of 2D rotation of angle theta
   *
   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle
   * @param {string} format                              The result Matrix storage format
   * @returns {Matrix}
   * @private
   */

  function _rotationMatrix2x2(theta, format) {
    var Big = (0, _is.isBigNumber)(theta);
    var minusOne = Big ? new BigNumber(-1) : -1;
    var cosTheta = cos(theta);
    var sinTheta = sin(theta);
    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];
    return _convertToFormat(data, format);
  }

  function _validateVector(v) {
    var size = v.size();

    if (size.length < 1 || size[0] !== 3) {
      throw new RangeError('Vector must be of dimensions 1x3');
    }
  }

  function _mul(array) {
    return array.reduce(function (p, curr) {
      return multiplyScalar(p, curr);
    });
  }

  function _convertToFormat(data, format) {
    if (format) {
      if (format === 'sparse') {
        return new SparseMatrix(data);
      }

      if (format === 'dense') {
        return new DenseMatrix(data);
      }

      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    }

    return data;
  }
  /**
   * Returns a 3x3 matrix of rotation of angle theta around vector v
   *
   * @param {number | BigNumber | Complex | Unit} theta The rotation angle
   * @param {Matrix} v                                  The rotation axis vector
   * @param {string} format                             The storage format of the resulting matrix
   * @returns {Matrix}
   * @private
   */


  function _rotationMatrix3x3(theta, v, format) {
    var normV = norm(v);

    if (normV === 0) {
      throw new RangeError('Rotation around zero vector');
    }

    var Big = (0, _is.isBigNumber)(theta) ? BigNumber : null;
    var one = Big ? new Big(1) : 1;
    var minusOne = Big ? new Big(-1) : -1;
    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;
    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;
    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;
    var c = cos(theta);
    var oneMinusC = addScalar(one, unaryMinus(c));
    var s = sin(theta);
    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));
    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));
    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));
    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));
    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));
    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));
    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));
    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));
    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));
    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];
    return _convertToFormat(data, format);
  }
});
exports.createRotationMatrix = createRotationMatrix;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/row.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/row.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRow = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var name = 'row';
var dependencies = ['typed', 'Index', 'matrix', 'range'];
var createRow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index,
      matrix = _ref.matrix,
      range = _ref.range;

  /**
   * Return a row from a Matrix.
   *
   * Syntax:
   *
   *     math.row(value, index)
   *
   * Example:
   *
   *     // get a row
   *     const d = [[1, 2], [3, 4]]
   *     math.row(d, 1) // returns [[3, 4]]
   *
   * See also:
   *
   *     column
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} row              The index of the row
   * @return {Array | Matrix}         The retrieved row
   */
  return typed(name, {
    'Matrix, number': _row,
    'Array, number': function ArrayNumber(value, row) {
      return _row(matrix((0, _object.clone)(value)), row).valueOf();
    }
  });
  /**
   * Retrieve a row of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} row     The index of the row
   * @return {Matrix}        The retrieved row
   */

  function _row(value, row) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    (0, _array.validateIndex)(row, value.size()[0]);
    var columnRange = range(0, value.size()[1]);
    var index = new Index(row, columnRange);
    return value.subset(index);
  }
});
exports.createRow = createRow;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/size.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/size.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSize = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _noop = __webpack_require__(/*! ../../utils/noop.js */ "./node_modules/mathjs/lib/cjs/utils/noop.js");

var name = 'size';
var dependencies = ['typed', 'config', '?matrix'];
var createSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix;

  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3)                  // returns []
   *     math.size('hello world')        // returns [11]
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.size(A)                    // returns [2, 3]
   *     math.size(math.range(1,6))      // returns [5]
   *
   * See also:
   *
   *     count, resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
  return typed(name, {
    Matrix: function Matrix(x) {
      return x.create(x.size());
    },
    Array: _array.arraySize,
    string: function string(x) {
      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
    },
    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
      // scalar
      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : (0, _noop.noMatrix)();
    }
  });
});
exports.createSize = createSize;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/sort.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/sort.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSort = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'sort';
var dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];
var createSort = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      compare = _ref.compare,
      compareNatural = _ref.compareNatural;
  var compareAsc = compare;

  var compareDesc = function compareDesc(a, b) {
    return -compare(a, b);
  };
  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
   *    // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
   *    // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */


  return typed(name, {
    Array: function Array(x) {
      _arrayIsVector(x);

      return x.sort(compareAsc);
    },
    Matrix: function Matrix(x) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(compareAsc), x.storage());
    },
    'Array, function': function ArrayFunction(x, _comparator) {
      _arrayIsVector(x);

      return x.sort(_comparator);
    },
    'Matrix, function': function MatrixFunction(x, _comparator) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator), x.storage());
    },
    'Array, string': function ArrayString(x, order) {
      _arrayIsVector(x);

      return x.sort(_comparator(order));
    },
    'Matrix, string': function MatrixString(x, order) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });
  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */

  function _comparator(order) {
    if (order === 'asc') {
      return compareAsc;
    } else if (order === 'desc') {
      return compareDesc;
    } else if (order === 'natural') {
      return compareNatural;
    } else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }
  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */


  function _arrayIsVector(array) {
    if ((0, _array.arraySize)(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }
  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */


  function _matrixIsVector(matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }
});
exports.createSort = createSort;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/sqrtm.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/sqrtm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSqrtm = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'sqrtm';
var dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
var createSqrtm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      add = _ref.add,
      multiply = _ref.multiply,
      sqrt = _ref.sqrt,
      subtract = _ref.subtract,
      inv = _ref.inv,
      size = _ref.size,
      max = _ref.max,
      identity = _ref.identity;
  var _maxIterations = 1e3;
  var _tolerance = 1e-6;
  /**
   * Calculate the principal square root matrix using the Denman–Beavers iterative method
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   * @private
   */

  function _denmanBeavers(A) {
    var error;
    var iterations = 0;
    var Y = A;
    var Z = identity(size(A));

    do {
      var Yk = Y;
      Y = multiply(0.5, add(Yk, inv(Z)));
      Z = multiply(0.5, add(Z, inv(Yk)));
      error = max(abs(subtract(Y, Yk)));

      if (error > _tolerance && ++iterations > _maxIterations) {
        throw new Error('computing square root of matrix: iterative method could not converge');
      }
    } while (error > _tolerance);

    return Y;
  }
  /**
   * Calculate the principal square root of a square matrix.
   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
   *
   * Syntax:
   *
   *     X = math.sqrtm(A)
   *
   * Examples:
   *
   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   */


  return typed(name, {
    'Array | Matrix': function ArrayMatrix(A) {
      var size = (0, _is.isMatrix)(A) ? A.size() : (0, _array.arraySize)(A);

      switch (size.length) {
        case 1:
          // Single element Array | Matrix
          if (size[0] === 1) {
            return sqrt(A);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        case 2:
          {
            // Two-dimensional Array | Matrix
            var rows = size[0];
            var cols = size[1];

            if (rows === cols) {
              return _denmanBeavers(A);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
            }
          }

        default:
          // Multi dimensional array
          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    }
  });
});
exports.createSqrtm = createSqrtm;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/squeeze.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/squeeze.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSqueeze = void 0;

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'squeeze';
var dependencies = ['typed', 'matrix'];
var createSqueeze = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3])           // returns 3
   *     math.squeeze([[3]])         // returns 3
   *
   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
   *
   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
  return typed(name, {
    Array: function Array(x) {
      return (0, _array.squeeze)((0, _object.clone)(x));
    },
    Matrix: function Matrix(x) {
      var res = (0, _array.squeeze)(x.toArray()); // FIXME: return the same type of matrix as the input

      return Array.isArray(res) ? matrix(res) : res;
    },
    any: function any(x) {
      // scalar
      return (0, _object.clone)(x);
    }
  });
});
exports.createSqueeze = createSqueeze;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/subset.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/subset.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSubset = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _customs = __webpack_require__(/*! ../../utils/customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _DimensionError = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'subset';
var dependencies = ['typed', 'matrix'];
var createSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     const d = [[1, 2], [3, 4]]
   *     math.subset(d, math.index(1, 0))        // returns 3
   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
   *
   *     // replace a subset
   *     const e = []
   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
  return typed(name, {
    // get subset
    'Array, Index': function ArrayIndex(value, index) {
      var m = matrix(value);
      var subset = m.subset(index); // returns a Matrix

      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
    },
    'Matrix, Index': function MatrixIndex(value, index) {
      return value.subset(index);
    },
    'Object, Index': _getObjectProperty,
    'string, Index': _getSubstring,
    // set subset
    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();
    },
    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();
    },
    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
      return value.clone().subset(index, replacement);
    },
    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },
    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });
});
/**
 * Retrieve a subset of a string
 * @param {string} str            string from which to get a substring
 * @param {Index} index           An index containing ranges for each dimension
 * @returns {string} substring
 * @private
 */

exports.createSubset = createSubset;

function _getSubstring(str, index) {
  if (!(0, _is.isIndex)(index)) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size().length, 1);
  } // validate whether the range is out of range


  var strLen = str.length;
  (0, _array.validateIndex)(index.min()[0], strLen);
  (0, _array.validateIndex)(index.max()[0], strLen);
  var range = index.dimension(0);
  var substr = '';
  range.forEach(function (v) {
    substr += str.charAt(v);
  });
  return substr;
}
/**
 * Replace a substring in a string
 * @param {string} str            string to be replaced
 * @param {Index} index           An index containing ranges for each dimension
 * @param {string} replacement    Replacement string
 * @param {string} [defaultValue] Default value to be uses when resizing
 *                                the string. is ' ' by default
 * @returns {string} result
 * @private
 */


function _setSubstring(str, index, replacement, defaultValue) {
  if (!index || index.isIndex !== true) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size().length, 1);
  }

  if (defaultValue !== undefined) {
    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
      throw new TypeError('Single character expected as defaultValue');
    }
  } else {
    defaultValue = ' ';
  }

  var range = index.dimension(0);
  var len = range.size()[0];

  if (len !== replacement.length) {
    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);
  } // validate whether the range is out of range


  var strLen = str.length;
  (0, _array.validateIndex)(index.min()[0]);
  (0, _array.validateIndex)(index.max()[0]); // copy the string into an array with characters

  var chars = [];

  for (var i = 0; i < strLen; i++) {
    chars[i] = str.charAt(i);
  }

  range.forEach(function (v, i) {
    chars[v] = replacement.charAt(i[0]);
  }); // initialize undefined characters with a space

  if (chars.length > strLen) {
    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
      if (!chars[_i]) {
        chars[_i] = defaultValue;
      }
    }
  }

  return chars.join('');
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */


function _getObjectProperty(object, index) {
  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  return (0, _customs.getSafeProperty)(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */


function _setObjectProperty(object, index, replacement) {
  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  } // clone the object, and apply the property to the clone


  var updated = (0, _object.clone)(object);
  (0, _customs.setSafeProperty)(updated, key, replacement);
  return updated;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/trace.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/trace.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTrace = void 0;

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'trace';
var dependencies = ['typed', 'matrix', 'add'];
var createTrace = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      add = _ref.add;

  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]) // returns 5
   *
   *    const A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A) // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
  return typed('trace', {
    Array: function _arrayTrace(x) {
      // use dense matrix implementation
      return _denseTrace(matrix(x));
    },
    SparseMatrix: _sparseTrace,
    DenseMatrix: _denseTrace,
    any: _object.clone
  });

  function _denseTrace(m) {
    // matrix size & data
    var size = m._size;
    var data = m._data; // process dimensions

    switch (size.length) {
      case 1:
        // vector
        if (size[0] === 1) {
          // return data[0]
          return (0, _object.clone)(data[0]);
        }

        throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');

      case 2:
        {
          // two dimensional
          var rows = size[0];
          var cols = size[1];

          if (rows === cols) {
            // calulate sum
            var sum = 0; // loop diagonal

            for (var i = 0; i < rows; i++) {
              sum = add(sum, data[i][i]);
            } // return trace


            return sum;
          } else {
            throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');
          }
        }

      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(size) + ')');
    }
  }

  function _sparseTrace(m) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    var size = m._size; // check dimensions

    var rows = size[0];
    var columns = size[1]; // matrix must be square

    if (rows === columns) {
      // calulate sum
      var sum = 0; // check we have data (avoid looping columns)

      if (values.length > 0) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = index[k]; // check row

            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]); // exit loop

              break;
            }

            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      } // return trace


      return sum;
    }

    throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');
  }
});
exports.createTrace = createTrace;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/transpose.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/transpose.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTranspose = void 0;

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'transpose';
var dependencies = ['typed', 'matrix'];
var createTranspose = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;

  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
  return typed('transpose', {
    Array: function Array(x) {
      // use dense matrix implementation
      return this(matrix(x)).valueOf();
    },
    Matrix: function Matrix(x) {
      // matrix size
      var size = x.size(); // result

      var c; // process dimensions

      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;

        case 2:
          {
            // rows and columns
            var rows = size[0];
            var columns = size[1]; // check columns

            if (columns === 0) {
              // throw exception
              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + (0, _string.format)(size) + ')');
            } // process storage format


            switch (x.storage()) {
              case 'dense':
                c = _denseTranspose(x, rows, columns);
                break;

              case 'sparse':
                c = _sparseTranspose(x, rows, columns);
                break;
            }
          }
          break;

        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + (0, _string.format)(this._size) + ')');
      }

      return c;
    },
    // scalars
    any: function any(x) {
      return (0, _object.clone)(x);
    }
  });

  function _denseTranspose(m, rows, columns) {
    // matrix array
    var data = m._data; // transposed matrix data

    var transposed = [];
    var transposedRow; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = []; // loop rows

      for (var i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = (0, _object.clone)(data[i][j]);
      }
    } // return matrix


    return m.createDenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  }

  function _sparseTranspose(m, rows, columns) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result matrices

    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // row counts

    var w = [];

    for (var x = 0; x < rows; x++) {
      w[x] = 0;
    } // vars


    var p, l, j; // loop values in matrix

    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    } // cumulative sum


    var sum = 0; // initialize cptr with the cummulative sum of row counts

    for (var i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum); // update sum

      sum += w[i]; // update w

      w[i] = cptr[i];
    } // update cptr


    cptr.push(sum); // loop columns

    for (j = 0; j < columns; j++) {
      // values & index in column
      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        var q = w[index[k]]++; // C[j, i] = A[i, j]

        cindex[q] = j; // check we need to process values (pattern matrix)

        if (values) {
          cvalues[q] = (0, _object.clone)(values[k]);
        }
      }
    } // return matrix


    return m.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  }
});
exports.createTranspose = createTranspose;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/matrix/zeros.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/matrix/zeros.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createZeros = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'zeros';
var dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
var createZeros = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber;

  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3)                  // returns [0, 0, 0]
   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
  return typed(name, {
    '': function _() {
      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _zeros(size, format);
      } else if (config.matrix === 'Array') {
        return _zeros(size);
      } else {
        return _zeros(size, 'default');
      }
    },
    Array: _zeros,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _zeros(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _zeros(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _zeros(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return (0, _array.resize)(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if ((0, _is.isBigNumber)(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
}); // TODO: zeros contains almost the same code as ones. Reuse this?

exports.createZeros = createZeros;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/combinations.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/combinations.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCombinations = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _combinations = __webpack_require__(/*! ../../plain/number/combinations.js */ "./node_modules/mathjs/lib/cjs/plain/number/combinations.js");

var name = 'combinations';
var dependencies = ['typed'];
var createCombinations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    combinationsWithRep, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  return typed(name, {
    'number, number': _combinations.combinationsNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var nMinusk = n.minus(k);
      var one = new BigNumber(1);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }

      result = one;

      if (k.lt(nMinusk)) {
        for (i = one; i.lte(nMinusk); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusk.plus(i)).dividedBy(i);
        }
      }

      return result;
    } // TODO: implement support for collection in combinations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

exports.createCombinations = createCombinations;

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/combinationsWithRep.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCombinationsWithRep = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _product = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/cjs/utils/product.js");

var name = 'combinationsWithRep';
var dependencies = ['typed'];
var createCombinationsWithRep = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities, allowing individual outcomes to be repeated more than once.
   *
   * CombinationsWithRep only takes integer arguments.
   * The following condition must be enforced: k <= n + k -1.
   *
   * Syntax:
   *
   *     math.combinationsWithRep(n, k)
   *
   * Examples:
   *
   *    math.combinationsWithRep(7, 5) // returns 462
   *
   * See also:
   *
   *    combinations, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations with replacement.
   */
  return typed(name, {
    'number, number': function numberNumber(n, k) {
      if (!(0, _number.isInteger)(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (!(0, _number.isInteger)(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (n < 1) {
        throw new TypeError('k must be less than or equal to n + k - 1');
      }

      if (k < n - 1) {
        var _prodrange = (0, _product.product)(n, n + k - 1);

        return _prodrange / (0, _product.product)(1, k);
      }

      var prodrange = (0, _product.product)(k + 1, n + k - 1);
      return prodrange / (0, _product.product)(1, n - 1);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var one = new BigNumber(1);
      var nMinusOne = n.minus(one);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }

      if (n.lt(one)) {
        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
      }

      result = one;

      if (k.lt(nMinusOne)) {
        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusOne.plus(i)).dividedBy(i);
        }
      }

      return result;
    }
  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

exports.createCombinationsWithRep = createCombinationsWithRep;

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/factorial.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/factorial.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFactorial = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'factorial';
var dependencies = ['typed', 'gamma'];
var createFactorial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      gamma = _ref.gamma;

  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, combinationsWithRep, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
  return typed(name, {
    number: function number(n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n + 1);
    },
    BigNumber: function BigNumber(n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n.plus(1));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return (0, _collection.deepMap)(n, this);
    }
  });
});
exports.createFactorial = createFactorial;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/gamma.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/gamma.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createGamma = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'gamma';
var dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
var createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      multiplyScalar = _ref.multiplyScalar,
      pow = _ref.pow,
      _BigNumber = _ref.BigNumber,
      _Complex = _ref.Complex;

  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
  return typed(name, {
    number: _index.gammaNumber,
    Complex: function Complex(n) {
      if (n.im === 0) {
        return this(n.re);
      }

      n = new _Complex(n.re - 1, n.im);
      var x = new _Complex(_index.gammaP[0], 0);

      for (var i = 1; i < _index.gammaP.length; ++i) {
        var real = n.re + i; // x += p[i]/(n+i)

        var den = real * real + n.im * n.im;

        if (den !== 0) {
          x.re += _index.gammaP[i] * real / den;
          x.im += -(_index.gammaP[i] * n.im) / den;
        } else {
          x.re = _index.gammaP[i] < 0 ? -Infinity : Infinity;
        }
      }

      var t = new _Complex(n.re + _index.gammaG + 0.5, n.im);
      var twoPiSqrt = Math.sqrt(2 * Math.PI);
      n.re += 0.5;
      var result = pow(t, n);

      if (result.im === 0) {
        // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re === 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }

      var r = Math.exp(-t.re); // exp(-t)

      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);
      return multiplyScalar(multiplyScalar(result, t), x);
    },
    BigNumber: function BigNumber(n) {
      if (n.isInteger()) {
        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
      }

      if (!n.isFinite()) {
        return new _BigNumber(n.isNegative() ? NaN : Infinity);
      }

      throw new Error('Integer BigNumber expected');
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return (0, _collection.deepMap)(n, this);
    }
  });
  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */

  function bigFactorial(n) {
    if (n < 8) {
      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);
    }

    var precision = config.precision + (Math.log(n.toNumber()) | 0);

    var Big = _BigNumber.clone({
      precision: precision
    });

    if (n % 2 === 1) {
      return n.times(bigFactorial(new _BigNumber(n - 1)));
    }

    var p = n;
    var prod = new Big(n);
    var sum = n.toNumber();

    while (p > 2) {
      p -= 2;
      sum += p;
      prod = prod.times(sum);
    }

    return new _BigNumber(prod.toPrecision(_BigNumber.precision));
  }
});
exports.createGamma = createGamma;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/kldivergence.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/kldivergence.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createKldivergence = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'kldivergence';
var dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
var createKldivergence = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      divide = _ref.divide,
      sum = _ref.sum,
      multiply = _ref.multiply,
      dotDivide = _ref.dotDivide,
      log = _ref.log,
      isNumeric = _ref.isNumeric;

  /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
  return typed(name, {
    'Array, Array': function ArrayArray(q, p) {
      return _kldiv(matrix(q), matrix(p));
    },
    'Matrix, Array': function MatrixArray(q, p) {
      return _kldiv(q, matrix(p));
    },
    'Array, Matrix': function ArrayMatrix(q, p) {
      return _kldiv(matrix(q), p);
    },
    'Matrix, Matrix': function MatrixMatrix(q, p) {
      return _kldiv(q, p);
    }
  });

  function _kldiv(q, p) {
    var plength = p.size().length;
    var qlength = q.size().length;

    if (plength > 1) {
      throw new Error('first object must be one dimensional');
    }

    if (qlength > 1) {
      throw new Error('second object must be one dimensional');
    }

    if (plength !== qlength) {
      throw new Error('Length of two vectors must be equal');
    } // Before calculation, apply normalization


    var sumq = sum(q);

    if (sumq === 0) {
      throw new Error('Sum of elements in first object must be non zero');
    }

    var sump = sum(p);

    if (sump === 0) {
      throw new Error('Sum of elements in second object must be non zero');
    }

    var qnorm = divide(q, sum(q));
    var pnorm = divide(p, sum(p));
    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

    if (isNumeric(result)) {
      return result;
    } else {
      return Number.NaN;
    }
  }
});
exports.createKldivergence = createKldivergence;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/multinomial.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/multinomial.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMultinomial = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'multinomial';
var dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
var createMultinomial = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide,
      multiply = _ref.multiply,
      factorial = _ref.factorial,
      isInteger = _ref.isInteger,
      isPositive = _ref.isPositive;

  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      var sum = 0;
      var denom = 1;
      (0, _collection.deepForEach)(a, function (ai) {
        if (!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }

        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });
      return divide(factorial(sum), denom);
    }
  });
});
exports.createMultinomial = createMultinomial;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/permutations.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/permutations.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createPermutations = void 0;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _product = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/cjs/utils/product.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'permutations';
var dependencies = ['typed', 'factorial'];
var createPermutations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      factorial = _ref.factorial;

  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, combinationsWithRep, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
  return typed(name, {
    'number | BigNumber': factorial,
    'number, number': function numberNumber(n, k) {
      if (!(0, _number.isInteger)(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (!(0, _number.isInteger)(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      } // Permute n objects, k at a time


      return (0, _product.product)(n - k + 1, n);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var result, i;

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      var one = n.mul(0).add(1);
      result = one;

      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }

      return result;
    } // TODO: implement support for collection in permutations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

exports.createPermutations = createPermutations;

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/pickRandom.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/pickRandom.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createPickRandom = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _seededRNG = __webpack_require__(/*! ./util/seededRNG.js */ "./node_modules/mathjs/lib/cjs/function/probability/util/seededRNG.js");

var name = 'pickRandom';
var dependencies = ['typed', 'config', '?on'];
var createPickRandom = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      on = _ref.on;
  // seeded pseudo random number generator
  var rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *     math.pickRandom(array, { weights, number, elementWise })
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], { number: 2 })   // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   *     math.pickRandom([{x: 1.0, y: 2.0}, {x: 1.1, y: 2.0}], { elementWise: false })
   *         // returns one of the items in the array
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
   *                                   Returns an array with the configured number of elements when number is > 1.
   */


  return typed(name, {
    'Array | Matrix': function ArrayMatrix(possibles) {
      return _pickRandom(possibles, {});
    },
    'Array | Matrix, Object': function ArrayMatrixObject(possibles, options) {
      return _pickRandom(possibles, options);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
      return _pickRandom(possibles, {
        number: number
      });
    },
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(possibles, weights) {
      return _pickRandom(possibles, {
        weights: weights
      });
    },
    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
      return _pickRandom(possibles, {
        number: number,
        weights: weights
      });
    },
    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
      return _pickRandom(possibles, {
        number: number,
        weights: weights
      });
    }
  });
  /**
   * @param {Array | Matrix} possibles
   * @param {{
   *   number?: number,
   *   weights?: Array | Matrix,
   *   elementWise: boolean
   * }} options
   * @returns {number | Array}
   * @private
   */

  function _pickRandom(possibles, _ref2) {
    var number = _ref2.number,
        weights = _ref2.weights,
        _ref2$elementWise = _ref2.elementWise,
        elementWise = _ref2$elementWise === void 0 ? true : _ref2$elementWise;
    var single = typeof number === 'undefined';

    if (single) {
      number = 1;
    }

    var createMatrix = (0, _is.isMatrix)(possibles) ? possibles.create : (0, _is.isMatrix)(weights) ? weights.create : null;
    possibles = possibles.valueOf(); // get Array

    if (weights) {
      weights = weights.valueOf(); // get Array
    }

    if (elementWise === true) {
      possibles = (0, _array.flatten)(possibles);
      weights = (0, _array.flatten)(weights);
    }

    var totalWeights = 0;

    if (typeof weights !== 'undefined') {
      if (weights.length !== possibles.length) {
        throw new Error('Weights must have the same length as possibles');
      }

      for (var i = 0, len = weights.length; i < len; i++) {
        if (!(0, _is.isNumber)(weights[i]) || weights[i] < 0) {
          throw new Error('Weights must be an array of positive numbers');
        }

        totalWeights += weights[i];
      }
    }

    var length = possibles.length;
    var result = [];
    var pick;

    while (result.length < number) {
      if (typeof weights === 'undefined') {
        pick = possibles[Math.floor(rng() * length)];
      } else {
        var randKey = rng() * totalWeights;

        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
          randKey -= weights[_i];

          if (randKey < 0) {
            pick = possibles[_i];
            break;
          }
        }
      }

      result.push(pick);
    }

    return single ? result[0] : createMatrix ? createMatrix(result) : result;
  }
});
exports.createPickRandom = createPickRandom;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/random.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/random.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRandomNumber = exports.createRandom = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _seededRNG = __webpack_require__(/*! ./util/seededRNG.js */ "./node_modules/mathjs/lib/cjs/function/probability/util/seededRNG.js");

var _randomMatrix2 = __webpack_require__(/*! ./util/randomMatrix.js */ "./node_modules/mathjs/lib/cjs/function/probability/util/randomMatrix.js");

var name = 'random';
var dependencies = ['typed', 'config', '?on'];
var createRandom = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      on = _ref.on;
  // seeded pseudo random number generator
  var rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */


  return typed(name, {
    '': function _() {
      return _random(0, 1);
    },
    number: function number(max) {
      return _random(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _random(min, max);
    },
    'Array | Matrix': function ArrayMatrix(size) {
      return _randomMatrix(size, 0, 1);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
      return _randomMatrix(size, 0, max);
    },
    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
      return _randomMatrix(size, min, max);
    }
  });

  function _randomMatrix(size, min, max) {
    var res = (0, _randomMatrix2.randomMatrix)(size.valueOf(), function () {
      return _random(min, max);
    });
    return (0, _is.isMatrix)(size) ? size.create(res) : res;
  }

  function _random(min, max) {
    return min + rng() * (max - min);
  }
}); // number only implementation of random, no matrix support
// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?

exports.createRandom = createRandom;
var createRandomNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config', '?on'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config,
      on = _ref2.on,
      matrix = _ref2.matrix;
  // seeded pseudo random number generator1
  var rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }

  return typed(name, {
    '': function _() {
      return _random(0, 1);
    },
    number: function number(max) {
      return _random(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _random(min, max);
    }
  });

  function _random(min, max) {
    return min + rng() * (max - min);
  }
});
exports.createRandomNumber = createRandomNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/randomInt.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/randomInt.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRandomInt = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _randomMatrix = __webpack_require__(/*! ./util/randomMatrix.js */ "./node_modules/mathjs/lib/cjs/function/probability/util/randomMatrix.js");

var _seededRNG = __webpack_require__(/*! ./util/seededRNG.js */ "./node_modules/mathjs/lib/cjs/function/probability/util/seededRNG.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'randomInt';
var dependencies = ['typed', 'config', '?on'];
var createRandomInt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      on = _ref.on;
  // seeded pseudo random number generator
  var rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */


  return typed(name, {
    '': function _() {
      return _randomInt(0, 1);
    },
    number: function number(max) {
      return _randomInt(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _randomInt(min, max);
    },
    'Array | Matrix': function ArrayMatrix(size) {
      return _randomIntMatrix(size, 0, 1);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
      return _randomIntMatrix(size, 0, max);
    },
    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
      return _randomIntMatrix(size, min, max);
    }
  });

  function _randomIntMatrix(size, min, max) {
    var res = (0, _randomMatrix.randomMatrix)(size.valueOf(), function () {
      return _randomInt(min, max);
    });
    return (0, _is.isMatrix)(size) ? size.create(res) : res;
  }

  function _randomInt(min, max) {
    return Math.floor(min + rng() * (max - min));
  }
});
exports.createRandomInt = createRandomInt;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/util/randomMatrix.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/util/randomMatrix.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.randomMatrix = randomMatrix;

/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */
function randomMatrix(size, random) {
  var data = [];
  size = size.slice(0);

  if (size.length > 1) {
    for (var i = 0, length = size.shift(); i < length; i++) {
      data.push(randomMatrix(size, random));
    }
  } else {
    for (var _i = 0, _length = size.shift(); _i < _length; _i++) {
      data.push(random());
    }
  }

  return data;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/probability/util/seededRNG.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/probability/util/seededRNG.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRng = createRng;

var _seedrandom = _interopRequireDefault(__webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js"));

var singletonRandom = /* #__PURE__ */(0, _seedrandom["default"])(Date.now());

function createRng(randomSeed) {
  var random; // create a new random generator with given seed

  function setSeed(seed) {
    random = seed === null ? singletonRandom : (0, _seedrandom["default"])(String(seed));
  } // initialize a seeded pseudo random number generator with config's random seed


  setSeed(randomSeed); // wrapper function so the rng can be updated via generator

  function rng() {
    return random();
  }

  return rng;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/compare.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/compare.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCompareNumber = exports.createCompare = void 0;

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm05.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js");

var name = 'compare';
var dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
var createCompare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      equalScalar = _ref.equalScalar,
      matrix = _ref.matrix,
      BigNumber = _ref.BigNumber,
      Fraction = _ref.Fraction,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm05 = (0, _algorithm5.createAlgorithm05)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm2.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm3.createAlgorithm14)({
    typed: typed
  });
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'number, number': function numberNumber(x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return new Fraction(x.compare(y));
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createCompare = createCompare;
var createCompareNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    }
  });
});
exports.createCompareNumber = createCompareNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/compareNatural.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/compareNatural.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCompareNatural = void 0;

var _javascriptNaturalSort = _interopRequireDefault(__webpack_require__(/*! javascript-natural-sort */ "./node_modules/javascript-natural-sort/naturalSort.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'compareNatural';
var dependencies = ['typed', 'compare'];
var createCompareNatural = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      compare = _ref.compare;
  var compareBooleans = compare.signatures['boolean,boolean'];
  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name, {
    'any, any': function anyAny(x, y) {
      var typeX = (0, _is.typeOf)(x);
      var typeY = (0, _is.typeOf)(y);
      var c; // numeric types

      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);

        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        } else {
          return (0, _javascriptNaturalSort["default"])(typeX, typeY);
        }
      } // matrix types


      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays(this, x, y);

        if (c !== 0) {
          return c;
        } else {
          return (0, _javascriptNaturalSort["default"])(typeX, typeY);
        }
      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


      if (typeX !== typeY) {
        return (0, _javascriptNaturalSort["default"])(typeX, typeY);
      }

      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }

      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return this(x.value, y.value);
        } // compare by units


        return compareArrays(this, x.formatUnits(), y.formatUnits());
      }

      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }

      if (typeX === 'string') {
        return (0, _javascriptNaturalSort["default"])(x, y);
      }

      if (typeX === 'Object') {
        return compareObjects(this, x, y);
      }

      if (typeX === 'null') {
        return 0;
      }

      if (typeX === 'undefined') {
        return 0;
      } // this should not occur...


      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });
  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareMatricesAndArrays(compareNatural, x, y) {
    if ((0, _is.isSparseMatrix)(x) && (0, _is.isSparseMatrix)(y)) {
      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);
    }

    if ((0, _is.isSparseMatrix)(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(compareNatural, x.toArray(), y);
    }

    if ((0, _is.isSparseMatrix)(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(compareNatural, x, y.toArray());
    } // convert DenseArray into Array


    if ((0, _is.isDenseMatrix)(x)) {
      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);
    }

    if ((0, _is.isDenseMatrix)(y)) {
      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);
    } // convert scalars to array


    if (!Array.isArray(x)) {
      return compareMatricesAndArrays(compareNatural, [x], y);
    }

    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(compareNatural, x, [y]);
    }

    return compareArrays(compareNatural, x, y);
  }
  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareArrays(compareNatural, x, y) {
    // compare each value
    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      var v = compareNatural(x[i], y[i]);

      if (v !== 0) {
        return v;
      }
    } // compare the size of the arrays


    if (x.length > y.length) {
      return 1;
    }

    if (x.length < y.length) {
      return -1;
    } // both Arrays have equal size and content


    return 0;
  }
  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareObjects(compareNatural, x, y) {
    var keysX = Object.keys(x);
    var keysY = Object.keys(y); // compare keys

    keysX.sort(_javascriptNaturalSort["default"]);
    keysY.sort(_javascriptNaturalSort["default"]);
    var c = compareArrays(compareNatural, keysX, keysY);

    if (c !== 0) {
      return c;
    } // compare values


    for (var i = 0; i < keysX.length; i++) {
      var v = compareNatural(x[keysX[i]], y[keysY[i]]);

      if (v !== 0) {
        return v;
      }
    }

    return 0;
  }
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */

exports.createCompareNatural = createCompareNatural;

function compareComplexNumbers(x, y) {
  if (x.re > y.re) {
    return 1;
  }

  if (x.re < y.re) {
    return -1;
  }

  if (x.im > y.im) {
    return 1;
  }

  if (x.im < y.im) {
    return -1;
  }

  return 0;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/compareText.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/compareText.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCompareTextNumber = exports.createCompareText = void 0;

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var name = 'compareText';
var dependencies = ['typed', 'matrix'];
var createCompareText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;
  var algorithm13 = (0, _algorithm2.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm.createAlgorithm14)({
    typed: typed
  });
  /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name, {
    'any, any': _string.compareText,
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, _string.compareText);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, _string.compareText, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, _string.compareText, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _string.compareText, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _string.compareText, true).valueOf();
    }
  });
});
exports.createCompareText = createCompareText;
var createCompareTextNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {
  var typed = _ref2.typed;
  return typed(name, {
    'any, any': _string.compareText
  });
});
exports.createCompareTextNumber = createCompareTextNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/deepEqual.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/deepEqual.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDeepEqual = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'deepEqual';
var dependencies = ['typed', 'equal'];
var createDeepEqual = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equal = _ref.equal;

  /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
  return typed(name, {
    'any, any': function anyAny(x, y) {
      return _deepEqual(x.valueOf(), y.valueOf());
    }
  });
  /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */

  function _deepEqual(x, y) {
    if (Array.isArray(x)) {
      if (Array.isArray(y)) {
        var len = x.length;

        if (len !== y.length) {
          return false;
        }

        for (var i = 0; i < len; i++) {
          if (!_deepEqual(x[i], y[i])) {
            return false;
          }
        }

        return true;
      } else {
        return false;
      }
    } else {
      if (Array.isArray(y)) {
        return false;
      } else {
        return equal(x, y);
      }
    }
  }
});
exports.createDeepEqual = createDeepEqual;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/equal.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/equal.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createEqualNumber = exports.createEqual = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'equal';
var dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createEqual = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed: typed
  });
  /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */

  return typed(name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, equalScalar);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, equalScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, equalScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, equalScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, equalScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, equalScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, equalScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, equalScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
    }
  });
});
exports.createEqual = createEqual;
var createEqualNumber = (0, _factory.factory)(name, ['typed', 'equalScalar'], function (_ref2) {
  var typed = _ref2.typed,
      equalScalar = _ref2.equalScalar;
  return typed(name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    }
  });
});
exports.createEqualNumber = createEqualNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/equalScalar.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/equalScalar.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createEqualScalarNumber = exports.createEqualScalar = void 0;

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _complex = __webpack_require__(/*! ../../utils/complex.js */ "./node_modules/mathjs/lib/cjs/utils/complex.js");

var name = 'equalScalar';
var dependencies = ['typed', 'config'];
var createEqualScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config;

  /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y;
    },
    'number, number': function numberNumber(x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.equals(y);
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return (0, _complex.complexEquals)(x, y, config.epsilon);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    }
  });
});
exports.createEqualScalar = createEqualScalar;
var createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createEqualScalarNumber = createEqualScalarNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/equalText.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/equalText.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createEqualText = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'equalText';
var dependencies = ['typed', 'compareText', 'isZero'];
var createEqualText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      compareText = _ref.compareText,
      isZero = _ref.isZero;

  /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */
  return typed(name, {
    'any, any': function anyAny(x, y) {
      return isZero(compareText(x, y));
    }
  });
});
exports.createEqualText = createEqualText;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/larger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/larger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLargerNumber = exports.createLarger = void 0;

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var name = 'larger';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLarger = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x > y;
    },
    'number, number': function numberNumber(x, y) {
      return x > y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gt(y) && !(0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createLarger = createLarger;
var createLargerNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x > y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createLargerNumber = createLargerNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/largerEq.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/largerEq.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createLargerEqNumber = exports.createLargerEq = void 0;

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var name = 'largerEq';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLargerEq = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x >= y;
    },
    'number, number': function numberNumber(x, y) {
      return x >= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gte(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== -1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createLargerEq = createLargerEq;
var createLargerEqNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x >= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createLargerEqNumber = createLargerEqNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/smaller.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/smaller.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSmallerNumber = exports.createSmaller = void 0;

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var name = 'smaller';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmaller = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x < y;
    },
    'number, number': function numberNumber(x, y) {
      return x < y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lt(y) && !(0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === -1;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createSmaller = createSmaller;
var createSmallerNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x < y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createSmallerNumber = createSmallerNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/smallerEq.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/smallerEq.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSmallerEqNumber = exports.createSmallerEq = void 0;

var _nearlyEqual = __webpack_require__(/*! ../../utils/bignumber/nearlyEqual.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var name = 'smallerEq';
var dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmallerEq = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  return typed(name, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x <= y;
    },
    'number, number': function numberNumber(x, y) {
      return x <= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lte(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createSmallerEq = createSmallerEq;
var createSmallerEqNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
      config = _ref2.config;
  return typed(name, {
    'number, number': function numberNumber(x, y) {
      return x <= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createSmallerEqNumber = createSmallerEqNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/relational/unequal.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/relational/unequal.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnequalNumber = exports.createUnequal = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm07.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var name = 'unequal';
var dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
var createUnequal = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      equalScalar = _ref.equalScalar,
      matrix = _ref.matrix,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed: typed
  });
  var algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed: typed
  });
  /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */

  return typed('unequal', {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return _unequal(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, _unequal);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, _unequal, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, _unequal, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, _unequal);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, _unequal, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, _unequal, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, _unequal, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, _unequal, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _unequal, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _unequal, true).valueOf();
    }
  });

  function _unequal(x, y) {
    return !equalScalar(x, y);
  }
});
exports.createUnequal = createUnequal;
var createUnequalNumber = (0, _factory.factory)(name, ['typed', 'equalScalar'], function (_ref2) {
  var typed = _ref2.typed,
      equalScalar = _ref2.equalScalar;
  return typed(name, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return !equalScalar(x, y);
    }
  });
});
exports.createUnequalNumber = createUnequalNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setCartesian.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setCartesian.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetCartesian = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setCartesian';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetCartesian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays
   * and the values will be sorted in ascending order before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *    math.setCartesian([4, 3], [2, 1])        // returns [[3, 1], [3, 2], [4, 1], [4, 2]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result = [];

      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
        // if any of them is empty, return empty
        var b1 = (0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
        var b2 = (0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
        result = [];

        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            result.push([b1[i], b2[j]]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});
exports.createSetCartesian = createSetCartesian;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setDifference.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setDifference.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetDifference = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setDifference';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;

      if (subset(size(a1), new Index(0)) === 0) {
        // empty-anything=empty
        result = [];
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything-empty=anything
        return (0, _array.flatten)(a1.toArray());
      } else {
        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];
        var inb2;

        for (var i = 0; i < b1.length; i++) {
          inb2 = false;

          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              inb2 = true;
              break;
            }
          }

          if (!inb2) {
            result.push(b1[i]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return (0, _array.generalize)(result);
      } // return a matrix otherwise


      return new DenseMatrix((0, _array.generalize)(result));
    }
  });
});
exports.createSetDifference = createSetDifference;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setDistinct.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setDistinct.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetDistinct = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setDistinct';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDistinct = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      var result;

      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        result = [];
      } else {
        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        result = [];
        result.push(b[0]);

        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            result.push(b[i]);
          }
        }
      } // return an array, if the input was an array


      if (Array.isArray(a)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});
exports.createSetDistinct = createSetDistinct;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setIntersect.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setIntersect.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetIntersect = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setIntersect';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetIntersect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;

      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
        // of any of them is empty, return empty
        result = [];
      } else {
        var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];

        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              result.push(b1[i]);
              break;
            }
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return (0, _array.generalize)(result);
      } // return a matrix otherwise


      return new DenseMatrix((0, _array.generalize)(result));
    }
  });
});
exports.createSetIntersect = createSetIntersect;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setIsSubset.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setIsSubset.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetIsSubset = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setIsSubset';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetIsSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index;

  /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // empty is a subset of anything
        return true;
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything is not a subset of empty
        return false;
      }

      var b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
      var b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
      var inb2;

      for (var i = 0; i < b1.length; i++) {
        inb2 = false;

        for (var j = 0; j < b2.length; j++) {
          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
            // the identifier is always a decimal int
            inb2 = true;
            break;
          }
        }

        if (inb2 === false) {
          return false;
        }
      }

      return true;
    }
  });
});
exports.createSetIsSubset = createSetIsSubset;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setMultiplicity.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setMultiplicity.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetMultiplicity = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setMultiplicity';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetMultiplicity = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index;

  /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */
  return typed(name, {
    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return 0
        return 0;
      }

      var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray());
      var count = 0;

      for (var i = 0; i < b.length; i++) {
        if (compareNatural(b[i], e) === 0) {
          count++;
        }
      }

      return count;
    }
  });
});
exports.createSetMultiplicity = createSetMultiplicity;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setPowerset.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setPowerset.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetPowerset = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setPowerset';
var dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetPowerset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      subset = _ref.subset,
      compareNatural = _ref.compareNatural,
      Index = _ref.Index;

  /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        return [];
      }

      var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
      var result = [];
      var number = 0;

      while (number.toString(2).length <= b.length) {
        result.push(_subset(b, number.toString(2).split('').reverse()));
        number++;
      } // can not return a matrix, because of the different size of the subarrays


      return _sort(result);
    }
  }); // create subset

  function _subset(array, bitarray) {
    var result = [];

    for (var i = 0; i < bitarray.length; i++) {
      if (bitarray[i] === '1') {
        result.push(array[i]);
      }
    }

    return result;
  } // sort subsests by length


  function _sort(array) {
    var temp = [];

    for (var i = array.length - 1; i > 0; i--) {
      for (var j = 0; j < i; j++) {
        if (array[j].length > array[j + 1].length) {
          temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    }

    return array;
  }
});
exports.createSetPowerset = createSetPowerset;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setSize.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setSize.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetSize = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setSize';
var dependencies = ['typed', 'compareNatural'];
var createSetSize = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      compareNatural = _ref.compareNatural;

  /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */
  return typed(name, {
    'Array | Matrix': function ArrayMatrix(a) {
      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;
    },
    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
      if (unique === false || a.length === 0) {
        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;
      } else {
        var b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        var count = 1;

        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            count++;
          }
        }

        return count;
      }
    }
  });
});
exports.createSetSize = createSetSize;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setSymDifference.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setSymDifference.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetSymDifference = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setSymDifference';
var dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
var createSetSymDifference = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      concat = _ref.concat,
      subset = _ref.subset,
      setDifference = _ref.setDifference,
      Index = _ref.Index;

  /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return (0, _array.flatten)(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return (0, _array.flatten)(a1);
      }

      var b1 = (0, _array.flatten)(a1);
      var b2 = (0, _array.flatten)(a2);
      return concat(setDifference(b1, b2), setDifference(b2, b1));
    }
  });
});
exports.createSetSymDifference = createSetSymDifference;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/set/setUnion.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/set/setUnion.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSetUnion = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'setUnion';
var dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
var createSetUnion = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      size = _ref.size,
      concat = _ref.concat,
      subset = _ref.subset,
      setIntersect = _ref.setIntersect,
      setSymDifference = _ref.setSymDifference,
      Index = _ref.Index;

  /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return (0, _array.flatten)(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return (0, _array.flatten)(a1);
      }

      var b1 = (0, _array.flatten)(a1);
      var b2 = (0, _array.flatten)(a2);
      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
    }
  });
});
exports.createSetUnion = createSetUnion;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/special/erf.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/special/erf.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createErf = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

/* eslint-disable no-loss-of-precision */
var name = 'erf';
var dependencies = ['typed'];
var createErf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */
  return typed('name', {
    number: function number(x) {
      var y = Math.abs(x);

      if (y >= MAX_NUM) {
        return (0, _number.sign)(x);
      }

      if (y <= THRESH) {
        return (0, _number.sign)(x) * erf1(y);
      }

      if (y <= 4.0) {
        return (0, _number.sign)(x) * (1 - erfc2(y));
      }

      return (0, _number.sign)(x) * (1 - erfc3(y));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return (0, _collection.deepMap)(n, this);
    } // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)

  });
  /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */

  function erf1(y) {
    var ysq = y * y;
    var xnum = P[0][4] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 3; i += 1) {
      xnum = (xnum + P[0][i]) * ysq;
      xden = (xden + Q[0][i]) * ysq;
    }

    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
  }
  /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */


  function erfc2(y) {
    var xnum = P[1][8] * y;
    var xden = y;
    var i;

    for (i = 0; i < 7; i += 1) {
      xnum = (xnum + P[1][i]) * y;
      xden = (xden + Q[1][i]) * y;
    }

    var result = (xnum + P[1][7]) / (xden + Q[1][7]);
    var ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
  /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */


  function erfc3(y) {
    var ysq = 1 / (y * y);
    var xnum = P[2][5] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 4; i += 1) {
      xnum = (xnum + P[2][i]) * ysq;
      xden = (xden + Q[2][i]) * ysq;
    }

    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
    result = (SQRPI - result) / y;
    ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */

exports.createErf = createErf;
var THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */

var SQRPI = 5.6418958354775628695e-1;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */

var MAX_NUM = Math.pow(2, 53);

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/mad.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/mad.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMad = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'mad';
var dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];
var createMad = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      abs = _ref.abs,
      map = _ref.map,
      median = _ref.median,
      subtract = _ref.subtract;

  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */
  return typed(name, {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,
    // mad(a, b, c, d, ...)
    '...': function _(args) {
      return _mad(args);
    }
  });

  function _mad(array) {
    array = (0, _array.flatten)(array.valueOf());

    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
    }

    try {
      var med = median(array);
      return median(map(array, function (value) {
        return abs(subtract(value, med));
      }));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
        throw new TypeError(err.message.replace('median', 'mad'));
      } else {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mad');
      }
    }
  }
});
exports.createMad = createMad;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/max.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/max.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMax = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'max';
var dependencies = ['typed', 'config', 'numeric', 'larger'];
var createMax = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      numeric = _ref.numeric,
      larger = _ref.larger;

  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
  return typed(name, {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,
    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return (0, _collection.reduce)(array, dim.valueOf(), _largest);
    },
    // max(a, b, c, d, ...)
    '...': function _(args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function max');
      }

      return _max(args);
    }
  });
  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */

  function _largest(x, y) {
    try {
      return larger(x, y) ? x : y;
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', y);
    }
  }
  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */


  function _max(array) {
    var res;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          res = NaN;
        } else if (res === undefined || larger(value, res)) {
          res = value;
        }
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', value);
      }
    });

    if (res === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    } // make sure returning numeric value: parse a string into a numeric value


    if (typeof res === 'string') {
      res = numeric(res, config.number);
    }

    return res;
  }
});
exports.createMax = createMax;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/mean.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/mean.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMean = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'mean';
var dependencies = ['typed', 'add', 'divide'];
var createMean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide;

  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
  return typed(name, {
    // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,
    // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmeanDim,
    // mean(a, b, c, d, ...)
    '...': function _(args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }

      return _mean(args);
    }
  });
  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */

  function _nmeanDim(array, dim) {
    try {
      var sum = (0, _collection.reduce)(array, dim, add);
      var s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();
      return divide(sum, s[dim]);
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');
    }
  }
  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */


  function _mean(array) {
    var sum;
    var num = 0;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
        num++;
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);
      }
    });

    if (num === 0) {
      throw new Error('Cannot calculate the mean of an empty array');
    }

    return divide(sum, num);
  }
});
exports.createMean = createMean;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/median.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/median.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMedian = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'median';
var dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
var createMedian = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      divide = _ref.divide,
      compare = _ref.compare,
      partitionSelect = _ref.partitionSelect;

  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */
  function _median(array) {
    try {
      array = (0, _array.flatten)(array.valueOf());
      var num = array.length;

      if (num === 0) {
        throw new Error('Cannot calculate median of an empty array');
      }

      if (num % 2 === 0) {
        // even: return the average of the two middle values
        var mid = num / 2 - 1;
        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

        var left = array[mid];

        for (var i = 0; i < mid; ++i) {
          if (compare(array[i], left) > 0) {
            left = array[i];
          }
        }

        return middle2(left, right);
      } else {
        // odd: return the middle value
        var m = partitionSelect(array, (num - 1) / 2);
        return middle(m);
      }
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');
    }
  } // helper function to type check the middle value of the array


  var middle = typed({
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
      return value;
    }
  }); // helper function to type check the two middle value of the array

  var middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
      return divide(add(left, right), 2);
    }
  });
  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */

  return typed(name, {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,
    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
    },
    // median(a, b, c, d, ...)
    '...': function _(args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function median');
      }

      return _median(args);
    }
  });
});
exports.createMedian = createMedian;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/min.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/min.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMin = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'min';
var dependencies = ['typed', 'config', 'numeric', 'smaller'];
var createMin = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      numeric = _ref.numeric,
      smaller = _ref.smaller;

  /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
  return typed(name, {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,
    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return (0, _collection.reduce)(array, dim.valueOf(), _smallest);
    },
    // min(a, b, c, d, ...)
    '...': function _(args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function min');
      }

      return _min(args);
    }
  });
  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */

  function _smallest(x, y) {
    try {
      return smaller(x, y) ? x : y;
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'min', y);
    }
  }
  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */


  function _min(array) {
    var min;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          min = NaN;
        } else if (min === undefined || smaller(value, min)) {
          min = value;
        }
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'min', value);
      }
    });

    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    } // make sure returning numeric value: parse a string into a numeric value


    if (typeof min === 'string') {
      min = numeric(min, config.number);
    }

    return min;
  }
});
exports.createMin = createMin;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/mode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/mode.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMode = void 0;

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'mode';
var dependencies = ['typed', 'isNaN', 'isNumeric'];
var createMode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      isNaN = _ref.isNaN,
      isNumeric = _ref.isNumeric;

  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */
  return typed(name, {
    'Array | Matrix': _mode,
    '...': function _(args) {
      return _mode(args);
    }
  });
  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */

  function _mode(values) {
    values = (0, _array.flatten)(values.valueOf());
    var num = values.length;

    if (num === 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }

    var count = {};
    var mode = [];
    var max = 0;

    for (var i = 0; i < values.length; i++) {
      var value = values[i];

      if (isNumeric(value) && isNaN(value)) {
        throw new Error('Cannot calculate mode of an array containing NaN values');
      }

      if (!(value in count)) {
        count[value] = 0;
      }

      count[value]++;

      if (count[value] === max) {
        mode.push(value);
      } else if (count[value] > max) {
        max = count[value];
        mode = [value];
      }
    }

    return mode;
  }
});
exports.createMode = createMode;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/prod.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/prod.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createProd = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'prod';
var dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];
var createProd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      multiplyScalar = _ref.multiplyScalar,
      numeric = _ref.numeric;

  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
  return typed(name, {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,
    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
    },
    // prod(a, b, c, d, ...)
    '...': function _(args) {
      return _prod(args);
    }
  });
  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */

  function _prod(array) {
    var prod;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        prod = prod === undefined ? value : multiplyScalar(prod, value);
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);
      }
    }); // make sure returning numeric value: parse a string into a numeric value

    if (typeof prod === 'string') {
      prod = numeric(prod, config.number);
    }

    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }

    return prod;
  }
});
exports.createProd = createProd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/quantileSeq.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/quantileSeq.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createQuantileSeq = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'quantileSeq';
var dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
var createQuantileSeq = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      multiply = _ref.multiply,
      partitionSelect = _ref.partitionSelect,
      compare = _ref.compare;

  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
  function quantileSeq(data, probOrN, sorted) {
    var probArr, dataArr, one;

    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }

    if ((0, _is.isCollection)(data)) {
      sorted = sorted || false;

      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();

        if ((0, _is.isNumber)(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }

          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!(0, _number.isInteger)(probOrN)) {
              throw new Error('N must be a positive integer');
            }

            var nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);

            for (var i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
            }

            return probArr;
          }
        }

        if ((0, _is.isBigNumber)(probOrN)) {
          var BigNumber = probOrN.constructor;

          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }

          one = new BigNumber(1);

          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
          }

          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            } // largest possible Array length is 2^32-1
            // 2^32 < 10^15, thus safe conversion guaranteed


            var intN = probOrN.toNumber();

            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }

            var _nPlusOne = new BigNumber(intN + 1);

            probArr = new Array(intN);

            for (var _i = 0; _i < intN;) {
              probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
            }

            return probArr;
          }
        }

        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);

          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
            var currProb = probOrN[_i2];

            if ((0, _is.isNumber)(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if ((0, _is.isBigNumber)(currProb)) {
              one = new currProb.constructor(1);

              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
          }

          return probArr;
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }
  /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */


  function _quantileSeq(array, prob, sorted) {
    var flat = (0, _array.flatten)(array);
    var len = flat.length;

    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }

    if ((0, _is.isNumber)(prob)) {
      var _index = prob * (len - 1);

      var _fracPart = _index % 1;

      if (_fracPart === 0) {
        var value = sorted ? flat[_index] : partitionSelect(flat, _index);
        validate(value);
        return value;
      }

      var _integerPart = Math.floor(_index);

      var _left;

      var _right;

      if (sorted) {
        _left = flat[_integerPart];
        _right = flat[_integerPart + 1];
      } else {
        _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest

        _left = flat[_integerPart];

        for (var i = 0; i < _integerPart; ++i) {
          if (compare(flat[i], _left) > 0) {
            _left = flat[i];
          }
        }
      }

      validate(_left);
      validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

      return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
    } // If prob is a BigNumber


    var index = prob.times(len - 1);

    if (index.isInteger()) {
      index = index.toNumber();

      var _value = sorted ? flat[index] : partitionSelect(flat, index);

      validate(_value);
      return _value;
    }

    var integerPart = index.floor();
    var fracPart = index.minus(integerPart);
    var integerPartNumber = integerPart.toNumber();
    var left;
    var right;

    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber + 1];
    } else {
      right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

      left = flat[integerPartNumber];

      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
        if (compare(flat[_i3], left) > 0) {
          left = flat[_i3];
        }
      }
    }

    validate(left);
    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

    var one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }
  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */


  var validate = typed({
    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
      return x;
    }
  });
  return quantileSeq;
});
exports.createQuantileSeq = createQuantileSeq;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/std.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/std.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createStd = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'std';
var dependencies = ['typed', 'sqrt', 'variance'];
var createStd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      sqrt = _ref.sqrt,
      variance = _ref.variance;

  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */
  return typed(name, {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,
    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,
    // std([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': _std,
    // std([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _std,
    // std(a, b, c, d, ...)
    '...': function _(args) {
      return _std(args);
    }
  });

  function _std(array, normalization) {
    if (array.length === 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }

    try {
      return sqrt(variance.apply(null, arguments));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
        throw new TypeError(err.message.replace(' variance', ' std'));
      } else {
        throw err;
      }
    }
  }
});
exports.createStd = createStd;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/sum.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/sum.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSum = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var name = 'sum';
var dependencies = ['typed', 'config', 'add', 'numeric'];
var createSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      add = _ref.add,
      numeric = _ref.numeric;

  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
  return typed(name, {
    // sum([a, b, c, d, ...])
    'Array | Matrix': _sum,
    // sum([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nsumDim,
    // sum(a, b, c, d, ...)
    '...': function _(args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function sum');
      }

      return _sum(args);
    }
  });
  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array | Matrix} array
   * @return {number} sum
   * @private
   */

  function _sum(array) {
    var sum;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum', value);
      }
    }); // make sure returning numeric value: parse a string into a numeric value

    if (sum === undefined) {
      sum = numeric(0, config.number);
    }

    if (typeof sum === 'string') {
      sum = numeric(sum, config.number);
    }

    return sum;
  }

  function _nsumDim(array, dim) {
    try {
      var sum = (0, _collection.reduce)(array, dim, add);
      return sum;
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum');
    }
  }
});
exports.createSum = createSum;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.improveErrorMessage = improveErrorMessage;

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

/**
 * Improve error messages for statistics functions. Errors are typically
 * thrown in an internally used function like larger, causing the error
 * not to mention the function (like max) which is actually used by the user.
 *
 * @param {Error} err
 * @param {String} fnName
 * @param {*} [value]
 * @return {Error}
 */
function improveErrorMessage(err, fnName, value) {
  // TODO: add information with the index (also needs transform in expression parser)
  var details;

  if (String(err).indexOf('Unexpected type') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
  }

  if (String(err).indexOf('complex numbers') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : '';
    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
  }

  return err;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/statistics/variance.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/statistics/variance.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createVariance = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _improveErrorMessage = __webpack_require__(/*! ./utils/improveErrorMessage.js */ "./node_modules/mathjs/lib/cjs/function/statistics/utils/improveErrorMessage.js");

var DEFAULT_NORMALIZATION = 'unbiased';
var name = 'variance';
var dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
var createVariance = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      add = _ref.add,
      subtract = _ref.subtract,
      multiply = _ref.multiply,
      divide = _ref.divide,
      apply = _ref.apply,
      isNaN = _ref.isNaN;

  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */
  return typed(name, {
    // variance([a, b, c, d, ...])
    'Array | Matrix': function ArrayMatrix(array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,
    // variance([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return _varDim(array, dim, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _varDim,
    // variance(a, b, c, d, ...)
    '...': function _(args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });
  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */

  function _var(array, normalization) {
    var sum;
    var num = 0;

    if (array.length === 0) {
      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
    } // calculate the mean and number of elements


    (0, _collection.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
        num++;
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance', value);
      }
    });
    if (num === 0) throw new Error('Cannot calculate variance of an empty array');
    var mean = divide(sum, num); // calculate the variance

    sum = undefined;
    (0, _collection.deepForEach)(array, function (value) {
      var diff = subtract(value, mean);
      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));
    });

    if (isNaN(sum)) {
      return sum;
    }

    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);

      case 'biased':
        return divide(sum, num + 1);

      case 'unbiased':
        {
          var zero = (0, _is.isBigNumber)(sum) ? sum.mul(0) : 0;
          return num === 1 ? zero : divide(sum, num - 1);
        }

      default:
        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }

  function _varDim(array, dim, normalization) {
    try {
      if (array.length === 0) {
        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
      }

      return apply(array, dim, function (x) {
        return _var(x, normalization);
      });
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance');
    }
  }
});
exports.createVariance = createVariance;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/string/bin.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/string/bin.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBin = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'bin';
var dependencies = ['typed', 'format'];
/**
 * Format a number as binary.
 *
 * Syntax:
 *
 *    math.bin(value)
 *
 * Examples:
 *
 *    //the following outputs "0b10"
 *    math.bin(2)
 *
 * See also:
 *
 *    oct
 *    hex
 *
 * @param {number} value    Value to be stringified
 * @param {number} wordSize Optional word size (see `format`)
 * @return {string}         The formatted value
 */

var createBin = (0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      format = _ref.format;
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      return format(n, {
        notation: 'bin'
      });
    },
    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
      return format(n, {
        notation: 'bin',
        wordSize: wordSize
      });
    }
  });
});
exports.createBin = createBin;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/string/format.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/string/format.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFormat = void 0;

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'format';
var dependencies = ['typed'];
var createFormat = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation: always have exponential notation,
   *        and select the exponent to be a multiple of 3.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *      - 'bin', 'oct, or 'hex'
   *        Format the number using binary, octal, or hexadecimal notation.
   *        For example '0b1101' and '0x10fe'.
   *    - `wordSize: number`
   *      The word size in bits to use for formatting in binary, octal, or
   *      hexadecimal notation. To be used only with 'bin', 'oct', or 'hex'
   *      values for 'notation' option. When this option is defined the value
   *      is formatted as a signed twos complement integer of the given word
   *      size and the size suffix is appended to the output.
   *      For example format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
   *      Default value is undefined.
   *    - `precision: number`
   *      Limit the number of digits of the formatted value.
   *      For regular numbers, must be a number between 0 and 16.
   *      For bignumbers, the maximum depends on the configured precision,
   *      see function `config()`.
   *      In case of notations 'exponential', 'engineering', and 'auto', `precision`
   *      defines the total number of significant digits returned.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `5`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
  return typed(name, {
    any: _string.format,
    'any, Object | function | number': _string.format
  });
});
exports.createFormat = createFormat;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/string/hex.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/string/hex.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createHex = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'hex';
var dependencies = ['typed', 'format'];
/**
 * Format a number as hexadecimal.
 *
 * Syntax:
 *
 *    math.hex(value)
 *
 * Examples:
 *
 *    //the following outputs "0xF0"
 *    math.hex(240)
 *
 * See also:
 *
 *    oct
 *    bin
 *
 * @param {number} value    Value to be stringified
 * @param {number} wordSize Optional word size (see `format`)
 * @return {string}         The formatted value
 */

var createHex = (0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      format = _ref.format;
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      return format(n, {
        notation: 'hex'
      });
    },
    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
      return format(n, {
        notation: 'hex',
        wordSize: wordSize
      });
    }
  });
});
exports.createHex = createHex;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/string/oct.js":
/*!************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/string/oct.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createOct = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'oct';
var dependencies = ['typed', 'format'];
/**
 * Format a number as octal.
 *
 * Syntax:
 *
 *    math.oct(value)
 *
 * Examples:
 *
 *    //the following outputs "0o70"
 *    math.oct(56)
 *
 * See also:
 *
 *    bin
 *    hex
 *
 * @param {number} value    Value to be stringified
 * @param {number} wordSize Optional word size (see `format`)
 * @return {string}         The formatted value
 */

var createOct = (0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      format = _ref.format;
  return typed(name, {
    'number | BigNumber': function numberBigNumber(n) {
      return format(n, {
        notation: 'oct'
      });
    },
    'number | BigNumber, number': function numberBigNumberNumber(n, wordSize) {
      return format(n, {
        notation: 'oct',
        wordSize: wordSize
      });
    }
  });
});
exports.createOct = createOct;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/string/print.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/string/print.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createPrint = void 0;

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'print';
var dependencies = ['typed'];
var createPrint = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */
  return typed(name, {
    // note: Matrix will be converted automatically to an Array
    'string, Object | Array': _print,
    'string, Object | Array, number | Object': _print
  });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */

exports.createPrint = createPrint;

function _print(template, values, options) {
  return template.replace(/\$([\w.]+)/g, function (original, key) {
    var keys = key.split('.');
    var value = values[keys.shift()];

    while (keys.length && value !== undefined) {
      var k = keys.shift();
      value = k ? value[k] : value + '.';
    }

    if (value !== undefined) {
      if (!(0, _is.isString)(value)) {
        return (0, _string.format)(value, options);
      } else {
        return value;
      }
    }

    return original;
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/acos.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/acos.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAcos = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'acos';
var dependencies = ['typed', 'config', 'Complex'];
var createAcos = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.acos(x);
      } else {
        return new Complex(x, 0).acos();
      }
    },
    Complex: function Complex(x) {
      return x.acos();
    },
    BigNumber: function BigNumber(x) {
      return x.acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAcos = createAcos;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/acosh.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/acosh.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAcosh = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'acosh';
var dependencies = ['typed', 'config', 'Complex'];
var createAcosh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 1 || config.predictable) {
        return (0, _index.acoshNumber)(x);
      }

      if (x <= -1) {
        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
      }

      return new Complex(x, 0).acosh();
    },
    Complex: function Complex(x) {
      return x.acosh();
    },
    BigNumber: function BigNumber(x) {
      return x.acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAcosh = createAcosh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/acot.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/acot.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAcot = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'acot';
var dependencies = ['typed', 'BigNumber'];
var createAcot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  return typed(name, {
    number: _index.acotNumber,
    Complex: function Complex(x) {
      return x.acot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAcot = createAcot;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/acoth.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/acoth.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAcoth = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'acoth';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcoth = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return (0, _index.acothNumber)(x);
      }

      return new Complex(x, 0).acoth();
    },
    Complex: function Complex(x) {
      return x.acoth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAcoth = createAcoth;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAcsc = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'acsc';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5)           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return (0, _index.acscNumber)(x);
      }

      return new Complex(x, 0).acsc();
    },
    Complex: function Complex(x) {
      return x.acsc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAcsc = createAcsc;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/acsch.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/acsch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAcsch = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'acsch';
var dependencies = ['typed', 'BigNumber'];
var createAcsch = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  return typed(name, {
    number: _index.acschNumber,
    Complex: function Complex(x) {
      return x.acsch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAcsch = createAcsch;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/asec.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/asec.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAsec = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'asec';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsec = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5)           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return (0, _index.asecNumber)(x);
      }

      return new Complex(x, 0).asec();
    },
    Complex: function Complex(x) {
      return x.asec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAsec = createAsec;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/asech.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/asech.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAsech = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'asech';
var dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsech = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        var xInv = 1 / x;

        if (xInv > 0 || config.predictable) {
          return (0, _index.asechNumber)(x);
        }

        var ret = Math.sqrt(xInv * xInv - 1);
        return new Complex(Math.log(ret - xInv), Math.PI);
      }

      return new Complex(x, 0).asech();
    },
    Complex: function Complex(x) {
      return x.asech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createAsech = createAsech;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/asin.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/asin.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAsin = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'asin';
var dependencies = ['typed', 'config', 'Complex'];
var createAsin = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  return typed(name, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.asin(x);
      } else {
        return new Complex(x, 0).asin();
      }
    },
    Complex: function Complex(x) {
      return x.asin();
    },
    BigNumber: function BigNumber(x) {
      return x.asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asin(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createAsin = createAsin;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/asinh.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/asinh.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAsinh = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'asinh';
var dependencies = ['typed'];
var createAsinh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  return typed('asinh', {
    number: _index.asinhNumber,
    Complex: function Complex(x) {
      return x.asinh();
    },
    BigNumber: function BigNumber(x) {
      return x.asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createAsinh = createAsinh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/atan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/atan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAtan = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'atan';
var dependencies = ['typed'];
var createAtan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  return typed('atan', {
    number: function number(x) {
      return Math.atan(x);
    },
    Complex: function Complex(x) {
      return x.atan();
    },
    BigNumber: function BigNumber(x) {
      return x.atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atan(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createAtan = createAtan;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/atan2.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/atan2.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAtan2 = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm02.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm03.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js");

var _algorithm3 = __webpack_require__(/*! ../../type/matrix/utils/algorithm09.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm09.js");

var _algorithm4 = __webpack_require__(/*! ../../type/matrix/utils/algorithm11.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js");

var _algorithm5 = __webpack_require__(/*! ../../type/matrix/utils/algorithm12.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js");

var _algorithm6 = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm7 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'atan2';
var dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createAtan2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix,
      equalScalar = _ref.equalScalar,
      BigNumber = _ref.BigNumber,
      DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed: typed
  });
  var algorithm09 = (0, _algorithm3.createAlgorithm09)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = (0, _algorithm5.createAlgorithm12)({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = (0, _algorithm6.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm7.createAlgorithm14)({
    typed: typed
  });
  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */

  return typed(name, {
    'number, number': Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.
    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
      return BigNumber.atan2(y, x);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      // mind the order of y and x!
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // mind the order of y and x
      return algorithm12(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // mind the order of y and x
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createAtan2 = createAtan2;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/atanh.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/atanh.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAtanh = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'atanh';
var dependencies = ['typed', 'config', 'Complex'];
var createAtanh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      config = _ref.config,
      Complex = _ref.Complex;

  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  return typed(name, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        return (0, _index.atanhNumber)(x);
      }

      return new Complex(x, 0).atanh();
    },
    Complex: function Complex(x) {
      return x.atanh();
    },
    BigNumber: function BigNumber(x) {
      return x.atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createAtanh = createAtanh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/cos.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/cos.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCos = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'cos';
var dependencies = ['typed'];
var createCos = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  return typed(name, {
    number: Math.cos,
    Complex: function Complex(x) {
      return x.cos();
    },
    BigNumber: function BigNumber(x) {
      return x.cos();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cos is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createCos = createCos;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/cosh.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/cosh.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCosh = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var name = 'cosh';
var dependencies = ['typed'];
var createCosh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  return typed(name, {
    number: _number.cosh,
    Complex: function Complex(x) {
      return x.cosh();
    },
    BigNumber: function BigNumber(x) {
      return x.cosh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cosh is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createCosh = createCosh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/cot.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/cot.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCot = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'cot';
var dependencies = ['typed', 'BigNumber'];
var createCot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  return typed(name, {
    number: _index.cotNumber,
    Complex: function Complex(x) {
      return x.cot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tan());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cot is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createCot = createCot;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/coth.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/coth.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCoth = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'coth';
var dependencies = ['typed', 'BigNumber'];
var createCoth = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  return typed(name, {
    number: _index.cothNumber,
    Complex: function Complex(x) {
      return x.coth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tanh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function coth is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createCoth = createCoth;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/csc.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/csc.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsc = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'csc';
var dependencies = ['typed', 'BigNumber'];
var createCsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  return typed(name, {
    number: _index.cscNumber,
    Complex: function Complex(x) {
      return x.csc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sin());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csc is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createCsc = createCsc;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/csch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/csch.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCsch = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'csch';
var dependencies = ['typed', 'BigNumber'];
var createCsch = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  return typed(name, {
    number: _index.cschNumber,
    Complex: function Complex(x) {
      return x.csch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sinh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csch is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createCsch = createCsch;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/sec.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/sec.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSec = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'sec';
var dependencies = ['typed', 'BigNumber'];
var createSec = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  return typed(name, {
    number: _index.secNumber,
    Complex: function Complex(x) {
      return x.sec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cos());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sec is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createSec = createSec;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/sech.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/sech.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSech = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'sech';
var dependencies = ['typed', 'BigNumber'];
var createSech = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  return typed(name, {
    number: _index.sechNumber,
    Complex: function Complex(x) {
      return x.sech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cosh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sech is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createSech = createSech;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/sin.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/sin.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSin = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'sin';
var dependencies = ['typed'];
var createSin = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  return typed(name, {
    number: Math.sin,
    Complex: function Complex(x) {
      return x.sin();
    },
    BigNumber: function BigNumber(x) {
      return x.sin();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sin is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sin(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createSin = createSin;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/sinh.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/sinh.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSinh = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'sinh';
var dependencies = ['typed'];
var createSinh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  return typed(name, {
    number: _index.sinhNumber,
    Complex: function Complex(x) {
      return x.sinh();
    },
    BigNumber: function BigNumber(x) {
      return x.sinh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sinh is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createSinh = createSinh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/tan.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/tan.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTan = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'tan';
var dependencies = ['typed'];
var createTan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  return typed(name, {
    number: Math.tan,
    Complex: function Complex(x) {
      return x.tan();
    },
    BigNumber: function BigNumber(x) {
      return x.tan();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tan is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tan(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createTan = createTan;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/trigonometry/tanh.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/trigonometry/tanh.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTanh = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var name = 'tanh';
var dependencies = ['typed'];
var createTanh = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  return typed('tanh', {
    number: _number.tanh,
    Complex: function Complex(x) {
      return x.tanh();
    },
    BigNumber: function BigNumber(x) {
      return x.tanh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tanh is no angle');
      }

      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return (0, _collection.deepMap)(x, this, true);
    }
  });
});
exports.createTanh = createTanh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/unit/to.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/unit/to.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTo = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _algorithm = __webpack_require__(/*! ../../type/matrix/utils/algorithm13.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js");

var _algorithm2 = __webpack_require__(/*! ../../type/matrix/utils/algorithm14.js */ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js");

var name = 'to';
var dependencies = ['typed', 'matrix'];
var createTo = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      matrix = _ref.matrix;
  var algorithm13 = (0, _algorithm.createAlgorithm13)({
    typed: typed
  });
  var algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed: typed
  });
  /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */

  return typed(name, {
    'Unit, Unit | string': function UnitUnitString(x, unit) {
      return x.to(unit);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(x, y, this, false);
    },
    'any, Matrix': function anyMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
exports.createTo = createTo;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/clone.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/clone.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createClone = void 0;

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'clone';
var dependencies = ['typed'];
var createClone = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Clone an object. Will make a deep copy of the data.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  return typed(name, {
    any: _object.clone
  });
});
exports.createClone = createClone;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/hasNumericValue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/hasNumericValue.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createHasNumericValue = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'hasNumericValue';
var dependencies = ['typed', 'isNumeric'];
var createHasNumericValue = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      isNumeric = _ref.isNumeric;

  /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber(500))   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i')   // returns false
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name, {
    string: function string(x) {
      return x.trim().length > 0 && !isNaN(Number(x));
    },
    any: function any(x) {
      return isNumeric(x);
    }
  });
});
exports.createHasNumericValue = createHasNumericValue;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isInteger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isInteger.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsInteger = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'isInteger';
var dependencies = ['typed'];
var createIsInteger = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i')   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _number.isInteger,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    BigNumber: function BigNumber(x) {
      return x.isInt();
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && isFinite(x.n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIsInteger = createIsInteger;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isNaN.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isNaN.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsNaN = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'isNaN';
var dependencies = ['typed'];
var createIsNaN = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _index.isNaNNumber,
    BigNumber: function BigNumber(x) {
      return x.isNaN();
    },
    Fraction: function Fraction(x) {
      return false;
    },
    Complex: function Complex(x) {
      return x.isNaN();
    },
    Unit: function Unit(x) {
      return Number.isNaN(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, Number.isNaN);
    }
  });
});
exports.createIsNaN = createIsNaN;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isNegative.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isNegative.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsNegative = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'isNegative';
var dependencies = ['typed'];
var createIsNegative = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _index.isNegativeNumber,
    BigNumber: function BigNumber(x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s < 0; // It's enough to decide on the sign
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIsNegative = createIsNegative;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isNumeric.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isNumeric.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsNumeric = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'isNumeric';
var dependencies = ['typed'];
var createIsNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns false
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber(500))   // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i')   // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name, {
    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
      return true;
    },
    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
      return false;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIsNumeric = createIsNumeric;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isPositive.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isPositive.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsPositive = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'isPositive';
var dependencies = ['typed'];
var createIsPositive = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1,3))    // returns false
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _index.isPositiveNumber,
    BigNumber: function BigNumber(x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s > 0 && x.n > 0;
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIsPositive = createIsPositive;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isPrime.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isPrime.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsPrime = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'isPrime';
var dependencies = ['typed'];
var createIsPrime = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: function number(x) {
      if (x * 0 !== 0) {
        return false;
      }

      if (x <= 3) {
        return x > 1;
      }

      if (x % 2 === 0 || x % 3 === 0) {
        return false;
      }

      for (var i = 5; i * i <= x; i += 6) {
        if (x % i === 0 || x % (i + 2) === 0) {
          return false;
        }
      }

      return true;
    },
    BigNumber: function BigNumber(n) {
      if (n.toNumber() * 0 !== 0) {
        return false;
      }

      if (n.lte(3)) return n.gt(1);
      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;

      if (n.lt(Math.pow(2, 32))) {
        var x = n.toNumber();

        for (var i = 5; i * i <= x; i += 6) {
          if (x % i === 0 || x % (i + 2) === 0) {
            return false;
          }
        }

        return true;
      }

      function modPow(base, exponent, modulus) {
        // exponent can be huge, use non-recursive variant
        var accumulator = 1;

        while (!exponent.eq(0)) {
          if (exponent.mod(2).eq(0)) {
            exponent = exponent.div(2);
            base = base.mul(base).mod(modulus);
          } else {
            exponent = exponent.sub(1);
            accumulator = base.mul(accumulator).mod(modulus);
          }
        }

        return accumulator;
      } // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Deterministic_variants


      var Decimal = n.constructor.clone({
        precision: n.toFixed(0).length * 2
      });
      n = new Decimal(n);
      var r = 0;
      var d = n.sub(1);

      while (d.mod(2).eq(0)) {
        d = d.div(2);
        r += 1;
      }

      var bases = null; // https://en.wikipedia.org/wiki/Miller–Rabin_primality_test#Testing_against_small_sets_of_bases

      if (n.lt('3317044064679887385961981')) {
        bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41].filter(function (x) {
          return x < n;
        });
      } else {
        var max = Math.min(n.toNumber() - 2, Math.floor(2 * Math.pow(n.toFixed(0).length * Math.log(10), 2)));
        bases = [];

        for (var _i = 2; _i <= max; _i += 1) {
          bases.push(max);
        }
      }

      for (var _i2 = 0; _i2 < bases.length; _i2 += 1) {
        var a = bases[_i2];
        var adn = modPow(n.sub(n).add(a), d, n);

        if (!adn.eq(1)) {
          for (var _i3 = 0, _x = adn; !_x.eq(n.sub(1)); _i3 += 1, _x = _x.mul(_x).mod(n)) {
            if (_i3 === r - 1) {
              return false;
            }
          }
        }
      }

      return true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIsPrime = createIsPrime;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/isZero.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/isZero.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIsZero = void 0;

var _collection = __webpack_require__(/*! ../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _index = __webpack_require__(/*! ../../plain/number/index.js */ "./node_modules/mathjs/lib/cjs/plain/number/index.js");

var name = 'isZero';
var dependencies = ['typed'];
var createIsZero = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                     // returns true
   *    math.isZero(2)                     // returns false
   *    math.isZero(0.5)                   // returns false
   *    math.isZero(math.bignumber(0))     // returns true
   *    math.isZero(math.fraction(0))      // returns true
   *    math.isZero(math.fraction(1,3))    // returns false
   *    math.isZero(math.complex('2 - 4i') // returns false
   *    math.isZero(math.complex('0i')     // returns true
   *    math.isZero('0')                   // returns true
   *    math.isZero('2')                   // returns false
   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    number: _index.isZeroNumber,
    BigNumber: function BigNumber(x) {
      return x.isZero();
    },
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && x.n === 0;
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createIsZero = createIsZero;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/numeric.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/numeric.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNumeric = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _noop = __webpack_require__(/*! ../../utils/noop.js */ "./node_modules/mathjs/lib/cjs/utils/noop.js");

var name = 'numeric';
var dependencies = ['number', '?bignumber', '?fraction'];
var createNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var _number = _ref.number,
      bignumber = _ref.bignumber,
      fraction = _ref.fraction;
  var validInputTypes = {
    string: true,
    number: true,
    BigNumber: true,
    Fraction: true
  }; // Load the conversion functions for each output type

  var validOutputTypes = {
    number: function number(x) {
      return _number(x);
    },
    BigNumber: bignumber ? function (x) {
      return bignumber(x);
    } : _noop.noBignumber,
    Fraction: fraction ? function (x) {
      return fraction(x);
    } : _noop.noFraction
  };
  /**
   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
   *
   * Syntax:
   *
   *    math.numeric(x)
   *
   * Examples:
   *
   *    math.numeric('4')                           // returns number 4
   *    math.numeric('4', 'number')                 // returns number 4
   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
   *    math.numeric('4', 'Fraction')               // returns Fraction 4
   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
   *
   * See also:
   *
   *    number, fraction, bignumber, string, format
   *
   * @param {string | number | BigNumber | Fraction } value
   *              A numeric value or a string containing a numeric value
   * @param {string} outputType
   *              Desired numeric output type.
   *              Available values: 'number', 'BigNumber', or 'Fraction'
   * @return {number | BigNumber | Fraction}
   *              Returns an instance of the numeric in the requested type
   */

  return function numeric(value, outputType) {
    var inputType = (0, _is.typeOf)(value);

    if (!(inputType in validInputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
    }

    if (!(outputType in validOutputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
    }

    if (outputType === inputType) {
      return value;
    } else {
      return validOutputTypes[outputType](value);
    }
  };
});
exports.createNumeric = createNumeric;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/function/utils/typeOf.js":
/*!**************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/function/utils/typeOf.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createTypeOf = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'typeOf';
var dependencies = ['typed'];
var createTypeOf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Determine the type of a variable.
   *
   * Function `typeOf` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeOf(null)`
   * number                 | `'number'`    | `math.typeOf(3.5)`
   * boolean                | `'boolean'`   | `math.typeOf(true)`
   * string                 | `'string'`    | `math.typeOf('hello world')`
   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeOf(new Date())`
   * Function               | `'Function'`  | `math.typeOf(function () {})`
   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
   * undefined              | `'undefined'` | `math.typeOf(undefined)`
   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    math.typeOf(3.5)                     // returns 'number'
   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
   *    math.typeOf('hello world')           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  return typed(name, {
    any: _is.typeOf
  });
});
exports.createTypeOf = createTypeOf;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/index.js":
/*!**********************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _mainAny = __webpack_require__(/*! ./entry/mainAny.js */ "./node_modules/mathjs/lib/cjs/entry/mainAny.js");

Object.keys(_mainAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mainAny[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _mainAny[key];
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/json/replacer.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/json/replacer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createReplacer = void 0;

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'replacer';
var dependencies = [];
var createReplacer = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {
  /**
   * Stringify data types into their JSON representation.
   * Most data types can be serialized using their `.toJSON` method,
   * but not all, for example the number `Infinity`. For these cases you have
   * to use the replacer. Example usage:
   *
   *     JSON.stringify([2, Infinity], math.replacer)
   *
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the replaced object
   */
  return function replacer(key, value) {
    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {
      return {
        mathjs: 'number',
        value: String(value)
      };
    }

    return value;
  };
});
exports.createReplacer = createReplacer;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/json/reviver.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/json/reviver.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createReviver = void 0;

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'reviver';
var dependencies = ['classes'];
var createReviver = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var classes = _ref.classes;

  /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
  return function reviver(key, value) {
    var constructor = classes[value && value.mathjs];

    if (constructor && typeof constructor.fromJSON === 'function') {
      return constructor.fromJSON(value);
    }

    return value;
  };
});
exports.createReviver = createReviver;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/arithmetic.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/arithmetic.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.absNumber = absNumber;
exports.addNumber = addNumber;
exports.subtractNumber = subtractNumber;
exports.multiplyNumber = multiplyNumber;
exports.divideNumber = divideNumber;
exports.unaryMinusNumber = unaryMinusNumber;
exports.unaryPlusNumber = unaryPlusNumber;
exports.cbrtNumber = cbrtNumber;
exports.ceilNumber = ceilNumber;
exports.cubeNumber = cubeNumber;
exports.expNumber = expNumber;
exports.expm1Number = expm1Number;
exports.fixNumber = fixNumber;
exports.floorNumber = floorNumber;
exports.gcdNumber = gcdNumber;
exports.lcmNumber = lcmNumber;
exports.logNumber = logNumber;
exports.log10Number = log10Number;
exports.log2Number = log2Number;
exports.log1pNumber = log1pNumber;
exports.modNumber = modNumber;
exports.nthRootNumber = nthRootNumber;
exports.signNumber = signNumber;
exports.sqrtNumber = sqrtNumber;
exports.squareNumber = squareNumber;
exports.xgcdNumber = xgcdNumber;
exports.powNumber = powNumber;
exports.roundNumber = roundNumber;
exports.normNumber = normNumber;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var n1 = 'number';
var n2 = 'number, number';

function absNumber(a) {
  return Math.abs(a);
}

absNumber.signature = n1;

function addNumber(a, b) {
  return a + b;
}

addNumber.signature = n2;

function subtractNumber(a, b) {
  return a - b;
}

subtractNumber.signature = n2;

function multiplyNumber(a, b) {
  return a * b;
}

multiplyNumber.signature = n2;

function divideNumber(a, b) {
  return a / b;
}

divideNumber.signature = n2;

function unaryMinusNumber(x) {
  return -x;
}

unaryMinusNumber.signature = n1;

function unaryPlusNumber(x) {
  return x;
}

unaryPlusNumber.signature = n1;

function cbrtNumber(x) {
  return (0, _number.cbrt)(x);
}

cbrtNumber.signature = n1;

function ceilNumber(x) {
  return Math.ceil(x);
}

ceilNumber.signature = n1;

function cubeNumber(x) {
  return x * x * x;
}

cubeNumber.signature = n1;

function expNumber(x) {
  return Math.exp(x);
}

expNumber.signature = n1;

function expm1Number(x) {
  return (0, _number.expm1)(x);
}

expm1Number.signature = n1;

function fixNumber(x) {
  return x > 0 ? Math.floor(x) : Math.ceil(x);
}

fixNumber.signature = n1;

function floorNumber(x) {
  return Math.floor(x);
}

floorNumber.signature = n1;
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 */

function gcdNumber(a, b) {
  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm


  var r;

  while (b !== 0) {
    r = a % b;
    a = b;
    b = r;
  }

  return a < 0 ? -a : a;
}

gcdNumber.signature = n2;
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 */

function lcmNumber(a, b) {
  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }

  if (a === 0 || b === 0) {
    return 0;
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead


  var t;
  var prod = a * b;

  while (b !== 0) {
    t = b;
    b = a % t;
    a = t;
  }

  return Math.abs(prod / a);
}

lcmNumber.signature = n2;
/**
 * Calculate the logarithm of a value.
 * @param {number} x
 * @return {number}
 */

function logNumber(x) {
  return Math.log(x);
}

logNumber.signature = n1;
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log10Number(x) {
  return (0, _number.log10)(x);
}

log10Number.signature = n1;
/**
 * Calculate the 2-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log2Number(x) {
  return (0, _number.log2)(x);
}

log2Number.signature = n1;
/**
 * Calculate the natural logarithm of a `number+1`
 * @param {number} x
 * @returns {number}
 */

function log1pNumber(x) {
  return (0, _number.log1p)(x);
}

log1pNumber.signature = n1;
/**
 * Calculate the modulus of two numbers
 * @param {number} x
 * @param {number} y
 * @returns {number} res
 * @private
 */

function modNumber(x, y) {
  if (y > 0) {
    // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return x - y * Math.floor(x / y);
  } else if (y === 0) {
    return x;
  } else {
    // y < 0
    // TODO: implement mod for a negative divisor
    throw new Error('Cannot calculate mod for a negative divisor');
  }
}

modNumber.signature = n2;
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */

function nthRootNumber(a, root) {
  var inv = root < 0;

  if (inv) {
    root = -root;
  }

  if (root === 0) {
    throw new Error('Root must be non-zero');
  }

  if (a < 0 && Math.abs(root) % 2 !== 1) {
    throw new Error('Root must be odd when a is negative.');
  } // edge cases zero and infinity


  if (a === 0) {
    return inv ? Infinity : 0;
  }

  if (!isFinite(a)) {
    return inv ? 0 : a;
  }

  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1

  x = a < 0 ? -x : x;
  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

  /*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */
}

nthRootNumber.signature = n2;

function signNumber(x) {
  return (0, _number.sign)(x);
}

signNumber.signature = n1;

function sqrtNumber(x) {
  return Math.sqrt(x);
}

sqrtNumber.signature = n1;

function squareNumber(x) {
  return x * x;
}

squareNumber.signature = n1;
/**
 * Calculate xgcd for two numbers
 * @param {number} a
 * @param {number} b
 * @return {number} result
 * @private
 */

function xgcdNumber(a, b) {
  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
  var t; // used to swap two variables

  var q; // quotient

  var r; // remainder

  var x = 0;
  var lastx = 1;
  var y = 1;
  var lasty = 0;

  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {
    throw new Error('Parameters in function xgcd must be integer numbers');
  }

  while (b) {
    q = Math.floor(a / b);
    r = a - q * b;
    t = x;
    x = lastx - q * x;
    lastx = t;
    t = y;
    y = lasty - q * y;
    lasty = t;
    a = b;
    b = r;
  }

  var res;

  if (a < 0) {
    res = [-a, -lastx, -lasty];
  } else {
    res = [a, a ? lastx : 0, lasty];
  }

  return res;
}

xgcdNumber.signature = n2;
/**
 * Calculates the power of x to y, x^y, for two numbers.
 * @param {number} x
 * @param {number} y
 * @return {number} res
 */

function powNumber(x, y) {
  // x^Infinity === 0 if -1 < x < 1
  // A real number 0 is returned instead of complex(0)
  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
    return 0;
  }

  return Math.pow(x, y);
}

powNumber.signature = n2;
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 */

function roundNumber(value) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return parseFloat((0, _number.toFixed)(value, decimals));
}

roundNumber.signature = n2;
/**
 * Calculate the norm of a number, the absolute value.
 * @param {number} x
 * @return {number}
 */

function normNumber(x) {
  return Math.abs(x);
}

normNumber.signature = n1;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/bitwise.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/bitwise.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitAndNumber = bitAndNumber;
exports.bitNotNumber = bitNotNumber;
exports.bitOrNumber = bitOrNumber;
exports.bitXorNumber = bitXorNumber;
exports.leftShiftNumber = leftShiftNumber;
exports.rightArithShiftNumber = rightArithShiftNumber;
exports.rightLogShiftNumber = rightLogShiftNumber;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var n1 = 'number';
var n2 = 'number, number';

function bitAndNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function bitAnd');
  }

  return x & y;
}

bitAndNumber.signature = n2;

function bitNotNumber(x) {
  if (!(0, _number.isInteger)(x)) {
    throw new Error('Integer expected in function bitNot');
  }

  return ~x;
}

bitNotNumber.signature = n1;

function bitOrNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function bitOr');
  }

  return x | y;
}

bitOrNumber.signature = n2;

function bitXorNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function bitXor');
  }

  return x ^ y;
}

bitXorNumber.signature = n2;

function leftShiftNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function leftShift');
  }

  return x << y;
}

leftShiftNumber.signature = n2;

function rightArithShiftNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function rightArithShift');
  }

  return x >> y;
}

rightArithShiftNumber.signature = n2;

function rightLogShiftNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function rightLogShift');
  }

  return x >>> y;
}

rightLogShiftNumber.signature = n2;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/combinations.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/combinations.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combinationsNumber = combinationsNumber;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _product = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/cjs/utils/product.js");

function combinationsNumber(n, k) {
  if (!(0, _number.isInteger)(n) || n < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (!(0, _number.isInteger)(k) || k < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (k > n) {
    throw new TypeError('k must be less than or equal to n');
  }

  var nMinusk = n - k;
  var prodrange;

  if (k < nMinusk) {
    prodrange = (0, _product.product)(nMinusk + 1, n);
    return prodrange / (0, _product.product)(1, k);
  }

  prodrange = (0, _product.product)(k + 1, n);
  return prodrange / (0, _product.product)(1, nMinusk);
}

combinationsNumber.signature = 'number, number';

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.phi = exports.e = exports.tau = exports.pi = void 0;
var pi = Math.PI;
exports.pi = pi;
var tau = 2 * Math.PI;
exports.tau = tau;
var e = Math.E;
exports.e = e;
var phi = 1.6180339887498948; // eslint-disable-line no-loss-of-precision

exports.phi = phi;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var _arithmetic = __webpack_require__(/*! ./arithmetic.js */ "./node_modules/mathjs/lib/cjs/plain/number/arithmetic.js");

Object.keys(_arithmetic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _arithmetic[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _arithmetic[key];
    }
  });
});

var _bitwise = __webpack_require__(/*! ./bitwise.js */ "./node_modules/mathjs/lib/cjs/plain/number/bitwise.js");

Object.keys(_bitwise).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bitwise[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _bitwise[key];
    }
  });
});

var _combinations = __webpack_require__(/*! ./combinations.js */ "./node_modules/mathjs/lib/cjs/plain/number/combinations.js");

Object.keys(_combinations).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _combinations[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _combinations[key];
    }
  });
});

var _constants = __webpack_require__(/*! ./constants.js */ "./node_modules/mathjs/lib/cjs/plain/number/constants.js");

Object.keys(_constants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _constants[key];
    }
  });
});

var _logical = __webpack_require__(/*! ./logical.js */ "./node_modules/mathjs/lib/cjs/plain/number/logical.js");

Object.keys(_logical).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _logical[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _logical[key];
    }
  });
});

var _relational = __webpack_require__(/*! ./relational.js */ "./node_modules/mathjs/lib/cjs/plain/number/relational.js");

Object.keys(_relational).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _relational[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _relational[key];
    }
  });
});

var _probability = __webpack_require__(/*! ./probability.js */ "./node_modules/mathjs/lib/cjs/plain/number/probability.js");

Object.keys(_probability).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _probability[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _probability[key];
    }
  });
});

var _trigonometry = __webpack_require__(/*! ./trigonometry.js */ "./node_modules/mathjs/lib/cjs/plain/number/trigonometry.js");

Object.keys(_trigonometry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _trigonometry[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _trigonometry[key];
    }
  });
});

var _utils = __webpack_require__(/*! ./utils.js */ "./node_modules/mathjs/lib/cjs/plain/number/utils.js");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _utils[key];
    }
  });
});

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/logical.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/logical.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.notNumber = notNumber;
exports.orNumber = orNumber;
exports.xorNumber = xorNumber;
exports.andNumber = andNumber;
var n1 = 'number';
var n2 = 'number, number';

function notNumber(x) {
  return !x;
}

notNumber.signature = n1;

function orNumber(x, y) {
  return !!(x || y);
}

orNumber.signature = n2;

function xorNumber(x, y) {
  return !!x !== !!y;
}

xorNumber.signature = n2;

function andNumber(x, y) {
  return !!(x && y);
}

andNumber.signature = n2;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/probability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/probability.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.gammaNumber = gammaNumber;
exports.gammaP = exports.gammaG = void 0;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _product = __webpack_require__(/*! ../../utils/product.js */ "./node_modules/mathjs/lib/cjs/utils/product.js");

/* eslint-disable no-loss-of-precision */
function gammaNumber(n) {
  var x;

  if ((0, _number.isInteger)(n)) {
    if (n <= 0) {
      return isFinite(n) ? Infinity : NaN;
    }

    if (n > 171) {
      return Infinity; // Will overflow
    }

    return (0, _product.product)(1, n - 1);
  }

  if (n < 0.5) {
    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
  }

  if (n >= 171.35) {
    return Infinity; // will overflow
  }

  if (n > 85.0) {
    // Extended Stirling Approx
    var twoN = n * n;
    var threeN = twoN * n;
    var fourN = threeN * n;
    var fiveN = fourN * n;
    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
  }

  --n;
  x = gammaP[0];

  for (var i = 1; i < gammaP.length; ++i) {
    x += gammaP[i] / (n + i);
  }

  var t = n + gammaG + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}

gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

var gammaG = 4.7421875;
exports.gammaG = gammaG;
var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];
exports.gammaP = gammaP;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/relational.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/relational.js ***!
  \****************************************************************/
/***/ (() => {

"use strict";


/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/trigonometry.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/trigonometry.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.acosNumber = acosNumber;
exports.acoshNumber = acoshNumber;
exports.acotNumber = acotNumber;
exports.acothNumber = acothNumber;
exports.acscNumber = acscNumber;
exports.acschNumber = acschNumber;
exports.asecNumber = asecNumber;
exports.asechNumber = asechNumber;
exports.asinNumber = asinNumber;
exports.asinhNumber = asinhNumber;
exports.atanNumber = atanNumber;
exports.atan2Number = atan2Number;
exports.atanhNumber = atanhNumber;
exports.cosNumber = cosNumber;
exports.coshNumber = coshNumber;
exports.cotNumber = cotNumber;
exports.cothNumber = cothNumber;
exports.cscNumber = cscNumber;
exports.cschNumber = cschNumber;
exports.secNumber = secNumber;
exports.sechNumber = sechNumber;
exports.sinNumber = sinNumber;
exports.sinhNumber = sinhNumber;
exports.tanNumber = tanNumber;
exports.tanhNumber = tanhNumber;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var n1 = 'number';
var n2 = 'number, number';

function acosNumber(x) {
  return Math.acos(x);
}

acosNumber.signature = n1;

function acoshNumber(x) {
  return (0, _number.acosh)(x);
}

acoshNumber.signature = n1;

function acotNumber(x) {
  return Math.atan(1 / x);
}

acotNumber.signature = n1;

function acothNumber(x) {
  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}

acothNumber.signature = n1;

function acscNumber(x) {
  return Math.asin(1 / x);
}

acscNumber.signature = n1;

function acschNumber(x) {
  var xInv = 1 / x;
  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}

acschNumber.signature = n1;

function asecNumber(x) {
  return Math.acos(1 / x);
}

asecNumber.signature = n1;

function asechNumber(x) {
  var xInv = 1 / x;
  var ret = Math.sqrt(xInv * xInv - 1);
  return Math.log(ret + xInv);
}

asechNumber.signature = n1;

function asinNumber(x) {
  return Math.asin(x);
}

asinNumber.signature = n1;

function asinhNumber(x) {
  return (0, _number.asinh)(x);
}

asinhNumber.signature = n1;

function atanNumber(x) {
  return Math.atan(x);
}

atanNumber.signature = n1;

function atan2Number(y, x) {
  return Math.atan2(y, x);
}

atan2Number.signature = n2;

function atanhNumber(x) {
  return (0, _number.atanh)(x);
}

atanhNumber.signature = n1;

function cosNumber(x) {
  return Math.cos(x);
}

cosNumber.signature = n1;

function coshNumber(x) {
  return (0, _number.cosh)(x);
}

coshNumber.signature = n1;

function cotNumber(x) {
  return 1 / Math.tan(x);
}

cotNumber.signature = n1;

function cothNumber(x) {
  var e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}

cothNumber.signature = n1;

function cscNumber(x) {
  return 1 / Math.sin(x);
}

cscNumber.signature = n1;

function cschNumber(x) {
  // consider values close to zero (+/-)
  if (x === 0) {
    return Number.POSITIVE_INFINITY;
  } else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * (0, _number.sign)(x);
  }
}

cschNumber.signature = n1;

function secNumber(x) {
  return 1 / Math.cos(x);
}

secNumber.signature = n1;

function sechNumber(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}

sechNumber.signature = n1;

function sinNumber(x) {
  return Math.sin(x);
}

sinNumber.signature = n1;

function sinhNumber(x) {
  return (0, _number.sinh)(x);
}

sinhNumber.signature = n1;

function tanNumber(x) {
  return Math.tan(x);
}

tanNumber.signature = n1;

function tanhNumber(x) {
  return (0, _number.tanh)(x);
}

tanhNumber.signature = n1;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/plain/number/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/plain/number/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isIntegerNumber = isIntegerNumber;
exports.isNegativeNumber = isNegativeNumber;
exports.isPositiveNumber = isPositiveNumber;
exports.isZeroNumber = isZeroNumber;
exports.isNaNNumber = isNaNNumber;

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var n1 = 'number';

function isIntegerNumber(x) {
  return (0, _number.isInteger)(x);
}

isIntegerNumber.signature = n1;

function isNegativeNumber(x) {
  return x < 0;
}

isNegativeNumber.signature = n1;

function isPositiveNumber(x) {
  return x > 0;
}

isPositiveNumber.signature = n1;

function isZeroNumber(x) {
  return x === 0;
}

isZeroNumber.signature = n1;

function isNaNNumber(x) {
  return Number.isNaN(x);
}

isNaNNumber.signature = n1;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/bignumber/BigNumber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/bignumber/BigNumber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBigNumberClass = void 0;

var _decimal = _interopRequireDefault(__webpack_require__(/*! decimal.js */ "./node_modules/decimal.js/decimal.js"));

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'BigNumber';
var dependencies = ['?on', 'config'];
var createBigNumberClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var on = _ref.on,
      config = _ref.config;

  var BigNumber = _decimal["default"].clone({
    precision: config.precision,
    modulo: _decimal["default"].EUCLID
  });

  BigNumber.prototype = Object.create(BigNumber.prototype);
  /**
   * Attach type information
   */

  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;
  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */

  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };
  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */


  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  };

  if (on) {
    // listen for changed in the configuration, automatically apply changed precision
    on('config', function (curr, prev) {
      if (curr.precision !== prev.precision) {
        BigNumber.config({
          precision: curr.precision
        });
      }
    });
  }

  return BigNumber;
}, {
  isClass: true
});
exports.createBigNumberClass = createBigNumberClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/bignumber/function/bignumber.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBignumber = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'bignumber';
var dependencies = ['typed', 'BigNumber'];
var createBignumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      BigNumber = _ref.BigNumber;

  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
   *
   *
   *    7.2e500                                    // returns number Infinity
   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  return typed('bignumber', {
    '': function _() {
      return new BigNumber(0);
    },
    number: function number(x) {
      // convert to string to prevent errors in case of >15 digits
      return new BigNumber(x + '');
    },
    string: function string(x) {
      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);

      if (wordSizeSuffixMatch) {
        // x has a word size suffix
        var size = wordSizeSuffixMatch[2];
        var n = BigNumber(wordSizeSuffixMatch[1]);
        var twoPowSize = new BigNumber(2).pow(Number(size));

        if (n.gt(twoPowSize.sub(1))) {
          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
        }

        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);

        if (n.gte(twoPowSizeSubOne)) {
          return n.sub(twoPowSize);
        } else {
          return n;
        }
      }

      return new BigNumber(x);
    },
    BigNumber: function BigNumber(x) {
      // we assume a BigNumber is immutable
      return x;
    },
    Fraction: function Fraction(x) {
      return new BigNumber(x.n).div(x.d).times(x.s);
    },
    "null": function _null(x) {
      return new BigNumber(0);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createBignumber = createBignumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/boolean.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/boolean.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBoolean = void 0;

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'boolean';
var dependencies = ['typed'];
var createBoolean = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0)     // returns false
   *    math.boolean(1)     // returns true
   *    math.boolean(-3)     // returns true
   *    math.boolean('true')     // returns true
   *    math.boolean('false')     // returns false
   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
  return typed(name, {
    '': function _() {
      return false;
    },
    "boolean": function boolean(x) {
      return x;
    },
    number: function number(x) {
      return !!x;
    },
    "null": function _null(x) {
      return false;
    },
    BigNumber: function BigNumber(x) {
      return !x.isZero();
    },
    string: function string(x) {
      // try case insensitive
      var lcase = x.toLowerCase();

      if (lcase === 'true') {
        return true;
      } else if (lcase === 'false') {
        return false;
      } // test whether value is a valid number


      var num = Number(x);

      if (x !== '' && !isNaN(num)) {
        return !!num;
      }

      throw new Error('Cannot convert "' + x + '" to a boolean');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createBoolean = createBoolean;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/chain/Chain.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/chain/Chain.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createChainClass = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Chain';
var dependencies = ['?on', 'math'];
var createChainClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var on = _ref.on,
      math = _ref.math;

  /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
  function Chain(value) {
    if (!(this instanceof Chain)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if ((0, _is.isChain)(value)) {
      this.value = value.value;
    } else {
      this.value = value;
    }
  }
  /**
   * Attach type information
   */


  Chain.prototype.type = 'Chain';
  Chain.prototype.isChain = true;
  /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */

  Chain.prototype.done = function () {
    return this.value;
  };
  /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */


  Chain.prototype.valueOf = function () {
    return this.value;
  };
  /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */


  Chain.prototype.toString = function () {
    return (0, _string.format)(this.value);
  };
  /**
   * Get a JSON representation of the chain
   * @returns {Object}
   */


  Chain.prototype.toJSON = function () {
    return {
      mathjs: 'Chain',
      value: this.value
    };
  };
  /**
   * Instantiate a Chain from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "Chain", value: ...}`,
   *                       where mathjs is optional
   * @returns {Chain}
   */


  Chain.fromJSON = function (json) {
    return new Chain(json.value);
  };
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */


  function createProxy(name, fn) {
    if (typeof fn === 'function') {
      Chain.prototype[name] = chainify(fn);
    }
  }
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */


  function createLazyProxy(name, resolver) {
    (0, _object.lazy)(Chain.prototype, name, function outerResolver() {
      var fn = resolver();

      if (typeof fn === 'function') {
        return chainify(fn);
      }

      return undefined; // if not a function, ignore
    });
  }
  /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */


  function chainify(fn) {
    return function () {
      var args = [this.value]; // `this` will be the context of a Chain instance

      for (var i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i];
      }

      return new Chain(fn.apply(fn, args));
    };
  }
  /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...})
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */


  Chain.createProxy = function (arg0, arg1) {
    if (typeof arg0 === 'string') {
      // createProxy(name, value)
      createProxy(arg0, arg1);
    } else {
      var _loop = function _loop(_name) {
        if ((0, _object.hasOwnProperty)(arg0, _name) && excludedNames[_name] === undefined) {
          createLazyProxy(_name, function () {
            return arg0[_name];
          });
        }
      };

      // createProxy(values)
      for (var _name in arg0) {
        _loop(_name);
      }
    }
  };

  var excludedNames = {
    expression: true,
    docs: true,
    type: true,
    classes: true,
    json: true,
    error: true,
    isChain: true // conflicts with the property isChain of a Chain instance

  }; // create proxy for everything that is in math.js

  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

  if (on) {
    on('import', function (name, resolver, path) {
      if (!path) {
        // an imported function (not a data type or something special)
        createLazyProxy(name, resolver);
      }
    });
  }

  return Chain;
}, {
  isClass: true
});
exports.createChainClass = createChainClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/chain/function/chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/chain/function/chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createChain = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'chain';
var dependencies = ['typed', 'Chain'];
var createChain = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Chain = _ref.Chain;

  /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done()     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done()     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.Chain} The created chain
   */
  return typed(name, {
    '': function _() {
      return new Chain();
    },
    any: function any(value) {
      return new Chain(value);
    }
  });
});
exports.createChain = createChain;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/complex/Complex.js":
/*!*************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/complex/Complex.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createComplexClass = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _complex = _interopRequireDefault(__webpack_require__(/*! complex.js */ "./node_modules/complex.js/complex.js"));

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Complex';
var dependencies = [];
var createComplexClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {
  /**
   * Attach type information
   */
  _complex["default"].prototype.type = 'Complex';
  _complex["default"].prototype.isComplex = true;
  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */

  _complex["default"].prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };
  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */


  _complex["default"].prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };
  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */


  _complex["default"].prototype.format = function (options) {
    var str = '';
    var im = this.im;
    var re = this.re;
    var strRe = (0, _number.format)(this.re, options);
    var strIm = (0, _number.format)(this.im, options); // round either re or im when smaller than the configured precision

    var precision = (0, _is.isNumber)(options) ? options : options ? options.precision : null;

    if (precision !== null) {
      var epsilon = Math.pow(10, -precision);

      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }

      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }

    if (im === 0) {
      // real value
      str = strRe;
    } else if (re === 0) {
      // purely complex value
      if (im === 1) {
        str = 'i';
      } else if (im === -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im === -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im === 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }

    return str;
  };
  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */


  _complex["default"].fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        {
          var arg = arguments[0];

          if ((0, _typeof2["default"])(arg) === 'object') {
            return (0, _complex["default"])(arg);
          } else {
            throw new TypeError('Input has to be an object with r and phi keys.');
          }
        }

      case 2:
        {
          var r = arguments[0];
          var phi = arguments[1];

          if ((0, _is.isNumber)(r)) {
            if ((0, _is.isUnit)(phi) && phi.hasBase('ANGLE')) {
              // convert unit to a number in radians
              phi = phi.toNumber('rad');
            }

            if ((0, _is.isNumber)(phi)) {
              return new _complex["default"]({
                r: r,
                phi: phi
              });
            }

            throw new TypeError('Phi is not a number nor an angle unit.');
          } else {
            throw new TypeError('Radius r is not a number.');
          }
        }

      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };

  _complex["default"].prototype.valueOf = _complex["default"].prototype.toString;
  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */

  _complex["default"].fromJSON = function (json) {
    return new _complex["default"](json);
  };
  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  _complex["default"].compare = function (a, b) {
    if (a.re > b.re) {
      return 1;
    }

    if (a.re < b.re) {
      return -1;
    }

    if (a.im > b.im) {
      return 1;
    }

    if (a.im < b.im) {
      return -1;
    }

    return 0;
  };

  return _complex["default"];
}, {
  isClass: true
});
exports.createComplexClass = createComplexClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/complex/function/complex.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/complex/function/complex.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createComplex = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'complex';
var dependencies = ['typed', 'Complex'];
var createComplex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Complex = _ref.Complex;

  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
   *    a.re = 5                          // a = Complex 5 - 4i
   *    const i = a.im                    // Number -4
   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
   *    const c = math.complex()          // Complex 0 + 0i
   *    const d = math.add(a, b)          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
  return typed('complex', {
    '': function _() {
      return Complex.ZERO;
    },
    number: function number(x) {
      return new Complex(x, 0);
    },
    'number, number': function numberNumber(re, im) {
      return new Complex(re, im);
    },
    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
      return new Complex(re.toNumber(), im.toNumber());
    },
    Fraction: function Fraction(x) {
      return new Complex(x.valueOf(), 0);
    },
    Complex: function Complex(x) {
      return x.clone();
    },
    string: function string(x) {
      return Complex(x); // for example '2 + 3i'
    },
    "null": function _null(x) {
      return Complex(0);
    },
    Object: function Object(x) {
      if ('re' in x && 'im' in x) {
        return new Complex(x.re, x.im);
      }

      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
        return new Complex(x);
      }

      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createComplex = createComplex;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/fraction/Fraction.js":
/*!***************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/fraction/Fraction.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFractionClass = void 0;

var _fraction = _interopRequireDefault(__webpack_require__(/*! fraction.js */ "./node_modules/fraction.js/fraction.js"));

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Fraction';
var dependencies = [];
var createFractionClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {
  /**
   * Attach type information
   */
  _fraction["default"].prototype.type = 'Fraction';
  _fraction["default"].prototype.isFraction = true;
  /**
   * Get a JSON representation of a Fraction containing type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
   */

  _fraction["default"].prototype.toJSON = function () {
    return {
      mathjs: 'Fraction',
      n: this.s * this.n,
      d: this.d
    };
  };
  /**
   * Instantiate a Fraction from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
   * @return {BigNumber}
   */


  _fraction["default"].fromJSON = function (json) {
    return new _fraction["default"](json);
  };

  return _fraction["default"];
}, {
  isClass: true
});
exports.createFractionClass = createFractionClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js":
/*!************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/fraction/function/fraction.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFraction = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'fraction';
var dependencies = ['typed', 'Fraction'];
var createFraction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Fraction = _ref.Fraction;

  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3)
   *     math.fraction('2/3')
   *     math.fraction({n: 2, d: 3})
   *     math.fraction([0.2, 0.25, 1.25])
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  return typed('fraction', {
    number: function number(x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }

      return new Fraction(x);
    },
    string: function string(x) {
      return new Fraction(x);
    },
    'number, number': function numberNumber(numerator, denominator) {
      return new Fraction(numerator, denominator);
    },
    "null": function _null(x) {
      return new Fraction(0);
    },
    BigNumber: function BigNumber(x) {
      return new Fraction(x.toString());
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },
    Object: function Object(x) {
      return new Fraction(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createFraction = createFraction;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/DenseMatrix.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/DenseMatrix.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createDenseMatrixClass = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _DimensionError = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var name = 'DenseMatrix';
var dependencies = ['Matrix'];
var createDenseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var Matrix = _ref.Matrix;

  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   * @enum {{ value, index: number[] }}
   */
  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0, _is.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0, _is.isMatrix)(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = (0, _object.clone)(data._data);
        this._size = (0, _object.clone)(data._size);
        this._datatype = datatype || data._datatype;
      } else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size; // verify the dimensions of the array

      (0, _array.validate)(this._data, this._size);
      this._datatype = datatype || data.datatype;
    } else if ((0, _is.isArray)(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data); // get the dimensions of the array

      this._size = (0, _array.arraySize)(this._data); // verify the dimensions of the array, TODO: compute size while processing array

      (0, _array.validate)(this._data, this._size); // data type unknown

      this._datatype = datatype;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }

  DenseMatrix.prototype = new Matrix();
  /**
   * Create a new DenseMatrix
   */

  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf DenseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  DenseMatrix.prototype.getDataType = function () {
    return (0, _array.getArrayDataType)(this._data, _is.typeOf);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()  // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */


  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */


  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  DenseMatrix.prototype.get = function (index) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length);
    } // check index


    for (var x = 0; x < index.length; x++) {
      (0, _array.validateIndex)(index[x], this._size[x]);
    }

    var data = this._data;

    for (var i = 0, ii = index.length; i < ii; i++) {
      var indexI = index[i];
      (0, _array.validateIndex)(indexI, data.length);
      data = data[indexI];
    }

    return data;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */


  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length < this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length, '<');
    }

    var i, ii, indexI; // enlarge matrix when needed

    var size = index.map(function (i) {
      return i + 1;
    });

    _fit(this, size, defaultValue); // traverse over the dimensions


    var data = this._data;

    for (i = 0, ii = index.length - 1; i < ii; i++) {
      indexI = index[i];
      (0, _array.validateIndex)(indexI, data.length);
      data = data[indexI];
    } // set new value


    indexI = index[index.length - 1];
    (0, _array.validateIndex)(indexI, data.length);
    data[indexI] = value;
    return this;
  };
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */


  function _get(matrix, index) {
    if (!(0, _is.isIndex)(index)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = index.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    } else {
      // validate dimensions
      var size = index.size();

      if (size.length !== matrix._size.length) {
        throw new _DimensionError.DimensionError(size.length, matrix._size.length);
      } // validate if any of the ranges in the index is out of range


      var min = index.min();
      var max = index.max();

      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
        (0, _array.validateIndex)(min[i], matrix._size[i]);
        (0, _array.validateIndex)(max[i], matrix._size[i]);
      } // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */


  function _getSubmatrix(data, index, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      return range.map(function (i) {
        (0, _array.validateIndex)(i, data.length);
        return data[i];
      }).valueOf();
    } else {
      return range.map(function (i) {
        (0, _array.validateIndex)(i, data.length);
        var child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */


  function _set(matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if ((0, _is.isMatrix)(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    } else {
      sSize = (0, _array.arraySize)(submatrix);
    }

    if (isScalar) {
      // set a scalar
      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }

      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // set a submatrix
      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');
      }

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {
        throw new _DimensionError.DimensionError(iSize, sSize, '>');
      } // enlarge matrix when needed


      var size = index.max().map(function (i) {
        return i + 1;
      });

      _fit(matrix, size, defaultValue); // insert the sub matrix


      var dims = iSize.length;
      var dim = 0;

      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
    }

    return matrix;
  }
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */


  function _setSubmatrix(data, index, submatrix, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        (0, _array.validateIndex)(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    } else {
      range.forEach(function (dataIndex, subIndex) {
        (0, _array.validateIndex)(dataIndex);

        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[] || Matrix} size The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!(0, _is.isCollection)(size)) {
      throw new TypeError('Array or Matrix expected');
    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


    var sizeArray = size.valueOf().map(function (value) {
      return Array.isArray(value) && value.length === 1 ? value[0] : value;
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, sizeArray, defaultValue);
  };

  function _resize(matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      var v = matrix._data; // go deep

      while ((0, _is.isArray)(v)) {
        v = v[0];
      }

      return v;
    } // resize matrix


    matrix._size = size.slice(0); // copy the array

    matrix._data = (0, _array.resize)(matrix._data, matrix._size, defaultValue); // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  DenseMatrix.prototype.reshape = function (size, copy) {
    var m = copy ? this.clone() : this;
    m._data = (0, _array.reshape)(m._data, size);

    var currentLength = m._size.reduce(function (length, size) {
      return length * size;
    });

    m._size = (0, _array.processSizesWildcard)(size, currentLength);
    return m;
  };
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */


  function _fit(matrix, size, defaultValue) {
    var // copy the array
    newSize = matrix._size.slice(0);

    var changed = false; // add dimensions when needed

    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    } // enlarge size when needed


    for (var i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }

    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */


  DenseMatrix.prototype.clone = function () {
    var m = new DenseMatrix({
      data: (0, _object.clone)(this._data),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */


  DenseMatrix.prototype.size = function () {
    return this._size.slice(0); // return a clone of _size
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */


  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if ((0, _is.isArray)(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, me);
      }
    }; // determine the new datatype when the original matrix has datatype defined
    // TODO: should be done in matrix constructor instead


    var data = recurse(this._data, []);
    var datatype = this._datatype !== undefined ? (0, _array.getArrayDataType)(data, _is.typeOf) : undefined;
    return new DenseMatrix(data, datatype);
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if ((0, _is.isArray)(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, me);
      }
    };

    recurse(this._data, []);
  };
  /**
   * Iterate over the matrix elements
   * @return {Iterable<{ value, index: number[] }>}
   */


  DenseMatrix.prototype[Symbol.iterator] = /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var recurse;
    return _regenerator["default"].wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            recurse = /*#__PURE__*/_regenerator["default"].mark(function recurse(value, index) {
              var i;
              return _regenerator["default"].wrap(function recurse$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!(0, _is.isArray)(value)) {
                        _context.next = 9;
                        break;
                      }

                      i = 0;

                    case 2:
                      if (!(i < value.length)) {
                        _context.next = 7;
                        break;
                      }

                      return _context.delegateYield(recurse(value[i], index.concat(i)), "t0", 4);

                    case 4:
                      i++;
                      _context.next = 2;
                      break;

                    case 7:
                      _context.next = 11;
                      break;

                    case 9:
                      _context.next = 11;
                      return {
                        value: value,
                        index: index
                      };

                    case 11:
                    case "end":
                      return _context.stop();
                  }
                }
              }, recurse);
            });
            return _context2.delegateYield(recurse(this._data, []), "t0", 2);

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, this);
  });
  /**
   * Returns an array containing the rows of a 2D matrix
   * @returns {Array<Matrix>}
   */

  DenseMatrix.prototype.rows = function () {
    var result = [];
    var s = this.size();

    if (s.length !== 2) {
      throw new TypeError('Rows can only be returned for a 2D matrix.');
    }

    var data = this._data;

    var _iterator = _createForOfIteratorHelper(data),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var row = _step.value;
        result.push(new DenseMatrix([row], this._datatype));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return result;
  };
  /**
   * Returns an array containing the columns of a 2D matrix
   * @returns {Array<Matrix>}
   */


  DenseMatrix.prototype.columns = function () {
    var _this = this;

    var result = [];
    var s = this.size();

    if (s.length !== 2) {
      throw new TypeError('Rows can only be returned for a 2D matrix.');
    }

    var data = this._data;

    var _loop = function _loop(i) {
      var col = data.map(function (row) {
        return [row[i]];
      });
      result.push(new DenseMatrix(col, _this._datatype));
    };

    for (var i = 0; i < s[1]; i++) {
      _loop(i);
    }

    return result;
  };
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.toArray = function () {
    return (0, _object.clone)(this._data);
  };
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  DenseMatrix.prototype.format = function (options) {
    return (0, _string.format)(this._data, options);
  };
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */


  DenseMatrix.prototype.toString = function () {
    return (0, _string.format)(this._data);
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */


  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix with the diagonal values.
   */


  DenseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

    var data = []; // loop rows

    for (var i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                     The matrix size.
   * @param {number | Matrix | Array } value The values for the diagonal.
   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]          The default value for non-diagonal
   * @param {string} [datatype]              The datatype for the diagonal
   *
   * @returns {DenseMatrix}
   */


  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if ((0, _is.isBigNumber)(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if ((0, _is.isArray)(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if ((0, _is.isMatrix)(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // discover default value if needed


    if (!defaultValue) {
      // check first value in array
      defaultValue = (0, _is.isBigNumber)(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
      : 0;
    } // empty array


    var data = []; // check we need to resize array

    if (size.length > 0) {
      // resize array
      data = (0, _array.resize)(data, size, defaultValue); // fill diagonal

      for (var d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */


  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    (0, _array.validateIndex)(i, this._size[0]);
    (0, _array.validateIndex)(j, this._size[0]); // swap rows

    DenseMatrix._swapRows(i, j, this._data); // return current instance


    return this;
  };
  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   * @param {Array} data     Matrix data
   */


  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    var vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };
  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */


  function preprocess(data) {
    for (var i = 0, ii = data.length; i < ii; i++) {
      var elem = data[i];

      if ((0, _is.isArray)(elem)) {
        data[i] = preprocess(elem);
      } else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }

    return data;
  }

  return DenseMatrix;
}, {
  isClass: true
});
exports.createDenseMatrixClass = createDenseMatrixClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/FibonacciHeap.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/FibonacciHeap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createFibonacciHeapClass = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'FibonacciHeap';
var dependencies = ['smaller', 'larger'];
var createFibonacciHeapClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var smaller = _ref.smaller,
      larger = _ref.larger;
  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */

  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // initialize fields


    this._minimum = null;
    this._size = 0;
  }
  /**
   * Attach type information
   */


  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;
  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    var node = {
      key: key,
      value: value,
      degree: 0
    }; // check we have a node in the minimum

    if (this._minimum) {
      // minimum node
      var minimum = this._minimum; // update left & right of node

      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node; // update minimum node in heap if needed

      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    } else {
      // set left & right
      node.left = node;
      node.right = node; // this is the first node

      this._minimum = node;
    } // increment number of nodes in heap


    this._size++; // return node

    return node;
  };
  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.size = function () {
    return this._size;
  };
  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };
  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  /**
   * Extracts the node with minimum key from heap. Amortized running
   * time: O(log n).
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    var node = this._minimum; // check we have a minimum

    if (node === null) {
      return node;
    } // current minimum


    var minimum = this._minimum; // get number of children

    var numberOfChildren = node.degree; // pointer to the first child

    var x = node.child; // for each child of node do...

    while (numberOfChildren > 0) {
      // store node in right side
      var tempRight = x.right; // remove x from child list

      x.left.right = x.right;
      x.right.left = x.left; // add x to root list of heap

      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x; // set Parent[x] to null

      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    } // remove node from root list of heap


    node.left.right = node.right;
    node.right.left = node.left; // update minimum

    if (node === node.right) {
      // empty
      minimum = null;
    } else {
      // update minimum
      minimum = node.right; // we need to update the pointer to the root with minimum key

      minimum = _findMinimumNode(minimum, this._size);
    } // decrement size of heap


    this._size--; // update minimum

    this._minimum = minimum; // return node

    return node;
  };
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

    this.extractMinimum();
  };
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated.
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */


  function _decreaseKey(minimum, node, key) {
    // set node key
    node.key = key; // get parent node

    var parent = node.parent;

    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent); // remove all nodes from parent to the root parent


      _cascadingCut(minimum, parent);
    } // update minimum node if needed


    if (smaller(node.key, minimum.key)) {
      minimum = node;
    } // return minimum


    return minimum;
  }
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */


  function _cut(minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--; // reset y.child if necessary

    if (parent.child === node) {
      parent.child = node.right;
    } // remove child if degree is 0


    if (parent.degree === 0) {
      parent.child = null;
    } // add node to root list of heap


    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node; // set parent[node] to null

    node.parent = null; // set mark[node] to false

    node.mark = false;
  }
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */


  function _cascadingCut(minimum, node) {
    // store parent node
    var parent = node.parent; // if there's a parent...

    if (!parent) {
      return;
    } // if node is unmarked, set it marked


    if (!node.mark) {
      node.mark = true;
    } else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent); // cut its parent as well


      _cascadingCut(parent);
    }
  }
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  var _linkNodes = function _linkNodes(node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left; // make node a Child of parent

    node.parent = parent;

    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    } else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    } // increase degree[parent]


    parent.degree++; // set mark[node] false

    node.mark = false;
  };

  function _findMinimumNode(minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

    var array = new Array(arraySize); // find the number of root nodes.

    var numRoots = 0;
    var x = minimum;

    if (x) {
      numRoots++;
      x = x.right;

      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    } // vars


    var y; // For each node in root list do...

    while (numRoots > 0) {
      // access this node's degree..
      var d = x.degree; // get next node

      var next = x.right; // check if there is a node already in array with the same degree

      while (true) {
        // get node with the same degree is any
        y = array[d];

        if (!y) {
          break;
        } // make one node with the same degree a child of the other, do this based on the key value.


        if (larger(x.key, y.key)) {
          var temp = y;
          y = x;
          x = temp;
        } // make y a child of x


        _linkNodes(y, x); // we have handled this degree, go to next one.


        array[d] = null;
        d++;
      } // save this node for later when we might encounter another of the same degree.


      array[d] = x; // move forward through list.

      x = next;
      numRoots--;
    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


    minimum = null; // loop nodes in array

    for (var i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];

      if (!y) {
        continue;
      } // check if we have a linked list


      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left; // now add to root list, again.

        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y; // check if this is a new min.

        if (smaller(y.key, minimum.key)) {
          minimum = y;
        }
      } else {
        minimum = y;
      }
    }

    return minimum;
  }

  return FibonacciHeap;
}, {
  isClass: true
});
exports.createFibonacciHeapClass = createFibonacciHeapClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/ImmutableDenseMatrix.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/ImmutableDenseMatrix.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createImmutableDenseMatrixClass = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ImmutableDenseMatrix';
var dependencies = ['smaller', 'DenseMatrix'];
var createImmutableDenseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var smaller = _ref.smaller,
      DenseMatrix = _ref.DenseMatrix;

  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0, _is.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0, _is.isMatrix)(data) || (0, _is.isArray)(data)) {
      // use DenseMatrix implementation
      var matrix = new DenseMatrix(data, datatype); // internal structures

      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }

  ImmutableDenseMatrix.prototype = new DenseMatrix();
  /**
   * Attach type information
   */

  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        {
          // use base implementation
          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

          if ((0, _is.isMatrix)(m)) {
            // return immutable matrix
            return new ImmutableDenseMatrix({
              data: m._data,
              size: m._size,
              datatype: m._datatype
            });
          }

          return m;
        }
      // intentional fall through

      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */


  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };
  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */


  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };
  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */


  ImmutableDenseMatrix.prototype.clone = function () {
    return new ImmutableDenseMatrix({
      data: (0, _object.clone)(this._data),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */


  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */


  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };
  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */


  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      var m = null; // compute min

      this.forEach(function (v) {
        if (m === null || smaller(v, m)) {
          m = v;
        }
      });
      this._min = m !== null ? m : undefined;
    }

    return this._min;
  };
  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */


  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      var m = null; // compute max

      this.forEach(function (v) {
        if (m === null || smaller(m, v)) {
          m = v;
        }
      });
      this._max = m !== null ? m : undefined;
    }

    return this._max;
  };

  return ImmutableDenseMatrix;
}, {
  isClass: true
});
exports.createImmutableDenseMatrixClass = createImmutableDenseMatrixClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/Matrix.js":
/*!***********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/Matrix.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMatrixClass = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Matrix';
var dependencies = [];
var createMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *
   *     let matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *
   *     let matrix = math.matrix([[1, 2], [3, 4]])
   *     matix.size()              // [2, 2]
   *     matrix.resize([3, 2], 5)
   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Attach type information
   */


  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @return {string}           The storage format.
   */

  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */


  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };
  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */


  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };
  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };
  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */


  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };
  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */


  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };
  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */


  Matrix.prototype.size = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */


  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };
  /**
   * Iterate over the matrix elements
   * @return {Iterable<{ value, index: number[] }>}
   */


  Matrix.prototype[Symbol.iterator] = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot iterate a Matrix interface');
  };
  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */


  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };
  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */


  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */


  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  };

  return Matrix;
}, {
  isClass: true
});
exports.createMatrixClass = createMatrixClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/MatrixIndex.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/MatrixIndex.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIndexClass = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Index';
var dependencies = ['ImmutableDenseMatrix'];
var createIndexClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var ImmutableDenseMatrix = _ref.ImmutableDenseMatrix;

  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     const index = new Index(range1, range2, matrix1, array1, ...)
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this._dimensions = [];
    this._isScalar = true;

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];

      if ((0, _is.isRange)(arg)) {
        this._dimensions.push(arg);

        this._isScalar = false;
      } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {
        // create matrix
        var m = _createImmutableMatrix(arg.valueOf());

        this._dimensions.push(m); // size


        var size = m.size(); // scalar

        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      } else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      } else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      } // TODO: implement support for wildcard '*'

    }
  }
  /**
   * Attach type information
   */


  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;

  function _createImmutableMatrix(arg) {
    // loop array elements
    for (var i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !(0, _number.isInteger)(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    } // create matrix


    return new ImmutableDenseMatrix(arg);
  }
  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */


  Index.prototype.clone = function () {
    var index = new Index();
    index._dimensions = (0, _object.clone)(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };
  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */


  Index.create = function (ranges) {
    var index = new Index();
    Index.apply(index, ranges);
    return index;
  };
  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */


  Index.prototype.size = function () {
    var size = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var d = this._dimensions[i];
      size[i] = typeof d === 'string' ? 1 : d.size()[0];
    }

    return size;
  };
  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */


  Index.prototype.max = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.max();
    }

    return values;
  };
  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */


  Index.prototype.min = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.min();
    }

    return values;
  };
  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */


  Index.prototype.forEach = function (callback) {
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };
  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */


  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };
  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */


  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };
  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */


  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };
  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */


  Index.prototype.isScalar = function () {
    return this._isScalar;
  };
  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.toArray = function () {
    var array = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
    }

    return array;
  };
  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.valueOf = Index.prototype.toArray;
  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */

  Index.prototype.toString = function () {
    var strings = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];

      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      } else {
        strings.push(dimension.toString());
      }
    }

    return '[' + strings.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */


  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };
  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */


  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };

  return Index;
}, {
  isClass: true
});
exports.createIndexClass = createIndexClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/Range.js":
/*!**********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/Range.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createRangeClass = void 0;

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Range';
var dependencies = [];
var createRangeClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *
   *     const range = new Range(start, end)
   *     const range = new Range(start, end, step)
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x)
   *     })
   *     range.map(function (x) {
   *         return math.sin(x)
   *     })
   *     range.toArray()
   *
   * Example usage:
   *
   *     const c = new Range(2, 6)       // 2:1:5
   *     c.toArray()                     // [2, 3, 4, 5]
   *     const d = new Range(2, -3, -1)  // 2:-1:-2
   *     d.toArray()                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    var hasStart = start !== null && start !== undefined;
    var hasEnd = end !== null && end !== undefined;
    var hasStep = step !== null && step !== undefined;

    if (hasStart) {
      if ((0, _is.isBigNumber)(start)) {
        start = start.toNumber();
      } else if (typeof start !== 'number') {
        throw new TypeError('Parameter start must be a number');
      }
    }

    if (hasEnd) {
      if ((0, _is.isBigNumber)(end)) {
        end = end.toNumber();
      } else if (typeof end !== 'number') {
        throw new TypeError('Parameter end must be a number');
      }
    }

    if (hasStep) {
      if ((0, _is.isBigNumber)(step)) {
        step = step.toNumber();
      } else if (typeof step !== 'number') {
        throw new TypeError('Parameter step must be a number');
      }
    }

    this.start = hasStart ? parseFloat(start) : 0;
    this.end = hasEnd ? parseFloat(end) : 0;
    this.step = hasStep ? parseFloat(step) : 1;
  }
  /**
   * Attach type information
   */


  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */

  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }

    var args = str.split(':');
    var nums = args.map(function (arg) {
      return parseFloat(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);

      case 3:
        return new Range(nums[0], nums[2], nums[1]);

      default:
        return null;
    }
  };
  /**
   * Create a clone of the range
   * @return {Range} clone
   */


  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };
  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */


  Range.prototype.size = function () {
    var len = 0;
    var start = this.start;
    var step = this.step;
    var end = this.end;
    var diff = end - start;

    if ((0, _number.sign)(step) === (0, _number.sign)(diff)) {
      len = Math.ceil(diff / step);
    } else if (diff === 0) {
      len = 0;
    }

    if (isNaN(len)) {
      len = 0;
    }

    return [len];
  };
  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */


  Range.prototype.min = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      } else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */


  Range.prototype.max = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      } else {
        // negative step
        return this.start;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */


  Range.prototype.forEach = function (callback) {
    var x = this.start;
    var step = this.step;
    var end = this.end;
    var i = 0;

    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    } else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };
  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */


  Range.prototype.map = function (callback) {
    var array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };
  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.toArray = function () {
    var array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };
  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };
  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Range.prototype.format = function (options) {
    var str = (0, _number.format)(this.start, options);

    if (this.step !== 1) {
      str += ':' + (0, _number.format)(this.step, options);
    }

    str += ':' + (0, _number.format)(this.end, options);
    return str;
  };
  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */


  Range.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */


  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */


  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };

  return Range;
}, {
  isClass: true
});
exports.createRangeClass = createRangeClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/Spa.js":
/*!********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/Spa.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSpaClass = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'Spa';
var dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];
var createSpaClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var addScalar = _ref.addScalar,
      equalScalar = _ref.equalScalar,
      FibonacciHeap = _ref.FibonacciHeap;

  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
   * of the vector elements and an ordered list of non-zero elements.
   */
  function Spa() {
    if (!(this instanceof Spa)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // allocate vector, TODO use typed arrays


    this._values = [];
    this._heap = new FibonacciHeap();
  }
  /**
   * Attach type information
   */


  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;
  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */

  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      var node = this._heap.insert(i, v); // set the value @ i


      this._values[i] = node;
    } else {
      // update the value @ i
      this._values[i].value = v;
    }
  };

  Spa.prototype.get = function (i) {
    var node = this._values[i];

    if (node) {
      return node.value;
    }

    return 0;
  };

  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    var node = this._values[i];

    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v); // initialize value

      this._values[i] = node;
    } else {
      // accumulate value
      node.value = addScalar(node.value, v);
    }
  };

  Spa.prototype.forEach = function (from, to, callback) {
    // references
    var heap = this._heap;
    var values = this._values; // nodes

    var nodes = []; // node with minimum key, save it

    var node = heap.extractMinimum();

    if (node) {
      nodes.push(node);
    } // extract nodes from heap (ordered)


    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      } // extract next node, save it


      node = heap.extractMinimum();

      if (node) {
        nodes.push(node);
      }
    } // reinsert all nodes in heap


    for (var i = 0; i < nodes.length; i++) {
      // current node
      var n = nodes[i]; // insert node in heap

      node = heap.insert(n.key, n.value); // update values

      values[node.key] = node;
    }
  };

  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    var nodei = this._values[i];
    var nodej = this._values[j]; // check we need to insert indeces

    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value); // remove from heap

      this._heap.remove(nodej); // set values


      this._values[i] = nodei;
      this._values[j] = undefined;
    } else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value); // remove from heap

      this._heap.remove(nodei); // set values


      this._values[j] = nodej;
      this._values[i] = undefined;
    } else if (nodei && nodej) {
      // swap values
      var v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };

  return Spa;
}, {
  isClass: true
});
exports.createSpaClass = createSpaClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/SparseMatrix.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/SparseMatrix.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSparseMatrixClass = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ../../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _array = __webpack_require__(/*! ../../utils/array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'SparseMatrix';
var dependencies = ['typed', 'equalScalar', 'Matrix'];
var createSparseMatrixClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar,
      Matrix = _ref.Matrix;

  /**
   * Sparse Matrix implementation. This type implements
   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))
   * format for two-dimensional sparse matrices.
   * @class SparseMatrix
   */
  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0, _is.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0, _is.isMatrix)(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    } else if (data && (0, _is.isArray)(data.index) && (0, _is.isArray)(data.ptr) && (0, _is.isArray)(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if ((0, _is.isArray)(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }

  function _createFromMatrix(matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? (0, _object.clone)(source._values) : undefined;
      matrix._index = (0, _object.clone)(source._index);
      matrix._ptr = (0, _object.clone)(source._ptr);
      matrix._size = (0, _object.clone)(source._size);
      matrix._datatype = datatype || source._datatype;
    } else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  }

  function _createFromArray(matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

    var rows = data.length;
    var columns = 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0, _is.isString)(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    } // check we have rows (empty array)


    if (rows > 0) {
      // column index
      var j = 0;

      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length); // loop rows


        for (var i = 0; i < rows; i++) {
          // current row
          var row = data[i]; // check row is an array

          if ((0, _is.isArray)(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length) {
              columns = row.length;
            } // check row has column


            if (j < row.length) {
              // value
              var v = row[j]; // check value != 0

              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v); // index


                matrix._index.push(i);
              }
            }
          } else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1) {
              columns = 1;
            } // check value != 0 (row is a scalar)


            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row); // index


              matrix._index.push(i);
            }
          }
        } // increment index


        j++;
      } while (j < columns);
    } // store number of values in ptr


    matrix._ptr.push(matrix._index.length); // size


    matrix._size = [rows, columns];
  }

  SparseMatrix.prototype = new Matrix();
  /**
   * Create a new SparseMatrix
   */

  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf SparseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  SparseMatrix.prototype.getDataType = function () {
    return (0, _array.getArrayDataType)(this._values, _is.typeOf);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */


  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */


  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Get the matrix density.
   *
   * Usage:
   *     const density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */


  SparseMatrix.prototype.density = function () {
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1]; // calculate density

    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke subset on a Pattern only matrix');
    } // check arguments


    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };

  function _getsubset(matrix, idx) {
    // check idx
    if (!(0, _is.isIndex)(idx)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = idx.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    } // validate dimensions


    var size = idx.size();

    if (size.length !== matrix._size.length) {
      throw new _DimensionError.DimensionError(size.length, matrix._size.length);
    } // vars


    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

    var min = idx.min();
    var max = idx.max();

    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      (0, _array.validateIndex)(min[i], matrix._size[i]);
      (0, _array.validateIndex)(max[i], matrix._size[i]);
    } // matrix arrays


    var mvalues = matrix._values;
    var mindex = matrix._index;
    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

    var rows = idx.dimension(0);
    var columns = idx.dimension(1); // workspace & permutation vector

    var w = [];
    var pv = []; // loop rows in resulting matrix

    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0]; // mark i in workspace

      w[i] = true;
    }); // result matrix arrays

    var values = mvalues ? [] : undefined;
    var index = [];
    var ptr = []; // loop columns in result matrix

    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length); // loop values in column j

      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k]; // check row is in result matrix

        if (w[i] === true) {
          // push index
          index.push(pv[i]); // check we need to process values

          if (values) {
            values.push(mvalues[k]);
          }
        }
      }
    }); // update ptr

    ptr.push(index.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  }

  function _setsubset(matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if ((0, _is.isMatrix)(submatrix)) {
      // submatrix size
      sSize = submatrix.size(); // use array representation

      submatrix = submatrix.toArray();
    } else {
      // get submatrix size (array, scalar)
      sSize = (0, _array.arraySize)(submatrix);
    } // check index is a scalar


    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      } // set value


      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');
      } // check submatrix and index have the same dimensions


      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {
        throw new _DimensionError.DimensionError(iSize, sSize, '>');
      } // offsets


      var x0 = index.min()[0];
      var y0 = index.min()[1]; // submatrix rows and columns

      var m = sSize[0];
      var n = sSize[1]; // loop submatrix

      for (var x = 0; x < m; x++) {
        // loop columns
        for (var y = 0; y < n; y++) {
          // value at i, j
          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }

    return matrix;
  }
  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  SparseMatrix.prototype.get = function (index) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke get on a Pattern only matrix');
    } // row and column


    var i = index[0];
    var j = index[1]; // check i, j are valid

    (0, _array.validateIndex)(i, this._size[0]);
    (0, _array.validateIndex)(j, this._size[1]); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      return this._values[k];
    }

    return 0;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} v
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */


  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke set on a Pattern only matrix');
    } // row and column


    var i = index[0];
    var j = index[1]; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0, _is.isString)(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, this._datatype);
    } // check we need to resize matrix


    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


      rows = this._size[0];
      columns = this._size[1];
    } // check i, j are valid


    (0, _array.validateIndex)(i, rows);
    (0, _array.validateIndex)(j, columns); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      } else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    } else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }

    return this;
  };

  function _getValueIndex(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0) {
      return bottom;
    } // loop rows [top, bottom[


    for (var r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i) {
        return r;
      }
    } // we did not find row


    return top;
  }

  function _remove(k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1); // update pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]--;
    }
  }

  function _insert(k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v); // update row for k

    index.splice(k, 0, i); // update column pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]++;
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[] | Matrix} size  The new size the matrix should have.
   *                                  Since sparse matrices are always two-dimensional,
   *                                  size must be two numbers in either an array or a matrix
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!(0, _is.isCollection)(size)) {
      throw new TypeError('Array or Matrix expected');
    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector


    var sizeArray = size.valueOf().map(function (value) {
      return Array.isArray(value) && value.length === 1 ? value[0] : value;
    });

    if (sizeArray.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // check sizes


    sizeArray.forEach(function (value) {
      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(sizeArray) + ')');
      }
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
  };

  function _resize(matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    var value = defaultValue || 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0, _is.isString)(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

      value = typed.convert(value, matrix._datatype);
    } // should we insert the value?


    var ins = !eq(value, zero); // old columns and rows

    var r = matrix._size[0];
    var c = matrix._size[1];
    var i, j, k; // check we need to increase columns

    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value); // update matrix._index


            matrix._index.push(i);
          }
        }
      } // store number of matrix._values in matrix._ptr


      matrix._ptr[columns] = matrix._values.length;
    } else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    } // update columns


    c = columns; // check we need to increase rows

    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        var n = 0; // loop columns

        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

          k = matrix._ptr[j + 1] + n; // pointer

          var p = 0; // loop new rows, initialize pointer

          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value); // update matrix._index


            matrix._index.splice(k + p, 0, i); // increment inserts


            n++;
          }
        } // store number of matrix._values in matrix._ptr


        matrix._ptr[c] = matrix._values.length;
      }
    } else if (rows < r) {
      // deletes
      var d = 0; // loop columns

      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k]; // check we need to delete value and matrix._index

          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1); // remove item from matrix._index


            matrix._index.splice(k, 1); // increase deletes


            d++;
          }
        }
      } // update matrix._ptr for current column


      matrix._ptr[j] = matrix._values.length;
    } // update matrix._size


    matrix._size[0] = rows;
    matrix._size[1] = columns; // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} sizes          The new size the matrix should have.
   *                                  Since sparse matrices are always two-dimensional,
   *                                  size must be two numbers in either an array or a matrix
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  SparseMatrix.prototype.reshape = function (sizes, copy) {
    // validate arguments
    if (!(0, _is.isArray)(sizes)) {
      throw new TypeError('Array expected');
    }

    if (sizes.length !== 2) {
      throw new Error('Sparse matrices can only be reshaped in two dimensions');
    } // check sizes


    sizes.forEach(function (value) {
      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value <= -2 || value === 0) {
        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + (0, _string.format)(sizes) + ')');
      }
    });
    var currentLength = this._size[0] * this._size[1];
    sizes = (0, _array.processSizesWildcard)(sizes, currentLength);
    var newLength = sizes[0] * sizes[1]; // m * n must not change

    if (currentLength !== newLength) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    } // matrix to reshape


    var m = copy ? this.clone() : this; // return unchanged if the same shape

    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {
      return m;
    } // Convert to COO format (generate a column index)


    var colIndex = [];

    for (var i = 0; i < m._ptr.length; i++) {
      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
        colIndex.push(i);
      }
    } // Clone the values array


    var values = m._values.slice(); // Clone the row index array


    var rowIndex = m._index.slice(); // Transform the (row, column) indices


    for (var _i = 0; _i < m._index.length; _i++) {
      var r1 = rowIndex[_i];
      var c1 = colIndex[_i];
      var flat = r1 * m._size[1] + c1;
      colIndex[_i] = flat % sizes[1];
      rowIndex[_i] = Math.floor(flat / sizes[1]);
    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.
    // OR, we could easily just:
    // 1. Remove all values from the matrix


    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = sizes[1] + 1;
    m._size = sizes.slice();

    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
      m._ptr[_i2] = 0;
    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming


    for (var h = 0; h < values.length; h++) {
      var _i3 = rowIndex[h];
      var _j = colIndex[h];
      var v = values[h];

      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
    } // The value indices are inserted out of order, but apparently that's... still OK?


    return m;
  };
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */


  SparseMatrix.prototype.clone = function () {
    var m = new SparseMatrix({
      values: this._values ? (0, _object.clone)(this._values) : undefined,
      index: (0, _object.clone)(this._index),
      ptr: (0, _object.clone)(this._ptr),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */


  SparseMatrix.prototype.size = function () {
    return this._size.slice(0); // copy the Array
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */


  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke map on a Pattern only matrix');
    } // matrix instance


    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // invoke callback

    var invoke = function invoke(v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    }; // invoke _map


    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };
  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */


  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    var values = [];
    var index = [];
    var ptr = []; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0, _is.isString)(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype);
    } // invoke callback


    var invoke = function invoke(v, x, y) {
      // invoke callback
      v = callback(v, x, y); // check value != 0

      if (!eq(v, zero)) {
        // store value
        values.push(v); // index

        index.push(x);
      }
    }; // loop columns


    for (var j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = matrix._ptr[j];
      var k1 = matrix._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = matrix._index[k]; // check i is in range

          if (i >= minRow && i <= maxRow) {
            // value @ k
            invoke(matrix._values[k], i - minRow, j - minColumn);
          }
        }
      } else {
        // create a cache holding all defined values
        var _values = {};

        for (var _k = k0; _k < k1; _k++) {
          var _i4 = matrix._index[_k];
          _values[_i4] = matrix._values[_k];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
          var value = _i5 in _values ? _values[_i5] : 0;
          invoke(value, _i5 - minRow, j - minColumn);
        }
      }
    } // store number of values in ptr


    ptr.push(values.length); // return sparse matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  }
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *                              If false, the indices are guaranteed to be in order,
   *                              if true, the indices can be unordered.
   */


  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke forEach on a Pattern only matrix');
    } // matrix instance


    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = this._index[k]; // value @ k

          callback(this._values[k], [i, j], me);
        }
      } else {
        // create a cache holding all defined values
        var values = {};

        for (var _k2 = k0; _k2 < k1; _k2++) {
          var _i6 = this._index[_k2];
          values[_i6] = this._values[_k2];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (var _i7 = 0; _i7 < rows; _i7++) {
          var value = _i7 in values ? values[_i7] : 0;
          callback(value, [_i7, j], me);
        }
      }
    }
  };
  /**
   * Iterate over the matrix elements, skipping zeros
   * @return {Iterable<{ value, index: number[] }>}
   */


  SparseMatrix.prototype[Symbol.iterator] = /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var columns, j, k0, k1, k, i;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (this._values) {
              _context.next = 2;
              break;
            }

            throw new Error('Cannot iterate a Pattern only matrix');

          case 2:
            columns = this._size[1];
            j = 0;

          case 4:
            if (!(j < columns)) {
              _context.next = 18;
              break;
            }

            k0 = this._ptr[j];
            k1 = this._ptr[j + 1];
            k = k0;

          case 8:
            if (!(k < k1)) {
              _context.next = 15;
              break;
            }

            // row index
            i = this._index[k];
            _context.next = 12;
            return {
              value: this._values[k],
              index: [i, j]
            };

          case 12:
            k++;
            _context.next = 8;
            break;

          case 15:
            j++;
            _context.next = 4;
            break;

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  });
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */

  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };
  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };

  function _toArray(values, index, ptr, size, copy) {
    // rows and columns
    var rows = size[0];
    var columns = size[1]; // result

    var a = []; // vars

    var i, j; // initialize array

    for (i = 0; i < rows; i++) {
      a[i] = [];

      for (j = 0; j < columns; j++) {
        a[i][j] = 0;
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        i = index[k]; // set value (use one for pattern matrix)

        a[i][j] = values ? copy ? (0, _object.clone)(values[k]) : values[k] : 1;
      }
    }

    return a;
  }
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1]; // density

    var density = this.density(); // rows & columns

    var str = 'Sparse Matrix [' + (0, _string.format)(rows, options) + ' x ' + (0, _string.format)(columns, options) + '] density: ' + (0, _string.format)(density, options) + '\n'; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k]; // append value

        str += '\n    (' + (0, _string.format)(i, options) + ', ' + (0, _string.format)(j, options) + ') ==> ' + (this._values ? (0, _string.format)(this._values[k], options) : 'X');
      }
    }

    return str;
  };
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */


  SparseMatrix.prototype.toString = function () {
    return (0, _string.format)(this.toArray());
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */


  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */


  SparseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

    var values = [];
    var index = [];
    var ptr = []; // initial ptr value

    ptr[0] = 0; // loop columns

    for (var j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

      for (var x = k0; x < k1; x++) {
        // row index
        var i = this._index[x]; // check row

        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]); // store row

          index[values.length - 1] = i - kSub; // exit loop

          break;
        }
      }
    } // close ptr


    ptr.push(values.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */


  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]            The default value for non-diagonal
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */


  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if ((0, _is.isBigNumber)(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    } // equal signature to use


    var eq = equalScalar; // zero value

    var zero = 0;

    if ((0, _is.isString)(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if ((0, _is.isArray)(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if ((0, _is.isMatrix)(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // create arrays


    var values = [];
    var index = [];
    var ptr = []; // loop items

    for (var j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length); // diagonal index

      var i = j - kSuper; // check we need to set diagonal value

      if (i >= 0 && i < n) {
        // get value @ i
        var v = _value(i); // check for zero


        if (!eq(v, zero)) {
          // column
          index.push(i + kSub); // add value

          values.push(v);
        }
      }
    } // last value should be number of values


    ptr.push(values.length); // create SparseMatrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    (0, _array.validateIndex)(i, this._size[0]);
    (0, _array.validateIndex)(j, this._size[0]); // swap rows

    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


    return this;
  };
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */


  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    var k0 = ptr[j];
    var k1 = ptr[j + 1]; // loop

    for (var k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */


  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // find value index @ x

      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          var v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        } // next column


        continue;
      } // check x row exist & no y row


      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        var vx = values ? values[kx] : undefined; // insert value @ y

        index.splice(ky, 0, y);

        if (values) {
          values.splice(ky, 0, vx);
        } // remove value @ x (adjust array index if needed)


        index.splice(ky <= kx ? kx + 1 : kx, 1);

        if (values) {
          values.splice(ky <= kx ? kx + 1 : kx, 1);
        } // next column


        continue;
      } // check y row exist & no x row


      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        var vy = values ? values[ky] : undefined; // insert value @ x

        index.splice(kx, 0, x);

        if (values) {
          values.splice(kx, 0, vy);
        } // remove value @ y (adjust array index if needed)


        index.splice(kx <= ky ? ky + 1 : ky, 1);

        if (values) {
          values.splice(kx <= ky ? ky + 1 : ky, 1);
        }
      }
    }
  };

  return SparseMatrix;
}, {
  isClass: true
});
exports.createSparseMatrixClass = createSparseMatrixClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/function/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/function/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createIndex = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _is = __webpack_require__(/*! ../../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var name = 'index';
var dependencies = ['typed', 'Index'];
var createIndex = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Index = _ref.Index;

  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    const b = [1, 2, 3, 4, 5]
   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
   *
   *    const a = math.matrix([[1, 2], [3, 4]])
   *    a.subset(math.index(0, 1))             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed(name, {
    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
      var ranges = args.map(function (arg) {
        if ((0, _is.isBigNumber)(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;
          });
        } else {
          return arg;
        }
      });
      var res = new Index();
      Index.apply(res, ranges);
      return res;
    }
  });
});
exports.createIndex = createIndex;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/function/matrix.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/function/matrix.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createMatrix = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'matrix';
var dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
var createMatrix = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Matrix = _ref.Matrix,
      DenseMatrix = _ref.DenseMatrix,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    let m = math.matrix([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`
   * @param {string} [datatype]        Type of the values
   *
   * @return {Matrix} The created matrix
   */
  return typed(name, {
    '': function _() {
      return _create([]);
    },
    string: function string(format) {
      return _create([], format);
    },
    'string, string': function stringString(format, datatype) {
      return _create([], format, datatype);
    },
    Array: function Array(data) {
      return _create(data);
    },
    Matrix: function Matrix(data) {
      return _create(data, data.storage());
    },
    'Array | Matrix, string': _create,
    'Array | Matrix, string, string': _create
  });
  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */

  function _create(data, format, datatype) {
    // get storage format constructor
    if (format === 'dense' || format === 'default' || format === undefined) {
      return new DenseMatrix(data, datatype);
    }

    if (format === 'sparse') {
      return new SparseMatrix(data, datatype);
    }

    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
  }
});
exports.createMatrix = createMatrix;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/function/sparse.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/function/sparse.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSparse = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'sparse';
var dependencies = ['typed', 'SparseMatrix'];
var createSparse = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    let m = math.sparse([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
  return typed(name, {
    '': function _() {
      return new SparseMatrix([]);
    },
    string: function string(datatype) {
      return new SparseMatrix([], datatype);
    },
    'Array | Matrix': function ArrayMatrix(data) {
      return new SparseMatrix(data);
    },
    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });
});
exports.createSparse = createSparse;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm01.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm01 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm01';
var dependencies = ['typed'];
var createAlgorithm01 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // process data types

    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

    var i, j; // result (DenseMatrix)

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

        w[i] = mark;
      } // loop rows


      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        } else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm01 = createAlgorithm01;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm02.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm02 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm02';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm02 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (SparseMatrix)


    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update C(i,j)

        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return sparseMatrix.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm02 = createAlgorithm02;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm03.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm03 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm03';
var dependencies = ['typed'];
var createAlgorithm03 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (DenseMatrix)


    var cdata = []; // initialize dense matrix

    for (var z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      } // process workspace


      for (var y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        } else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm03 = createAlgorithm03;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm04.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm04 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm04';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm04 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm04(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspace

    var xa = avalues && bvalues ? [] : undefined;
    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // update c

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop B(:,j)


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check row exists in A

        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            var v = cf(xa[i], bvalues[k]); // check for zero

            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;
            } else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        } else {
          // update c
          cindex.push(i); // update workspace

          wb[i] = mark; // check we need to process values

          if (xb) {
            xb[i] = bvalues[k];
          }
        }
      } // check we need to process values (non pattern matrix)


      if (xa && xb) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // check workspace has value @ i

          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i]; // increment pointer

            k++;
          } else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i]; // increment pointer

            k++;
          } else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm04 = createAlgorithm04;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm05.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm05 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm05';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm05 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm05(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var xa = cvalues ? [] : undefined;
    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values A(:,j)

      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k]; // push index

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop values B(:,j)


      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k]; // check row existed in A

        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        } // update workspace


        wb[i] = mark; // check we need to process values

        if (xb) {
          xb[i] = bvalues[k];
        }
      } // check we need to process values (non pattern matrix)


      if (cvalues) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // marks

          var wai = wa[i];
          var wbi = wb[i]; // check Aij or Bij are nonzero

          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            var va = wai === mark ? xa[i] : zero;
            var vb = wbi === mark ? xb[i] : zero; // Cij

            var vc = cf(va, vb); // check for zero

            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm05 = createAlgorithm05;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm06.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm06 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _collection = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'algorithm06';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm06 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm06(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // marks indicating value in a given row has been updated

    var u = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // scatter the values of A(:,j) into workspace

      (0, _collection.scatter)(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace

      (0, _collection.scatter)(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)

      if (x) {
        // initialize first index in j
        var k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[i] === mark) {
            // value @ i
            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          } else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      } else {
        // initialize first index in j
        var p = cptr[j]; // loop index in j

        while (p < cindex.length) {
          // row
          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          } else {
            // increment pointer
            p++;
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm06 = createAlgorithm06;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm07.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm07 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm07';
var dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm07 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm07(a, b, callback) {
    // sparse matrix arrays
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // vars


    var i, j; // result arrays

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspaces


    var xa = [];
    var xb = []; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // loop columns

    for (j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // scatter the values of A(:,j) into workspace

      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


      _scatter(b, j, wb, xb, mark); // loop rows


      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        var va = wa[i] === mark ? xa[i] : zero;
        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

        cdata[i][j] = cf(va, vb);
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };

  function _scatter(m, j, w, x, mark) {
    // a arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop values in column j

    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      var i = index[k]; // update workspace

      w[i] = mark;
      x[i] = values[k];
    }
  }
});
exports.createAlgorithm07 = createAlgorithm07;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm08.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm08 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm08';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm08 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm08(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!avalues || !bvalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // workspace

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var k, k0, k1, i; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values in a

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // mark workspace

        w[i] = mark; // set value

        x[i] = avalues[k]; // add index

        cindex.push(i);
      } // loop values in b


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check value exists in workspace

        if (w[i] === mark) {
          // evaluate callback
          x[i] = cf(x[i], bvalues[k]);
        }
      } // initialize first index in j


      k = cptr[j]; // loop index in j

      while (k < cindex.length) {
        // row
        i = cindex[k]; // value @ i

        var v = x[i]; // check for zero value

        if (!eq(v, zero)) {
          // push value
          cvalues.push(v); // increment pointer

          k++;
        } else {
          // remove value @ i, do not increment pointer
          cindex.splice(k, 1);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm08 = createAlgorithm08;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm09.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm09.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm09 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm09';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm09 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm09(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // column mark

      var mark = j + 1; // check we need to process values

      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k]; // update workspace

          w[i] = mark;
          x[i] = bvalues[k];
        }
      } // loop A(:,j)


      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // check we need to process values

        if (x) {
          // b value @ i,j
          var vb = w[i] === mark ? x[i] : zero; // invoke f

          var vc = cf(avalues[k], vb); // check zero value

          if (!eq(vc, zero)) {
            // push index
            cindex.push(i); // push value

            cvalues.push(vc);
          }
        } else {
          // push index
          cindex.push(i);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm09 = createAlgorithm09;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm10.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm10 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'algorithm10';
var dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm10 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm10(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm10 = createAlgorithm10;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm11.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm11 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'algorithm11';
var dependencies = ['typed', 'equalScalar'];
var createAlgorithm11 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm11(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = aindex[k]; // invoke callback

        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    } // update ptr


    cptr[columns] = cindex.length; // return sparse matrix

    return s.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm11 = createAlgorithm11;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm12.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm12 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'algorithm12';
var dependencies = ['typed', 'DenseMatrix'];
var createAlgorithm12 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm12(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm12 = createAlgorithm12;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm13.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm13 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _DimensionError = __webpack_require__(/*! ../../../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var name = 'algorithm13';
var dependencies = ['typed'];
var createAlgorithm13 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
  return function algorithm13(a, b, callback) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b arrays

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // c arrays

    var csize = []; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // validate each one of the dimension sizes


    for (var s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s]) {
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      } // update dimension in c


      csize[s] = asize[s];
    } // datatype


    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }

    return cv;
  }
});
exports.createAlgorithm13 = createAlgorithm13;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/matrix/utils/algorithm14.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createAlgorithm14 = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _object = __webpack_require__(/*! ../../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var name = 'algorithm14';
var dependencies = ['typed'];
var createAlgorithm14 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
  return function algorithm14(a, b, callback, inverse) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: (0, _object.clone)(asize),
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }

    return cv;
  }
});
exports.createAlgorithm14 = createAlgorithm14;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/number.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/number.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createNumber = void 0;

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'number';
var dependencies = ['typed'];
/**
 * Separates the radix, integer part, and fractional part of a non decimal number string
 * @param {string} input string to parse
 * @returns {object} the parts of the string or null if not a valid input
 */

function getNonDecimalNumberParts(input) {
  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\.([0-9a-fA-F]*)/);

  if (nonDecimalWithRadixMatch) {
    var radix = {
      '0b': 2,
      '0o': 8,
      '0x': 16
    }[nonDecimalWithRadixMatch[1]];
    var integerPart = nonDecimalWithRadixMatch[2];
    var fractionalPart = nonDecimalWithRadixMatch[3];
    return {
      input: input,
      radix: radix,
      integerPart: integerPart,
      fractionalPart: fractionalPart
    };
  } else {
    return null;
  }
}
/**
 * Makes a number from a radix, and integer part, and a fractional part
 * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)
 * @returns {number} the number
 */


function makeNumberFromNonDecimalParts(parts) {
  var n = parseInt(parts.integerPart, parts.radix);
  var f = 0;

  for (var i = 0; i < parts.fractionalPart.length; i++) {
    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);
    f += digitValue / Math.pow(parts.radix, i + 1);
  }

  var result = n + f;

  if (isNaN(result)) {
    throw new SyntaxError('String "' + parts.input + '" is no valid number');
  }

  return result;
}

var createNumber = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2)                         // returns number 2
   *    math.number('7.2')                     // returns number 7.2
   *    math.number(true)                      // returns number 1
   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  var number = typed('number', {
    '': function _() {
      return 0;
    },
    number: function number(x) {
      return x;
    },
    string: function string(x) {
      if (x === 'NaN') return NaN;
      var nonDecimalNumberParts = getNonDecimalNumberParts(x);

      if (nonDecimalNumberParts) {
        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);
      }

      var size = 0;
      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);

      if (wordSizeSuffixMatch) {
        // x includes a size suffix like 0xffffi32, so we extract
        // the suffix and remove it from x
        size = Number(wordSizeSuffixMatch[2]);
        x = wordSizeSuffixMatch[1];
      }

      var num = Number(x);

      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }

      if (wordSizeSuffixMatch) {
        // x is a signed bin, oct, or hex literal
        // num is the value of string x if x is interpreted as unsigned
        if (num > Math.pow(2, size) - 1) {
          // literal is too large for size suffix
          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
        } // check if the bit at index size - 1 is set and if so do the twos complement


        if (num >= Math.pow(2, size - 1)) {
          num = num - Math.pow(2, size);
        }
      }

      return num;
    },
    BigNumber: function BigNumber(x) {
      return x.toNumber();
    },
    Fraction: function Fraction(x) {
      return x.valueOf();
    },
    Unit: function Unit(x) {
      throw new Error('Second argument with valueless unit expected');
    },
    "null": function _null(x) {
      return 0;
    },
    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  }); // reviver function to parse a JSON object like:
  //
  //     {"mathjs":"number","value":"2.3"}
  //
  // into a number 2.3

  number.fromJSON = function (json) {
    return parseFloat(json.value);
  };

  return number;
});
exports.createNumber = createNumber;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/resultset/ResultSet.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/resultset/ResultSet.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createResultSet = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'ResultSet';
var dependencies = [];
var createResultSet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function () {
  /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
  function ResultSet(entries) {
    if (!(this instanceof ResultSet)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.entries = entries || [];
  }
  /**
   * Attach type information
   */


  ResultSet.prototype.type = 'ResultSet';
  ResultSet.prototype.isResultSet = true;
  /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */

  ResultSet.prototype.valueOf = function () {
    return this.entries;
  };
  /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */


  ResultSet.prototype.toString = function () {
    return '[' + this.entries.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */


  ResultSet.prototype.toJSON = function () {
    return {
      mathjs: 'ResultSet',
      entries: this.entries
    };
  };
  /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */


  ResultSet.fromJSON = function (json) {
    return new ResultSet(json.entries);
  };

  return ResultSet;
}, {
  isClass: true
});
exports.createResultSet = createResultSet;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/string.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/string.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createString = void 0;

var _factory = __webpack_require__(/*! ../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var _number = __webpack_require__(/*! ../utils/number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var name = 'string';
var dependencies = ['typed'];
var createString = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2)               // returns string '4.2'
   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
   *
   *    const u = math.unit(5, 'km')
   *    math.string(u.to('m'))         // returns string '5000 m'
   *
   *    math.string([true, false])     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
  return typed(name, {
    '': function _() {
      return '';
    },
    number: _number.format,
    "null": function _null(x) {
      return 'null';
    },
    "boolean": function boolean(x) {
      return x + '';
    },
    string: function string(x) {
      return x;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    },
    any: function any(x) {
      return String(x);
    }
  });
});
exports.createString = createString;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/unit/Unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/unit/Unit.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnitClass = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js"));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _is = __webpack_require__(/*! ../../utils/is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _function = __webpack_require__(/*! ../../utils/function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

var _string = __webpack_require__(/*! ../../utils/string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _object = __webpack_require__(/*! ../../utils/object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

var _constants = __webpack_require__(/*! ../../utils/bignumber/constants.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/constants.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var name = 'Unit';
var dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
var createUnitClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var on = _ref.on,
      config = _ref.config,
      addScalar = _ref.addScalar,
      subtract = _ref.subtract,
      multiplyScalar = _ref.multiplyScalar,
      divideScalar = _ref.divideScalar,
      pow = _ref.pow,
      abs = _ref.abs,
      fix = _ref.fix,
      round = _ref.round,
      equal = _ref.equal,
      isNumeric = _ref.isNumeric,
      format = _ref.format,
      number = _ref.number,
      Complex = _ref.Complex,
      _BigNumber = _ref.BigNumber,
      _Fraction = _ref.Fraction;
  var toNumber = number;
  /**
   * A unit can be constructed in the following ways:
   *
   *     const a = new Unit(value, name)
   *     const b = new Unit(null, name)
   *     const c = Unit.parse(str)
   *
   * Example usage:
   *
   *     const a = new Unit(5, 'cm')               // 50 mm
   *     const b = Unit.parse('23 kg')             // 23 kg
   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */

  function Unit(value, name) {
    if (!(this instanceof Unit)) {
      throw new Error('Constructor must be called with the new operator');
    }

    if (!(value === null || value === undefined || isNumeric(value) || (0, _is.isComplex)(value))) {
      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
    }

    if (name !== undefined && (typeof name !== 'string' || name === '')) {
      throw new TypeError('Second parameter in Unit constructor must be a string');
    }

    if (name !== undefined) {
      var u = Unit.parse(name);
      this.units = u.units;
      this.dimensions = u.dimensions;
    } else {
      this.units = [{
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE,
        // link to a list with supported prefixes
        power: 0
      }];
      this.dimensions = [];

      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        this.dimensions[i] = 0;
      }
    }

    this.value = value !== undefined && value !== null ? this._normalize(value) : null;
    this.fixPrefix = false; // if true, function format will not search for the
    // best prefix but leave it as initially provided.
    // fixPrefix is set true by the method Unit.to
    // The justification behind this is that if the constructor is explicitly called,
    // the caller wishes the units to be returned exactly as he supplied.

    this.skipAutomaticSimplification = true;
  }
  /**
   * Attach type information
   */


  Unit.prototype.type = 'Unit';
  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

  var text, index, c;

  function skipWhitespace() {
    while (c === ' ' || c === '\t') {
      next();
    }
  }

  function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  }

  function isDigit(c) {
    return c >= '0' && c <= '9';
  }

  function next() {
    index++;
    c = text.charAt(index);
  }

  function revert(oldIndex) {
    index = oldIndex;
    c = text.charAt(index);
  }

  function parseNumber() {
    var number = '';
    var oldIndex = index;

    if (c === '+') {
      next();
    } else if (c === '-') {
      number += c;
      next();
    }

    if (!isDigitDot(c)) {
      // a + or - must be followed by a digit
      revert(oldIndex);
      return null;
    } // get number, can have a single dot


    if (c === '.') {
      number += c;
      next();

      if (!isDigit(c)) {
        // this is no legal number, it is just a dot
        revert(oldIndex);
        return null;
      }
    } else {
      while (isDigit(c)) {
        number += c;
        next();
      }

      if (c === '.') {
        number += c;
        next();
      }
    }

    while (isDigit(c)) {
      number += c;
      next();
    } // check for exponential notation like "2.3e-4" or "1.23e50"


    if (c === 'E' || c === 'e') {
      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
      var tentativeNumber = '';
      var tentativeIndex = index;
      tentativeNumber += c;
      next();

      if (c === '+' || c === '-') {
        tentativeNumber += c;
        next();
      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


      if (!isDigit(c)) {
        // The e or E must belong to something else, so return the number without the e or E.
        revert(tentativeIndex);
        return number;
      } // We can now safely say that this is scientific notation.


      number = number + tentativeNumber;

      while (isDigit(c)) {
        number += c;
        next();
      }
    }

    return number;
  }

  function parseUnit() {
    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

    while (isDigit(c) || Unit.isValidAlpha(c)) {
      unitName += c;
      next();
    } // Must begin with [a-zA-Z]


    var firstC = unitName.charAt(0);

    if (Unit.isValidAlpha(firstC)) {
      return unitName;
    } else {
      return null;
    }
  }

  function parseCharacter(toFind) {
    if (c === toFind) {
      next();
      return toFind;
    } else {
      return null;
    }
  }
  /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */


  Unit.parse = function (str, options) {
    options = options || {};
    text = str;
    index = -1;
    c = '';

    if (typeof text !== 'string') {
      throw new TypeError('Invalid argument in Unit.parse, string expected');
    }

    var unit = new Unit();
    unit.units = [];
    var powerMultiplierCurrent = 1;
    var expectingUnit = false; // A unit should follow this pattern:
    // [number] ...[ [*/] unit[^number] ]
    // unit[^number] ... [ [*/] unit[^number] ]
    // Rules:
    // number is any floating point number.
    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
    // The string may optionally begin with a number.
    // Each unit may optionally be followed by ^number.
    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
    //   2m^2kg/s^2
    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
    //   4erg

    next();
    skipWhitespace(); // Optional number at the start of the string

    var valueStr = parseNumber();
    var value = null;

    if (valueStr) {
      if (config.number === 'BigNumber') {
        value = new _BigNumber(valueStr);
      } else if (config.number === 'Fraction') {
        try {
          // not all numbers can be turned in Fractions, for example very small numbers not
          value = new _Fraction(valueStr);
        } catch (err) {
          value = parseFloat(valueStr);
        }
      } else {
        // number
        value = parseFloat(valueStr);
      }

      skipWhitespace(); // Whitespace is not required here
      // handle multiplication or division right after the value, like '1/s'

      if (parseCharacter('*')) {
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      }
    } // Stack to keep track of powerMultipliers applied to each parentheses group


    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

    var powerMultiplierStackProduct = 1;

    while (true) {
      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
      // A '(' will always appear directly before a unit.

      while (c === '(') {
        powerMultiplierStack.push(powerMultiplierCurrent);
        powerMultiplierStackProduct *= powerMultiplierCurrent;
        powerMultiplierCurrent = 1;
        next();
        skipWhitespace();
      } // Is there something here?


      var uStr = void 0;

      if (c) {
        var oldC = c;
        uStr = parseUnit();

        if (uStr === null) {
          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
        }
      } else {
        // End of input.
        break;
      } // Verify the unit exists and get the prefix (if any)


      var res = _findUnit(uStr);

      if (res === null) {
        // Unit not found.
        throw new SyntaxError('Unit "' + uStr + '" not found.');
      }

      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

      skipWhitespace();

      if (parseCharacter('^')) {
        skipWhitespace();
        var p = parseNumber();

        if (p === null) {
          // No valid number found for the power!
          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
        }

        power *= p;
      } // Add the unit to the list


      unit.units.push({
        unit: res.unit,
        prefix: res.prefix,
        power: power
      });

      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
      } // Check for and consume closing parentheses, popping from the stack.
      // A ')' will always follow a unit.


      skipWhitespace();

      while (c === ')') {
        if (powerMultiplierStack.length === 0) {
          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
        }

        powerMultiplierStackProduct /= powerMultiplierStack.pop();
        next();
        skipWhitespace();
      } // "*" and "/" should mean we are expecting something to come next.
      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


      expectingUnit = false;

      if (parseCharacter('*')) {
        // explicit multiplication
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        // division
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      } else {
        // implicit multiplication
        powerMultiplierCurrent = 1;
      } // Replace the unit into the auto unit system


      if (res.unit.base) {
        var baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
    } // Has the string been entirely consumed?


    skipWhitespace();

    if (c) {
      throw new SyntaxError('Could not parse: "' + str + '"');
    } // Is there a trailing slash?


    if (expectingUnit) {
      throw new SyntaxError('Trailing characters: "' + str + '"');
    } // Is the parentheses stack empty?


    if (powerMultiplierStack.length !== 0) {
      throw new SyntaxError('Unmatched "(" in "' + text + '"');
    } // Are there any units at all?


    if (unit.units.length === 0 && !options.allowNoUnits) {
      throw new SyntaxError('"' + str + '" contains no units');
    }

    unit.value = value !== undefined ? unit._normalize(value) : null;
    return unit;
  };
  /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */


  Unit.prototype.clone = function () {
    var unit = new Unit();
    unit.fixPrefix = this.fixPrefix;
    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
    unit.value = (0, _object.clone)(this.value);
    unit.dimensions = this.dimensions.slice(0);
    unit.units = [];

    for (var i = 0; i < this.units.length; i++) {
      unit.units[i] = {};

      for (var p in this.units[i]) {
        if ((0, _object.hasOwnProperty)(this.units[i], p)) {
          unit.units[i][p] = this.units[i][p];
        }
      }
    }

    return unit;
  };
  /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */


  Unit.prototype._isDerived = function () {
    if (this.units.length === 0) {
      return false;
    }

    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
  };
  /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */


  Unit.prototype._normalize = function (value) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      var res = value;
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitOffset = convert(this.units[0].unit.offset);
      unitPrefixValue = convert(this.units[0].prefix.value);
      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
    }
  };
  /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */


  Unit.prototype._denormalize = function (value, prefixValue) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
      var res = value;
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitPrefixValue = convert(this.units[0].prefix.value);
      unitOffset = convert(this.units[0].unit.offset);

      if (prefixValue === undefined || prefixValue === null) {
        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
      } else {
        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
      }
    }
  };
  /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */


  var _findUnit = (0, _function.memoize)(function (str) {
    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
    if ((0, _object.hasOwnProperty)(UNITS, str)) {
      var unit = UNITS[str];
      var prefix = unit.prefixes[''];
      return {
        unit: unit,
        prefix: prefix
      };
    }

    for (var _name in UNITS) {
      if ((0, _object.hasOwnProperty)(UNITS, _name)) {
        if ((0, _string.endsWith)(str, _name)) {
          var _unit = UNITS[_name];
          var prefixLen = str.length - _name.length;
          var prefixName = str.substring(0, prefixLen);

          var _prefix = (0, _object.hasOwnProperty)(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;

          if (_prefix !== undefined) {
            // store unit, prefix, and value
            return {
              unit: _unit,
              prefix: _prefix
            };
          }
        }
      }
    }

    return null;
  }, {
    hasher: function hasher(args) {
      return args[0];
    },
    limit: 100
  });
  /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */


  Unit.isValuelessUnit = function (name) {
    return _findUnit(name) !== null;
  };
  /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */


  Unit.prototype.hasBase = function (base) {
    if (typeof base === 'string') {
      base = BASE_UNITS[base];
    }

    if (!base) {
      return false;
    } // All dimensions must be the same


    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */


  Unit.prototype.equalBase = function (other) {
    // All dimensions must be the same
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */


  Unit.prototype.equals = function (other) {
    return this.equalBase(other) && equal(this.value, other.value);
  };
  /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */


  Unit.prototype.multiply = function (other) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
    } // Append other's units list onto res


    for (var _i = 0; _i < other.units.length; _i++) {
      // Make a shallow copy of every unit
      var inverted = _objectSpread({}, other.units[_i]);

      res.units.push(inverted);
    } // If at least one operand has a value, then the result should also have a value


    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = multiplyScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */


  Unit.prototype.divide = function (other) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
    } // Invert and append other's units list onto res


    for (var _i2 = 0; _i2 < other.units.length; _i2++) {
      // Make a shallow copy of every unit
      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {
        power: -other.units[_i2].power
      });

      res.units.push(inverted);
    } // If at least one operand has a value, the result should have a value


    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = divideScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */


  Unit.prototype.pow = function (p) {
    var res = this.clone();

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) * p;
    } // Adjust the power of each unit in the list


    for (var _i3 = 0; _i3 < res.units.length; _i3++) {
      res.units[_i3].power *= p;
    }

    if (res.value !== null) {
      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
      // if (!isNumeric(res.value)) {
      //  res.value = NaN
      // }
      // Update: Complex supported now
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */


  function getNumericIfUnitless(unit) {
    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
      return unit.value;
    } else {
      return unit;
    }
  }
  /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */


  Unit.prototype.abs = function () {
    // This gives correct, but unexpected, results for units with an offset.
    // For example, abs(-283.15 degC) = -263.15 degC !!!
    var ret = this.clone();
    ret.value = ret.value !== null ? abs(ret.value) : null;

    for (var i in ret.units) {
      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
        ret.units[i].unit = UNITS.W;
      }
    }

    return ret;
  };
  /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */


  Unit.prototype.to = function (valuelessUnit) {
    var other;
    var value = this.value === null ? this._normalize(1) : this.value;

    if (typeof valuelessUnit === 'string') {
      // other = new Unit(null, valuelessUnit)
      other = Unit.parse(valuelessUnit);

      if (!this.equalBase(other)) {
        throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
      }

      if (other.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other.value = (0, _object.clone)(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else if ((0, _is.isUnit)(valuelessUnit)) {
      if (!this.equalBase(valuelessUnit)) {
        throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
      }

      if (valuelessUnit.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other = valuelessUnit.clone();
      other.value = (0, _object.clone)(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else {
      throw new Error('String or Unit expected as parameter');
    }
  };
  /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


  Unit.prototype.toNumber = function (valuelessUnit) {
    return toNumber(this.toNumeric(valuelessUnit));
  };
  /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */


  Unit.prototype.toNumeric = function (valuelessUnit) {
    var other;

    if (valuelessUnit) {
      // Allow getting the numeric value without converting to a different unit
      other = this.to(valuelessUnit);
    } else {
      other = this.clone();
    }

    if (other._isDerived() || other.units.length === 0) {
      return other._denormalize(other.value);
    } else {
      return other._denormalize(other.value, other.units[0].prefix.value);
    }
  };
  /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */


  Unit.prototype.toJSON = function () {
    return {
      mathjs: 'Unit',
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  };
  /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */


  Unit.fromJSON = function (json) {
    var unit = new Unit(json.value, json.unit);
    unit.fixPrefix = json.fixPrefix || false;
    return unit;
  };
  /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.valueOf = Unit.prototype.toString;
  /**
   * Simplify this Unit's unit list and return a new Unit with the simplified list.
   * The returned Unit will contain a list of the "best" units for formatting.
   */

  Unit.prototype.simplify = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Search for a matching base

    var matchingBase;

    for (var key in currentUnitSystem) {
      if ((0, _object.hasOwnProperty)(currentUnitSystem, key)) {
        if (ret.hasBase(BASE_UNITS[key])) {
          matchingBase = key;
          break;
        }
      }
    }

    if (matchingBase === 'NONE') {
      ret.units = [];
    } else {
      var matchingUnit;

      if (matchingBase) {
        // Does the unit system have a matching unit?
        if ((0, _object.hasOwnProperty)(currentUnitSystem, matchingBase)) {
          matchingUnit = currentUnitSystem[matchingBase];
        }
      }

      if (matchingUnit) {
        ret.units = [{
          unit: matchingUnit.unit,
          prefix: matchingUnit.prefix,
          power: 1.0
        }];
      } else {
        // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the current unit system
        var missingBaseDim = false;

        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];

          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if ((0, _object.hasOwnProperty)(currentUnitSystem, baseDim)) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              missingBaseDim = true;
            }
          }
        } // Is the proposed unit list "simpler" than the existing one?


        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
          // Replace this unit list with the proposed list
          ret.units = proposedUnitList;
        }
      }
    }

    return ret;
  };
  /**
   * Returns a new Unit in the SI system with the same value as this one
   */


  Unit.prototype.toSI = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
    // 5 (kg m^2) / (s^3 mol)
    // Build an representation from the base units of the SI unit system

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      var baseDim = BASE_DIMENSIONS[i];

      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
        if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS.si, baseDim)) {
          proposedUnitList.push({
            unit: UNIT_SYSTEMS.si[baseDim].unit,
            prefix: UNIT_SYSTEMS.si[baseDim].prefix,
            power: ret.dimensions[i] || 0
          });
        } else {
          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
        }
      }
    } // Replace this unit list with the proposed list


    ret.units = proposedUnitList;
    ret.fixPrefix = true;
    ret.skipAutomaticSimplification = true;
    return ret;
  };
  /**
   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.formatUnits = function () {
    var strNum = '';
    var strDen = '';
    var nNum = 0;
    var nDen = 0;

    for (var i = 0; i < this.units.length; i++) {
      if (this.units[i].power > 0) {
        nNum++;
        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
          strNum += '^' + this.units[i].power;
        }
      } else if (this.units[i].power < 0) {
        nDen++;
      }
    }

    if (nDen > 0) {
      for (var _i4 = 0; _i4 < this.units.length; _i4++) {
        if (this.units[_i4].power < 0) {
          if (nNum > 0) {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;

            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
              strDen += '^' + -this.units[_i4].power;
            }
          } else {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
            strDen += '^' + this.units[_i4].power;
          }
        }
      }
    } // Remove leading " "


    strNum = strNum.substr(1);
    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

    if (nNum > 1 && nDen > 0) {
      strNum = '(' + strNum + ')';
    }

    if (nDen > 1 && nNum > 0) {
      strDen = '(' + strDen + ')';
    }

    var str = strNum;

    if (nNum > 0 && nDen > 0) {
      str += ' / ';
    }

    str += strDen;
    return str;
  };
  /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */


  Unit.prototype.format = function (options) {
    // Simplfy the unit list, unless it is valueless or was created directly in the
    // constructor or as the result of to or toSI
    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

    var isImaginary = false;

    if (typeof simp.value !== 'undefined' && simp.value !== null && (0, _is.isComplex)(simp.value)) {
      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
      isImaginary = Math.abs(simp.value.re) < 1e-14;
    }

    for (var i in simp.units) {
      if ((0, _object.hasOwnProperty)(simp.units, i)) {
        if (simp.units[i].unit) {
          if (simp.units[i].unit.name === 'VA' && isImaginary) {
            simp.units[i].unit = UNITS.VAR;
          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
            simp.units[i].unit = UNITS.VA;
          }
        }
      }
    } // Now apply the best prefix
    // Units must have only one unit and not have the fixPrefix flag set


    if (simp.units.length === 1 && !simp.fixPrefix) {
      // Units must have integer powers, otherwise the prefix will change the
      // outputted value by not-an-integer-power-of-ten
      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
        // Apply the best prefix
        simp.units[0].prefix = simp._bestPrefix();
      }
    }

    var value = simp._denormalize(simp.value);

    var str = simp.value !== null ? format(value, options || {}) : '';
    var unitStr = simp.formatUnits();

    if (simp.value && (0, _is.isComplex)(simp.value)) {
      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
    }

    if (unitStr.length > 0 && str.length > 0) {
      str += ' ';
    }

    str += unitStr;
    return str;
  };
  /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */


  Unit.prototype._bestPrefix = function () {
    if (this.units.length !== 1) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    }

    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    } // find the best prefix value (resulting in the value of which
    // the absolute value of the log10 is closest to zero,
    // though with a little offset of 1.2 for nicer values: you get a
    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
    // Note: the units value can be any numeric type, but to find the best
    // prefix it's enough to work with limited precision of a regular number
    // Update: using mathjs abs since we also allow complex numbers


    var absValue = this.value !== null ? abs(this.value) : 0;
    var absUnitValue = abs(this.units[0].unit.value);
    var bestPrefix = this.units[0].prefix;

    if (absValue === 0) {
      return bestPrefix;
    }

    var power = this.units[0].power;
    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

    bestDiff = Math.abs(bestDiff);
    var prefixes = this.units[0].unit.prefixes;

    for (var p in prefixes) {
      if ((0, _object.hasOwnProperty)(prefixes, p)) {
        var prefix = prefixes[p];

        if (prefix.scientific) {
          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
            // choose the prefix with the smallest diff, or if equal, choose the one
            // with the shortest name (can happen with SHORTLONG for example)
            bestPrefix = prefix;
            bestDiff = diff;
          }
        }
      }
    }

    return bestPrefix;
  };
  /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units.
   *
   *   Example:
   *
   *   const u = new Unit(1, 'm')
   *   u.splitUnit(['feet', 'inch'])
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */


  Unit.prototype.splitUnit = function (parts) {
    var x = this.clone();
    var ret = [];

    for (var i = 0; i < parts.length; i++) {
      // Convert x to the requested unit
      x = x.to(parts[i]);
      if (i === parts.length - 1) break; // Get the numeric value of this unit

      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
      // since fix can incorrectly round down if there is round-off error

      var xRounded = round(xNumeric);
      var xFixed = void 0;
      var isNearlyEqual = equal(xRounded, xNumeric);

      if (isNearlyEqual) {
        xFixed = xRounded;
      } else {
        xFixed = fix(x.toNumeric());
      }

      var y = new Unit(xFixed, parts[i].toString());
      ret.push(y);
      x = subtract(x, y);
    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
    // But instead of comparing x, the remainder, with zero--we will compare the sum of
    // all the parts so far with the original value. If they are nearly equal,
    // we set the remainder to 0.


    var testSum = 0;

    for (var _i5 = 0; _i5 < ret.length; _i5++) {
      testSum = addScalar(testSum, ret[_i5].value);
    }

    if (equal(testSum, this.value)) {
      x.value = 0;
    }

    ret.push(x);
    return ret;
  };

  var PREFIXES = {
    NONE: {
      '': {
        name: '',
        value: 1,
        scientific: true
      }
    },
    SHORT: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e1,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e2,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-1,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-2,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-3,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-6,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-9,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-12,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-15,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-18,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-21,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-24,
        scientific: true
      }
    },
    LONG: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      deca: {
        name: 'deca',
        value: 1e1,
        scientific: false
      },
      hecto: {
        name: 'hecto',
        value: 1e2,
        scientific: false
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      },
      deci: {
        name: 'deci',
        value: 1e-1,
        scientific: false
      },
      centi: {
        name: 'centi',
        value: 1e-2,
        scientific: false
      },
      milli: {
        name: 'milli',
        value: 1e-3,
        scientific: true
      },
      micro: {
        name: 'micro',
        value: 1e-6,
        scientific: true
      },
      nano: {
        name: 'nano',
        value: 1e-9,
        scientific: true
      },
      pico: {
        name: 'pico',
        value: 1e-12,
        scientific: true
      },
      femto: {
        name: 'femto',
        value: 1e-15,
        scientific: true
      },
      atto: {
        name: 'atto',
        value: 1e-18,
        scientific: true
      },
      zepto: {
        name: 'zepto',
        value: 1e-21,
        scientific: true
      },
      yocto: {
        name: 'yocto',
        value: 1e-24,
        scientific: true
      }
    },
    SQUARED: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e2,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e4,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e6,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e12,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e18,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e24,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e30,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e36,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e42,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e48,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-2,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-4,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-6,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-12,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-18,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-24,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-30,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-36,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-42,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-48,
        scientific: true
      }
    },
    CUBIC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e3,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e6,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e9,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e18,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e27,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e36,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e45,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e54,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e63,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e72,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-3,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-6,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-9,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-18,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-27,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-36,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-45,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-54,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-63,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-72,
        scientific: true
      }
    },
    BINARY_SHORT_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_SHORT_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      Ki: {
        name: 'Ki',
        value: 1024,
        scientific: true
      },
      Mi: {
        name: 'Mi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      Gi: {
        name: 'Gi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      Ti: {
        name: 'Ti',
        value: Math.pow(1024, 4),
        scientific: true
      },
      Pi: {
        name: 'Pi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      Ei: {
        name: 'Ei',
        value: Math.pow(1024, 6),
        scientific: true
      },
      Zi: {
        name: 'Zi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      Yi: {
        name: 'Yi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BINARY_LONG_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_LONG_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kibi: {
        name: 'kibi',
        value: 1024,
        scientific: true
      },
      mebi: {
        name: 'mebi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      gibi: {
        name: 'gibi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      tebi: {
        name: 'tebi',
        value: Math.pow(1024, 4),
        scientific: true
      },
      pebi: {
        name: 'pebi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      exi: {
        name: 'exi',
        value: Math.pow(1024, 6),
        scientific: true
      },
      zebi: {
        name: 'zebi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      yobi: {
        name: 'yobi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BTU: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      MM: {
        name: 'MM',
        value: 1e6,
        scientific: true
      }
    }
  };
  PREFIXES.SHORTLONG = (0, _extends2["default"])({}, PREFIXES.SHORT, PREFIXES.LONG);
  PREFIXES.BINARY_SHORT = (0, _extends2["default"])({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
  PREFIXES.BINARY_LONG = (0, _extends2["default"])({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
  var BASE_UNITS = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };

  for (var key in BASE_UNITS) {
    if ((0, _object.hasOwnProperty)(BASE_UNITS, key)) {
      BASE_UNITS[key].key = key;
    }
  }

  var BASE_UNIT_NONE = {};
  var UNIT_NONE = {
    name: '',
    base: BASE_UNIT_NONE,
    value: 1,
    offset: 0,
    dimensions: BASE_DIMENSIONS.map(function (x) {
      return 0;
    })
  };
  var UNITS = {
    // length
    meter: {
      name: 'meter',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: 'inch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: 'foot',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: 'yard',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: 'mile',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: 'link',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: 'rod',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: 'chain',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: 'angstrom',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: 'm',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    "in": {
      name: 'in',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: 'ft',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: 'yd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: 'mi',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: 'li',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: 'rd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    ch: {
      name: 'ch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: 'mil',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0000254,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: 'm2',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: 'sqin',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.00064516,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: 'sqft',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: 'sqyd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: 'sqmi',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 2589988.110336,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: 'sqrd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: 'sqch',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: 'sqmil',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 6.4516e-10,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: 'acre',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: 'hectare',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 10000,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: 'm3',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: 'L',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    l: {
      name: 'l',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    litre: {
      name: 'litre',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    cuin: {
      name: 'cuin',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1.6387064e-5,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: 'cuft',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: 'cuyd',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: 'teaspoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000005,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: 'tablespoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000015,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: 'drop',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: 'gtt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: 'minim',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00000006161152,
      offset: 0
    },
    // 0.06161152 mL
    fluiddram: {
      name: 'fluiddram',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    fluidounce: {
      name: 'fluidounce',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gill: {
      name: 'gill',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cc: {
      name: 'cc',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: 'cup',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pint: {
      name: 'pint',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    quart: {
      name: 'quart',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gallon: {
      name: 'gallon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    beerbarrel: {
      name: 'beerbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    oilbarrel: {
      name: 'oilbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    hogshead: {
      name: 'hogshead',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.2384810,
      offset: 0
    },
    // 238.4810 L
    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: 'fldr',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    floz: {
      name: 'floz',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gi: {
      name: 'gi',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cp: {
      name: 'cp',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pt: {
      name: 'pt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    qt: {
      name: 'qt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gal: {
      name: 'gal',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    bbl: {
      name: 'bbl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    obl: {
      name: 'obl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
    // Mass
    g: {
      name: 'g',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    gram: {
      name: 'gram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    ton: {
      name: 'ton',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: 't',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 1000,
      offset: 0
    },
    tonne: {
      name: 'tonne',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 1000,
      offset: 0
    },
    grain: {
      name: 'grain',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dram: {
      name: 'dram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    ounce: {
      name: 'ounce',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    poundmass: {
      name: 'poundmass',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    hundredweight: {
      name: 'hundredweight',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: 'stick',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 115e-3,
      offset: 0
    },
    stone: {
      name: 'stone',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: 'gr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dr: {
      name: 'dr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    oz: {
      name: 'oz',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    lbm: {
      name: 'lbm',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    cwt: {
      name: 'cwt',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: 's',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: 'min',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: 'h',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: 'second',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: 'sec',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: 'minute',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: 'hour',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: 'day',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: 'week',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: 'month',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: 'decade',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 315576000,
      // Julian decade
      offset: 0
    },
    century: {
      name: 'century',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3155760000,
      // Julian century
      offset: 0
    },
    millennium: {
      name: 'millennium',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600000,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: 'Hertz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    Hz: {
      name: 'Hz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    // Angle
    rad: {
      name: 'rad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: 'radian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: 'deg',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: 'degree',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: 'grad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: 'gradian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: 'cycle',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: 'arcsec',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: 'arcmin',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: 'A',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: 'ampere',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) / 1.8
    // K(R) = °R / 1.8
    K: {
      name: 'K',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    degC: {
      name: 'degC',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: 'degF',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    degR: {
      name: 'degR',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    kelvin: {
      name: 'kelvin',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    celsius: {
      name: 'celsius',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: 'fahrenheit',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    rankine: {
      name: 'rankine',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    // amount of substance
    mol: {
      name: 'mol',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: 'mole',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: 'cd',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: 'candela',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: 'N',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: 'newton',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: 'dyn',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 0.00001,
      offset: 0
    },
    dyne: {
      name: 'dyne',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 0.00001,
      offset: 0
    },
    lbf: {
      name: 'lbf',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: 'poundforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: 'kip',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 4448.2216,
      offset: 0
    },
    kilogramforce: {
      name: 'kilogramforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    // Energy
    J: {
      name: 'J',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: 'joule',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    erg: {
      name: 'erg',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.NONE,
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: 'Wh',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: 'BTU',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: 'eV',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1.602176565e-19,
      offset: 0
    },
    electronvolt: {
      name: 'electronvolt',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.LONG,
      value: 1.602176565e-19,
      offset: 0
    },
    // Power
    W: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: 'watt',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: 'hp',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: 'VAR',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: Complex.I,
      offset: 0
    },
    VA: {
      name: 'VA',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: 'Pa',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: 'psi',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: 'atm',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: 'bar',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORTLONG,
      value: 100000,
      offset: 0
    },
    torr: {
      name: 'torr',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: 'mmHg',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: 'mmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: 'cmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: 'coulomb',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: 'C',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: 'farad',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: 'F',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: 'volt',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: 'V',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: 'ohm',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },

    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: 'henry',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: 'H',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: 'siemens',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: 'S',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: 'weber',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: 'Wb',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: 'tesla',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: 'T',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: 'b',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: 'bits',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: 'B',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: 'bytes',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 8,
      offset: 0
    }
  }; // aliases (formerly plurals)

  var ALIASES = {
    meters: 'meter',
    inches: 'inch',
    feet: 'foot',
    yards: 'yard',
    miles: 'mile',
    links: 'link',
    rods: 'rod',
    chains: 'chain',
    angstroms: 'angstrom',
    lt: 'l',
    litres: 'litre',
    liter: 'litre',
    liters: 'litre',
    teaspoons: 'teaspoon',
    tablespoons: 'tablespoon',
    minims: 'minim',
    fluiddrams: 'fluiddram',
    fluidounces: 'fluidounce',
    gills: 'gill',
    cups: 'cup',
    pints: 'pint',
    quarts: 'quart',
    gallons: 'gallon',
    beerbarrels: 'beerbarrel',
    oilbarrels: 'oilbarrel',
    hogsheads: 'hogshead',
    gtts: 'gtt',
    grams: 'gram',
    tons: 'ton',
    tonnes: 'tonne',
    grains: 'grain',
    drams: 'dram',
    ounces: 'ounce',
    poundmasses: 'poundmass',
    hundredweights: 'hundredweight',
    sticks: 'stick',
    lb: 'lbm',
    lbs: 'lbm',
    kips: 'kip',
    kgf: 'kilogramforce',
    acres: 'acre',
    hectares: 'hectare',
    sqfeet: 'sqft',
    sqyard: 'sqyd',
    sqmile: 'sqmi',
    sqmiles: 'sqmi',
    mmhg: 'mmHg',
    mmh2o: 'mmH2O',
    cmh2o: 'cmH2O',
    seconds: 'second',
    secs: 'second',
    minutes: 'minute',
    mins: 'minute',
    hours: 'hour',
    hr: 'hour',
    hrs: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
    years: 'year',
    decades: 'decade',
    centuries: 'century',
    millennia: 'millennium',
    hertz: 'hertz',
    radians: 'radian',
    degrees: 'degree',
    gradians: 'gradian',
    cycles: 'cycle',
    arcsecond: 'arcsec',
    arcseconds: 'arcsec',
    arcminute: 'arcmin',
    arcminutes: 'arcmin',
    BTUs: 'BTU',
    watts: 'watt',
    joules: 'joule',
    amperes: 'ampere',
    coulombs: 'coulomb',
    volts: 'volt',
    ohms: 'ohm',
    farads: 'farad',
    webers: 'weber',
    teslas: 'tesla',
    electronvolts: 'electronvolt',
    moles: 'mole',
    bit: 'bits',
    "byte": 'bytes'
  };
  /**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */

  function calculateAngleValues(config) {
    if (config.number === 'BigNumber') {
      var pi = (0, _constants.createBigNumberPi)(_BigNumber);
      UNITS.rad.value = new _BigNumber(1);
      UNITS.deg.value = pi.div(180); // 2 * pi / 360

      UNITS.grad.value = pi.div(200); // 2 * pi / 400

      UNITS.cycle.value = pi.times(2); // 2 * pi

      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
    } else {
      // number
      UNITS.rad.value = 1;
      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

      UNITS.cycle.value = Math.PI * 2; // 2 * pi

      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
    } // copy to the full names of the angles


    UNITS.radian.value = UNITS.rad.value;
    UNITS.degree.value = UNITS.deg.value;
    UNITS.gradian.value = UNITS.grad.value;
  } // apply the angle values now


  calculateAngleValues(config);

  if (on) {
    // recalculate the values on change of configuration
    on('config', function (curr, prev) {
      if (curr.number !== prev.number) {
        calculateAngleValues(curr);
      }
    });
  }
  /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */


  var UNIT_SYSTEMS = {
    si: {
      // Base units
      NONE: {
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE['']
      },
      LENGTH: {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT['']
      },
      MASS: {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT.k
      },
      TIME: {
        unit: UNITS.s,
        prefix: PREFIXES.SHORT['']
      },
      CURRENT: {
        unit: UNITS.A,
        prefix: PREFIXES.SHORT['']
      },
      TEMPERATURE: {
        unit: UNITS.K,
        prefix: PREFIXES.SHORT['']
      },
      LUMINOUS_INTENSITY: {
        unit: UNITS.cd,
        prefix: PREFIXES.SHORT['']
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: UNITS.mol,
        prefix: PREFIXES.SHORT['']
      },
      ANGLE: {
        unit: UNITS.rad,
        prefix: PREFIXES.SHORT['']
      },
      BIT: {
        unit: UNITS.bits,
        prefix: PREFIXES.SHORT['']
      },
      // Derived units
      FORCE: {
        unit: UNITS.N,
        prefix: PREFIXES.SHORT['']
      },
      ENERGY: {
        unit: UNITS.J,
        prefix: PREFIXES.SHORT['']
      },
      POWER: {
        unit: UNITS.W,
        prefix: PREFIXES.SHORT['']
      },
      PRESSURE: {
        unit: UNITS.Pa,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CHARGE: {
        unit: UNITS.C,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CAPACITANCE: {
        unit: UNITS.F,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_POTENTIAL: {
        unit: UNITS.V,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_RESISTANCE: {
        unit: UNITS.ohm,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_INDUCTANCE: {
        unit: UNITS.H,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CONDUCTANCE: {
        unit: UNITS.S,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX: {
        unit: UNITS.Wb,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: UNITS.T,
        prefix: PREFIXES.SHORT['']
      },
      FREQUENCY: {
        unit: UNITS.Hz,
        prefix: PREFIXES.SHORT['']
      }
    }
  }; // Clone to create the other unit systems

  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.cgs.LENGTH = {
    unit: UNITS.m,
    prefix: PREFIXES.SHORT.c
  };
  UNIT_SYSTEMS.cgs.MASS = {
    unit: UNITS.g,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.FORCE = {
    unit: UNITS.dyn,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.ENERGY = {
    unit: UNITS.erg,
    prefix: PREFIXES.NONE['']
  }; // there are wholly 4 unique cgs systems for electricity and magnetism,
  // so let's not worry about it unless somebody complains

  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.us.LENGTH = {
    unit: UNITS.ft,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.MASS = {
    unit: UNITS.lbm,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.TEMPERATURE = {
    unit: UNITS.degF,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.FORCE = {
    unit: UNITS.lbf,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.ENERGY = {
    unit: UNITS.BTU,
    prefix: PREFIXES.BTU['']
  };
  UNIT_SYSTEMS.us.POWER = {
    unit: UNITS.hp,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.PRESSURE = {
    unit: UNITS.psi,
    prefix: PREFIXES.NONE['']
  }; // Add additional unit systems here.
  // Choose a unit system to seed the auto unit system.

  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

  var currentUnitSystem = UNIT_SYSTEMS.auto;
  /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */

  Unit.setUnitSystem = function (name) {
    if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS, name)) {
      currentUnitSystem = UNIT_SYSTEMS[name];
    } else {
      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    }
  };
  /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */


  Unit.getUnitSystem = function () {
    for (var _key in UNIT_SYSTEMS) {
      if ((0, _object.hasOwnProperty)(UNIT_SYSTEMS, _key)) {
        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {
          return _key;
        }
      }
    }
  };
  /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */


  Unit.typeConverters = {
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x + ''); // stringify to prevent constructor error
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x);
    },
    Complex: function Complex(x) {
      return x;
    },
    number: function number(x) {
      return x;
    }
  };
  /**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */

  Unit._getNumberConverter = function (type) {
    if (!Unit.typeConverters[type]) {
      throw new TypeError('Unsupported type "' + type + '"');
    }

    return Unit.typeConverters[type];
  }; // Add dimensions to each built-in unit


  for (var _key2 in UNITS) {
    if ((0, _object.hasOwnProperty)(UNITS, _key2)) {
      var unit = UNITS[_key2];
      unit.dimensions = unit.base.dimensions;
    }
  } // Create aliases


  for (var _name2 in ALIASES) {
    if ((0, _object.hasOwnProperty)(ALIASES, _name2)) {
      var _unit2 = UNITS[ALIASES[_name2]];
      var alias = {};

      for (var _key3 in _unit2) {
        if ((0, _object.hasOwnProperty)(_unit2, _key3)) {
          alias[_key3] = _unit2[_key3];
        }
      }

      alias.name = _name2;
      UNITS[_name2] = alias;
    }
  }
  /**
   * Checks if a character is a valid latin letter (upper or lower case).
   * Note that this function can be overridden, for example to allow support of other alphabets.
   * @param {string} c Tested character
   */


  Unit.isValidAlpha = function isValidAlpha(c) {
    return /^[a-zA-Z]$/.test(c);
  };

  function assertUnitNameIsValid(name) {
    for (var i = 0; i < name.length; i++) {
      c = name.charAt(i);

      if (i === 0 && !Unit.isValidAlpha(c)) {
        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
      }

      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
      }
    }
  }
  /**
   * Wrapper around createUnitSingle.
   * Example:
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  },
   *  {
   *    override: true
   *  })
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */


  Unit.createUnit = function (obj, options) {
    if ((0, _typeof2["default"])(obj) !== 'object') {
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    } // Remove all units and aliases we are overriding


    if (options && options.override) {
      for (var _key4 in obj) {
        if ((0, _object.hasOwnProperty)(obj, _key4)) {
          Unit.deleteUnit(_key4);
        }

        if (obj[_key4].aliases) {
          for (var i = 0; i < obj[_key4].aliases.length; i++) {
            Unit.deleteUnit(obj[_key4].aliases[i]);
          }
        }
      }
    } // TODO: traverse multiple times until all units have been added


    var lastUnit;

    for (var _key5 in obj) {
      if ((0, _object.hasOwnProperty)(obj, _key5)) {
        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
      }
    }

    return lastUnit;
  };
  /**
   * Create a user-defined unit and register it with the Unit type.
   * Example:
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit, Object} definition      Definition of the unit in terms
   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,
   * or an Object. If an Object, may have the following properties:
   *   - definition {string|Unit} The definition of this unit.
   *   - prefixes {string} "none", "short", "long", "binary_short", or "binary_long".
   *     The default is "none".
   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *   - offset {Numeric} An offset to apply when converting from the unit. For
   *     example, the offset for celsius is 273.15 and the offset for farhenheit
   *     is 459.67. Default is 0.
   *   - baseName {string} If the unit's dimension does not match that of any other
   *     base unit, the name of the newly create base unit. Otherwise, this property
   *     has no effect.
   *
   * @param {Object} options   (optional) An object containing any of the following
   * properties:
   *   - override {boolean} Whether this unit should be allowed to override existing
   *     units.
   *
   * @return {Unit}
   */


  Unit.createUnitSingle = function (name, obj, options) {
    if (typeof obj === 'undefined' || obj === null) {
      obj = {};
    }

    if (typeof name !== 'string') {
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    } // Check collisions with existing units


    if ((0, _object.hasOwnProperty)(UNITS, name)) {
      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


    assertUnitNameIsValid(name);
    var defUnit = null; // The Unit from which the new unit will be created.

    var aliases = [];
    var offset = 0;
    var definition;
    var prefixes;
    var baseName;

    if (obj && obj.type === 'Unit') {
      defUnit = obj.clone();
    } else if (typeof obj === 'string') {
      if (obj !== '') {
        definition = obj;
      }
    } else if ((0, _typeof2["default"])(obj) === 'object') {
      definition = obj.definition;
      prefixes = obj.prefixes;
      offset = obj.offset;
      baseName = obj.baseName;

      if (obj.aliases) {
        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
      }
    } else {
      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
    }

    if (aliases) {
      for (var i = 0; i < aliases.length; i++) {
        if ((0, _object.hasOwnProperty)(UNITS, aliases[i])) {
          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
      }
    }

    if (definition && typeof definition === 'string' && !defUnit) {
      try {
        defUnit = Unit.parse(definition, {
          allowNoUnits: true
        });
      } catch (ex) {
        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
        throw ex;
      }
    } else if (definition && definition.type === 'Unit') {
      defUnit = definition.clone();
    }

    aliases = aliases || [];
    offset = offset || 0;

    if (prefixes && prefixes.toUpperCase) {
      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
    } else {
      prefixes = PREFIXES.NONE;
    } // If defUnit is null, it is because the user did not
    // specify a defintion. So create a new base dimension.


    var newUnit = {};

    if (!defUnit) {
      // Add a new base dimension
      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
      }

      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

      for (var b in BASE_UNITS) {
        if ((0, _object.hasOwnProperty)(BASE_UNITS, b)) {
          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
        }
      } // Add the new base unit


      var newBaseUnit = {
        dimensions: []
      };

      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
        newBaseUnit.dimensions[_i6] = 0;
      }

      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
      newBaseUnit.key = baseName;
      BASE_UNITS[baseName] = newBaseUnit;
      newUnit = {
        name: name,
        value: 1,
        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
        base: BASE_UNITS[baseName]
      };
      currentUnitSystem[baseName] = {
        unit: newUnit,
        prefix: PREFIXES.NONE['']
      };
    } else {
      newUnit = {
        name: name,
        value: defUnit.value,
        dimensions: defUnit.dimensions.slice(0),
        prefixes: prefixes,
        offset: offset
      }; // Create a new base if no matching base exists

      var anyMatch = false;

      for (var _i7 in BASE_UNITS) {
        if ((0, _object.hasOwnProperty)(BASE_UNITS, _i7)) {
          var match = true;

          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
              match = false;
              break;
            }
          }

          if (match) {
            anyMatch = true;
            newUnit.base = BASE_UNITS[_i7];
            break;
          }
        }
      }

      if (!anyMatch) {
        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
        // Add the new base unit

        var _newBaseUnit = {
          dimensions: defUnit.dimensions.slice(0)
        };
        _newBaseUnit.key = baseName;
        BASE_UNITS[baseName] = _newBaseUnit;
        currentUnitSystem[baseName] = {
          unit: newUnit,
          prefix: PREFIXES.NONE['']
        };
        newUnit.base = BASE_UNITS[baseName];
      }
    }

    Unit.UNITS[name] = newUnit;

    for (var _i8 = 0; _i8 < aliases.length; _i8++) {
      var aliasName = aliases[_i8];
      var _alias = {};

      for (var _key6 in newUnit) {
        if ((0, _object.hasOwnProperty)(newUnit, _key6)) {
          _alias[_key6] = newUnit[_key6];
        }
      }

      _alias.name = aliasName;
      Unit.UNITS[aliasName] = _alias;
    } // delete the memoization cache, since adding a new unit to the array
    // invalidates all old results


    delete _findUnit.cache;
    return new Unit(null, name);
  };

  Unit.deleteUnit = function (name) {
    delete Unit.UNITS[name];
  }; // expose arrays with prefixes, dimensions, units, systems


  Unit.PREFIXES = PREFIXES;
  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
  Unit.BASE_UNITS = BASE_UNITS;
  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
  Unit.UNITS = UNITS;
  return Unit;
}, {
  isClass: true
});
exports.createUnitClass = createUnitClass;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/unit/function/createUnit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/unit/function/createUnit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createCreateUnit = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'createUnit';
var dependencies = ['typed', 'Unit'];
var createCreateUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Unit = _ref.Unit;

  /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples:
   *
   *     math.createUnit('foo')
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
   *     math.createUnit('mph', '1 mile/hour')
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
  return typed(name, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    'Object, Object': function ObjectObject(obj, options) {
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    Object: function Object(obj) {
      return Unit.createUnit(obj, {});
    },
    // Shortcut method for creating one unit.
    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, {});
    },
    // Without a definition, creates a base unit.
    string: function string(name) {
      var obj = {};
      obj[name] = {};
      return Unit.createUnit(obj, {});
    }
  });
});
exports.createCreateUnit = createCreateUnit;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/unit/function/splitUnit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/unit/function/splitUnit.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSplitUnit = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var name = 'splitUnit';
var dependencies = ['typed'];
var createSplitUnit = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed;

  /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */
  return typed(name, {
    'Unit, Array': function UnitArray(unit, parts) {
      return unit.splitUnit(parts);
    }
  });
});
exports.createSplitUnit = createSplitUnit;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/unit/function/unit.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/unit/function/unit.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createUnitFunction = void 0;

var _factory = __webpack_require__(/*! ../../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

var _collection = __webpack_require__(/*! ../../../utils/collection.js */ "./node_modules/mathjs/lib/cjs/utils/collection.js");

var name = 'unit';
var dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

var createUnitFunction = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {
  var typed = _ref.typed,
      Unit = _ref.Unit;

  /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
   *    const b = math.unit('23 kg')    // returns Unit 23 kg
   *    a.to('m')                       // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */
  return typed(name, {
    Unit: function Unit(x) {
      return x.clone();
    },
    string: function string(x) {
      if (Unit.isValuelessUnit(x)) {
        return new Unit(null, x); // a pure unit
      }

      return Unit.parse(x, {
        allowNoUnits: true
      }); // a unit with value, like '5cm'
    },
    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
      return new Unit(value, unit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return (0, _collection.deepMap)(x, this);
    }
  });
});
exports.createUnitFunction = createUnitFunction;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/type/unit/physicalConstants.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/type/unit/physicalConstants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createPlanckTemperature = exports.createPlanckCharge = exports.createPlanckTime = exports.createPlanckMass = exports.createPlanckLength = exports.createGravity = exports.createMolarMassC12 = exports.createMolarMass = exports.createWienDisplacement = exports.createStefanBoltzmann = exports.createSecondRadiation = exports.createSackurTetrode = exports.createMolarVolume = exports.createMolarPlanckConstant = exports.createGasConstant = exports.createLoschmidt = exports.createFirstRadiation = exports.createFaraday = exports.createBoltzmann = exports.createAvogadro = exports.createAtomicMass = exports.createEfimovFactor = exports.createWeakMixingAngle = exports.createThomsonCrossSection = exports.createRydberg = exports.createQuantumOfCirculation = exports.createNeutronMass = exports.createDeuteronMass = exports.createProtonMass = exports.createHartreeEnergy = exports.createFineStructure = exports.createFermiCoupling = exports.createElectronMass = exports.createClassicalElectronRadius = exports.createBohrRadius = exports.createJosephson = exports.createKlitzing = exports.createNuclearMagneton = exports.createMagneticFluxQuantum = exports.createInverseConductanceQuantum = exports.createConductanceQuantum = exports.createBohrMagneton = exports.createElementaryCharge = exports.createCoulomb = exports.createVacuumImpedance = exports.createElectricConstant = exports.createMagneticConstant = exports.createReducedPlanckConstant = exports.createPlanckConstant = exports.createGravitationConstant = exports.createSpeedOfLight = void 0;

var _factory = __webpack_require__(/*! ../../utils/factory.js */ "./node_modules/mathjs/lib/cjs/utils/factory.js");

// Source: https://en.wikipedia.org/wiki/Physical_constant
// Universal constants
var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');
exports.createSpeedOfLight = createSpeedOfLight;
var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
exports.createGravitationConstant = createGravitationConstant;
var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');
exports.createPlanckConstant = createPlanckConstant;
var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

exports.createReducedPlanckConstant = createReducedPlanckConstant;
var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
exports.createMagneticConstant = createMagneticConstant;
var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
exports.createElectricConstant = createElectricConstant;
var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');
exports.createVacuumImpedance = createVacuumImpedance;
var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
exports.createCoulomb = createCoulomb;
var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');
exports.createElementaryCharge = createElementaryCharge;
var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
exports.createBohrMagneton = createBohrMagneton;
var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
exports.createConductanceQuantum = createConductanceQuantum;
var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
exports.createInverseConductanceQuantum = createInverseConductanceQuantum;
var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
exports.createMagneticFluxQuantum = createMagneticFluxQuantum;
var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
exports.createNuclearMagneton = createNuclearMagneton;
var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');
exports.createKlitzing = createKlitzing;
var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed
// Atomic and nuclear constants

exports.createJosephson = createJosephson;
var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');
exports.createBohrRadius = createBohrRadius;
var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
exports.createClassicalElectronRadius = createClassicalElectronRadius;
var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');
exports.createElectronMass = createElectronMass;
var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
exports.createFermiCoupling = createFermiCoupling;
var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
exports.createFineStructure = createFineStructure;
var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
exports.createHartreeEnergy = createHartreeEnergy;
var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');
exports.createProtonMass = createProtonMass;
var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
exports.createDeuteronMass = createDeuteronMass;
var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');
exports.createNeutronMass = createNeutronMass;
var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
exports.createQuantumOfCirculation = createQuantumOfCirculation;
var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');
exports.createRydberg = createRydberg;
var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
exports.createThomsonCrossSection = createThomsonCrossSection;
var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
exports.createWeakMixingAngle = createWeakMixingAngle;
var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

exports.createEfimovFactor = createEfimovFactor;
var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');
exports.createAtomicMass = createAtomicMass;
var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');
exports.createAvogadro = createAvogadro;
var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
exports.createBoltzmann = createBoltzmann;
var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');
exports.createFaraday = createFaraday;
var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance

exports.createFirstRadiation = createFirstRadiation;
var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
exports.createLoschmidt = createLoschmidt;
var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
exports.createGasConstant = createGasConstant;
var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
exports.createMolarPlanckConstant = createMolarPlanckConstant;
var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
exports.createMolarVolume = createMolarVolume;
var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
exports.createSackurTetrode = createSackurTetrode;
var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');
exports.createSecondRadiation = createSecondRadiation;
var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
exports.createStefanBoltzmann = createStefanBoltzmann;
var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

exports.createWienDisplacement = createWienDisplacement;
var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
exports.createMolarMass = createMolarMass;
var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
exports.createMolarMassC12 = createMolarMassC12;
var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
// Natural units

exports.createGravity = createGravity;
var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');
exports.createPlanckLength = createPlanckLength;
var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');
exports.createPlanckMass = createPlanckMass;
var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');
exports.createPlanckTime = createPlanckTime;
var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');
exports.createPlanckCharge = createPlanckCharge;
var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
// a Unit with either a number value or a BigNumber value depending on the configuration

exports.createPlanckTemperature = createPlanckTemperature;

function unitFactory(name, valueStr, unitStr) {
  var dependencies = ['config', 'Unit', 'BigNumber'];
  return (0, _factory.factory)(name, dependencies, function (_ref) {
    var config = _ref.config,
        Unit = _ref.Unit,
        BigNumber = _ref.BigNumber;
    // Note that we can parse into number or BigNumber.
    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
    // Therefore we dont use Unit.parse()
    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
    var unit = new Unit(value, unitStr);
    unit.fixPrefix = true;
    return unit;
  });
} // helper function to create a factory function which creates a numeric constant,
// either a number or BigNumber depending on the configuration


function numberFactory(name, value) {
  var dependencies = ['config', 'BigNumber'];
  return (0, _factory.factory)(name, dependencies, function (_ref2) {
    var config = _ref2.config,
        BigNumber = _ref2.BigNumber;
    return config.number === 'BigNumber' ? new BigNumber(value) : value;
  });
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/array.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/array.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.arraySize = arraySize;
exports.validate = validate;
exports.validateIndex = validateIndex;
exports.resize = resize;
exports.reshape = reshape;
exports.processSizesWildcard = processSizesWildcard;
exports.squeeze = squeeze;
exports.unsqueeze = unsqueeze;
exports.flatten = flatten;
exports.map = map;
exports.forEach = forEach;
exports.filter = filter;
exports.filterRegExp = filterRegExp;
exports.join = join;
exports.identify = identify;
exports.generalize = generalize;
exports.getArrayDataType = getArrayDataType;
exports.last = last;
exports.initial = initial;
exports.contains = contains;

var _number = __webpack_require__(/*! ./number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _is = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _string = __webpack_require__(/*! ./string.js */ "./node_modules/mathjs/lib/cjs/utils/string.js");

var _DimensionError = __webpack_require__(/*! ../error/DimensionError.js */ "./node_modules/mathjs/lib/cjs/error/DimensionError.js");

var _IndexError = __webpack_require__(/*! ../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */
function arraySize(x) {
  var s = [];

  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }

  return s;
}
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */


function _validate(array, size, dim) {
  var i;
  var len = array.length;

  if (len !== size[dim]) {
    throw new _DimensionError.DimensionError(len, size[dim]);
  }

  if (dim < size.length - 1) {
    // recursively validate each child array
    var dimNext = dim + 1;

    for (i = 0; i < len; i++) {
      var child = array[i];

      if (!Array.isArray(child)) {
        throw new _DimensionError.DimensionError(size.length - 1, size.length, '<');
      }

      _validate(array[i], size, dimNext);
    }
  } else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new _DimensionError.DimensionError(size.length + 1, size.length, '>');
      }
    }
  }
}
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */


function validate(array, size) {
  var isScalar = size.length === 0;

  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new _DimensionError.DimensionError(array.length, 0);
    }
  } else {
    // array
    _validate(array, size, 0);
  }
}
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */


function validateIndex(index, length) {
  if (!(0, _is.isNumber)(index) || !(0, _number.isInteger)(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }

  if (index < 0 || typeof length === 'number' && index >= length) {
    throw new _IndexError.IndexError(index, length);
  }
}
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. Specify for example `null`,
 *                              to clearly see entries that are not explicitly
 *                              set.
 * @return {Array} array         The resized array
 */


function resize(array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?
  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }

  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  } // check whether size contains positive integers


  size.forEach(function (value) {
    if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');
    }
  }); // recursively resize the array

  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

  _resize(array, size, 0, _defaultValue);

  return array;
}
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */


function _resize(array, size, dim, defaultValue) {
  var i;
  var elem;
  var oldLen = array.length;
  var newLen = size[dim];
  var minLen = Math.min(oldLen, newLen); // apply new length

  array.length = newLen;

  if (dim < size.length - 1) {
    // non-last dimension
    var dimNext = dim + 1; // resize existing child arrays

    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];

      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension

        array[i] = elem;
      }

      _resize(elem, size, dimNext, defaultValue);
    } // create new child arrays


    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem; // resize new child array

      _resize(elem, size, dimNext, defaultValue);
    }
  } else {
    // last dimension
    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    } // fill new elements with the default value


    for (i = minLen; i < newLen; i++) {
      array[i] = defaultValue;
    }
  }
}
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */


function reshape(array, sizes) {
  var flatArray = flatten(array);
  var currentLength = flatArray.length;

  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }

  if (sizes.length === 0) {
    throw new _DimensionError.DimensionError(0, currentLength, '!=');
  }

  sizes = processSizesWildcard(sizes, currentLength);
  var newLength = product(sizes);

  if (currentLength !== newLength) {
    throw new _DimensionError.DimensionError(newLength, currentLength, '!=');
  }

  try {
    return _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof _DimensionError.DimensionError) {
      throw new _DimensionError.DimensionError(newLength, currentLength, '!=');
    }

    throw e;
  }
}
/**
 * Replaces the wildcard -1 in the sizes array.
 * @param {Array.<number>} sizes  List of sizes for each dimension. At most on wildcard.
 * @param {number} currentLength  Number of elements in the array.
 * @throws {Error}                If more than one wildcard or unable to replace it.
 * @returns {Array.<number>}      The sizes array with wildcard replaced.
 */


function processSizesWildcard(sizes, currentLength) {
  var newLength = product(sizes);
  var processedSizes = sizes.slice();
  var WILDCARD = -1;
  var wildCardIndex = sizes.indexOf(WILDCARD);
  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;

  if (isMoreThanOneWildcard) {
    throw new Error('More than one wildcard in sizes');
  }

  var hasWildcard = wildCardIndex >= 0;
  var canReplaceWildcard = currentLength % newLength === 0;

  if (hasWildcard) {
    if (canReplaceWildcard) {
      processedSizes[wildCardIndex] = -currentLength / newLength;
    } else {
      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);
    }
  }

  return processedSizes;
}
/**
 * Computes the product of all array elements.
 * @param {Array<number>} array Array of factors
 * @returns {number}            Product of all elements
 */


function product(array) {
  return array.reduce(function (prev, curr) {
    return prev * curr;
  }, 1);
}
/**
 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 */


function _reshape(array, sizes) {
  // testing if there are enough elements for the requested shape
  var tmpArray = array;
  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
    var size = sizes[sizeIndex];
    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

    var length = tmpArray.length / size;

    for (var i = 0; i < length; i++) {
      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
    } // set it as the new tmpArray for the next loop turn or for return


    tmpArray = tmpArray2;
  }

  return tmpArray;
}
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */


function squeeze(array, size) {
  var s = size || arraySize(array); // squeeze outer dimensions

  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  } // find the first dimension to be squeezed


  var dims = s.length;

  while (s[dims - 1] === 1) {
    dims--;
  } // squeeze inner dimensions


  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }

  return array;
}
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */


function _squeeze(array, dims, dim) {
  var i, ii;

  if (dim < dims) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  } else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }

  return array;
}
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 *
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 *
 * @param {Array} array
 * @param {number} dims       Desired number of dimensions of the array
 * @param {number} [outer]    Number of outer dimensions to be added
 * @param {Array} [size] Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */


function unsqueeze(array, dims, outer, size) {
  var s = size || arraySize(array); // unsqueeze outer dimensions

  if (outer) {
    for (var i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  } // unsqueeze inner dimensions


  array = _unsqueeze(array, dims, 0);

  while (s.length < dims) {
    s.push(1);
  }

  return array;
}
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */


function _unsqueeze(array, dims, dim) {
  var i, ii;

  if (Array.isArray(array)) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  } else {
    for (var d = dim; d < dims; d++) {
      array = [array];
    }
  }

  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */


function flatten(array) {
  if (!Array.isArray(array)) {
    // if not an array, return as is
    return array;
  }

  var flat = [];
  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback); // traverse through sub-arrays recursively
    } else {
      flat.push(value);
    }
  });
  return flat;
}
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */


function map(array, callback) {
  return Array.prototype.map.call(array, callback);
}
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */


function forEach(array, callback) {
  Array.prototype.forEach.call(array, callback);
}
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */


function filter(array, callback) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, callback);
}
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */


function filterRegExp(array, regexp) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, function (entry) {
    return regexp.test(entry);
  });
}
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */


function join(array, separator) {
  return Array.prototype.join.call(array, separator);
}
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array} a  An array
 * @return {Array} An array of objects containing the original value and its identifier
 */


function identify(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];
  var count = 0;
  b[0] = {
    value: a[0],
    identifier: 0
  };

  for (var i = 1; i < a.length; i++) {
    if (a[i] === a[i - 1]) {
      count++;
    } else {
      count = 0;
    }

    b.push({
      value: a[i],
      identifier: count
    });
  }

  return b;
}
/**
 * Remove the numeric identifier from the elements
 * @param {array} a  An array
 * @return {array} An array of values without identifiers
 */


function generalize(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];

  for (var i = 0; i < a.length; i++) {
    b.push(a[i].value);
  }

  return b;
}
/**
 * Check the datatype of a given object
 * This is a low level implementation that should only be used by
 * parent Matrix classes such as SparseMatrix or DenseMatrix
 * This method does not validate Array Matrix shape
 * @param {Array} array
 * @param {function} typeOf   Callback function to use to determine the type of a value
 * @return {string}
 */


function getArrayDataType(array, typeOf) {
  var type; // to hold type info

  var length = 0; // to hold length value to ensure it has consistent sizes

  for (var i = 0; i < array.length; i++) {
    var item = array[i];
    var isArray = Array.isArray(item); // Saving the target matrix row size

    if (i === 0 && isArray) {
      length = item.length;
    } // If the current item is an array but the length does not equal the targetVectorSize


    if (isArray && item.length !== length) {
      return undefined;
    }

    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
    : typeOf(item);

    if (type === undefined) {
      type = itemType; // first item
    } else if (type !== itemType) {
      return 'mixed';
    } else {// we're good, everything has the same type so far
    }
  }

  return type;
}
/**
 * Return the last item from an array
 * @param array
 * @returns {*}
 */


function last(array) {
  return array[array.length - 1];
}
/**
 * Get all but the last element of array.
 */


function initial(array) {
  return array.slice(0, array.length - 1);
}
/**
 * Test whether an array or string contains an item
 * @param {Array | string} array
 * @param {*} item
 * @return {boolean}
 */


function contains(array, item) {
  return array.indexOf(item) !== -1;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js":
/*!****************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/bignumber/bitwise.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bitAndBigNumber = bitAndBigNumber;
exports.bitNotBigNumber = bitNotBigNumber;
exports.bitOrBigNumber = bitOrBigNumber;
exports.bitwise = bitwise;
exports.bitXor = bitXor;
exports.leftShiftBigNumber = leftShiftBigNumber;
exports.rightArithShiftBigNumber = rightArithShiftBigNumber;

/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
function bitAndBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitAnd');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.eq(-1) || x.eq(y)) {
    return x;
  }

  if (y.isZero() || x.eq(-1)) {
    return y;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      if (x.isNegative() === y.isNegative()) {
        return x;
      }

      return new BigNumber(0);
    }

    if (!x.isFinite()) {
      if (y.isNegative()) {
        return x;
      }

      if (x.isNegative()) {
        return new BigNumber(0);
      }

      return y;
    }

    if (!y.isFinite()) {
      if (x.isNegative()) {
        return y;
      }

      if (y.isNegative()) {
        return new BigNumber(0);
      }

      return x;
    }
  }

  return bitwise(x, y, function (a, b) {
    return a & b;
  });
}
/**
 * Bitwise not
 * @param {BigNumber} x
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */


function bitNotBigNumber(x) {
  if (x.isFinite() && !x.isInteger()) {
    throw new Error('Integer expected in function bitNot');
  }

  var BigNumber = x.constructor;
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });
  var result = x.plus(new BigNumber(1));
  result.s = -result.s || null;
  BigNumber.config({
    precision: prevPrec
  });
  return result;
}
/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */


function bitOrBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitOr');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  var negOne = new BigNumber(-1);

  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
    return y;
  }

  if (y.isZero() || x.eq(negOne)) {
    return x;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
      return negOne;
    }

    if (x.isNegative() && y.isNegative()) {
      return x.isFinite() ? x : y;
    }

    return x.isFinite() ? y : x;
  }

  return bitwise(x, y, function (a, b) {
    return a | b;
  });
}
/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */


function bitwise(x, y, func) {
  var BigNumber = x.constructor;
  var xBits, yBits;
  var xSign = +(x.s < 0);
  var ySign = +(y.s < 0);

  if (xSign) {
    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));

    for (var i = 0; i < xBits.length; ++i) {
      xBits[i] ^= 1;
    }
  } else {
    xBits = decCoefficientToBinaryString(x);
  }

  if (ySign) {
    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));

    for (var _i = 0; _i < yBits.length; ++_i) {
      yBits[_i] ^= 1;
    }
  } else {
    yBits = decCoefficientToBinaryString(y);
  }

  var minBits, maxBits, minSign;

  if (xBits.length <= yBits.length) {
    minBits = xBits;
    maxBits = yBits;
    minSign = xSign;
  } else {
    minBits = yBits;
    maxBits = xBits;
    minSign = ySign;
  }

  var shortLen = minBits.length;
  var longLen = maxBits.length;
  var expFuncVal = func(xSign, ySign) ^ 1;
  var outVal = new BigNumber(expFuncVal ^ 1);
  var twoPower = new BigNumber(1);
  var two = new BigNumber(2);
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });

  while (shortLen > 0) {
    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  while (longLen > 0) {
    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  BigNumber.config({
    precision: prevPrec
  });

  if (expFuncVal === 0) {
    outVal.s = -outVal.s;
  }

  return outVal;
}
/* Extracted from decimal.js, and edited to specialize. */


function decCoefficientToBinaryString(x) {
  // Convert to string
  var a = x.d; // array with digits

  var r = a[0] + '';

  for (var i = 1; i < a.length; ++i) {
    var s = a[i] + '';

    for (var z = 7 - s.length; z--;) {
      s = '0' + s;
    }

    r += s;
  }

  var j = r.length;

  while (r.charAt(j) === '0') {
    j--;
  }

  var xe = x.e;
  var str = r.slice(0, j + 1 || 1);
  var strL = str.length;

  if (xe > 0) {
    if (++xe > strL) {
      // Append zeros.
      xe -= strL;

      while (xe--) {
        str += '0';
      }
    } else if (xe < strL) {
      str = str.slice(0, xe) + '.' + str.slice(xe);
    }
  } // Convert from base 10 (decimal) to base 2


  var arr = [0];

  for (var _i2 = 0; _i2 < str.length;) {
    var arrL = arr.length;

    while (arrL--) {
      arr[arrL] *= 10;
    }

    arr[0] += parseInt(str.charAt(_i2++)); // convert to int

    for (var _j = 0; _j < arr.length; ++_j) {
      if (arr[_j] > 1) {
        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
          arr[_j + 1] = 0;
        }

        arr[_j + 1] += arr[_j] >> 1;
        arr[_j] &= 1;
      }
    }
  }

  return arr.reverse();
}
/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */


function bitXor(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitXor');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero()) {
    return y;
  }

  if (y.isZero()) {
    return x;
  }

  if (x.eq(y)) {
    return new BigNumber(0);
  }

  var negOne = new BigNumber(-1);

  if (x.eq(negOne)) {
    return bitNotBigNumber(y);
  }

  if (y.eq(negOne)) {
    return bitNotBigNumber(x);
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      return negOne;
    }

    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
  }

  return bitwise(x, y, function (a, b) {
    return a ^ b;
  });
}
/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */


function leftShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function leftShift');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!x.isFinite() && !y.isFinite()) {
    return new BigNumber(NaN);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.times(Math.pow(2, y.toNumber()) + '');
  }

  return x.times(new BigNumber(2).pow(y));
}
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */


function rightArithShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function rightArithShift');
  }

  var BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!y.isFinite()) {
    if (x.isNegative()) {
      return new BigNumber(-1);
    }

    if (!x.isFinite()) {
      return new BigNumber(NaN);
    }

    return new BigNumber(0);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.div(Math.pow(2, y.toNumber()) + '').floor();
  }

  return x.div(new BigNumber(2).pow(y)).floor();
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/bignumber/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/bignumber/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createBigNumberTau = exports.createBigNumberPi = exports.createBigNumberPhi = exports.createBigNumberE = void 0;

var _function = __webpack_require__(/*! ../function.js */ "./node_modules/mathjs/lib/cjs/utils/function.js");

/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */
var createBigNumberE = (0, _function.memoize)(function (BigNumber) {
  return new BigNumber(1).exp();
}, {
  hasher: hasher
});
/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */

exports.createBigNumberE = createBigNumberE;
var createBigNumberPhi = (0, _function.memoize)(function (BigNumber) {
  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, {
  hasher: hasher
});
/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */

exports.createBigNumberPhi = createBigNumberPhi;
var createBigNumberPi = (0, _function.memoize)(function (BigNumber) {
  return BigNumber.acos(-1);
}, {
  hasher: hasher
});
/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */

exports.createBigNumberPi = createBigNumberPi;
var createBigNumberTau = (0, _function.memoize)(function (BigNumber) {
  return createBigNumberPi(BigNumber).times(2);
}, {
  hasher: hasher
});
/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */

exports.createBigNumberTau = createBigNumberTau;

function hasher(args) {
  return args[0].precision;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/bignumber/formatter.js":
/*!******************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/bignumber/formatter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.format = format;
exports.toEngineering = toEngineering;
exports.toExponential = toExponential;
exports.toFixed = toFixed;

var _number = __webpack_require__(/*! ../number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

/**
 * Formats a BigNumber in a given base
 * @param {BigNumber} n
 * @param {number} base
 * @param {number} size
 * @returns {string}
 */
function formatBigNumberToBase(n, base, size) {
  var BigNumberCtor = n.constructor;
  var big2 = new BigNumberCtor(2);
  var suffix = '';

  if (size) {
    if (size < 1) {
      throw new Error('size must be in greater than 0');
    }

    if (!(0, _number.isInteger)(size)) {
      throw new Error('size must be an integer');
    }

    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {
      throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
    }

    if (!n.isInteger()) {
      throw new Error('Value must be an integer');
    }

    if (n.lessThan(0)) {
      n = n.add(big2.pow(size));
    }

    suffix = "i".concat(size);
  }

  switch (base) {
    case 2:
      return "".concat(n.toBinary()).concat(suffix);

    case 8:
      return "".concat(n.toOctal()).concat(suffix);

    case 16:
      return "".concat(n.toHexadecimal()).concat(suffix);

    default:
      throw new Error("Base ".concat(base, " not supported "));
  }
}
/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                         'bin', 'oct, or
 *                         'hex'            Format the number using binary, octal,
 *                                          or hexadecimal notation.
 *                                          For example '0b1101' and '0x10fe'.
 *                     {number} wordSize    The word size in bits to use for formatting
 *                                          in binary, octal, or hexadecimal notation.
 *                                          To be used only with 'bin', 'oct', or 'hex'
 *                                          values for 'notation' option. When this option
 *                                          is defined the value is formatted as a signed
 *                                          twos complement integer of the given word size
 *                                          and the size suffix is appended to the output.
 *                                          For example
 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
 *                                          Default value is undefined.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */


function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
  } // default values for options


  var notation = 'auto';
  var precision;
  var wordSize;

  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (typeof options === 'number') {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }

    if (options.wordSize) {
      wordSize = options.wordSize;

      if (typeof wordSize !== 'number') {
        throw new Error('Option "wordSize" must be a number');
      }
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'bin':
      return formatBigNumberToBase(value, 2, wordSize);

    case 'oct':
      return formatBigNumberToBase(value, 8, wordSize);

    case 'hex':
      return formatBigNumberToBase(value, 16, wordSize);

    case 'auto':
      {
        // determine lower and upper bound for exponential notation.
        // TODO: implement support for upper and lower to be BigNumbers themselves
        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

        if (value.isZero()) return '0'; // determine whether or not to output exponential notation

        var str;
        var rounded = value.toSignificantDigits(precision);
        var exp = rounded.e;

        if (exp >= lowerExp && exp < upperExp) {
          // normal number notation
          str = rounded.toFixed();
        } else {
          // exponential notation
          str = toExponential(value, precision);
        } // remove trailing zeros after the decimal point


        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
          var digits = arguments[2];
          var e = arguments[4];
          return digits !== '.' ? digits + e : e;
        });
      }

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
/**
 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {BigNumber | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */


function toEngineering(value, precision) {
  // find nearest lower multiple of 3 for exponent
  var e = value.e;
  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

  var valueWithoutExp = value.mul(Math.pow(10, -newExp));
  var valueStr = valueWithoutExp.toPrecision(precision);

  if (valueStr.indexOf('e') !== -1) {
    valueStr = valueWithoutExp.toString();
  }

  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */


function toExponential(value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  } else {
    return value.toExponential();
  }
}
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=undefined] Optional number of decimals after the
 *                                       decimal point. Undefined by default.
 */


function toFixed(value, precision) {
  return value.toFixed(precision);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js":
/*!********************************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/bignumber/nearlyEqual.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.nearlyEqual = nearlyEqual;

/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x.eq(y);
  } // use "==" operator, handles infinities


  if (x.eq(y)) {
    return true;
  } // NaN


  if (x.isNaN() || y.isNaN()) {
    return false;
  } // at this point x and y should be finite


  if (x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = x.minus(y).abs();

    if (diff.isZero()) {
      return true;
    } else {
      // use relative error
      var max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/collection.js":
/*!*********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/collection.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.containsCollections = containsCollections;
exports.deepForEach = deepForEach;
exports.deepMap = deepMap;
exports.reduce = reduce;
exports.scatter = scatter;

var _is = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _IndexError = __webpack_require__(/*! ../error/IndexError.js */ "./node_modules/mathjs/lib/cjs/error/IndexError.js");

var _array = __webpack_require__(/*! ./array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */
function containsCollections(array) {
  for (var i = 0; i < array.length; i++) {
    if ((0, _is.isCollection)(array[i])) {
      return true;
    }
  }

  return false;
}
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */


function deepForEach(array, callback) {
  if ((0, _is.isMatrix)(array)) {
    array = array.valueOf();
  }

  for (var i = 0, ii = array.length; i < ii; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      deepForEach(value, callback);
    } else {
      callback(value);
    }
  }
}
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */


function deepMap(array, callback, skipZeros) {
  if (array && typeof array.map === 'function') {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback, skipZeros);
    });
  } else {
    return callback(array);
  }
}
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */


function reduce(mat, dim, callback) {
  var size = Array.isArray(mat) ? (0, _array.arraySize)(mat) : mat.size();

  if (dim < 0 || dim >= size.length) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new _IndexError.IndexError(dim, size.length);
  }

  if ((0, _is.isMatrix)(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  } else {
    return _reduce(mat, dim, callback);
  }
}
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */


function _reduce(mat, dim, callback) {
  var i, ret, val, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      val = mat[0];

      for (i = 1; i < mat.length; i++) {
        val = callback(val, mat[i]);
      }

      return val;
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _reduce(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _reduce(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
} // TODO: document function scatter


function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr; // vars

  var k, k0, k1, i; // check we need to process values (pattern matrix)

  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i); // x(i) = A, check we need to call function this time

        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

          u[i] = mark;
        } else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      } else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

        u[i] = mark;
      }
    }
  } else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i);
      } else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/complex.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/complex.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.complexEquals = complexEquals;

var _number = __webpack_require__(/*! ./number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

/**
 * Test whether two complex values are equal provided a given epsilon.
 * Does not use or change the global Complex.EPSILON setting
 * @param {Complex} x
 * @param {Complex} y
 * @param {number} epsilon
 * @returns {boolean}
 */
function complexEquals(x, y, epsilon) {
  return (0, _number.nearlyEqual)(x.re, y.re, epsilon) && (0, _number.nearlyEqual)(x.im, y.im, epsilon);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/customs.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/customs.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getSafeProperty = getSafeProperty;
exports.setSafeProperty = setSafeProperty;
exports.isSafeProperty = isSafeProperty;
exports.hasSafeProperty = hasSafeProperty;
exports.getSafeProperties = getSafeProperties;
exports.validateSafeMethod = validateSafeMethod;
exports.isSafeMethod = isSafeMethod;
exports.isPlainObject = isPlainObject;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _object = __webpack_require__(/*! ./object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */
function getSafeProperty(object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }

  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?


function setSafeProperty(object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    object[prop] = value;
    return value;
  }

  throw new Error('No access to property "' + prop + '"');
}

function getSafeProperties(object) {
  return Object.keys(object).filter(function (prop) {
    return (0, _object.hasOwnProperty)(object, prop);
  });
}

function hasSafeProperty(object, prop) {
  return prop in object;
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */


function isSafeProperty(object, prop) {
  if (!object || (0, _typeof2["default"])(object) !== 'object') {
    return false;
  } // SAFE: whitelisted
  // e.g length


  if ((0, _object.hasOwnProperty)(safeNativeProperties, prop)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?


function validateSafeMethod(object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */


function isSafeMethod(object, method) {
  if (object === null || object === undefined || typeof object[method] !== 'function') {
    return false;
  } // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.


  if ((0, _object.hasOwnProperty)(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
    return false;
  } // SAFE: whitelisted
  // e.g toString


  if ((0, _object.hasOwnProperty)(safeNativeMethods, method)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}

function isPlainObject(object) {
  return (0, _typeof2["default"])(object) === 'object' && object && object.constructor === Object;
}

var safeNativeProperties = {
  length: true,
  name: true
};
var safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/emitter.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/emitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mixin = mixin;

var _tinyEmitter = _interopRequireDefault(__webpack_require__(/*! tiny-emitter */ "./node_modules/tiny-emitter/index.js"));

/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */
function mixin(obj) {
  // create event emitter
  var emitter = new _tinyEmitter["default"](); // bind methods to obj (we don't want to expose the emitter.e Array...)

  obj.on = emitter.on.bind(emitter);
  obj.off = emitter.off.bind(emitter);
  obj.once = emitter.once.bind(emitter);
  obj.emit = emitter.emit.bind(emitter);
  return obj;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/factory.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/factory.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.factory = factory;
exports.sortFactories = sortFactories;
exports.create = create;
exports.isFactory = isFactory;
exports.assertDependencies = assertDependencies;
exports.isOptionalDependency = isOptionalDependency;
exports.stripOptionalNotation = stripOptionalNotation;

var _array = __webpack_require__(/*! ./array.js */ "./node_modules/mathjs/lib/cjs/utils/array.js");

var _object = __webpack_require__(/*! ./object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

/**
 * Create a factory function, which can be used to inject dependencies.
 *
 * The created functions are memoized, a consecutive call of the factory
 * with the exact same inputs will return the same function instance.
 * The memoized cache is exposed on `factory.cache` and can be cleared
 * if needed.
 *
 * Example:
 *
 *     const name = 'log'
 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
 *
 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
 *       // ... create the function log here and return it
 *     }
 *
 * @param {string} name           Name of the function to be created
 * @param {string[]} dependencies The names of all required dependencies
 * @param {function} create       Callback function called with an object with all dependencies
 * @param {Object} [meta]         Optional object with meta information that will be attached
 *                                to the created factory function as property `meta`.
 * @returns {function}
 */
function factory(name, dependencies, create, meta) {
  function assertAndCreate(scope) {
    // we only pass the requested dependencies to the factory function
    // to prevent functions to rely on dependencies that are not explicitly
    // requested.
    var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
    assertDependencies(name, dependencies, scope);
    return create(deps);
  }

  assertAndCreate.isFactory = true;
  assertAndCreate.fn = name;
  assertAndCreate.dependencies = dependencies.slice().sort();

  if (meta) {
    assertAndCreate.meta = meta;
  }

  return assertAndCreate;
}
/**
 * Sort all factories such that when loading in order, the dependencies are resolved.
 *
 * @param {Array} factories
 * @returns {Array} Returns a new array with the sorted factories.
 */


function sortFactories(factories) {
  var factoriesByName = {};
  factories.forEach(function (factory) {
    factoriesByName[factory.fn] = factory;
  });

  function containsDependency(factory, dependency) {
    // TODO: detect circular references
    if (isFactory(factory)) {
      if ((0, _array.contains)(factory.dependencies, dependency.fn || dependency.name)) {
        return true;
      }

      if (factory.dependencies.some(function (d) {
        return containsDependency(factoriesByName[d], dependency);
      })) {
        return true;
      }
    }

    return false;
  }

  var sorted = [];

  function addFactory(factory) {
    var index = 0;

    while (index < sorted.length && !containsDependency(sorted[index], factory)) {
      index++;
    }

    sorted.splice(index, 0, factory);
  } // sort regular factory functions


  factories.filter(isFactory).forEach(addFactory); // sort legacy factory functions AFTER the regular factory functions

  factories.filter(function (factory) {
    return !isFactory(factory);
  }).forEach(addFactory);
  return sorted;
} // TODO: comment or cleanup if unused in the end


function create(factories) {
  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  sortFactories(factories).forEach(function (factory) {
    return factory(scope);
  });
  return scope;
}
/**
 * Test whether an object is a factory. This is the case when it has
 * properties name, dependencies, and a function create.
 * @param {*} obj
 * @returns {boolean}
 */


function isFactory(obj) {
  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
}
/**
 * Assert that all dependencies of a list with dependencies are available in the provided scope.
 *
 * Will throw an exception when there are dependencies missing.
 *
 * @param {string} name   Name for the function to be created. Used to generate a useful error message
 * @param {string[]} dependencies
 * @param {Object} scope
 */


function assertDependencies(name, dependencies, scope) {
  var allDefined = dependencies.filter(function (dependency) {
    return !isOptionalDependency(dependency);
  }) // filter optionals
  .every(function (dependency) {
    return scope[dependency] !== undefined;
  });

  if (!allDefined) {
    var missingDependencies = dependencies.filter(function (dependency) {
      return scope[dependency] === undefined;
    }); // TODO: create a custom error class for this, a MathjsError or something like that

    throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(function (d) {
      return "\"".concat(d, "\"");
    }).join(', '), "."));
  }
}

function isOptionalDependency(dependency) {
  return dependency && dependency[0] === '?';
}

function stripOptionalNotation(dependency) {
  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/function.js":
/*!*******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/function.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.memoize = memoize;
exports.memoizeCompare = memoizeCompare;
exports.maxArgumentCount = maxArgumentCount;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _lruQueue = __webpack_require__(/*! ./lruQueue.js */ "./node_modules/mathjs/lib/cjs/utils/lruQueue.js");

// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {Object} [options]
 * @param {function(args: Array): string} [options.hasher]
 *    A custom hash builder. Is JSON.stringify by default.
 * @param {number | undefined} [options.limit]
 *    Maximum number of values that may be cached. Undefined indicates
 *    unlimited (default)
 * @return {function}                       Returns the memoized function
 */
function memoize(fn) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      hasher = _ref.hasher,
      limit = _ref.limit;

  limit = limit == null ? Number.POSITIVE_INFINITY : limit;
  hasher = hasher == null ? JSON.stringify : hasher;
  return function memoize() {
    if ((0, _typeof2["default"])(memoize.cache) !== 'object') {
      memoize.cache = {
        values: new Map(),
        lru: (0, _lruQueue.lruQueue)(limit || Number.POSITIVE_INFINITY)
      };
    }

    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    var hash = hasher(args);

    if (memoize.cache.values.has(hash)) {
      memoize.cache.lru.hit(hash);
      return memoize.cache.values.get(hash);
    }

    var newVal = fn.apply(fn, args);
    memoize.cache.values.set(hash, newVal);
    memoize.cache.values["delete"](memoize.cache.lru.hit(hash));
    return newVal;
  };
}
/**
 * Memoize a given function by caching all results and the arguments,
 * and comparing against the arguments of previous results before
 * executing again.
 * This is less performant than `memoize` which calculates a hash,
 * which is very fast to compare. Use `memoizeCompare` only when it is
 * not possible to create a unique serializable hash from the function
 * arguments.
 * The isEqual function must compare two sets of arguments
 * and return true when equal (can be a deep equality check for example).
 * @param {function} fn
 * @param {function(a: *, b: *) : boolean} isEqual
 * @returns {function}
 */


function memoizeCompare(fn, isEqual) {
  var memoize = function memoize() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    for (var c = 0; c < memoize.cache.length; c++) {
      var cached = memoize.cache[c];

      if (isEqual(args, cached.args)) {
        // TODO: move this cache entry to the top so recently used entries move up?
        return cached.res;
      }
    }

    var res = fn.apply(fn, args);
    memoize.cache.unshift({
      args: args,
      res: res
    });
    return res;
  };

  memoize.cache = [];
  return memoize;
}
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */


function maxArgumentCount(fn) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    var count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/is.js":
/*!*************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/is.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNumber = isNumber;
exports.isBigNumber = isBigNumber;
exports.isComplex = isComplex;
exports.isFraction = isFraction;
exports.isUnit = isUnit;
exports.isString = isString;
exports.isMatrix = isMatrix;
exports.isCollection = isCollection;
exports.isDenseMatrix = isDenseMatrix;
exports.isSparseMatrix = isSparseMatrix;
exports.isRange = isRange;
exports.isIndex = isIndex;
exports.isBoolean = isBoolean;
exports.isResultSet = isResultSet;
exports.isHelp = isHelp;
exports.isFunction = isFunction;
exports.isDate = isDate;
exports.isRegExp = isRegExp;
exports.isObject = isObject;
exports.isNull = isNull;
exports.isUndefined = isUndefined;
exports.isAccessorNode = isAccessorNode;
exports.isArrayNode = isArrayNode;
exports.isAssignmentNode = isAssignmentNode;
exports.isBlockNode = isBlockNode;
exports.isConditionalNode = isConditionalNode;
exports.isConstantNode = isConstantNode;
exports.isFunctionAssignmentNode = isFunctionAssignmentNode;
exports.isFunctionNode = isFunctionNode;
exports.isIndexNode = isIndexNode;
exports.isNode = isNode;
exports.isObjectNode = isObjectNode;
exports.isOperatorNode = isOperatorNode;
exports.isParenthesisNode = isParenthesisNode;
exports.isRangeNode = isRangeNode;
exports.isSymbolNode = isSymbolNode;
exports.isChain = isChain;
exports.typeOf = typeOf;
exports.isArray = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

// type checks for all known types
//
// note that:
//
// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
//   instanceof cannot be used because that would not allow to pass data from
//   one instance of math.js to another since each has it's own instance of Unit.
// - check the `isUnit` property via the constructor, so there will be no
//   matches for "fake" instances like plain objects with a property `isUnit`.
//   That is important for security reasons.
// - It must not be possible to override the type checks used internally,
//   for security reasons, so these functions are not exposed in the expression
//   parser.
function isNumber(x) {
  return typeof x === 'number';
}

function isBigNumber(x) {
  if (!x || (0, _typeof2["default"])(x) !== 'object' || typeof x.constructor !== 'function') {
    return false;
  }

  if (x.isBigNumber === true && (0, _typeof2["default"])(x.constructor.prototype) === 'object' && x.constructor.prototype.isBigNumber === true) {
    return true;
  }

  if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {
    return true;
  }

  return false;
}

function isComplex(x) {
  return x && (0, _typeof2["default"])(x) === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
}

function isFraction(x) {
  return x && (0, _typeof2["default"])(x) === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
}

function isUnit(x) {
  return x && x.constructor.prototype.isUnit === true || false;
}

function isString(x) {
  return typeof x === 'string';
}

var isArray = Array.isArray;
exports.isArray = isArray;

function isMatrix(x) {
  return x && x.constructor.prototype.isMatrix === true || false;
}
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */


function isCollection(x) {
  return Array.isArray(x) || isMatrix(x);
}

function isDenseMatrix(x) {
  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
}

function isSparseMatrix(x) {
  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
}

function isRange(x) {
  return x && x.constructor.prototype.isRange === true || false;
}

function isIndex(x) {
  return x && x.constructor.prototype.isIndex === true || false;
}

function isBoolean(x) {
  return typeof x === 'boolean';
}

function isResultSet(x) {
  return x && x.constructor.prototype.isResultSet === true || false;
}

function isHelp(x) {
  return x && x.constructor.prototype.isHelp === true || false;
}

function isFunction(x) {
  return typeof x === 'function';
}

function isDate(x) {
  return x instanceof Date;
}

function isRegExp(x) {
  return x instanceof RegExp;
}

function isObject(x) {
  return !!(x && (0, _typeof2["default"])(x) === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
}

function isNull(x) {
  return x === null;
}

function isUndefined(x) {
  return x === undefined;
}

function isAccessorNode(x) {
  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
}

function isArrayNode(x) {
  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
}

function isAssignmentNode(x) {
  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}

function isBlockNode(x) {
  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
}

function isConditionalNode(x) {
  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
}

function isConstantNode(x) {
  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
}

function isFunctionAssignmentNode(x) {
  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}

function isFunctionNode(x) {
  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
}

function isIndexNode(x) {
  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
}

function isNode(x) {
  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
}

function isObjectNode(x) {
  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
}

function isOperatorNode(x) {
  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
}

function isParenthesisNode(x) {
  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
}

function isRangeNode(x) {
  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
}

function isSymbolNode(x) {
  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
}

function isChain(x) {
  return x && x.constructor.prototype.isChain === true || false;
}

function typeOf(x) {
  var t = (0, _typeof2["default"])(x);

  if (t === 'object') {
    // JavaScript types
    if (x === null) return 'null';
    if (Array.isArray(x)) return 'Array';
    if (x instanceof Date) return 'Date';
    if (x instanceof RegExp) return 'RegExp'; // math.js types

    if (isBigNumber(x)) return 'BigNumber';
    if (isComplex(x)) return 'Complex';
    if (isFraction(x)) return 'Fraction';
    if (isMatrix(x)) return 'Matrix';
    if (isUnit(x)) return 'Unit';
    if (isIndex(x)) return 'Index';
    if (isRange(x)) return 'Range';
    if (isResultSet(x)) return 'ResultSet';
    if (isNode(x)) return x.type;
    if (isChain(x)) return 'Chain';
    if (isHelp(x)) return 'Help';
    return 'Object';
  }

  if (t === 'function') return 'Function';
  return t; // can be 'string', 'number', 'boolean', ...
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/latex.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/latex.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.escapeLatex = escapeLatex;
exports.toSymbol = toSymbol;
exports.defaultTemplate = exports.latexFunctions = exports.latexOperators = exports.latexSymbols = void 0;

var _escapeLatex = _interopRequireDefault(__webpack_require__(/*! escape-latex */ "./node_modules/escape-latex/dist/index.js"));

var _object = __webpack_require__(/*! ./object.js */ "./node_modules/mathjs/lib/cjs/utils/object.js");

/* eslint no-template-curly-in-string: "off" */
var latexSymbols = {
  // GREEK LETTERS
  Alpha: 'A',
  alpha: '\\alpha',
  Beta: 'B',
  beta: '\\beta',
  Gamma: '\\Gamma',
  gamma: '\\gamma',
  Delta: '\\Delta',
  delta: '\\delta',
  Epsilon: 'E',
  epsilon: '\\epsilon',
  varepsilon: '\\varepsilon',
  Zeta: 'Z',
  zeta: '\\zeta',
  Eta: 'H',
  eta: '\\eta',
  Theta: '\\Theta',
  theta: '\\theta',
  vartheta: '\\vartheta',
  Iota: 'I',
  iota: '\\iota',
  Kappa: 'K',
  kappa: '\\kappa',
  varkappa: '\\varkappa',
  Lambda: '\\Lambda',
  lambda: '\\lambda',
  Mu: 'M',
  mu: '\\mu',
  Nu: 'N',
  nu: '\\nu',
  Xi: '\\Xi',
  xi: '\\xi',
  Omicron: 'O',
  omicron: 'o',
  Pi: '\\Pi',
  pi: '\\pi',
  varpi: '\\varpi',
  Rho: 'P',
  rho: '\\rho',
  varrho: '\\varrho',
  Sigma: '\\Sigma',
  sigma: '\\sigma',
  varsigma: '\\varsigma',
  Tau: 'T',
  tau: '\\tau',
  Upsilon: "\\Upsilon",
  upsilon: "\\upsilon",
  Phi: '\\Phi',
  phi: '\\phi',
  varphi: '\\varphi',
  Chi: 'X',
  chi: '\\chi',
  Psi: '\\Psi',
  psi: '\\psi',
  Omega: '\\Omega',
  omega: '\\omega',
  // logic
  "true": '\\mathrm{True}',
  "false": '\\mathrm{False}',
  // other
  i: 'i',
  // TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  undefined: '\\mathbf{?}'
};
exports.latexSymbols = latexSymbols;
var latexOperators = {
  transpose: '^\\top',
  ctranspose: '^H',
  factorial: '!',
  pow: '^',
  dotPow: '.^\\wedge',
  // TODO find ideal solution
  unaryPlus: '+',
  unaryMinus: '-',
  bitNot: '\\~',
  // TODO find ideal solution
  not: '\\neg',
  multiply: '\\cdot',
  divide: '\\frac',
  // TODO how to handle that properly?
  dotMultiply: '.\\cdot',
  // TODO find ideal solution
  dotDivide: '.:',
  // TODO find ideal solution
  mod: '\\mod',
  add: '+',
  subtract: '-',
  to: '\\rightarrow',
  leftShift: '<<',
  rightArithShift: '>>',
  rightLogShift: '>>>',
  equal: '=',
  unequal: '\\neq',
  smaller: '<',
  larger: '>',
  smallerEq: '\\leq',
  largerEq: '\\geq',
  bitAnd: '\\&',
  bitXor: "\\underline{|}",
  bitOr: '|',
  and: '\\wedge',
  xor: '\\veebar',
  or: '\\vee'
};
exports.latexOperators = latexOperators;
var latexFunctions = {
  // arithmetic
  abs: {
    1: '\\left|${args[0]}\\right|'
  },
  add: {
    2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
  },
  cbrt: {
    1: '\\sqrt[3]{${args[0]}}'
  },
  ceil: {
    1: '\\left\\lceil${args[0]}\\right\\rceil'
  },
  cube: {
    1: '\\left(${args[0]}\\right)^3'
  },
  divide: {
    2: '\\frac{${args[0]}}{${args[1]}}'
  },
  dotDivide: {
    2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
  },
  dotMultiply: {
    2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
  },
  dotPow: {
    2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
  },
  exp: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
  fix: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  floor: {
    1: '\\left\\lfloor${args[0]}\\right\\rfloor'
  },
  gcd: '\\gcd\\left(${args}\\right)',
  hypot: '\\hypot\\left(${args}\\right)',
  log: {
    1: '\\ln\\left(${args[0]}\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
  },
  log10: {
    1: '\\log_{10}\\left(${args[0]}\\right)'
  },
  log1p: {
    1: '\\ln\\left(${args[0]}+1\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
  },
  log2: '\\log_{2}\\left(${args[0]}\\right)',
  mod: {
    2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
  },
  multiply: {
    2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
  },
  norm: {
    1: '\\left\\|${args[0]}\\right\\|',
    2: undefined // use default template

  },
  nthRoot: {
    2: '\\sqrt[${args[1]}]{${args[0]}}'
  },
  nthRoots: {
    2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
  },
  pow: {
    2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
  },
  round: {
    1: '\\left\\lfloor${args[0]}\\right\\rceil',
    2: undefined // use default template

  },
  sign: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  sqrt: {
    1: '\\sqrt{${args[0]}}'
  },
  square: {
    1: '\\left(${args[0]}\\right)^2'
  },
  subtract: {
    2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
  },
  unaryMinus: {
    1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
  },
  unaryPlus: {
    1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
  },
  // bitwise
  bitAnd: {
    2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
  },
  bitNot: {
    1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
  },
  bitOr: {
    2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
  },
  bitXor: {
    2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
  },
  leftShift: {
    2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
  },
  rightArithShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
  },
  rightLogShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
  },
  // combinatorics
  bellNumbers: {
    1: '\\mathrm{B}_{${args[0]}}'
  },
  catalan: {
    1: '\\mathrm{C}_{${args[0]}}'
  },
  stirlingS2: {
    2: '\\mathrm{S}\\left(${args}\\right)'
  },
  // complex
  arg: {
    1: '\\arg\\left(${args[0]}\\right)'
  },
  conj: {
    1: '\\left(${args[0]}\\right)^*'
  },
  im: {
    1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  re: {
    1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  // logical
  and: {
    2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
  },
  not: {
    1: latexOperators.not + '\\left(${args[0]}\\right)'
  },
  or: {
    2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
  },
  xor: {
    2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
  },
  // matrix
  cross: {
    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
  },
  ctranspose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
  },
  det: {
    1: '\\det\\left(${args[0]}\\right)'
  },
  dot: {
    2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
  },
  expm: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  inv: {
    1: '\\left(${args[0]}\\right)^{-1}'
  },
  sqrtm: {
    1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
  },
  trace: {
    1: '\\mathrm{tr}\\left(${args[0]}\\right)'
  },
  transpose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
  },
  // probability
  combinations: {
    2: '\\binom{${args[0]}}{${args[1]}}'
  },
  combinationsWithRep: {
    2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
  },
  factorial: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
  },
  gamma: {
    1: '\\Gamma\\left(${args[0]}\\right)'
  },
  // relational
  equal: {
    2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
  },
  larger: {
    2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
  },
  largerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
  },
  smaller: {
    2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
  },
  smallerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
  },
  unequal: {
    2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
  },
  // special
  erf: {
    1: 'erf\\left(${args[0]}\\right)'
  },
  // statistics
  max: '\\max\\left(${args}\\right)',
  min: '\\min\\left(${args}\\right)',
  variance: '\\mathrm{Var}\\left(${args}\\right)',
  // trigonometry
  acos: {
    1: '\\cos^{-1}\\left(${args[0]}\\right)'
  },
  acosh: {
    1: '\\cosh^{-1}\\left(${args[0]}\\right)'
  },
  acot: {
    1: '\\cot^{-1}\\left(${args[0]}\\right)'
  },
  acoth: {
    1: '\\coth^{-1}\\left(${args[0]}\\right)'
  },
  acsc: {
    1: '\\csc^{-1}\\left(${args[0]}\\right)'
  },
  acsch: {
    1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
  },
  asec: {
    1: '\\sec^{-1}\\left(${args[0]}\\right)'
  },
  asech: {
    1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
  },
  asin: {
    1: '\\sin^{-1}\\left(${args[0]}\\right)'
  },
  asinh: {
    1: '\\sinh^{-1}\\left(${args[0]}\\right)'
  },
  atan: {
    1: '\\tan^{-1}\\left(${args[0]}\\right)'
  },
  atan2: {
    2: '\\mathrm{atan2}\\left(${args}\\right)'
  },
  atanh: {
    1: '\\tanh^{-1}\\left(${args[0]}\\right)'
  },
  cos: {
    1: '\\cos\\left(${args[0]}\\right)'
  },
  cosh: {
    1: '\\cosh\\left(${args[0]}\\right)'
  },
  cot: {
    1: '\\cot\\left(${args[0]}\\right)'
  },
  coth: {
    1: '\\coth\\left(${args[0]}\\right)'
  },
  csc: {
    1: '\\csc\\left(${args[0]}\\right)'
  },
  csch: {
    1: '\\mathrm{csch}\\left(${args[0]}\\right)'
  },
  sec: {
    1: '\\sec\\left(${args[0]}\\right)'
  },
  sech: {
    1: '\\mathrm{sech}\\left(${args[0]}\\right)'
  },
  sin: {
    1: '\\sin\\left(${args[0]}\\right)'
  },
  sinh: {
    1: '\\sinh\\left(${args[0]}\\right)'
  },
  tan: {
    1: '\\tan\\left(${args[0]}\\right)'
  },
  tanh: {
    1: '\\tanh\\left(${args[0]}\\right)'
  },
  // unit
  to: {
    2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
  },
  // utils
  numeric: function numeric(node, options) {
    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
    return node.args[0].toTex();
  },
  // type
  number: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  },
  string: {
    0: '\\mathtt{""}',
    1: '\\mathrm{string}\\left(${args[0]}\\right)'
  },
  bignumber: {
    0: '0',
    1: '\\left(${args[0]}\\right)'
  },
  complex: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
  },
  matrix: {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(${args[0]}\\right)'
  },
  sparse: {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: '\\left(${args[0]}\\right)'
  },
  unit: {
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  }
};
exports.latexFunctions = latexFunctions;
var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
exports.defaultTemplate = defaultTemplate;
var latexUnits = {
  deg: '^\\circ'
};

function escapeLatex(string) {
  return (0, _escapeLatex["default"])(string, {
    preserveFormatting: true
  });
} // @param {string} name
// @param {boolean} isUnit


function toSymbol(name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;

  if (isUnit) {
    if ((0, _object.hasOwnProperty)(latexUnits, name)) {
      return latexUnits[name];
    }

    return '\\mathrm{' + escapeLatex(name) + '}';
  }

  if ((0, _object.hasOwnProperty)(latexSymbols, name)) {
    return latexSymbols[name];
  }

  return escapeLatex(name);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/lruQueue.js":
/*!*******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/lruQueue.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lruQueue = lruQueue;

// (c) 2018, Mariusz Nowak
// SPDX-License-Identifier: ISC
// Derived from https://github.com/medikoo/lru-queue
function lruQueue(limit) {
  var size = 0;
  var base = 1;
  var queue = Object.create(null);
  var map = Object.create(null);
  var index = 0;

  var del = function del(id) {
    var oldIndex = map[id];
    if (!oldIndex) return;
    delete queue[oldIndex];
    delete map[id];
    --size;
    if (base !== oldIndex) return;

    if (!size) {
      index = 0;
      base = 1;
      return;
    }

    while (!hasOwnProperty.call(queue, ++base)) {
      continue;
    }
  };

  limit = Math.abs(limit);
  return {
    hit: function hit(id) {
      var oldIndex = map[id];
      var nuIndex = ++index;
      queue[nuIndex] = id;
      map[id] = nuIndex;

      if (!oldIndex) {
        ++size;
        if (size <= limit) return undefined;
        id = queue[base];
        del(id);
        return id;
      }

      delete queue[oldIndex];
      if (base !== oldIndex) return undefined;

      while (!hasOwnProperty.call(queue, ++base)) {
        continue;
      }

      return undefined;
    },
    "delete": del,
    clear: function clear() {
      size = index = 0;
      base = 1;
      queue = Object.create(null);
      map = Object.create(null);
    }
  };
}

;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/map.js":
/*!**************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/map.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createEmptyMap = createEmptyMap;
exports.createMap = createMap;
exports.toObject = toObject;
exports.isMap = isMap;
exports.assign = assign;
exports.ObjectWrappingMap = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _customs = __webpack_require__(/*! ./customs.js */ "./node_modules/mathjs/lib/cjs/utils/customs.js");

var _is = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * A map facade on a bare object.
 *
 * The small number of methods needed to implement a scope,
 * forwarding on to the SafeProperty functions. Over time, the codebase
 * will stop using this method, as all objects will be Maps, rather than
 * more security prone objects.
 */
var ObjectWrappingMap = /*#__PURE__*/function () {
  function ObjectWrappingMap(object) {
    (0, _classCallCheck2["default"])(this, ObjectWrappingMap);
    this.wrappedObject = object;
  }

  (0, _createClass2["default"])(ObjectWrappingMap, [{
    key: "keys",
    value: function keys() {
      return Object.keys(this.wrappedObject);
    }
  }, {
    key: "get",
    value: function get(key) {
      return (0, _customs.getSafeProperty)(this.wrappedObject, key);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      (0, _customs.setSafeProperty)(this.wrappedObject, key, value);
      return this;
    }
  }, {
    key: "has",
    value: function has(key) {
      return (0, _customs.hasSafeProperty)(this.wrappedObject, key);
    }
  }]);
  return ObjectWrappingMap;
}();
/**
 * Creates an empty map, or whatever your platform's polyfill is.
 *
 * @returns an empty Map or Map like object.
 */


exports.ObjectWrappingMap = ObjectWrappingMap;

function createEmptyMap() {
  return new Map();
}
/**
 * Creates a Map from the given object.
 *
 * @param { Map | { [key: string]: unknown } | undefined } mapOrObject
 * @returns
 */


function createMap(mapOrObject) {
  if (!mapOrObject) {
    return createEmptyMap();
  }

  if (isMap(mapOrObject)) {
    return mapOrObject;
  }

  if ((0, _is.isObject)(mapOrObject)) {
    return new ObjectWrappingMap(mapOrObject);
  }

  throw new Error('createMap can create maps from objects or Maps');
}
/**
 * Unwraps a map into an object.
 *
 * @param {Map} map
 * @returns { [key: string]: unknown }
 */


function toObject(map) {
  if (map instanceof ObjectWrappingMap) {
    return map.wrappedObject;
  }

  var object = {};

  var _iterator = _createForOfIteratorHelper(map.keys()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      var value = map.get(key);
      (0, _customs.setSafeProperty)(object, key, value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return object;
}
/**
 * Returns `true` if the passed object appears to be a Map (i.e. duck typing).
 *
 * Methods looked for are `get`, `set`, `keys` and `has`.
 *
 * @param {Map | object} object
 * @returns
 */


function isMap(object) {
  // We can use the fast instanceof, or a slower duck typing check.
  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.
  if (!object) {
    return false;
  }

  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';
}
/**
 * Copies the contents of key-value pairs from each `objects` in to `map`.
 *
 * Object is `objects` can be a `Map` or object.
 *
 * This is the `Map` analog to `Object.assign`.
 */


function assign(map) {
  for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    objects[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _objects = objects; _i < _objects.length; _i++) {
    var args = _objects[_i];

    if (!args) {
      continue;
    }

    if (isMap(args)) {
      var _iterator2 = _createForOfIteratorHelper(args.keys()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var key = _step2.value;
          map.set(key, args.get(key));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else if ((0, _is.isObject)(args)) {
      for (var _i2 = 0, _Object$keys = Object.keys(args); _i2 < _Object$keys.length; _i2++) {
        var _key2 = _Object$keys[_i2];
        map.set(_key2, args[_key2]);
      }
    }
  }

  return map;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/noop.js":
/*!***************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/noop.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.noBignumber = noBignumber;
exports.noFraction = noFraction;
exports.noMatrix = noMatrix;
exports.noIndex = noIndex;
exports.noSubset = noSubset;

function noBignumber() {
  throw new Error('No "bignumber" implementation available');
}

function noFraction() {
  throw new Error('No "fraction" implementation available');
}

function noMatrix() {
  throw new Error('No "matrix" implementation available');
}

function noIndex() {
  throw new Error('No "index" implementation available');
}

function noSubset() {
  throw new Error('No "matrix" implementation available');
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/number.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/number.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isInteger = isInteger;
exports.format = format;
exports.splitNumber = splitNumber;
exports.toEngineering = toEngineering;
exports.toFixed = toFixed;
exports.toExponential = toExponential;
exports.toPrecision = toPrecision;
exports.roundDigits = roundDigits;
exports.digits = digits;
exports.nearlyEqual = nearlyEqual;
exports.tanh = exports.sinh = exports.cosh = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = exports.expm1 = exports.cbrt = exports.log1p = exports.log10 = exports.log2 = exports.sign = void 0;

var _is = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */
function isInteger(value) {
  if (typeof value === 'boolean') {
    return true;
  }

  return isFinite(value) ? value === Math.round(value) : false;
}
/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {number}
 */


var sign = /* #__PURE__ */Math.sign || function (x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};
/**
 * Calculate the base-2 logarithm of a number
 * @param {number} x
 * @returns {number}
 */


exports.sign = sign;

var log2 = /* #__PURE__ */Math.log2 || function log2(x) {
  return Math.log(x) / Math.LN2;
};
/**
 * Calculate the base-10 logarithm of a number
 * @param {number} x
 * @returns {number}
 */


exports.log2 = log2;

var log10 = /* #__PURE__ */Math.log10 || function log10(x) {
  return Math.log(x) / Math.LN10;
};
/**
 * Calculate the natural logarithm of a number + 1
 * @param {number} x
 * @returns {number}
 */


exports.log10 = log10;

var log1p = /* #__PURE__ */Math.log1p || function (x) {
  return Math.log(x + 1);
};
/**
 * Calculate cubic root for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number} Returns the cubic root of x
 */


exports.log1p = log1p;

var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {
  if (x === 0) {
    return x;
  }

  var negate = x < 0;
  var result;

  if (negate) {
    x = -x;
  }

  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

    result = (x / (result * result) + 2 * result) / 3;
  } else {
    result = x;
  }

  return negate ? -result : result;
};
/**
 * Calculates exponentiation minus 1
 * @param {number} x
 * @return {number} res
 */


exports.cbrt = cbrt;

var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {
  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
};
/**
 * Formats a number in a given base
 * @param {number} n
 * @param {number} base
 * @param {number} size
 * @returns {string}
 */


exports.expm1 = expm1;

function formatNumberToBase(n, base, size) {
  var prefixes = {
    2: '0b',
    8: '0o',
    16: '0x'
  };
  var prefix = prefixes[base];
  var suffix = '';

  if (size) {
    if (size < 1) {
      throw new Error('size must be in greater than 0');
    }

    if (!isInteger(size)) {
      throw new Error('size must be an integer');
    }

    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {
      throw new Error("Value must be in range [-2^".concat(size - 1, ", 2^").concat(size - 1, "-1]"));
    }

    if (!isInteger(n)) {
      throw new Error('Value must be an integer');
    }

    if (n < 0) {
      n = n + Math.pow(2, size);
    }

    suffix = "i".concat(size);
  }

  var sign = '';

  if (n < 0) {
    n = -n;
    sign = '-';
  }

  return "".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);
}
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lowerExp` and `upperExp` bounds, and
 *                                          uses exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                         'bin', 'oct, or
 *                         'hex'            Format the number using binary, octal,
 *                                          or hexadecimal notation.
 *                                          For example '0b1101' and '0x10fe'.
 *                     {number} wordSize    The word size in bits to use for formatting
 *                                          in binary, octal, or hexadecimal notation.
 *                                          To be used only with 'bin', 'oct', or 'hex'
 *                                          values for 'notation' option. When this option
 *                                          is defined the value is formatted as a signed
 *                                          twos complement integer of the given word size
 *                                          and the size suffix is appended to the output.
 *                                          For example
 *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.
 *                                          Default value is undefined.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default,
 *                                          not rounding any digits.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12.071, {notation: 'fixed'})                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */


function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (value === Infinity) {
    return 'Infinity';
  } else if (value === -Infinity) {
    return '-Infinity';
  } else if (isNaN(value)) {
    return 'NaN';
  } // default values for options


  var notation = 'auto';
  var precision;
  var wordSize;

  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if ((0, _is.isNumber)(options)) {
      precision = options;
    } else if ((0, _is.isNumber)(options.precision)) {
      precision = options.precision;
    }

    if (options.wordSize) {
      wordSize = options.wordSize;

      if (typeof wordSize !== 'number') {
        throw new Error('Option "wordSize" must be a number');
      }
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'bin':
      return formatNumberToBase(value, 2, wordSize);

    case 'oct':
      return formatNumberToBase(value, 8, wordSize);

    case 'hex':
      return formatNumberToBase(value, 16, wordSize);

    case 'auto':
      // remove trailing zeros after the decimal point
      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", "fixed", "bin", "oct", or "hex.');
  }
}
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */


function splitNumber(value) {
  // parse the input value
  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }

  var sign = match[1];
  var digits = match[2];
  var exponent = parseFloat(match[4] || '0');
  var dot = digits.indexOf('.');
  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
  .replace(/^0*/, function (zeros) {
    // remove leading zeros, add their count to the exponent
    exponent -= zeros.length;
    return '';
  }).replace(/0*$/, '') // remove trailing zeros
  .split('').map(function (d) {
    return parseInt(d);
  });

  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }

  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
}
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */


function toEngineering(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var split = splitNumber(value);
  var rounded = roundDigits(split, precision);
  var e = rounded.exponent;
  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

  if ((0, _is.isNumber)(precision)) {
    // add zeroes to give correct sig figs
    while (precision > c.length || e - newExp + 1 > c.length) {
      c.push(0);
    }
  } else {
    // concatenate coefficients with necessary zeros
    // add zeros if necessary (for example: 1e+8 -> 100e+6)
    var missingZeros = Math.abs(e - newExp) - (c.length - 1);

    for (var i = 0; i < missingZeros; i++) {
      c.push(0);
    }
  } // find difference in exponents


  var expDiff = Math.abs(e - newExp);
  var decimalIdx = 1; // push decimal index over by expDiff times

  while (expDiff > 0) {
    decimalIdx++;
    expDiff--;
  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
  // otherwise concat with the rest of the coefficients


  var decimals = c.slice(decimalIdx).join('');
  var decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
}
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=undefined]  Optional number of decimals after the
 *                                        decimal point. null by default.
 */


function toFixed(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var splitValue = splitNumber(value);
  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
  var c = rounded.coefficients;
  var p = rounded.exponent + 1; // exponent may have changed
  // append zeros if needed

  var pp = p + (precision || 0);

  if (c.length < pp) {
    c = c.concat(zeros(pp - c.length));
  } // prepend zeros if needed


  if (p < 0) {
    c = zeros(-p + 1).concat(c);
    p = 1;
  } // insert a dot if needed


  if (p < c.length) {
    c.splice(p, 0, p === 0 ? '0.' : '.');
  }

  return rounded.sign + c.join('');
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */


function toExponential(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // round if needed, else create a clone


  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;
  var c = rounded.coefficients;
  var e = rounded.exponent; // append zeros if needed

  if (c.length < precision) {
    c = c.concat(zeros(precision - c.length));
  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


  var first = c.shift();
  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
}
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
 *                                       By default:
 *                                         lowerExp = -3 (incl)
 *                                         upper = +5 (excl)
 * @return {string}
 */


function toPrecision(value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // determine lower and upper bound for exponential notation.


  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;

  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
    // exponential notation
    return toExponential(value, precision);
  } else {
    var c = rounded.coefficients;
    var e = rounded.exponent; // append trailing zeros

    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    } // append trailing zeros
    // TODO: simplify the next statement


    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

    c = zeros(-e).concat(c);
    var dot = e > 0 ? e : 0;

    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }

    return rounded.sign + c.join('');
  }
}
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */


function roundDigits(split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  };
  var c = rounded.coefficients; // prepend zeros if needed

  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;

      while (c[i] === 10) {
        c.pop();

        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }

        i--;
        c[i]++;
      }
    }
  }

  return rounded;
}
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */


function zeros(length) {
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr.push(0);
  }

  return arr;
}
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */


function digits(value) {
  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
  .length;
}
/**
 * Minimum number added to one that makes the result different than one
 */


var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/

exports.DBL_EPSILON = DBL_EPSILON;

function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x === y;
  }

  if (x === y) {
    return true;
  } // NaN


  if (isNaN(x) || isNaN(y)) {
    return false;
  } // at this point x and y should be finite


  if (isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = Math.abs(x - y);

    if (diff < DBL_EPSILON) {
      return true;
    } else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}
/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 */


var acosh = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x * x - 1) + x);
};

exports.acosh = acosh;

var asinh = Math.asinh || function (x) {
  return Math.log(Math.sqrt(x * x + 1) + x);
};
/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 */


exports.asinh = asinh;

var atanh = Math.atanh || function (x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 */


exports.atanh = atanh;

var cosh = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 */


exports.cosh = cosh;

var sinh = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 */


exports.sinh = sinh;

var tanh = Math.tanh || function (x) {
  var e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

exports.tanh = tanh;

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/object.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/object.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.clone = clone;
exports.mapObject = mapObject;
exports.extend = extend;
exports.deepExtend = deepExtend;
exports.deepStrictEqual = deepStrictEqual;
exports.deepFlatten = deepFlatten;
exports.canDefineProperty = canDefineProperty;
exports.lazy = lazy;
exports.traverse = traverse;
exports.hasOwnProperty = hasOwnProperty;
exports.isLegacyFactory = isLegacyFactory;
exports.get = get;
exports.set = set;
exports.pick = pick;
exports.pickShallow = pickShallow;
exports.values = values;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _is = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */
function clone(x) {
  var type = (0, _typeof2["default"])(x); // immutable primitive types

  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
    return x;
  } // use clone function of the object when available


  if (typeof x.clone === 'function') {
    return x.clone();
  } // array


  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone(value);
    });
  }

  if (x instanceof Date) return new Date(x.valueOf());
  if ((0, _is.isBigNumber)(x)) return x; // bignumbers are immutable

  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
  // object

  return mapObject(x, clone);
}
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */


function mapObject(object, callback) {
  var clone = {};

  for (var key in object) {
    if (hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }

  return clone;
}
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */


function extend(a, b) {
  for (var prop in b) {
    if (hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }

  return a;
}
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */


function deepExtend(a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }

  for (var prop in b) {
    // We check against prop not being in Object.prototype or Function.prototype
    // to prevent polluting for example Object.__proto__.
    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }

        if (a[prop] && a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }

  return a;
}
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * Compares values and functions strictly (ie. 2 is not the same as '2').
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */


function deepStrictEqual(a, b) {
  var prop, i, len;

  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }

    if (a.length !== b.length) {
      return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
      if (!deepStrictEqual(a[i], b[i])) {
        return false;
      }
    }

    return true;
  } else if (typeof a === 'function') {
    return a === b;
  } else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }

    for (prop in a) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    for (prop in b) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in a)) {
        return false;
      }
    }

    return true;
  } else {
    return a === b;
  }
}
/**
 * Recursively flatten a nested object.
 * @param {Object} nestedObject
 * @return {Object} Returns the flattened object
 */


function deepFlatten(nestedObject) {
  var flattenedObject = {};

  _deepFlatten(nestedObject, flattenedObject);

  return flattenedObject;
} // helper function used by deepFlatten


function _deepFlatten(nestedObject, flattenedObject) {
  for (var prop in nestedObject) {
    if (hasOwnProperty(nestedObject, prop)) {
      var value = nestedObject[prop];

      if ((0, _typeof2["default"])(value) === 'object' && value !== null) {
        _deepFlatten(value, flattenedObject);
      } else {
        flattenedObject[prop] = value;
      }
    }
  }
}
/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */


function canDefineProperty() {
  // test needed for broken IE8 implementation
  try {
    if (Object.defineProperty) {
      Object.defineProperty({}, 'x', {
        get: function get() {}
      });
      return true;
    }
  } catch (e) {}

  return false;
}
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 *
 * @param {Object} object         Object where to add the property
 * @param {string} prop           Property name
 * @param {Function} valueResolver Function returning the property value. Called
 *                                without arguments.
 */


function lazy(object, prop, valueResolver) {
  var _uninitialized = true;

  var _value;

  Object.defineProperty(object, prop, {
    get: function get() {
      if (_uninitialized) {
        _value = valueResolver();
        _uninitialized = false;
      }

      return _value;
    },
    set: function set(value) {
      _value = value;
      _uninitialized = false;
    },
    configurable: true,
    enumerable: true
  });
}
/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string | string[]} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */


function traverse(object, path) {
  if (path && typeof path === 'string') {
    return traverse(object, path.split('.'));
  }

  var obj = object;

  if (path) {
    for (var i = 0; i < path.length; i++) {
      var key = path[i];

      if (!(key in obj)) {
        obj[key] = {};
      }

      obj = obj[key];
    }
  }

  return obj;
}
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */


function hasOwnProperty(object, property) {
  return object && Object.hasOwnProperty.call(object, property);
}
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */


function isLegacyFactory(object) {
  return object && typeof object.factory === 'function';
}
/**
 * Get a nested property from an object
 * @param {Object} object
 * @param {string | string[]} path
 * @returns {Object}
 */


function get(object, path) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return get(object, path.split('.'));
    } else {
      return object[path];
    }
  }

  var child = object;

  for (var i = 0; i < path.length; i++) {
    var key = path[i];
    child = child ? child[key] : undefined;
  }

  return child;
}
/**
 * Set a nested property in an object
 * Mutates the object itself
 * If the path doesn't exist, it will be created
 * @param {Object} object
 * @param {string | string[]} path
 * @param {*} value
 * @returns {Object}
 */


function set(object, path, value) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return set(object, path.split('.'), value);
    } else {
      object[path] = value;
      return object;
    }
  }

  var child = object;

  for (var i = 0; i < path.length - 1; i++) {
    var key = path[i];

    if (child[key] === undefined) {
      child[key] = {};
    }

    child = child[key];
  }

  if (path.length > 0) {
    var lastKey = path[path.length - 1];
    child[lastKey] = value;
  }

  return object;
}
/**
 * Create an object composed of the picked object properties
 * @param {Object} object
 * @param {string[]} properties
 * @param {function} [transform] Optional value to transform a value when picking it
 * @return {Object}
 */


function pick(object, properties, transform) {
  var copy = {};

  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = get(object, key);

    if (value !== undefined) {
      set(copy, key, transform ? transform(value, key) : value);
    }
  }

  return copy;
}
/**
 * Shallow version of pick, creating an object composed of the picked object properties
 * but not for nested properties
 * @param {Object} object
 * @param {string[]} properties
 * @return {Object}
 */


function pickShallow(object, properties) {
  var copy = {};

  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = object[key];

    if (value !== undefined) {
      copy[key] = value;
    }
  }

  return copy;
}

function values(object) {
  return Object.keys(object).map(function (key) {
    return object[key];
  });
} // helper function to test whether a string contains a path like 'user.name'


function isPath(str) {
  return str.indexOf('.') !== -1;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/polyfills.js":
/*!********************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/polyfills.js ***!
  \********************************************************/
/***/ (() => {

"use strict";


// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5
// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)
// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
Number.isFinite = Number.isFinite || function (value) {
  return typeof value === 'number' && isFinite(value);
}; // Polyfill for IE 11
// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN


Number.isNaN = Number.isNaN || function (value) {
  return value !== value; // eslint-disable-line no-self-compare
};

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/product.js":
/*!******************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/product.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.product = product;

/** @param {number} i
 *  @param {number} n
 *  @returns {number} product of i to n
 */
function product(i, n) {
  if (n < i) {
    return 1;
  }

  if (n === i) {
    return n;
  }

  var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

  return product(i, half) * product(half + 1, n);
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/scope.js":
/*!****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/scope.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.createSubScope = createSubScope;

var _map = __webpack_require__(/*! ./map.js */ "./node_modules/mathjs/lib/cjs/utils/map.js");

/**
 * Create a new scope which can access the parent scope,
 * but does not affect it when written. This is suitable for variable definitions
 * within a block node, or function definition.
 *
 * If parent scope has a createSubScope method, it delegates to that. Otherwise,
 * creates an empty map, and copies the parent scope to it, adding in
 * the remaining `args`.
 *
 * @param {Map} parentScope
 * @param  {...any} args
 * @returns {Map}
 */
function createSubScope(parentScope) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (typeof parentScope.createSubScope === 'function') {
    return _map.assign.apply(void 0, [parentScope.createSubScope()].concat(args));
  }

  return _map.assign.apply(void 0, [(0, _map.createEmptyMap)(), parentScope].concat(args));
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/utils/string.js":
/*!*****************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/utils/string.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.endsWith = endsWith;
exports.format = format;
exports.stringify = stringify;
exports.escape = escape;
exports.compareText = compareText;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _is = __webpack_require__(/*! ./is.js */ "./node_modules/mathjs/lib/cjs/utils/is.js");

var _number = __webpack_require__(/*! ./number.js */ "./node_modules/mathjs/lib/cjs/utils/number.js");

var _formatter = __webpack_require__(/*! ./bignumber/formatter.js */ "./node_modules/mathjs/lib/cjs/utils/bignumber/formatter.js");

/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */
function endsWith(text, search) {
  var start = text.length - search.length;
  var end = text.length;
  return text.substring(start, end) === search;
}
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7)                // '0.2857142857142857'
 *     math.format(math.pi, 3)         // '3.14'
 *     math.format(new Complex(2, 3))  // '2 + 3i'
 *     math.format('hello')            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */


function format(value, options) {
  if (typeof value === 'number') {
    return (0, _number.format)(value, options);
  }

  if ((0, _is.isBigNumber)(value)) {
    return (0, _formatter.format)(value, options);
  } // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values


  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return value.s * value.n + '/' + value.d;
    } else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }

  if (Array.isArray(value)) {
    return formatArray(value, options);
  }

  if ((0, _is.isString)(value)) {
    return '"' + value + '"';
  }

  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }

  if (value && (0, _typeof2["default"])(value) === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    } else if (value && value.toString(options) !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString(options);
    } else {
      var entries = Object.keys(value).map(function (key) {
        return '"' + key + '": ' + format(value[key], options);
      });
      return '{' + entries.join(', ') + '}';
    }
  }

  return String(value);
}
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */


function stringify(value) {
  var text = String(value);
  var escaped = '';
  var i = 0;

  while (i < text.length) {
    var c = text.charAt(i);

    if (c === '\\') {
      escaped += c;
      i++;
      c = text.charAt(i);

      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\'; // no valid escape character -> escape it
      }

      escaped += c;
    } else if (c === '"') {
      escaped += '\\"';
    } else {
      escaped += c;
    }

    i++;
  }

  return '"' + escaped + '"';
}
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */


function escape(value) {
  var text = String(value);
  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return text;
}
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */


function formatArray(array, options) {
  if (Array.isArray(array)) {
    var str = '[';
    var len = array.length;

    for (var i = 0; i < len; i++) {
      if (i !== 0) {
        str += ', ';
      }

      str += formatArray(array[i], options);
    }

    str += ']';
    return str;
  } else {
    return format(array, options);
  }
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */


function looksLikeFraction(value) {
  return value && (0, _typeof2["default"])(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}
/**
 * Compare two strings
 * @param {string} x
 * @param {string} y
 * @returns {number}
 */


function compareText(x, y) {
  // we don't want to convert numbers to string, only accept string input
  if (!(0, _is.isString)(x)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(x) + ', index: 0)');
  }

  if (!(0, _is.isString)(y)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(y) + ', index: 1)');
  }

  return x === y ? 0 : x > y ? 1 : -1;
}

/***/ }),

/***/ "./node_modules/mathjs/lib/cjs/version.js":
/*!************************************************!*\
  !*** ./node_modules/mathjs/lib/cjs/version.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.version = void 0;
var version = '9.5.2'; // Note: This file is automatically generated when building math.js.
// Changes made in this file will be overwritten.

exports.version = version;

/***/ }),

/***/ "./node_modules/datatables.net/js/jquery.dataTables.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/datatables.net/js/jquery.dataTables.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/*! DataTables 1.13.2
 * ©2008-2023 SpryMedia Ltd - datatables.net/license
 */



// DataTables code uses $ internally, but we want to be able to
// reassign $ with the `use` method below, so it is a regular var.
let $ = jquery__WEBPACK_IMPORTED_MODULE_0__;


var DataTable = function ( selector, options )
{
	// When creating with `new`, create a new DataTable, returning the API instance
	if (this instanceof DataTable) {
		return $(selector).DataTable(options);
	}
	else {
		// Argument switching
		options = selector;
	}

	/**
	 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
	 * return the resulting jQuery object.
	 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
	 *    criterion ("applied") or all TR elements (i.e. no filter).
	 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
	 *    Can be either 'current', whereby the current sorting of the table is used, or
	 *    'original' whereby the original order the data was read into the table is used.
	 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	 *    'current' and filter is 'applied', regardless of what they might be given as.
	 *  @returns {object} jQuery object, filtered by the given selector.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Highlight every second row
	 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
	 *    } );
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Filter to rows with 'Webkit' in them, add a background colour and then
	 *      // remove the filter, thus highlighting the 'Webkit' rows only.
	 *      oTable.fnFilter('Webkit');
	 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
	 *      oTable.fnFilter('');
	 *    } );
	 */
	this.$ = function ( sSelector, oOpts )
	{
		return this.api(true).$( sSelector, oOpts );
	};
	
	
	/**
	 * Almost identical to $ in operation, but in this case returns the data for the matched
	 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
	 * rather than any descendants, so the data can be obtained for the row/cell. If matching
	 * rows are found, the data returned is the original data array/object that was used to
	 * create the row (or a generated array if from a DOM source).
	 *
	 * This method is often useful in-combination with $ where both functions are given the
	 * same parameters and the array indexes will match identically.
	 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
	 *    criterion ("applied") or all elements (i.e. no filter).
	 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
	 *    Can be either 'current', whereby the current sorting of the table is used, or
	 *    'original' whereby the original order the data was read into the table is used.
	 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	 *    'current' and filter is 'applied', regardless of what they might be given as.
	 *  @returns {array} Data for the matched elements. If any elements, as a result of the
	 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
	 *    entry in the array.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Get the data from the first row in the table
	 *      var data = oTable._('tr:first');
	 *
	 *      // Do something useful with the data
	 *      alert( "First cell is: "+data[0] );
	 *    } );
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Filter to 'Webkit' and get all data for
	 *      oTable.fnFilter('Webkit');
	 *      var data = oTable._('tr', {"search": "applied"});
	 *
	 *      // Do something with the data
	 *      alert( data.length+" rows matched the search" );
	 *    } );
	 */
	this._ = function ( sSelector, oOpts )
	{
		return this.api(true).rows( sSelector, oOpts ).data();
	};
	
	
	/**
	 * Create a DataTables Api instance, with the currently selected tables for
	 * the Api's context.
	 * @param {boolean} [traditional=false] Set the API instance's context to be
	 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
	 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
	 *   or if all tables captured in the jQuery object should be used.
	 * @return {DataTables.Api}
	 */
	this.api = function ( traditional )
	{
		return traditional ?
			new _Api(
				_fnSettingsFromNode( this[ _ext.iApiIndex ] )
			) :
			new _Api( this );
	};
	
	
	/**
	 * Add a single new row or multiple rows of data to the table. Please note
	 * that this is suitable for client-side processing only - if you are using
	 * server-side processing (i.e. "bServerSide": true), then to add data, you
	 * must add it to the data source, i.e. the server-side, through an Ajax call.
	 *  @param {array|object} data The data to be added to the table. This can be:
	 *    <ul>
	 *      <li>1D array of data - add a single row with the data provided</li>
	 *      <li>2D array of arrays - add multiple rows in a single call</li>
	 *      <li>object - data object when using <i>mData</i></li>
	 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
	 *    </ul>
	 *  @param {bool} [redraw=true] redraw the table or not
	 *  @returns {array} An array of integers, representing the list of indexes in
	 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
	 *    the table.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    // Global var for counter
	 *    var giCount = 2;
	 *
	 *    $(document).ready(function() {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *    function fnClickAddRow() {
	 *      $('#example').dataTable().fnAddData( [
	 *        giCount+".1",
	 *        giCount+".2",
	 *        giCount+".3",
	 *        giCount+".4" ]
	 *      );
	 *
	 *      giCount++;
	 *    }
	 */
	this.fnAddData = function( data, redraw )
	{
		var api = this.api( true );
	
		/* Check if we want to add multiple rows or not */
		var rows = Array.isArray(data) && ( Array.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
			api.rows.add( data ) :
			api.row.add( data );
	
		if ( redraw === undefined || redraw ) {
			api.draw();
		}
	
		return rows.flatten().toArray();
	};
	
	
	/**
	 * This function will make DataTables recalculate the column sizes, based on the data
	 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
	 * through the sWidth parameter). This can be useful when the width of the table's
	 * parent element changes (for example a window resize).
	 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable( {
	 *        "sScrollY": "200px",
	 *        "bPaginate": false
	 *      } );
	 *
	 *      $(window).on('resize', function () {
	 *        oTable.fnAdjustColumnSizing();
	 *      } );
	 *    } );
	 */
	this.fnAdjustColumnSizing = function ( bRedraw )
	{
		var api = this.api( true ).columns.adjust();
		var settings = api.settings()[0];
		var scroll = settings.oScroll;
	
		if ( bRedraw === undefined || bRedraw ) {
			api.draw( false );
		}
		else if ( scroll.sX !== "" || scroll.sY !== "" ) {
			/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
			_fnScrollDraw( settings );
		}
	};
	
	
	/**
	 * Quickly and simply clear a table
	 *  @param {bool} [bRedraw=true] redraw the table or not
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
	 *      oTable.fnClearTable();
	 *    } );
	 */
	this.fnClearTable = function( bRedraw )
	{
		var api = this.api( true ).clear();
	
		if ( bRedraw === undefined || bRedraw ) {
			api.draw();
		}
	};
	
	
	/**
	 * The exact opposite of 'opening' a row, this function will close any rows which
	 * are currently 'open'.
	 *  @param {node} nTr the table row to 'close'
	 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable;
	 *
	 *      // 'open' an information row when a row is clicked on
	 *      $('#example tbody tr').click( function () {
	 *        if ( oTable.fnIsOpen(this) ) {
	 *          oTable.fnClose( this );
	 *        } else {
	 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	 *        }
	 *      } );
	 *
	 *      oTable = $('#example').dataTable();
	 *    } );
	 */
	this.fnClose = function( nTr )
	{
		this.api( true ).row( nTr ).child.hide();
	};
	
	
	/**
	 * Remove a row for the table
	 *  @param {mixed} target The index of the row from aoData to be deleted, or
	 *    the TR element you want to delete
	 *  @param {function|null} [callBack] Callback function
	 *  @param {bool} [redraw=true] Redraw the table or not
	 *  @returns {array} The row that was deleted
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Immediately remove the first row
	 *      oTable.fnDeleteRow( 0 );
	 *    } );
	 */
	this.fnDeleteRow = function( target, callback, redraw )
	{
		var api = this.api( true );
		var rows = api.rows( target );
		var settings = rows.settings()[0];
		var data = settings.aoData[ rows[0][0] ];
	
		rows.remove();
	
		if ( callback ) {
			callback.call( this, settings, data );
		}
	
		if ( redraw === undefined || redraw ) {
			api.draw();
		}
	
		return data;
	};
	
	
	/**
	 * Restore the table to it's original state in the DOM by removing all of DataTables
	 * enhancements, alterations to the DOM structure of the table and event listeners.
	 *  @param {boolean} [remove=false] Completely remove the table from the DOM
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
	 *      var oTable = $('#example').dataTable();
	 *      oTable.fnDestroy();
	 *    } );
	 */
	this.fnDestroy = function ( remove )
	{
		this.api( true ).destroy( remove );
	};
	
	
	/**
	 * Redraw the table
	 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
	 *      oTable.fnDraw();
	 *    } );
	 */
	this.fnDraw = function( complete )
	{
		// Note that this isn't an exact match to the old call to _fnDraw - it takes
		// into account the new data, but can hold position.
		this.api( true ).draw( complete );
	};
	
	
	/**
	 * Filter the input based on data
	 *  @param {string} sInput String to filter the table on
	 *  @param {int|null} [iColumn] Column to limit filtering to
	 *  @param {bool} [bRegex=false] Treat as regular expression or not
	 *  @param {bool} [bSmart=true] Perform smart filtering or not
	 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
	 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Sometime later - filter...
	 *      oTable.fnFilter( 'test string' );
	 *    } );
	 */
	this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
	{
		var api = this.api( true );
	
		if ( iColumn === null || iColumn === undefined ) {
			api.search( sInput, bRegex, bSmart, bCaseInsensitive );
		}
		else {
			api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
		}
	
		api.draw();
	};
	
	
	/**
	 * Get the data for the whole table, an individual row or an individual cell based on the
	 * provided parameters.
	 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
	 *    a TR node then the data source for the whole row will be returned. If given as a
	 *    TD/TH cell node then iCol will be automatically calculated and the data for the
	 *    cell returned. If given as an integer, then this is treated as the aoData internal
	 *    data index for the row (see fnGetPosition) and the data for that row used.
	 *  @param {int} [col] Optional column index that you want the data of.
	 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
	 *    returned. If mRow is defined, just data for that row, and is iCol is
	 *    defined, only data for the designated cell is returned.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    // Row data
	 *    $(document).ready(function() {
	 *      oTable = $('#example').dataTable();
	 *
	 *      oTable.$('tr').click( function () {
	 *        var data = oTable.fnGetData( this );
	 *        // ... do something with the array / object of data for the row
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Individual cell data
	 *    $(document).ready(function() {
	 *      oTable = $('#example').dataTable();
	 *
	 *      oTable.$('td').click( function () {
	 *        var sData = oTable.fnGetData( this );
	 *        alert( 'The cell clicked on had the value of '+sData );
	 *      } );
	 *    } );
	 */
	this.fnGetData = function( src, col )
	{
		var api = this.api( true );
	
		if ( src !== undefined ) {
			var type = src.nodeName ? src.nodeName.toLowerCase() : '';
	
			return col !== undefined || type == 'td' || type == 'th' ?
				api.cell( src, col ).data() :
				api.row( src ).data() || null;
		}
	
		return api.data().toArray();
	};
	
	
	/**
	 * Get an array of the TR nodes that are used in the table's body. Note that you will
	 * typically want to use the '$' API method in preference to this as it is more
	 * flexible.
	 *  @param {int} [iRow] Optional row index for the TR element you want
	 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
	 *    in the table's body, or iRow is defined, just the TR element requested.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Get the nodes from the table
	 *      var nNodes = oTable.fnGetNodes( );
	 *    } );
	 */
	this.fnGetNodes = function( iRow )
	{
		var api = this.api( true );
	
		return iRow !== undefined ?
			api.row( iRow ).node() :
			api.rows().nodes().flatten().toArray();
	};
	
	
	/**
	 * Get the array indexes of a particular cell from it's DOM element
	 * and column index including hidden columns
	 *  @param {node} node this can either be a TR, TD or TH in the table's body
	 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
	 *    if given as a cell, an array of [row index, column index (visible),
	 *    column index (all)] is given.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      $('#example tbody td').click( function () {
	 *        // Get the position of the current data from the node
	 *        var aPos = oTable.fnGetPosition( this );
	 *
	 *        // Get the data array for this row
	 *        var aData = oTable.fnGetData( aPos[0] );
	 *
	 *        // Update the data array and return the value
	 *        aData[ aPos[1] ] = 'clicked';
	 *        this.innerHTML = 'clicked';
	 *      } );
	 *
	 *      // Init DataTables
	 *      oTable = $('#example').dataTable();
	 *    } );
	 */
	this.fnGetPosition = function( node )
	{
		var api = this.api( true );
		var nodeName = node.nodeName.toUpperCase();
	
		if ( nodeName == 'TR' ) {
			return api.row( node ).index();
		}
		else if ( nodeName == 'TD' || nodeName == 'TH' ) {
			var cell = api.cell( node ).index();
	
			return [
				cell.row,
				cell.columnVisible,
				cell.column
			];
		}
		return null;
	};
	
	
	/**
	 * Check to see if a row is 'open' or not.
	 *  @param {node} nTr the table row to check
	 *  @returns {boolean} true if the row is currently open, false otherwise
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable;
	 *
	 *      // 'open' an information row when a row is clicked on
	 *      $('#example tbody tr').click( function () {
	 *        if ( oTable.fnIsOpen(this) ) {
	 *          oTable.fnClose( this );
	 *        } else {
	 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	 *        }
	 *      } );
	 *
	 *      oTable = $('#example').dataTable();
	 *    } );
	 */
	this.fnIsOpen = function( nTr )
	{
		return this.api( true ).row( nTr ).child.isShown();
	};
	
	
	/**
	 * This function will place a new row directly after a row which is currently
	 * on display on the page, with the HTML contents that is passed into the
	 * function. This can be used, for example, to ask for confirmation that a
	 * particular record should be deleted.
	 *  @param {node} nTr The table row to 'open'
	 *  @param {string|node|jQuery} mHtml The HTML to put into the row
	 *  @param {string} sClass Class to give the new TD cell
	 *  @returns {node} The row opened. Note that if the table row passed in as the
	 *    first parameter, is not found in the table, this method will silently
	 *    return.
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable;
	 *
	 *      // 'open' an information row when a row is clicked on
	 *      $('#example tbody tr').click( function () {
	 *        if ( oTable.fnIsOpen(this) ) {
	 *          oTable.fnClose( this );
	 *        } else {
	 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	 *        }
	 *      } );
	 *
	 *      oTable = $('#example').dataTable();
	 *    } );
	 */
	this.fnOpen = function( nTr, mHtml, sClass )
	{
		return this.api( true )
			.row( nTr )
			.child( mHtml, sClass )
			.show()
			.child()[0];
	};
	
	
	/**
	 * Change the pagination - provides the internal logic for pagination in a simple API
	 * function. With this function you can have a DataTables table go to the next,
	 * previous, first or last pages.
	 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
	 *    or page number to jump to (integer), note that page 0 is the first page.
	 *  @param {bool} [bRedraw=true] Redraw the table or not
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *      oTable.fnPageChange( 'next' );
	 *    } );
	 */
	this.fnPageChange = function ( mAction, bRedraw )
	{
		var api = this.api( true ).page( mAction );
	
		if ( bRedraw === undefined || bRedraw ) {
			api.draw(false);
		}
	};
	
	
	/**
	 * Show a particular column
	 *  @param {int} iCol The column whose display should be changed
	 *  @param {bool} bShow Show (true) or hide (false) the column
	 *  @param {bool} [bRedraw=true] Redraw the table or not
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Hide the second column after initialisation
	 *      oTable.fnSetColumnVis( 1, false );
	 *    } );
	 */
	this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
	{
		var api = this.api( true ).column( iCol ).visible( bShow );
	
		if ( bRedraw === undefined || bRedraw ) {
			api.columns.adjust().draw();
		}
	};
	
	
	/**
	 * Get the settings for a particular table for external manipulation
	 *  @returns {object} DataTables settings object. See
	 *    {@link DataTable.models.oSettings}
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *      var oSettings = oTable.fnSettings();
	 *
	 *      // Show an example parameter from the settings
	 *      alert( oSettings._iDisplayStart );
	 *    } );
	 */
	this.fnSettings = function()
	{
		return _fnSettingsFromNode( this[_ext.iApiIndex] );
	};
	
	
	/**
	 * Sort the table by a particular column
	 *  @param {int} iCol the data index to sort on. Note that this will not match the
	 *    'display index' if you have hidden data entries
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Sort immediately with columns 0 and 1
	 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
	 *    } );
	 */
	this.fnSort = function( aaSort )
	{
		this.api( true ).order( aaSort ).draw();
	};
	
	
	/**
	 * Attach a sort listener to an element for a given column
	 *  @param {node} nNode the element to attach the sort listener to
	 *  @param {int} iColumn the column that a click on this node will sort on
	 *  @param {function} [fnCallback] callback function when sort is run
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *
	 *      // Sort on column 1, when 'sorter' is clicked on
	 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
	 *    } );
	 */
	this.fnSortListener = function( nNode, iColumn, fnCallback )
	{
		this.api( true ).order.listener( nNode, iColumn, fnCallback );
	};
	
	
	/**
	 * Update a table cell or row - this method will accept either a single value to
	 * update the cell with, an array of values with one element for each column or
	 * an object in the same format as the original data source. The function is
	 * self-referencing in order to make the multi column updates easier.
	 *  @param {object|array|string} mData Data to update the cell/row with
	 *  @param {node|int} mRow TR element you want to update or the aoData index
	 *  @param {int} [iColumn] The column to update, give as null or undefined to
	 *    update a whole row.
	 *  @param {bool} [bRedraw=true] Redraw the table or not
	 *  @param {bool} [bAction=true] Perform pre-draw actions or not
	 *  @returns {int} 0 on success, 1 on error
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
	 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
	 *    } );
	 */
	this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
	{
		var api = this.api( true );
	
		if ( iColumn === undefined || iColumn === null ) {
			api.row( mRow ).data( mData );
		}
		else {
			api.cell( mRow, iColumn ).data( mData );
		}
	
		if ( bAction === undefined || bAction ) {
			api.columns.adjust();
		}
	
		if ( bRedraw === undefined || bRedraw ) {
			api.draw();
		}
		return 0;
	};
	
	
	/**
	 * Provide a common method for plug-ins to check the version of DataTables being used, in order
	 * to ensure compatibility.
	 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
	 *    formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
	 *    version, or false if this version of DataTales is not suitable
	 *  @method
	 *  @dtopt API
	 *  @deprecated Since v1.10
	 *
	 *  @example
	 *    $(document).ready(function() {
	 *      var oTable = $('#example').dataTable();
	 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
	 *    } );
	 */
	this.fnVersionCheck = _ext.fnVersionCheck;
	

	var _that = this;
	var emptyInit = options === undefined;
	var len = this.length;

	if ( emptyInit ) {
		options = {};
	}

	this.oApi = this.internal = _ext.internal;

	// Extend with old style plug-in API methods
	for ( var fn in DataTable.ext.internal ) {
		if ( fn ) {
			this[fn] = _fnExternApiFunc(fn);
		}
	}

	this.each(function() {
		// For each initialisation we want to give it a clean initialisation
		// object that can be bashed around
		var o = {};
		var oInit = len > 1 ? // optimisation for single table case
			_fnExtend( o, options, true ) :
			options;

		/*global oInit,_that,emptyInit*/
		var i=0, iLen, j, jLen, k, kLen;
		var sId = this.getAttribute( 'id' );
		var bInitHandedOff = false;
		var defaults = DataTable.defaults;
		var $this = $(this);
		
		
		/* Sanity check */
		if ( this.nodeName.toLowerCase() != 'table' )
		{
			_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
			return;
		}
		
		/* Backwards compatibility for the defaults */
		_fnCompatOpts( defaults );
		_fnCompatCols( defaults.column );
		
		/* Convert the camel-case defaults to Hungarian */
		_fnCamelToHungarian( defaults, defaults, true );
		_fnCamelToHungarian( defaults.column, defaults.column, true );
		
		/* Setting up the initialisation object */
		_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );
		
		
		
		/* Check to see if we are re-initialising a table */
		var allSettings = DataTable.settings;
		for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
		{
			var s = allSettings[i];
		
			/* Base check on table node */
			if (
				s.nTable == this ||
				(s.nTHead && s.nTHead.parentNode == this) ||
				(s.nTFoot && s.nTFoot.parentNode == this)
			) {
				var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
				var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
		
				if ( emptyInit || bRetrieve )
				{
					return s.oInstance;
				}
				else if ( bDestroy )
				{
					s.oInstance.fnDestroy();
					break;
				}
				else
				{
					_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
					return;
				}
			}
		
			/* If the element we are initialising has the same ID as a table which was previously
			 * initialised, but the table nodes don't match (from before) then we destroy the old
			 * instance by simply deleting it. This is under the assumption that the table has been
			 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
			 */
			if ( s.sTableId == this.id )
			{
				allSettings.splice( i, 1 );
				break;
			}
		}
		
		/* Ensure the table has an ID - required for accessibility */
		if ( sId === null || sId === "" )
		{
			sId = "DataTables_Table_"+(DataTable.ext._unique++);
			this.id = sId;
		}
		
		/* Create the settings object for this table and set some of the default parameters */
		var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
			"sDestroyWidth": $this[0].style.width,
			"sInstance":     sId,
			"sTableId":      sId
		} );
		oSettings.nTable = this;
		oSettings.oApi   = _that.internal;
		oSettings.oInit  = oInit;
		
		allSettings.push( oSettings );
		
		// Need to add the instance after the instance after the settings object has been added
		// to the settings array, so we can self reference the table instance if more than one
		oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
		
		// Backwards compatibility, before we apply all the defaults
		_fnCompatOpts( oInit );
		_fnLanguageCompat( oInit.oLanguage );
		
		// If the length menu is given, but the init display length is not, use the length menu
		if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
		{
			oInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?
				oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
		}
		
		// Apply the defaults and init options to make a single init object will all
		// options defined from defaults and instance options.
		oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
		
		
		// Map the initialisation options onto the settings object
		_fnMap( oSettings.oFeatures, oInit, [
			"bPaginate",
			"bLengthChange",
			"bFilter",
			"bSort",
			"bSortMulti",
			"bInfo",
			"bProcessing",
			"bAutoWidth",
			"bSortClasses",
			"bServerSide",
			"bDeferRender"
		] );
		_fnMap( oSettings, oInit, [
			"asStripeClasses",
			"ajax",
			"fnServerData",
			"fnFormatNumber",
			"sServerMethod",
			"aaSorting",
			"aaSortingFixed",
			"aLengthMenu",
			"sPaginationType",
			"sAjaxSource",
			"sAjaxDataProp",
			"iStateDuration",
			"sDom",
			"bSortCellsTop",
			"iTabIndex",
			"fnStateLoadCallback",
			"fnStateSaveCallback",
			"renderer",
			"searchDelay",
			"rowId",
			[ "iCookieDuration", "iStateDuration" ], // backwards compat
			[ "oSearch", "oPreviousSearch" ],
			[ "aoSearchCols", "aoPreSearchCols" ],
			[ "iDisplayLength", "_iDisplayLength" ]
		] );
		_fnMap( oSettings.oScroll, oInit, [
			[ "sScrollX", "sX" ],
			[ "sScrollXInner", "sXInner" ],
			[ "sScrollY", "sY" ],
			[ "bScrollCollapse", "bCollapse" ]
		] );
		_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
		
		/* Callback functions which are array driven */
		_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
		_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
		_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
		_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
		_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
		_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
		_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
		_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
		_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
		_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
		_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
		
		oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
		
		/* Browser support detection */
		_fnBrowserDetect( oSettings );
		
		var oClasses = oSettings.oClasses;
		
		$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
		$this.addClass( oClasses.sTable );
		
		
		if ( oSettings.iInitDisplayStart === undefined )
		{
			/* Display start point, taking into account the save saving */
			oSettings.iInitDisplayStart = oInit.iDisplayStart;
			oSettings._iDisplayStart = oInit.iDisplayStart;
		}
		
		if ( oInit.iDeferLoading !== null )
		{
			oSettings.bDeferLoading = true;
			var tmp = Array.isArray( oInit.iDeferLoading );
			oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
			oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
		}
		
		/* Language definitions */
		var oLanguage = oSettings.oLanguage;
		$.extend( true, oLanguage, oInit.oLanguage );
		
		if ( oLanguage.sUrl )
		{
			/* Get the language definitions from a file - because this Ajax call makes the language
			 * get async to the remainder of this function we use bInitHandedOff to indicate that
			 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
			 */
			$.ajax( {
				dataType: 'json',
				url: oLanguage.sUrl,
				success: function ( json ) {
					_fnCamelToHungarian( defaults.oLanguage, json );
					_fnLanguageCompat( json );
					$.extend( true, oLanguage, json, oSettings.oInit.oLanguage );
		
					_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);
					_fnInitialise( oSettings );
				},
				error: function () {
					// Error occurred loading language file, continue on as best we can
					_fnInitialise( oSettings );
				}
			} );
			bInitHandedOff = true;
		}
		else {
			_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);
		}
		
		/*
		 * Stripes
		 */
		if ( oInit.asStripeClasses === null )
		{
			oSettings.asStripeClasses =[
				oClasses.sStripeOdd,
				oClasses.sStripeEven
			];
		}
		
		/* Remove row stripe classes if they are already on the table row */
		var stripeClasses = oSettings.asStripeClasses;
		var rowOne = $this.children('tbody').find('tr').eq(0);
		if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
			return rowOne.hasClass(el);
		} ) ) !== -1 ) {
			$('tbody tr', this).removeClass( stripeClasses.join(' ') );
			oSettings.asDestroyStripes = stripeClasses.slice();
		}
		
		/*
		 * Columns
		 * See if we should load columns automatically or use defined ones
		 */
		var anThs = [];
		var aoColumnsInit;
		var nThead = this.getElementsByTagName('thead');
		if ( nThead.length !== 0 )
		{
			_fnDetectHeader( oSettings.aoHeader, nThead[0] );
			anThs = _fnGetUniqueThs( oSettings );
		}
		
		/* If not given a column array, generate one with nulls */
		if ( oInit.aoColumns === null )
		{
			aoColumnsInit = [];
			for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
			{
				aoColumnsInit.push( null );
			}
		}
		else
		{
			aoColumnsInit = oInit.aoColumns;
		}
		
		/* Add the columns */
		for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
		{
			_fnAddColumn( oSettings, anThs ? anThs[i] : null );
		}
		
		/* Apply the column definitions */
		_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
			_fnColumnOptions( oSettings, iCol, oDef );
		} );
		
		/* HTML5 attribute detection - build an mData object automatically if the
		 * attributes are found
		 */
		if ( rowOne.length ) {
			var a = function ( cell, name ) {
				return cell.getAttribute( 'data-'+name ) !== null ? name : null;
			};
		
			$( rowOne[0] ).children('th, td').each( function (i, cell) {
				var col = oSettings.aoColumns[i];
		
				if (! col) {
					_fnLog( oSettings, 0, 'Incorrect column count', 18 );
				}
		
				if ( col.mData === i ) {
					var sort = a( cell, 'sort' ) || a( cell, 'order' );
					var filter = a( cell, 'filter' ) || a( cell, 'search' );
		
					if ( sort !== null || filter !== null ) {
						col.mData = {
							_:      i+'.display',
							sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
							type:   sort !== null   ? i+'.@data-'+sort   : undefined,
							filter: filter !== null ? i+'.@data-'+filter : undefined
						};
		
						_fnColumnOptions( oSettings, i );
					}
				}
			} );
		}
		
		var features = oSettings.oFeatures;
		var loadedInit = function () {
			/*
			 * Sorting
			 * @todo For modularisation (1.11) this needs to do into a sort start up handler
			 */
		
			// If aaSorting is not defined, then we use the first indicator in asSorting
			// in case that has been altered, so the default sort reflects that option
			if ( oInit.aaSorting === undefined ) {
				var sorting = oSettings.aaSorting;
				for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
					sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
				}
			}
		
			/* Do a first pass on the sorting classes (allows any size changes to be taken into
			 * account, and also will apply sorting disabled classes if disabled
			 */
			_fnSortingClasses( oSettings );
		
			if ( features.bSort ) {
				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
					if ( oSettings.bSorted ) {
						var aSort = _fnSortFlatten( oSettings );
						var sortedColumns = {};
		
						$.each( aSort, function (i, val) {
							sortedColumns[ val.src ] = val.dir;
						} );
		
						_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
						_fnSortAria( oSettings );
					}
				} );
			}
		
			_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
				if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
					_fnSortingClasses( oSettings );
				}
			}, 'sc' );
		
		
			/*
			 * Final init
			 * Cache the header, body and footer as required, creating them if needed
			 */
		
			// Work around for Webkit bug 83867 - store the caption-side before removing from doc
			var captions = $this.children('caption').each( function () {
				this._captionSide = $(this).css('caption-side');
			} );
		
			var thead = $this.children('thead');
			if ( thead.length === 0 ) {
				thead = $('<thead/>').appendTo($this);
			}
			oSettings.nTHead = thead[0];
		
			var tbody = $this.children('tbody');
			if ( tbody.length === 0 ) {
				tbody = $('<tbody/>').insertAfter(thead);
			}
			oSettings.nTBody = tbody[0];
		
			var tfoot = $this.children('tfoot');
			if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
				// If we are a scrolling table, and no footer has been given, then we need to create
				// a tfoot element for the caption element to be appended to
				tfoot = $('<tfoot/>').appendTo($this);
			}
		
			if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
				$this.addClass( oClasses.sNoFooter );
			}
			else if ( tfoot.length > 0 ) {
				oSettings.nTFoot = tfoot[0];
				_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
			}
		
			/* Check if there is data passing into the constructor */
			if ( oInit.aaData ) {
				for ( i=0 ; i<oInit.aaData.length ; i++ ) {
					_fnAddData( oSettings, oInit.aaData[ i ] );
				}
			}
			else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
				/* Grab the data from the page - only do this when deferred loading or no Ajax
				 * source since there is no point in reading the DOM data if we are then going
				 * to replace it with Ajax data
				 */
				_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
			}
		
			/* Copy the data index array */
			oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
		
			/* Initialisation complete - table can be drawn */
			oSettings.bInitialised = true;
		
			/* Check if we need to initialise the table (it might not have been handed off to the
			 * language processor)
			 */
			if ( bInitHandedOff === false ) {
				_fnInitialise( oSettings );
			}
		};
		
		/* Must be done after everything which can be overridden by the state saving! */
		_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
		
		if ( oInit.bStateSave )
		{
			features.bStateSave = true;
			_fnLoadState( oSettings, oInit, loadedInit );
		}
		else {
			loadedInit();
		}
		
	} );
	_that = null;
	return this;
};


/*
 * It is useful to have variables which are scoped locally so only the
 * DataTables functions can access them and they don't leak into global space.
 * At the same time these functions are often useful over multiple files in the
 * core and API, so we list, or at least document, all variables which are used
 * by DataTables as private variables here. This also ensures that there is no
 * clashing of variable names and that they can easily referenced for reuse.
 */


// Defined else where
//  _selector_run
//  _selector_opts
//  _selector_first
//  _selector_row_indexes

var _ext; // DataTable.ext
var _Api; // DataTable.Api
var _api_register; // DataTable.Api.register
var _api_registerPlural; // DataTable.Api.registerPlural

var _re_dic = {};
var _re_new_lines = /[\r\n\u2028]/g;
var _re_html = /<.*?>/g;

// This is not strict ISO8601 - Date.parse() is quite lax, although
// implementations differ between browsers.
var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;

// Escape regular expression special characters
var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );

// http://en.wikipedia.org/wiki/Foreign_exchange_market
// - \u20BD - Russian ruble.
// - \u20a9 - South Korean Won
// - \u20BA - Turkish Lira
// - \u20B9 - Indian Rupee
// - R - Brazil (R$) and South Africa
// - fr - Swiss Franc
// - kr - Swedish krona, Norwegian krone and Danish krone
// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
// - Ƀ - Bitcoin
// - Ξ - Ethereum
//   standards as thousands separators.
var _re_formatted_numeric = /['\u00A0,$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;


var _empty = function ( d ) {
	return !d || d === true || d === '-' ? true : false;
};


var _intVal = function ( s ) {
	var integer = parseInt( s, 10 );
	return !isNaN(integer) && isFinite(s) ? integer : null;
};

// Convert from a formatted number with characters other than `.` as the
// decimal place, to a Javascript number
var _numToDecimal = function ( num, decimalPoint ) {
	// Cache created regular expressions for speed as this function is called often
	if ( ! _re_dic[ decimalPoint ] ) {
		_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
	}
	return typeof num === 'string' && decimalPoint !== '.' ?
		num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
		num;
};


var _isNumber = function ( d, decimalPoint, formatted ) {
	let type = typeof d;
	var strType = type === 'string';

	if ( type === 'number' || type === 'bigint') {
		return true;
	}

	// If empty return immediately so there must be a number if it is a
	// formatted string (this stops the string "k", or "kr", etc being detected
	// as a formatted number for currency
	if ( _empty( d ) ) {
		return true;
	}

	if ( decimalPoint && strType ) {
		d = _numToDecimal( d, decimalPoint );
	}

	if ( formatted && strType ) {
		d = d.replace( _re_formatted_numeric, '' );
	}

	return !isNaN( parseFloat(d) ) && isFinite( d );
};


// A string without HTML in it can be considered to be HTML still
var _isHtml = function ( d ) {
	return _empty( d ) || typeof d === 'string';
};


var _htmlNumeric = function ( d, decimalPoint, formatted ) {
	if ( _empty( d ) ) {
		return true;
	}

	var html = _isHtml( d );
	return ! html ?
		null :
		_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
			true :
			null;
};


var _pluck = function ( a, prop, prop2 ) {
	var out = [];
	var i=0, ien=a.length;

	// Could have the test in the loop for slightly smaller code, but speed
	// is essential here
	if ( prop2 !== undefined ) {
		for ( ; i<ien ; i++ ) {
			if ( a[i] && a[i][ prop ] ) {
				out.push( a[i][ prop ][ prop2 ] );
			}
		}
	}
	else {
		for ( ; i<ien ; i++ ) {
			if ( a[i] ) {
				out.push( a[i][ prop ] );
			}
		}
	}

	return out;
};


// Basically the same as _pluck, but rather than looping over `a` we use `order`
// as the indexes to pick from `a`
var _pluck_order = function ( a, order, prop, prop2 )
{
	var out = [];
	var i=0, ien=order.length;

	// Could have the test in the loop for slightly smaller code, but speed
	// is essential here
	if ( prop2 !== undefined ) {
		for ( ; i<ien ; i++ ) {
			if ( a[ order[i] ][ prop ] ) {
				out.push( a[ order[i] ][ prop ][ prop2 ] );
			}
		}
	}
	else {
		for ( ; i<ien ; i++ ) {
			out.push( a[ order[i] ][ prop ] );
		}
	}

	return out;
};


var _range = function ( len, start )
{
	var out = [];
	var end;

	if ( start === undefined ) {
		start = 0;
		end = len;
	}
	else {
		end = start;
		start = len;
	}

	for ( var i=start ; i<end ; i++ ) {
		out.push( i );
	}

	return out;
};


var _removeEmpty = function ( a )
{
	var out = [];

	for ( var i=0, ien=a.length ; i<ien ; i++ ) {
		if ( a[i] ) { // careful - will remove all falsy values!
			out.push( a[i] );
		}
	}

	return out;
};


var _stripHtml = function ( d ) {
	return d.replace( _re_html, '' );
};


/**
 * Determine if all values in the array are unique. This means we can short
 * cut the _unique method at the cost of a single loop. A sorted array is used
 * to easily check the values.
 *
 * @param  {array} src Source array
 * @return {boolean} true if all unique, false otherwise
 * @ignore
 */
var _areAllUnique = function ( src ) {
	if ( src.length < 2 ) {
		return true;
	}

	var sorted = src.slice().sort();
	var last = sorted[0];

	for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
		if ( sorted[i] === last ) {
			return false;
		}

		last = sorted[i];
	}

	return true;
};


/**
 * Find the unique elements in a source array.
 *
 * @param  {array} src Source array
 * @return {array} Array of unique items
 * @ignore
 */
var _unique = function ( src )
{
	if ( _areAllUnique( src ) ) {
		return src.slice();
	}

	// A faster unique method is to use object keys to identify used values,
	// but this doesn't work with arrays or objects, which we must also
	// consider. See jsperf.com/compare-array-unique-versions/4 for more
	// information.
	var
		out = [],
		val,
		i, ien=src.length,
		j, k=0;

	again: for ( i=0 ; i<ien ; i++ ) {
		val = src[i];

		for ( j=0 ; j<k ; j++ ) {
			if ( out[j] === val ) {
				continue again;
			}
		}

		out.push( val );
		k++;
	}

	return out;
};

// Surprisingly this is faster than [].concat.apply
// https://jsperf.com/flatten-an-array-loop-vs-reduce/2
var _flatten = function (out, val) {
	if (Array.isArray(val)) {
		for (var i=0 ; i<val.length ; i++) {
			_flatten(out, val[i]);
		}
	}
	else {
		out.push(val);
	}
  
	return out;
}

var _includes = function (search, start) {
	if (start === undefined) {
		start = 0;
	}

	return this.indexOf(search, start) !== -1;	
};

// Array.isArray polyfill.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
if (! Array.isArray) {
    Array.isArray = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };
}

if (! Array.prototype.includes) {
	Array.prototype.includes = _includes;
}

// .trim() polyfill
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim
if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
  };
}

if (! String.prototype.includes) {
	String.prototype.includes = _includes;
}

/**
 * DataTables utility methods
 * 
 * This namespace provides helper methods that DataTables uses internally to
 * create a DataTable, but which are not exclusively used only for DataTables.
 * These methods can be used by extension authors to save the duplication of
 * code.
 *
 *  @namespace
 */
DataTable.util = {
	/**
	 * Throttle the calls to a function. Arguments and context are maintained
	 * for the throttled function.
	 *
	 * @param {function} fn Function to be called
	 * @param {integer} freq Call frequency in mS
	 * @return {function} Wrapped function
	 */
	throttle: function ( fn, freq ) {
		var
			frequency = freq !== undefined ? freq : 200,
			last,
			timer;

		return function () {
			var
				that = this,
				now  = +new Date(),
				args = arguments;

			if ( last && now < last + frequency ) {
				clearTimeout( timer );

				timer = setTimeout( function () {
					last = undefined;
					fn.apply( that, args );
				}, frequency );
			}
			else {
				last = now;
				fn.apply( that, args );
			}
		};
	},


	/**
	 * Escape a string such that it can be used in a regular expression
	 *
	 *  @param {string} val string to escape
	 *  @returns {string} escaped string
	 */
	escapeRegex: function ( val ) {
		return val.replace( _re_escape_regex, '\\$1' );
	},

	/**
	 * Create a function that will write to a nested object or array
	 * @param {*} source JSON notation string
	 * @returns Write function
	 */
	set: function ( source ) {
		if ( $.isPlainObject( source ) ) {
			/* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
			return DataTable.util.set( source._ );
		}
		else if ( source === null ) {
			// Nothing to do when the data source is null
			return function () {};
		}
		else if ( typeof source === 'function' ) {
			return function (data, val, meta) {
				source( data, 'set', val, meta );
			};
		}
		else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||
				  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )
		{
			// Like the get, we need to get data from a nested object
			var setData = function (data, val, src) {
				var a = _fnSplitObjNotation( src ), b;
				var aLast = a[a.length-1];
				var arrayNotation, funcNotation, o, innerSrc;
	
				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ ) {
					// Protect against prototype pollution
					if (a[i] === '__proto__' || a[i] === 'constructor') {
						throw new Error('Cannot set prototype values');
					}
	
					// Check if we are dealing with an array notation request
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);
	
					if ( arrayNotation ) {
						a[i] = a[i].replace(__reArray, '');
						data[ a[i] ] = [];
	
						// Get the remainder of the nested object to set so we can recurse
						b = a.slice();
						b.splice( 0, i+1 );
						innerSrc = b.join('.');
	
						// Traverse each entry in the array setting the properties requested
						if ( Array.isArray( val ) ) {
							for ( var j=0, jLen=val.length ; j<jLen ; j++ ) {
								o = {};
								setData( o, val[j], innerSrc );
								data[ a[i] ].push( o );
							}
						}
						else {
							// We've been asked to save data to an array, but it
							// isn't array data to be saved. Best that can be done
							// is to just save the value.
							data[ a[i] ] = val;
						}
	
						// The inner call to setData has already traversed through the remainder
						// of the source and has set the data, thus we can exit here
						return;
					}
					else if ( funcNotation ) {
						// Function call
						a[i] = a[i].replace(__reFn, '');
						data = data[ a[i] ]( val );
					}
	
					// If the nested object doesn't currently exist - since we are
					// trying to set the value - create it
					if ( data[ a[i] ] === null || data[ a[i] ] === undefined ) {
						data[ a[i] ] = {};
					}
					data = data[ a[i] ];
				}
	
				// Last item in the input - i.e, the actual set
				if ( aLast.match(__reFn ) ) {
					// Function call
					data = data[ aLast.replace(__reFn, '') ]( val );
				}
				else {
					// If array notation is used, we just want to strip it and use the property name
					// and assign the value. If it isn't used, then we get the result we want anyway
					data[ aLast.replace(__reArray, '') ] = val;
				}
			};
	
			return function (data, val) { // meta is also passed in, but not used
				return setData( data, val, source );
			};
		}
		else {
			// Array or flat object mapping
			return function (data, val) { // meta is also passed in, but not used
				data[source] = val;
			};
		}
	},

	/**
	 * Create a function that will read nested objects from arrays, based on JSON notation
	 * @param {*} source JSON notation string
	 * @returns Value read
	 */
	get: function ( source ) {
		if ( $.isPlainObject( source ) ) {
			// Build an object of get functions, and wrap them in a single call
			var o = {};
			$.each( source, function (key, val) {
				if ( val ) {
					o[key] = DataTable.util.get( val );
				}
			} );
	
			return function (data, type, row, meta) {
				var t = o[type] || o._;
				return t !== undefined ?
					t(data, type, row, meta) :
					data;
			};
		}
		else if ( source === null ) {
			// Give an empty string for rendering / sorting etc
			return function (data) { // type, row and meta also passed, but not used
				return data;
			};
		}
		else if ( typeof source === 'function' ) {
			return function (data, type, row, meta) {
				return source( data, type, row, meta );
			};
		}
		else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||
				  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )
		{
			/* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
			var fetchData = function (data, type, src) {
				var arrayNotation, funcNotation, out, innerSrc;
	
				if ( src !== "" ) {
					var a = _fnSplitObjNotation( src );
	
					for ( var i=0, iLen=a.length ; i<iLen ; i++ ) {
						// Check if we are dealing with special notation
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);
	
						if ( arrayNotation ) {
							// Array notation
							a[i] = a[i].replace(__reArray, '');
	
							// Condition allows simply [] to be passed in
							if ( a[i] !== "" ) {
								data = data[ a[i] ];
							}
							out = [];
	
							// Get the remainder of the nested object to get
							a.splice( 0, i+1 );
							innerSrc = a.join('.');
	
							// Traverse each entry in the array getting the properties requested
							if ( Array.isArray( data ) ) {
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
									out.push( fetchData( data[j], type, innerSrc ) );
								}
							}
	
							// If a string is given in between the array notation indicators, that
							// is used to join the strings together, otherwise an array is returned
							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
							data = (join==="") ? out : out.join(join);
	
							// The inner call to fetchData has already traversed through the remainder
							// of the source requested, so we exit from the loop
							break;
						}
						else if ( funcNotation ) {
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]();
							continue;
						}
	
						if ( data === null || data[ a[i] ] === undefined ) {
							return undefined;
						}

						data = data[ a[i] ];
					}
				}
	
				return data;
			};
	
			return function (data, type) { // row and meta also passed, but not used
				return fetchData( data, type, source );
			};
		}
		else {
			// Array or flat object mapping
			return function (data, type) { // row and meta also passed, but not used
				return data[source];
			};
		}
	}
};



/**
 * Create a mapping object that allows camel case parameters to be looked up
 * for their Hungarian counterparts. The mapping is stored in a private
 * parameter called `_hungarianMap` which can be accessed on the source object.
 *  @param {object} o
 *  @memberof DataTable#oApi
 */
function _fnHungarianMap ( o )
{
	var
		hungarian = 'a aa ai ao as b fn i m o s ',
		match,
		newKey,
		map = {};

	$.each( o, function (key, val) {
		match = key.match(/^([^A-Z]+?)([A-Z])/);

		if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
		{
			newKey = key.replace( match[0], match[2].toLowerCase() );
			map[ newKey ] = key;

			if ( match[1] === 'o' )
			{
				_fnHungarianMap( o[key] );
			}
		}
	} );

	o._hungarianMap = map;
}


/**
 * Convert from camel case parameters to Hungarian, based on a Hungarian map
 * created by _fnHungarianMap.
 *  @param {object} src The model object which holds all parameters that can be
 *    mapped.
 *  @param {object} user The object to convert from camel case to Hungarian.
 *  @param {boolean} force When set to `true`, properties which already have a
 *    Hungarian value in the `user` object will be overwritten. Otherwise they
 *    won't be.
 *  @memberof DataTable#oApi
 */
function _fnCamelToHungarian ( src, user, force )
{
	if ( ! src._hungarianMap ) {
		_fnHungarianMap( src );
	}

	var hungarianKey;

	$.each( user, function (key, val) {
		hungarianKey = src._hungarianMap[ key ];

		if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
		{
			// For objects, we need to buzz down into the object to copy parameters
			if ( hungarianKey.charAt(0) === 'o' )
			{
				// Copy the camelCase options over to the hungarian
				if ( ! user[ hungarianKey ] ) {
					user[ hungarianKey ] = {};
				}
				$.extend( true, user[hungarianKey], user[key] );

				_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
			}
			else {
				user[hungarianKey] = user[ key ];
			}
		}
	} );
}


/**
 * Language compatibility - when certain options are given, and others aren't, we
 * need to duplicate the values over, in order to provide backwards compatibility
 * with older language files.
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnLanguageCompat( lang )
{
	// Note the use of the Hungarian notation for the parameters in this method as
	// this is called after the mapping of camelCase to Hungarian
	var defaults = DataTable.defaults.oLanguage;

	// Default mapping
	var defaultDecimal = defaults.sDecimal;
	if ( defaultDecimal ) {
		_addNumericSort( defaultDecimal );
	}

	if ( lang ) {
		var zeroRecords = lang.sZeroRecords;

		// Backwards compatibility - if there is no sEmptyTable given, then use the same as
		// sZeroRecords - assuming that is given.
		if ( ! lang.sEmptyTable && zeroRecords &&
			defaults.sEmptyTable === "No data available in table" )
		{
			_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
		}

		// Likewise with loading records
		if ( ! lang.sLoadingRecords && zeroRecords &&
			defaults.sLoadingRecords === "Loading..." )
		{
			_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
		}

		// Old parameter name of the thousands separator mapped onto the new
		if ( lang.sInfoThousands ) {
			lang.sThousands = lang.sInfoThousands;
		}

		var decimal = lang.sDecimal;
		if ( decimal && defaultDecimal !== decimal ) {
			_addNumericSort( decimal );
		}
	}
}


/**
 * Map one parameter onto another
 *  @param {object} o Object to map
 *  @param {*} knew The new parameter name
 *  @param {*} old The old parameter name
 */
var _fnCompatMap = function ( o, knew, old ) {
	if ( o[ knew ] !== undefined ) {
		o[ old ] = o[ knew ];
	}
};


/**
 * Provide backwards compatibility for the main DT options. Note that the new
 * options are mapped onto the old parameters, so this is an external interface
 * change only.
 *  @param {object} init Object to map
 */
function _fnCompatOpts ( init )
{
	_fnCompatMap( init, 'ordering',      'bSort' );
	_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
	_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
	_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
	_fnCompatMap( init, 'order',         'aaSorting' );
	_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
	_fnCompatMap( init, 'paging',        'bPaginate' );
	_fnCompatMap( init, 'pagingType',    'sPaginationType' );
	_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
	_fnCompatMap( init, 'searching',     'bFilter' );

	// Boolean initialisation of x-scrolling
	if ( typeof init.sScrollX === 'boolean' ) {
		init.sScrollX = init.sScrollX ? '100%' : '';
	}
	if ( typeof init.scrollX === 'boolean' ) {
		init.scrollX = init.scrollX ? '100%' : '';
	}

	// Column search objects are in an array, so it needs to be converted
	// element by element
	var searchCols = init.aoSearchCols;

	if ( searchCols ) {
		for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
			if ( searchCols[i] ) {
				_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
			}
		}
	}
}


/**
 * Provide backwards compatibility for column options. Note that the new options
 * are mapped onto the old parameters, so this is an external interface change
 * only.
 *  @param {object} init Object to map
 */
function _fnCompatCols ( init )
{
	_fnCompatMap( init, 'orderable',     'bSortable' );
	_fnCompatMap( init, 'orderData',     'aDataSort' );
	_fnCompatMap( init, 'orderSequence', 'asSorting' );
	_fnCompatMap( init, 'orderDataType', 'sortDataType' );

	// orderData can be given as an integer
	var dataSort = init.aDataSort;
	if ( typeof dataSort === 'number' && ! Array.isArray( dataSort ) ) {
		init.aDataSort = [ dataSort ];
	}
}


/**
 * Browser feature detection for capabilities, quirks
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnBrowserDetect( settings )
{
	// We don't need to do this every time DataTables is constructed, the values
	// calculated are specific to the browser and OS configuration which we
	// don't expect to change between initialisations
	if ( ! DataTable.__browser ) {
		var browser = {};
		DataTable.__browser = browser;

		// Scrolling feature / quirks detection
		var n = $('<div/>')
			.css( {
				position: 'fixed',
				top: 0,
				left: $(window).scrollLeft()*-1, // allow for scrolling
				height: 1,
				width: 1,
				overflow: 'hidden'
			} )
			.append(
				$('<div/>')
					.css( {
						position: 'absolute',
						top: 1,
						left: 1,
						width: 100,
						overflow: 'scroll'
					} )
					.append(
						$('<div/>')
							.css( {
								width: '100%',
								height: 10
							} )
					)
			)
			.appendTo( 'body' );

		var outer = n.children();
		var inner = outer.children();

		// Numbers below, in order, are:
		// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
		//
		// IE6 XP:                           100 100 100  83
		// IE7 Vista:                        100 100 100  83
		// IE 8+ Windows:                     83  83 100  83
		// Evergreen Windows:                 83  83 100  83
		// Evergreen Mac with scrollbars:     85  85 100  85
		// Evergreen Mac without scrollbars: 100 100 100 100

		// Get scrollbar width
		browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

		// IE6/7 will oversize a width 100% element inside a scrolling element, to
		// include the width of the scrollbar, while other browsers ensure the inner
		// element is contained without forcing scrolling
		browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

		// In rtl text layout, some browsers (most, but not all) will place the
		// scrollbar on the left, rather than the right.
		browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;

		// IE8- don't provide height and width for getBoundingClientRect
		browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

		n.remove();
	}

	$.extend( settings.oBrowser, DataTable.__browser );
	settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
}


/**
 * Array.prototype reduce[Right] method, used for browsers which don't support
 * JS 1.6. Done this way to reduce code size, since we iterate either way
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnReduce ( that, fn, init, start, end, inc )
{
	var
		i = start,
		value,
		isSet = false;

	if ( init !== undefined ) {
		value = init;
		isSet = true;
	}

	while ( i !== end ) {
		if ( ! that.hasOwnProperty(i) ) {
			continue;
		}

		value = isSet ?
			fn( value, that[i], i, that ) :
			that[i];

		isSet = true;
		i += inc;
	}

	return value;
}

/**
 * Add a column to the list used for the table with default values
 *  @param {object} oSettings dataTables settings object
 *  @param {node} nTh The th element for this column
 *  @memberof DataTable#oApi
 */
function _fnAddColumn( oSettings, nTh )
{
	// Add column to aoColumns array
	var oDefaults = DataTable.defaults.column;
	var iCol = oSettings.aoColumns.length;
	var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
		"nTh": nTh ? nTh : document.createElement('th'),
		"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
		"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
		"mData": oDefaults.mData ? oDefaults.mData : iCol,
		idx: iCol
	} );
	oSettings.aoColumns.push( oCol );

	// Add search object for column specific search. Note that the `searchCols[ iCol ]`
	// passed into extend can be undefined. This allows the user to give a default
	// with only some of the parameters defined, and also not give a default
	var searchCols = oSettings.aoPreSearchCols;
	searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );

	// Use the default column options function to initialise classes etc
	_fnColumnOptions( oSettings, iCol, $(nTh).data() );
}


/**
 * Apply options for a column
 *  @param {object} oSettings dataTables settings object
 *  @param {int} iCol column index to consider
 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
 *  @memberof DataTable#oApi
 */
function _fnColumnOptions( oSettings, iCol, oOptions )
{
	var oCol = oSettings.aoColumns[ iCol ];
	var oClasses = oSettings.oClasses;
	var th = $(oCol.nTh);

	// Try to get width information from the DOM. We can't get it from CSS
	// as we'd need to parse the CSS stylesheet. `width` option can override
	if ( ! oCol.sWidthOrig ) {
		// Width attribute
		oCol.sWidthOrig = th.attr('width') || null;

		// Style attribute
		var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
		if ( t ) {
			oCol.sWidthOrig = t[1];
		}
	}

	/* User specified column options */
	if ( oOptions !== undefined && oOptions !== null )
	{
		// Backwards compatibility
		_fnCompatCols( oOptions );

		// Map camel case parameters to their Hungarian counterparts
		_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );

		/* Backwards compatibility for mDataProp */
		if ( oOptions.mDataProp !== undefined && !oOptions.mData )
		{
			oOptions.mData = oOptions.mDataProp;
		}

		if ( oOptions.sType )
		{
			oCol._sManualType = oOptions.sType;
		}

		// `class` is a reserved word in Javascript, so we need to provide
		// the ability to use a valid name for the camel case input
		if ( oOptions.className && ! oOptions.sClass )
		{
			oOptions.sClass = oOptions.className;
		}
		if ( oOptions.sClass ) {
			th.addClass( oOptions.sClass );
		}

		var origClass = oCol.sClass;

		$.extend( oCol, oOptions );
		_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );

		// Merge class from previously defined classes with this one, rather than just
		// overwriting it in the extend above
		if (origClass !== oCol.sClass) {
			oCol.sClass = origClass + ' ' + oCol.sClass;
		}

		/* iDataSort to be applied (backwards compatibility), but aDataSort will take
		 * priority if defined
		 */
		if ( oOptions.iDataSort !== undefined )
		{
			oCol.aDataSort = [ oOptions.iDataSort ];
		}
		_fnMap( oCol, oOptions, "aDataSort" );
	}

	/* Cache the data get and set functions for speed */
	var mDataSrc = oCol.mData;
	var mData = _fnGetObjectDataFn( mDataSrc );
	var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;

	var attrTest = function( src ) {
		return typeof src === 'string' && src.indexOf('@') !== -1;
	};
	oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
		attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
	);
	oCol._setter = null;

	oCol.fnGetData = function (rowData, type, meta) {
		var innerData = mData( rowData, type, undefined, meta );

		return mRender && type ?
			mRender( innerData, type, rowData, meta ) :
			innerData;
	};
	oCol.fnSetData = function ( rowData, val, meta ) {
		return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
	};

	// Indicate if DataTables should read DOM data as an object or array
	// Used in _fnGetRowElements
	if ( typeof mDataSrc !== 'number' ) {
		oSettings._rowReadObject = true;
	}

	/* Feature sorting overrides column specific when off */
	if ( !oSettings.oFeatures.bSort )
	{
		oCol.bSortable = false;
		th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
	}

	/* Check that the class assignment is correct for sorting */
	var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
	var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
	if ( !oCol.bSortable || (!bAsc && !bDesc) )
	{
		oCol.sSortingClass = oClasses.sSortableNone;
		oCol.sSortingClassJUI = "";
	}
	else if ( bAsc && !bDesc )
	{
		oCol.sSortingClass = oClasses.sSortableAsc;
		oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
	}
	else if ( !bAsc && bDesc )
	{
		oCol.sSortingClass = oClasses.sSortableDesc;
		oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
	}
	else
	{
		oCol.sSortingClass = oClasses.sSortable;
		oCol.sSortingClassJUI = oClasses.sSortJUI;
	}
}


/**
 * Adjust the table column widths for new data. Note: you would probably want to
 * do a redraw after calling this function!
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnAdjustColumnSizing ( settings )
{
	/* Not interested in doing column width calculation if auto-width is disabled */
	if ( settings.oFeatures.bAutoWidth !== false )
	{
		var columns = settings.aoColumns;

		_fnCalculateColumnWidths( settings );
		for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
		{
			columns[i].nTh.style.width = columns[i].sWidth;
		}
	}

	var scroll = settings.oScroll;
	if ( scroll.sY !== '' || scroll.sX !== '')
	{
		_fnScrollDraw( settings );
	}

	_fnCallbackFire( settings, null, 'column-sizing', [settings] );
}


/**
 * Convert the index of a visible column to the index in the data array (take account
 * of hidden columns)
 *  @param {object} oSettings dataTables settings object
 *  @param {int} iMatch Visible column index to lookup
 *  @returns {int} i the data index
 *  @memberof DataTable#oApi
 */
function _fnVisibleToColumnIndex( oSettings, iMatch )
{
	var aiVis = _fnGetColumns( oSettings, 'bVisible' );

	return typeof aiVis[iMatch] === 'number' ?
		aiVis[iMatch] :
		null;
}


/**
 * Convert the index of an index in the data array and convert it to the visible
 *   column index (take account of hidden columns)
 *  @param {int} iMatch Column index to lookup
 *  @param {object} oSettings dataTables settings object
 *  @returns {int} i the data index
 *  @memberof DataTable#oApi
 */
function _fnColumnIndexToVisible( oSettings, iMatch )
{
	var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	var iPos = $.inArray( iMatch, aiVis );

	return iPos !== -1 ? iPos : null;
}


/**
 * Get the number of visible columns
 *  @param {object} oSettings dataTables settings object
 *  @returns {int} i the number of visible columns
 *  @memberof DataTable#oApi
 */
function _fnVisbleColumns( oSettings )
{
	var vis = 0;

	// No reduce in IE8, use a loop for now
	$.each( oSettings.aoColumns, function ( i, col ) {
		if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
			vis++;
		}
	} );

	return vis;
}


/**
 * Get an array of column indexes that match a given property
 *  @param {object} oSettings dataTables settings object
 *  @param {string} sParam Parameter in aoColumns to look for - typically
 *    bVisible or bSearchable
 *  @returns {array} Array of indexes with matched properties
 *  @memberof DataTable#oApi
 */
function _fnGetColumns( oSettings, sParam )
{
	var a = [];

	$.map( oSettings.aoColumns, function(val, i) {
		if ( val[sParam] ) {
			a.push( i );
		}
	} );

	return a;
}


/**
 * Calculate the 'type' of a column
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnColumnTypes ( settings )
{
	var columns = settings.aoColumns;
	var data = settings.aoData;
	var types = DataTable.ext.type.detect;
	var i, ien, j, jen, k, ken;
	var col, cell, detectedType, cache;

	// For each column, spin over the 
	for ( i=0, ien=columns.length ; i<ien ; i++ ) {
		col = columns[i];
		cache = [];

		if ( ! col.sType && col._sManualType ) {
			col.sType = col._sManualType;
		}
		else if ( ! col.sType ) {
			for ( j=0, jen=types.length ; j<jen ; j++ ) {
				for ( k=0, ken=data.length ; k<ken ; k++ ) {
					// Use a cache array so we only need to get the type data
					// from the formatter once (when using multiple detectors)
					if ( cache[k] === undefined ) {
						cache[k] = _fnGetCellData( settings, k, i, 'type' );
					}

					detectedType = types[j]( cache[k], settings );

					// If null, then this type can't apply to this column, so
					// rather than testing all cells, break out. There is an
					// exception for the last type which is `html`. We need to
					// scan all rows since it is possible to mix string and HTML
					// types
					if ( ! detectedType && j !== types.length-1 ) {
						break;
					}

					// Only a single match is needed for html type since it is
					// bottom of the pile and very similar to string - but it
					// must not be empty
					if ( detectedType === 'html' && ! _empty(cache[k]) ) {
						break;
					}
				}

				// Type is valid for all data points in the column - use this
				// type
				if ( detectedType ) {
					col.sType = detectedType;
					break;
				}
			}

			// Fall back - if no type was detected, always use string
			if ( ! col.sType ) {
				col.sType = 'string';
			}
		}
	}
}


/**
 * Take the column definitions and static columns arrays and calculate how
 * they relate to column indexes. The callback function will then apply the
 * definition found for a column to a suitable configuration object.
 *  @param {object} oSettings dataTables settings object
 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
 *  @param {array} aoCols The aoColumns array that defines columns individually
 *  @param {function} fn Callback function - takes two parameters, the calculated
 *    column index and the definition for that column.
 *  @memberof DataTable#oApi
 */
function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
{
	var i, iLen, j, jLen, k, kLen, def;
	var columns = oSettings.aoColumns;

	// Column definitions with aTargets
	if ( aoColDefs )
	{
		/* Loop over the definitions array - loop in reverse so first instance has priority */
		for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
		{
			def = aoColDefs[i];

			/* Each definition can target multiple columns, as it is an array */
			var aTargets = def.target !== undefined
				? def.target
				: def.targets !== undefined
					? def.targets
					: def.aTargets;

			if ( ! Array.isArray( aTargets ) )
			{
				aTargets = [ aTargets ];
			}

			for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
			{
				if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
				{
					/* Add columns that we don't yet know about */
					while( columns.length <= aTargets[j] )
					{
						_fnAddColumn( oSettings );
					}

					/* Integer, basic index */
					fn( aTargets[j], def );
				}
				else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
				{
					/* Negative integer, right to left column counting */
					fn( columns.length+aTargets[j], def );
				}
				else if ( typeof aTargets[j] === 'string' )
				{
					/* Class name matching on TH element */
					for ( k=0, kLen=columns.length ; k<kLen ; k++ )
					{
						if ( aTargets[j] == "_all" ||
						     $(columns[k].nTh).hasClass( aTargets[j] ) )
						{
							fn( k, def );
						}
					}
				}
			}
		}
	}

	// Statically defined columns array
	if ( aoCols )
	{
		for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
		{
			fn( i, aoCols[i] );
		}
	}
}

/**
 * Add a data array to the table, creating DOM node etc. This is the parallel to
 * _fnGatherData, but for adding rows from a Javascript source, rather than a
 * DOM source.
 *  @param {object} oSettings dataTables settings object
 *  @param {array} aData data array to be added
 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
 *    DataTables will create a row automatically
 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
 *    if nTr is.
 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
 *  @memberof DataTable#oApi
 */
function _fnAddData ( oSettings, aDataIn, nTr, anTds )
{
	/* Create the object for storing information about this new row */
	var iRow = oSettings.aoData.length;
	var oData = $.extend( true, {}, DataTable.models.oRow, {
		src: nTr ? 'dom' : 'data',
		idx: iRow
	} );

	oData._aData = aDataIn;
	oSettings.aoData.push( oData );

	/* Create the cells */
	var nTd, sThisType;
	var columns = oSettings.aoColumns;

	// Invalidate the column types as the new data needs to be revalidated
	for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
	{
		columns[i].sType = null;
	}

	/* Add to the display array */
	oSettings.aiDisplayMaster.push( iRow );

	var id = oSettings.rowIdFn( aDataIn );
	if ( id !== undefined ) {
		oSettings.aIds[ id ] = oData;
	}

	/* Create the DOM information, or register it if already present */
	if ( nTr || ! oSettings.oFeatures.bDeferRender )
	{
		_fnCreateTr( oSettings, iRow, nTr, anTds );
	}

	return iRow;
}


/**
 * Add one or more TR elements to the table. Generally we'd expect to
 * use this for reading data from a DOM sourced table, but it could be
 * used for an TR element. Note that if a TR is given, it is used (i.e.
 * it is not cloned).
 *  @param {object} settings dataTables settings object
 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
 *  @returns {array} Array of indexes for the added rows
 *  @memberof DataTable#oApi
 */
function _fnAddTr( settings, trs )
{
	var row;

	// Allow an individual node to be passed in
	if ( ! (trs instanceof $) ) {
		trs = $(trs);
	}

	return trs.map( function (i, el) {
		row = _fnGetRowElements( settings, el );
		return _fnAddData( settings, row.data, el, row.cells );
	} );
}


/**
 * Take a TR element and convert it to an index in aoData
 *  @param {object} oSettings dataTables settings object
 *  @param {node} n the TR element to find
 *  @returns {int} index if the node is found, null if not
 *  @memberof DataTable#oApi
 */
function _fnNodeToDataIndex( oSettings, n )
{
	return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
}


/**
 * Take a TD element and convert it into a column data index (not the visible index)
 *  @param {object} oSettings dataTables settings object
 *  @param {int} iRow The row number the TD/TH can be found in
 *  @param {node} n The TD/TH element to find
 *  @returns {int} index if the node is found, -1 if not
 *  @memberof DataTable#oApi
 */
function _fnNodeToColumnIndex( oSettings, iRow, n )
{
	return $.inArray( n, oSettings.aoData[ iRow ].anCells );
}


/**
 * Get the data for a given cell from the internal cache, taking into account data mapping
 *  @param {object} settings dataTables settings object
 *  @param {int} rowIdx aoData row id
 *  @param {int} colIdx Column index
 *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')
 *  @returns {*} Cell data
 *  @memberof DataTable#oApi
 */
function _fnGetCellData( settings, rowIdx, colIdx, type )
{
	if (type === 'search') {
		type = 'filter';
	}
	else if (type === 'order') {
		type = 'sort';
	}

	var draw           = settings.iDraw;
	var col            = settings.aoColumns[colIdx];
	var rowData        = settings.aoData[rowIdx]._aData;
	var defaultContent = col.sDefaultContent;
	var cellData       = col.fnGetData( rowData, type, {
		settings: settings,
		row:      rowIdx,
		col:      colIdx
	} );

	if ( cellData === undefined ) {
		if ( settings.iDrawError != draw && defaultContent === null ) {
			_fnLog( settings, 0, "Requested unknown parameter "+
				(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
				" for row "+rowIdx+", column "+colIdx, 4 );
			settings.iDrawError = draw;
		}
		return defaultContent;
	}

	// When the data source is null and a specific data type is requested (i.e.
	// not the original data), we can use default column data
	if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
		cellData = defaultContent;
	}
	else if ( typeof cellData === 'function' ) {
		// If the data source is a function, then we run it and use the return,
		// executing in the scope of the data object (for instances)
		return cellData.call( rowData );
	}

	if ( cellData === null && type === 'display' ) {
		return '';
	}

	if ( type === 'filter' ) {
		var fomatters = DataTable.ext.type.search;

		if ( fomatters[ col.sType ] ) {
			cellData = fomatters[ col.sType ]( cellData );
		}
	}

	return cellData;
}


/**
 * Set the value for a specific cell, into the internal data cache
 *  @param {object} settings dataTables settings object
 *  @param {int} rowIdx aoData row id
 *  @param {int} colIdx Column index
 *  @param {*} val Value to set
 *  @memberof DataTable#oApi
 */
function _fnSetCellData( settings, rowIdx, colIdx, val )
{
	var col     = settings.aoColumns[colIdx];
	var rowData = settings.aoData[rowIdx]._aData;

	col.fnSetData( rowData, val, {
		settings: settings,
		row:      rowIdx,
		col:      colIdx
	}  );
}


// Private variable that is used to match action syntax in the data property object
var __reArray = /\[.*?\]$/;
var __reFn = /\(\)$/;

/**
 * Split string on periods, taking into account escaped periods
 * @param  {string} str String to split
 * @return {array} Split string
 */
function _fnSplitObjNotation( str )
{
	return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
		return s.replace(/\\\./g, '.');
	} );
}


/**
 * Return a function that can be used to get data from a source object, taking
 * into account the ability to use nested objects as a source
 *  @param {string|int|function} mSource The data source for the object
 *  @returns {function} Data get function
 *  @memberof DataTable#oApi
 */
var _fnGetObjectDataFn = DataTable.util.get;


/**
 * Return a function that can be used to set data from a source object, taking
 * into account the ability to use nested objects as a source
 *  @param {string|int|function} mSource The data source for the object
 *  @returns {function} Data set function
 *  @memberof DataTable#oApi
 */
var _fnSetObjectDataFn = DataTable.util.set;


/**
 * Return an array with the full table data
 *  @param {object} oSettings dataTables settings object
 *  @returns array {array} aData Master data array
 *  @memberof DataTable#oApi
 */
function _fnGetDataMaster ( settings )
{
	return _pluck( settings.aoData, '_aData' );
}


/**
 * Nuke the table
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnClearTable( settings )
{
	settings.aoData.length = 0;
	settings.aiDisplayMaster.length = 0;
	settings.aiDisplay.length = 0;
	settings.aIds = {};
}


 /**
 * Take an array of integers (index array) and remove a target integer (value - not
 * the key!)
 *  @param {array} a Index array to target
 *  @param {int} iTarget value to find
 *  @memberof DataTable#oApi
 */
function _fnDeleteIndex( a, iTarget, splice )
{
	var iTargetIndex = -1;

	for ( var i=0, iLen=a.length ; i<iLen ; i++ )
	{
		if ( a[i] == iTarget )
		{
			iTargetIndex = i;
		}
		else if ( a[i] > iTarget )
		{
			a[i]--;
		}
	}

	if ( iTargetIndex != -1 && splice === undefined )
	{
		a.splice( iTargetIndex, 1 );
	}
}


/**
 * Mark cached data as invalid such that a re-read of the data will occur when
 * the cached data is next requested. Also update from the data source object.
 *
 * @param {object} settings DataTables settings object
 * @param {int}    rowIdx   Row index to invalidate
 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
 *     or 'data'
 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
 *     row will be invalidated
 * @memberof DataTable#oApi
 *
 * @todo For the modularisation of v1.11 this will need to become a callback, so
 *   the sort and filter methods can subscribe to it. That will required
 *   initialisation options for sorting, which is why it is not already baked in
 */
function _fnInvalidate( settings, rowIdx, src, colIdx )
{
	var row = settings.aoData[ rowIdx ];
	var i, ien;
	var cellWrite = function ( cell, col ) {
		// This is very frustrating, but in IE if you just write directly
		// to innerHTML, and elements that are overwritten are GC'ed,
		// even if there is a reference to them elsewhere
		while ( cell.childNodes.length ) {
			cell.removeChild( cell.firstChild );
		}

		cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
	};

	// Are we reading last data from DOM or the data object?
	if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
		// Read the data from the DOM
		row._aData = _fnGetRowElements(
				settings, row, colIdx, colIdx === undefined ? undefined : row._aData
			)
			.data;
	}
	else {
		// Reading from data object, update the DOM
		var cells = row.anCells;

		if ( cells ) {
			if ( colIdx !== undefined ) {
				cellWrite( cells[colIdx], colIdx );
			}
			else {
				for ( i=0, ien=cells.length ; i<ien ; i++ ) {
					cellWrite( cells[i], i );
				}
			}
		}
	}

	// For both row and cell invalidation, the cached data for sorting and
	// filtering is nulled out
	row._aSortData = null;
	row._aFilterData = null;

	// Invalidate the type for a specific column (if given) or all columns since
	// the data might have changed
	var cols = settings.aoColumns;
	if ( colIdx !== undefined ) {
		cols[ colIdx ].sType = null;
	}
	else {
		for ( i=0, ien=cols.length ; i<ien ; i++ ) {
			cols[i].sType = null;
		}

		// Update DataTables special `DT_*` attributes for the row
		_fnRowAttributes( settings, row );
	}
}


/**
 * Build a data source object from an HTML row, reading the contents of the
 * cells that are in the row.
 *
 * @param {object} settings DataTables settings object
 * @param {node|object} TR element from which to read data or existing row
 *   object from which to re-read the data from the cells
 * @param {int} [colIdx] Optional column index
 * @param {array|object} [d] Data source object. If `colIdx` is given then this
 *   parameter should also be given and will be used to write the data into.
 *   Only the column in question will be written
 * @returns {object} Object with two parameters: `data` the data read, in
 *   document order, and `cells` and array of nodes (they can be useful to the
 *   caller, so rather than needing a second traversal to get them, just return
 *   them from here).
 * @memberof DataTable#oApi
 */
function _fnGetRowElements( settings, row, colIdx, d )
{
	var
		tds = [],
		td = row.firstChild,
		name, col, o, i=0, contents,
		columns = settings.aoColumns,
		objectRead = settings._rowReadObject;

	// Allow the data object to be passed in, or construct
	d = d !== undefined ?
		d :
		objectRead ?
			{} :
			[];

	var attr = function ( str, td  ) {
		if ( typeof str === 'string' ) {
			var idx = str.indexOf('@');

			if ( idx !== -1 ) {
				var attr = str.substring( idx+1 );
				var setter = _fnSetObjectDataFn( str );
				setter( d, td.getAttribute( attr ) );
			}
		}
	};

	// Read data from a cell and store into the data object
	var cellProcess = function ( cell ) {
		if ( colIdx === undefined || colIdx === i ) {
			col = columns[i];
			contents = (cell.innerHTML).trim();

			if ( col && col._bAttrSrc ) {
				var setter = _fnSetObjectDataFn( col.mData._ );
				setter( d, contents );

				attr( col.mData.sort, cell );
				attr( col.mData.type, cell );
				attr( col.mData.filter, cell );
			}
			else {
				// Depending on the `data` option for the columns the data can
				// be read to either an object or an array.
				if ( objectRead ) {
					if ( ! col._setter ) {
						// Cache the setter function
						col._setter = _fnSetObjectDataFn( col.mData );
					}
					col._setter( d, contents );
				}
				else {
					d[i] = contents;
				}
			}
		}

		i++;
	};

	if ( td ) {
		// `tr` element was passed in
		while ( td ) {
			name = td.nodeName.toUpperCase();

			if ( name == "TD" || name == "TH" ) {
				cellProcess( td );
				tds.push( td );
			}

			td = td.nextSibling;
		}
	}
	else {
		// Existing row object passed in
		tds = row.anCells;

		for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
			cellProcess( tds[j] );
		}
	}

	// Read the ID from the DOM if present
	var rowNode = row.firstChild ? row : row.nTr;

	if ( rowNode ) {
		var id = rowNode.getAttribute( 'id' );

		if ( id ) {
			_fnSetObjectDataFn( settings.rowId )( d, id );
		}
	}

	return {
		data: d,
		cells: tds
	};
}
/**
 * Create a new TR element (and it's TD children) for a row
 *  @param {object} oSettings dataTables settings object
 *  @param {int} iRow Row to consider
 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
 *    DataTables will create a row automatically
 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
 *    if nTr is.
 *  @memberof DataTable#oApi
 */
function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
{
	var
		row = oSettings.aoData[iRow],
		rowData = row._aData,
		cells = [],
		nTr, nTd, oCol,
		i, iLen, create;

	if ( row.nTr === null )
	{
		nTr = nTrIn || document.createElement('tr');

		row.nTr = nTr;
		row.anCells = cells;

		/* Use a private property on the node to allow reserve mapping from the node
		 * to the aoData array for fast look up
		 */
		nTr._DT_RowIndex = iRow;

		/* Special parameters can be given by the data source to be used on the row */
		_fnRowAttributes( oSettings, row );

		/* Process each column */
		for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
		{
			oCol = oSettings.aoColumns[i];
			create = nTrIn ? false : true;

			nTd = create ? document.createElement( oCol.sCellType ) : anTds[i];

			if (! nTd) {
				_fnLog( oSettings, 0, 'Incorrect column count', 18 );
			}

			nTd._DT_CellIndex = {
				row: iRow,
				column: i
			};
			
			cells.push( nTd );

			// Need to create the HTML if new, or if a rendering function is defined
			if ( create || ((oCol.mRender || oCol.mData !== i) &&
				 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
			)) {
				nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
			}

			/* Add user defined class */
			if ( oCol.sClass )
			{
				nTd.className += ' '+oCol.sClass;
			}

			// Visibility - add or remove as required
			if ( oCol.bVisible && ! nTrIn )
			{
				nTr.appendChild( nTd );
			}
			else if ( ! oCol.bVisible && nTrIn )
			{
				nTd.parentNode.removeChild( nTd );
			}

			if ( oCol.fnCreatedCell )
			{
				oCol.fnCreatedCell.call( oSettings.oInstance,
					nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
				);
			}
		}

		_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
	}
}


/**
 * Add attributes to a row based on the special `DT_*` parameters in a data
 * source object.
 *  @param {object} settings DataTables settings object
 *  @param {object} DataTables row object for the row to be modified
 *  @memberof DataTable#oApi
 */
function _fnRowAttributes( settings, row )
{
	var tr = row.nTr;
	var data = row._aData;

	if ( tr ) {
		var id = settings.rowIdFn( data );

		if ( id ) {
			tr.id = id;
		}

		if ( data.DT_RowClass ) {
			// Remove any classes added by DT_RowClass before
			var a = data.DT_RowClass.split(' ');
			row.__rowc = row.__rowc ?
				_unique( row.__rowc.concat( a ) ) :
				a;

			$(tr)
				.removeClass( row.__rowc.join(' ') )
				.addClass( data.DT_RowClass );
		}

		if ( data.DT_RowAttr ) {
			$(tr).attr( data.DT_RowAttr );
		}

		if ( data.DT_RowData ) {
			$(tr).data( data.DT_RowData );
		}
	}
}


/**
 * Create the HTML header for the table
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnBuildHead( oSettings )
{
	var i, ien, cell, row, column;
	var thead = oSettings.nTHead;
	var tfoot = oSettings.nTFoot;
	var createHeader = $('th, td', thead).length === 0;
	var classes = oSettings.oClasses;
	var columns = oSettings.aoColumns;

	if ( createHeader ) {
		row = $('<tr/>').appendTo( thead );
	}

	for ( i=0, ien=columns.length ; i<ien ; i++ ) {
		column = columns[i];
		cell = $( column.nTh ).addClass( column.sClass );

		if ( createHeader ) {
			cell.appendTo( row );
		}

		// 1.11 move into sorting
		if ( oSettings.oFeatures.bSort ) {
			cell.addClass( column.sSortingClass );

			if ( column.bSortable !== false ) {
				cell
					.attr( 'tabindex', oSettings.iTabIndex )
					.attr( 'aria-controls', oSettings.sTableId );

				_fnSortAttachListener( oSettings, column.nTh, i );
			}
		}

		if ( column.sTitle != cell[0].innerHTML ) {
			cell.html( column.sTitle );
		}

		_fnRenderer( oSettings, 'header' )(
			oSettings, cell, column, classes
		);
	}

	if ( createHeader ) {
		_fnDetectHeader( oSettings.aoHeader, thead );
	}

	/* Deal with the footer - add classes if required */
	$(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );
	$(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );

	// Cache the footer cells. Note that we only take the cells from the first
	// row in the footer. If there is more than one row the user wants to
	// interact with, they need to use the table().foot() method. Note also this
	// allows cells to be used for multiple columns using colspan
	if ( tfoot !== null ) {
		var cells = oSettings.aoFooter[0];

		for ( i=0, ien=cells.length ; i<ien ; i++ ) {
			column = columns[i];

			if (column) {
				column.nTf = cells[i].cell;
	
				if ( column.sClass ) {
					$(column.nTf).addClass( column.sClass );
				}
			}
			else {
				_fnLog( oSettings, 0, 'Incorrect column count', 18 );
			}
		}
	}
}


/**
 * Draw the header (or footer) element based on the column visibility states. The
 * methodology here is to use the layout array from _fnDetectHeader, modified for
 * the instantaneous column visibility, to construct the new layout. The grid is
 * traversed over cell at a time in a rows x columns grid fashion, although each
 * cell insert can cover multiple elements in the grid - which is tracks using the
 * aApplied array. Cell inserts in the grid will only occur where there isn't
 * already a cell in that position.
 *  @param {object} oSettings dataTables settings object
 *  @param array {objects} aoSource Layout array from _fnDetectHeader
 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
 *  @memberof DataTable#oApi
 */
function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
{
	var i, iLen, j, jLen, k, kLen, n, nLocalTr;
	var aoLocal = [];
	var aApplied = [];
	var iColumns = oSettings.aoColumns.length;
	var iRowspan, iColspan;

	if ( ! aoSource )
	{
		return;
	}

	if (  bIncludeHidden === undefined )
	{
		bIncludeHidden = false;
	}

	/* Make a copy of the master layout array, but without the visible columns in it */
	for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
	{
		aoLocal[i] = aoSource[i].slice();
		aoLocal[i].nTr = aoSource[i].nTr;

		/* Remove any columns which are currently hidden */
		for ( j=iColumns-1 ; j>=0 ; j-- )
		{
			if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
			{
				aoLocal[i].splice( j, 1 );
			}
		}

		/* Prep the applied array - it needs an element for each row */
		aApplied.push( [] );
	}

	for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
	{
		nLocalTr = aoLocal[i].nTr;

		/* All cells are going to be replaced, so empty out the row */
		if ( nLocalTr )
		{
			while( (n = nLocalTr.firstChild) )
			{
				nLocalTr.removeChild( n );
			}
		}

		for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
		{
			iRowspan = 1;
			iColspan = 1;

			/* Check to see if there is already a cell (row/colspan) covering our target
			 * insert point. If there is, then there is nothing to do.
			 */
			if ( aApplied[i][j] === undefined )
			{
				nLocalTr.appendChild( aoLocal[i][j].cell );
				aApplied[i][j] = 1;

				/* Expand the cell to cover as many rows as needed */
				while ( aoLocal[i+iRowspan] !== undefined &&
				        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
				{
					aApplied[i+iRowspan][j] = 1;
					iRowspan++;
				}

				/* Expand the cell to cover as many columns as needed */
				while ( aoLocal[i][j+iColspan] !== undefined &&
				        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
				{
					/* Must update the applied array over the rows for the columns */
					for ( k=0 ; k<iRowspan ; k++ )
					{
						aApplied[i+k][j+iColspan] = 1;
					}
					iColspan++;
				}

				/* Do the actual expansion in the DOM */
				$(aoLocal[i][j].cell)
					.attr('rowspan', iRowspan)
					.attr('colspan', iColspan);
			}
		}
	}
}


/**
 * Insert the required TR nodes into the table for display
 *  @param {object} oSettings dataTables settings object
 *  @param ajaxComplete true after ajax call to complete rendering
 *  @memberof DataTable#oApi
 */
function _fnDraw( oSettings, ajaxComplete )
{
	// Allow for state saving and a custom start position
	_fnStart( oSettings );

	/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
	var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
	if ( $.inArray( false, aPreDraw ) !== -1 )
	{
		_fnProcessingDisplay( oSettings, false );
		return;
	}

	var anRows = [];
	var iRowCount = 0;
	var asStripeClasses = oSettings.asStripeClasses;
	var iStripes = asStripeClasses.length;
	var oLang = oSettings.oLanguage;
	var bServerSide = _fnDataSource( oSettings ) == 'ssp';
	var aiDisplay = oSettings.aiDisplay;
	var iDisplayStart = oSettings._iDisplayStart;
	var iDisplayEnd = oSettings.fnDisplayEnd();

	oSettings.bDrawing = true;

	/* Server-side processing draw intercept */
	if ( oSettings.bDeferLoading )
	{
		oSettings.bDeferLoading = false;
		oSettings.iDraw++;
		_fnProcessingDisplay( oSettings, false );
	}
	else if ( !bServerSide )
	{
		oSettings.iDraw++;
	}
	else if ( !oSettings.bDestroying && !ajaxComplete)
	{
		_fnAjaxUpdate( oSettings );
		return;
	}

	if ( aiDisplay.length !== 0 )
	{
		var iStart = bServerSide ? 0 : iDisplayStart;
		var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

		for ( var j=iStart ; j<iEnd ; j++ )
		{
			var iDataIndex = aiDisplay[j];
			var aoData = oSettings.aoData[ iDataIndex ];
			if ( aoData.nTr === null )
			{
				_fnCreateTr( oSettings, iDataIndex );
			}

			var nRow = aoData.nTr;

			/* Remove the old striping classes and then add the new one */
			if ( iStripes !== 0 )
			{
				var sStripe = asStripeClasses[ iRowCount % iStripes ];
				if ( aoData._sRowStripe != sStripe )
				{
					$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
					aoData._sRowStripe = sStripe;
				}
			}

			// Row callback functions - might want to manipulate the row
			// iRowCount and j are not currently documented. Are they at all
			// useful?
			_fnCallbackFire( oSettings, 'aoRowCallback', null,
				[nRow, aoData._aData, iRowCount, j, iDataIndex] );

			anRows.push( nRow );
			iRowCount++;
		}
	}
	else
	{
		/* Table is empty - create a row with an empty message in it */
		var sZero = oLang.sZeroRecords;
		if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
		{
			sZero = oLang.sLoadingRecords;
		}
		else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
		{
			sZero = oLang.sEmptyTable;
		}

		anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
			.append( $('<td />', {
				'valign':  'top',
				'colSpan': _fnVisbleColumns( oSettings ),
				'class':   oSettings.oClasses.sRowEmpty
			} ).html( sZero ) )[0];
	}

	/* Header and footer callbacks */
	_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
		_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );

	_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
		_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );

	var body = $(oSettings.nTBody);

	body.children().detach();
	body.append( $(anRows) );

	/* Call all required callback functions for the end of a draw */
	_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );

	/* Draw is complete, sorting and filtering must be as well */
	oSettings.bSorted = false;
	oSettings.bFiltered = false;
	oSettings.bDrawing = false;
}


/**
 * Redraw the table - taking account of the various features which are enabled
 *  @param {object} oSettings dataTables settings object
 *  @param {boolean} [holdPosition] Keep the current paging position. By default
 *    the paging is reset to the first page
 *  @memberof DataTable#oApi
 */
function _fnReDraw( settings, holdPosition )
{
	var
		features = settings.oFeatures,
		sort     = features.bSort,
		filter   = features.bFilter;

	if ( sort ) {
		_fnSort( settings );
	}

	if ( filter ) {
		_fnFilterComplete( settings, settings.oPreviousSearch );
	}
	else {
		// No filtering, so we want to just use the display master
		settings.aiDisplay = settings.aiDisplayMaster.slice();
	}

	if ( holdPosition !== true ) {
		settings._iDisplayStart = 0;
	}

	// Let any modules know about the draw hold position state (used by
	// scrolling internally)
	settings._drawHold = holdPosition;

	_fnDraw( settings );

	settings._drawHold = false;
}


/**
 * Add the options to the page HTML for the table
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnAddOptionsHtml ( oSettings )
{
	var classes = oSettings.oClasses;
	var table = $(oSettings.nTable);
	var holding = $('<div/>').insertBefore( table ); // Holding element for speed
	var features = oSettings.oFeatures;

	// All DataTables are wrapped in a div
	var insert = $('<div/>', {
		id:      oSettings.sTableId+'_wrapper',
		'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
	} );

	oSettings.nHolding = holding[0];
	oSettings.nTableWrapper = insert[0];
	oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

	/* Loop over the user set positioning and place the elements as needed */
	var aDom = oSettings.sDom.split('');
	var featureNode, cOption, nNewNode, cNext, sAttr, j;
	for ( var i=0 ; i<aDom.length ; i++ )
	{
		featureNode = null;
		cOption = aDom[i];

		if ( cOption == '<' )
		{
			/* New container div */
			nNewNode = $('<div/>')[0];

			/* Check to see if we should append an id and/or a class name to the container */
			cNext = aDom[i+1];
			if ( cNext == "'" || cNext == '"' )
			{
				sAttr = "";
				j = 2;
				while ( aDom[i+j] != cNext )
				{
					sAttr += aDom[i+j];
					j++;
				}

				/* Replace jQuery UI constants @todo depreciated */
				if ( sAttr == "H" )
				{
					sAttr = classes.sJUIHeader;
				}
				else if ( sAttr == "F" )
				{
					sAttr = classes.sJUIFooter;
				}

				/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
				 * breaks the string into parts and applies them as needed
				 */
				if ( sAttr.indexOf('.') != -1 )
				{
					var aSplit = sAttr.split('.');
					nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
					nNewNode.className = aSplit[1];
				}
				else if ( sAttr.charAt(0) == "#" )
				{
					nNewNode.id = sAttr.substr(1, sAttr.length-1);
				}
				else
				{
					nNewNode.className = sAttr;
				}

				i += j; /* Move along the position array */
			}

			insert.append( nNewNode );
			insert = $(nNewNode);
		}
		else if ( cOption == '>' )
		{
			/* End container div */
			insert = insert.parent();
		}
		// @todo Move options into their own plugins?
		else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
		{
			/* Length */
			featureNode = _fnFeatureHtmlLength( oSettings );
		}
		else if ( cOption == 'f' && features.bFilter )
		{
			/* Filter */
			featureNode = _fnFeatureHtmlFilter( oSettings );
		}
		else if ( cOption == 'r' && features.bProcessing )
		{
			/* pRocessing */
			featureNode = _fnFeatureHtmlProcessing( oSettings );
		}
		else if ( cOption == 't' )
		{
			/* Table */
			featureNode = _fnFeatureHtmlTable( oSettings );
		}
		else if ( cOption ==  'i' && features.bInfo )
		{
			/* Info */
			featureNode = _fnFeatureHtmlInfo( oSettings );
		}
		else if ( cOption == 'p' && features.bPaginate )
		{
			/* Pagination */
			featureNode = _fnFeatureHtmlPaginate( oSettings );
		}
		else if ( DataTable.ext.feature.length !== 0 )
		{
			/* Plug-in features */
			var aoFeatures = DataTable.ext.feature;
			for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
			{
				if ( cOption == aoFeatures[k].cFeature )
				{
					featureNode = aoFeatures[k].fnInit( oSettings );
					break;
				}
			}
		}

		/* Add to the 2D features array */
		if ( featureNode )
		{
			var aanFeatures = oSettings.aanFeatures;

			if ( ! aanFeatures[cOption] )
			{
				aanFeatures[cOption] = [];
			}

			aanFeatures[cOption].push( featureNode );
			insert.append( featureNode );
		}
	}

	/* Built our DOM structure - replace the holding div with what we want */
	holding.replaceWith( insert );
	oSettings.nHolding = null;
}


/**
 * Use the DOM source to create up an array of header cells. The idea here is to
 * create a layout grid (array) of rows x columns, which contains a reference
 * to the cell that that point in the grid (regardless of col/rowspan), such that
 * any column / row could be removed and the new grid constructed
 *  @param array {object} aLayout Array to store the calculated layout in
 *  @param {node} nThead The header/footer element for the table
 *  @memberof DataTable#oApi
 */
function _fnDetectHeader ( aLayout, nThead )
{
	var nTrs = $(nThead).children('tr');
	var nTr, nCell;
	var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
	var bUnique;
	var fnShiftCol = function ( a, i, j ) {
		var k = a[i];
                while ( k[j] ) {
			j++;
		}
		return j;
	};

	aLayout.splice( 0, aLayout.length );

	/* We know how many rows there are in the layout - so prep it */
	for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
	{
		aLayout.push( [] );
	}

	/* Calculate a layout array */
	for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
	{
		nTr = nTrs[i];
		iColumn = 0;

		/* For every cell in the row... */
		nCell = nTr.firstChild;
		while ( nCell ) {
			if ( nCell.nodeName.toUpperCase() == "TD" ||
			     nCell.nodeName.toUpperCase() == "TH" )
			{
				/* Get the col and rowspan attributes from the DOM and sanitise them */
				iColspan = nCell.getAttribute('colspan') * 1;
				iRowspan = nCell.getAttribute('rowspan') * 1;
				iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
				iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;

				/* There might be colspan cells already in this row, so shift our target
				 * accordingly
				 */
				iColShifted = fnShiftCol( aLayout, i, iColumn );

				/* Cache calculation for unique columns */
				bUnique = iColspan === 1 ? true : false;

				/* If there is col / rowspan, copy the information into the layout grid */
				for ( l=0 ; l<iColspan ; l++ )
				{
					for ( k=0 ; k<iRowspan ; k++ )
					{
						aLayout[i+k][iColShifted+l] = {
							"cell": nCell,
							"unique": bUnique
						};
						aLayout[i+k].nTr = nTr;
					}
				}
			}
			nCell = nCell.nextSibling;
		}
	}
}


/**
 * Get an array of unique th elements, one for each column
 *  @param {object} oSettings dataTables settings object
 *  @param {node} nHeader automatically detect the layout from this node - optional
 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
 *  @returns array {node} aReturn list of unique th's
 *  @memberof DataTable#oApi
 */
function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
{
	var aReturn = [];
	if ( !aLayout )
	{
		aLayout = oSettings.aoHeader;
		if ( nHeader )
		{
			aLayout = [];
			_fnDetectHeader( aLayout, nHeader );
		}
	}

	for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
	{
		for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
		{
			if ( aLayout[i][j].unique &&
				 (!aReturn[j] || !oSettings.bSortCellsTop) )
			{
				aReturn[j] = aLayout[i][j].cell;
			}
		}
	}

	return aReturn;
}

/**
 * Set the start position for draw
 *  @param {object} oSettings dataTables settings object
 */
function _fnStart( oSettings )
{
	var bServerSide = _fnDataSource( oSettings ) == 'ssp';
	var iInitDisplayStart = oSettings.iInitDisplayStart;

	// Check and see if we have an initial draw position from state saving
	if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
	{
		oSettings._iDisplayStart = bServerSide ?
			iInitDisplayStart :
			iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
				0 :
				iInitDisplayStart;

		oSettings.iInitDisplayStart = -1;
	}
}

/**
 * Create an Ajax call based on the table's settings, taking into account that
 * parameters can have multiple forms, and backwards compatibility.
 *
 * @param {object} oSettings dataTables settings object
 * @param {array} data Data to send to the server, required by
 *     DataTables - may be augmented by developer callbacks
 * @param {function} fn Callback function to run when data is obtained
 */
function _fnBuildAjax( oSettings, data, fn )
{
	// Compatibility with 1.9-, allow fnServerData and event to manipulate
	_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );

	// Convert to object based for 1.10+ if using the old array scheme which can
	// come from server-side processing or serverParams
	if ( data && Array.isArray(data) ) {
		var tmp = {};
		var rbracket = /(.*?)\[\]$/;

		$.each( data, function (key, val) {
			var match = val.name.match(rbracket);

			if ( match ) {
				// Support for arrays
				var name = match[0];

				if ( ! tmp[ name ] ) {
					tmp[ name ] = [];
				}
				tmp[ name ].push( val.value );
			}
			else {
				tmp[val.name] = val.value;
			}
		} );
		data = tmp;
	}

	var ajaxData;
	var ajax = oSettings.ajax;
	var instance = oSettings.oInstance;
	var callback = function ( json ) {
		var status = oSettings.jqXHR
			? oSettings.jqXHR.status
			: null;

		if ( json === null || (typeof status === 'number' && status == 204 ) ) {
			json = {};
			_fnAjaxDataSrc( oSettings, json, [] );
		}

		var error = json.error || json.sError;
		if ( error ) {
			_fnLog( oSettings, 0, error );
		}

		oSettings.json = json;

		_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
		fn( json );
	};

	if ( $.isPlainObject( ajax ) && ajax.data )
	{
		ajaxData = ajax.data;

		var newData = typeof ajaxData === 'function' ?
			ajaxData( data, oSettings ) :  // fn can manipulate data or return
			ajaxData;                      // an object object or array to merge

		// If the function returned something, use that alone
		data = typeof ajaxData === 'function' && newData ?
			newData :
			$.extend( true, data, newData );

		// Remove the data property as we've resolved it already and don't want
		// jQuery to do it again (it is restored at the end of the function)
		delete ajax.data;
	}

	var baseAjax = {
		"data": data,
		"success": callback,
		"dataType": "json",
		"cache": false,
		"type": oSettings.sServerMethod,
		"error": function (xhr, error, thrown) {
			var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );

			if ( $.inArray( true, ret ) === -1 ) {
				if ( error == "parsererror" ) {
					_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
				}
				else if ( xhr.readyState === 4 ) {
					_fnLog( oSettings, 0, 'Ajax error', 7 );
				}
			}

			_fnProcessingDisplay( oSettings, false );
		}
	};

	// Store the data submitted for the API
	oSettings.oAjaxData = data;

	// Allow plug-ins and external processes to modify the data
	_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );

	if ( oSettings.fnServerData )
	{
		// DataTables 1.9- compatibility
		oSettings.fnServerData.call( instance,
			oSettings.sAjaxSource,
			$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
				return { name: key, value: val };
			} ),
			callback,
			oSettings
		);
	}
	else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
	{
		// DataTables 1.9- compatibility
		oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
			url: ajax || oSettings.sAjaxSource
		} ) );
	}
	else if ( typeof ajax === 'function' )
	{
		// Is a function - let the caller define what needs to be done
		oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
	}
	else
	{
		// Object to extend the base settings
		oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );

		// Restore for next time around
		ajax.data = ajaxData;
	}
}


/**
 * Update the table using an Ajax call
 *  @param {object} settings dataTables settings object
 *  @returns {boolean} Block the table drawing or not
 *  @memberof DataTable#oApi
 */
function _fnAjaxUpdate( settings )
{
	settings.iDraw++;
	_fnProcessingDisplay( settings, true );

	_fnBuildAjax(
		settings,
		_fnAjaxParameters( settings ),
		function(json) {
			_fnAjaxUpdateDraw( settings, json );
		}
	);
}


/**
 * Build up the parameters in an object needed for a server-side processing
 * request. Note that this is basically done twice, is different ways - a modern
 * method which is used by default in DataTables 1.10 which uses objects and
 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
 * the sAjaxSource option is used in the initialisation, or the legacyAjax
 * option is set.
 *  @param {object} oSettings dataTables settings object
 *  @returns {bool} block the table drawing or not
 *  @memberof DataTable#oApi
 */
function _fnAjaxParameters( settings )
{
	var
		columns = settings.aoColumns,
		columnCount = columns.length,
		features = settings.oFeatures,
		preSearch = settings.oPreviousSearch,
		preColSearch = settings.aoPreSearchCols,
		i, data = [], dataProp, column, columnSearch,
		sort = _fnSortFlatten( settings ),
		displayStart = settings._iDisplayStart,
		displayLength = features.bPaginate !== false ?
			settings._iDisplayLength :
			-1;

	var param = function ( name, value ) {
		data.push( { 'name': name, 'value': value } );
	};

	// DataTables 1.9- compatible method
	param( 'sEcho',          settings.iDraw );
	param( 'iColumns',       columnCount );
	param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
	param( 'iDisplayStart',  displayStart );
	param( 'iDisplayLength', displayLength );

	// DataTables 1.10+ method
	var d = {
		draw:    settings.iDraw,
		columns: [],
		order:   [],
		start:   displayStart,
		length:  displayLength,
		search:  {
			value: preSearch.sSearch,
			regex: preSearch.bRegex
		}
	};

	for ( i=0 ; i<columnCount ; i++ ) {
		column = columns[i];
		columnSearch = preColSearch[i];
		dataProp = typeof column.mData=="function" ? 'function' : column.mData ;

		d.columns.push( {
			data:       dataProp,
			name:       column.sName,
			searchable: column.bSearchable,
			orderable:  column.bSortable,
			search:     {
				value: columnSearch.sSearch,
				regex: columnSearch.bRegex
			}
		} );

		param( "mDataProp_"+i, dataProp );

		if ( features.bFilter ) {
			param( 'sSearch_'+i,     columnSearch.sSearch );
			param( 'bRegex_'+i,      columnSearch.bRegex );
			param( 'bSearchable_'+i, column.bSearchable );
		}

		if ( features.bSort ) {
			param( 'bSortable_'+i, column.bSortable );
		}
	}

	if ( features.bFilter ) {
		param( 'sSearch', preSearch.sSearch );
		param( 'bRegex', preSearch.bRegex );
	}

	if ( features.bSort ) {
		$.each( sort, function ( i, val ) {
			d.order.push( { column: val.col, dir: val.dir } );

			param( 'iSortCol_'+i, val.col );
			param( 'sSortDir_'+i, val.dir );
		} );

		param( 'iSortingCols', sort.length );
	}

	// If the legacy.ajax parameter is null, then we automatically decide which
	// form to use, based on sAjaxSource
	var legacy = DataTable.ext.legacy.ajax;
	if ( legacy === null ) {
		return settings.sAjaxSource ? data : d;
	}

	// Otherwise, if legacy has been specified then we use that to decide on the
	// form
	return legacy ? data : d;
}


/**
 * Data the data from the server (nuking the old) and redraw the table
 *  @param {object} oSettings dataTables settings object
 *  @param {object} json json data return from the server.
 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
 *  @param {array} json.aaData The data to display on this page
 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
 *  @memberof DataTable#oApi
 */
function _fnAjaxUpdateDraw ( settings, json )
{
	// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
	// Support both
	var compat = function ( old, modern ) {
		return json[old] !== undefined ? json[old] : json[modern];
	};

	var data = _fnAjaxDataSrc( settings, json );
	var draw            = compat( 'sEcho',                'draw' );
	var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
	var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );

	if ( draw !== undefined ) {
		// Protect against out of sequence returns
		if ( draw*1 < settings.iDraw ) {
			return;
		}
		settings.iDraw = draw * 1;
	}

	// No data in returned object, so rather than an array, we show an empty table
	if ( ! data ) {
		data = [];
	}

	_fnClearTable( settings );
	settings._iRecordsTotal   = parseInt(recordsTotal, 10);
	settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

	for ( var i=0, ien=data.length ; i<ien ; i++ ) {
		_fnAddData( settings, data[i] );
	}
	settings.aiDisplay = settings.aiDisplayMaster.slice();

	_fnDraw( settings, true );

	if ( ! settings._bInitComplete ) {
		_fnInitComplete( settings, json );
	}

	_fnProcessingDisplay( settings, false );
}


/**
 * Get the data from the JSON data source to use for drawing a table. Using
 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
 * source object, or from a processing function.
 *  @param {object} oSettings dataTables settings object
 *  @param  {object} json Data source object / array from the server
 *  @return {array} Array of data to use
 */
 function _fnAjaxDataSrc ( oSettings, json, write )
 {
	var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
		oSettings.ajax.dataSrc :
		oSettings.sAjaxDataProp; // Compatibility with 1.9-.

	if ( ! write ) {
		if ( dataSrc === 'data' ) {
			// If the default, then we still want to support the old style, and safely ignore
			// it if possible
			return json.aaData || json[dataSrc];
		}

		return dataSrc !== "" ?
			_fnGetObjectDataFn( dataSrc )( json ) :
			json;
	}

	// set
	_fnSetObjectDataFn( dataSrc )( json, write );
}

/**
 * Generate the node required for filtering text
 *  @returns {node} Filter control element
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnFeatureHtmlFilter ( settings )
{
	var classes = settings.oClasses;
	var tableId = settings.sTableId;
	var language = settings.oLanguage;
	var previousSearch = settings.oPreviousSearch;
	var features = settings.aanFeatures;
	var input = '<input type="search" class="'+classes.sFilterInput+'"/>';

	var str = language.sSearch;
	str = str.match(/_INPUT_/) ?
		str.replace('_INPUT_', input) :
		str+input;

	var filter = $('<div/>', {
			'id': ! features.f ? tableId+'_filter' : null,
			'class': classes.sFilter
		} )
		.append( $('<label/>' ).append( str ) );

	var searchFn = function(event) {
		/* Update all other filter input elements for the new display */
		var n = features.f;
		var val = !this.value ? "" : this.value; // mental IE8 fix :-(
		if(previousSearch.return && event.key !== "Enter") {
			return;
		}
		/* Now do the filter */
		if ( val != previousSearch.sSearch ) {
			_fnFilterComplete( settings, {
				"sSearch": val,
				"bRegex": previousSearch.bRegex,
				"bSmart": previousSearch.bSmart ,
				"bCaseInsensitive": previousSearch.bCaseInsensitive,
				"return": previousSearch.return
			} );

			// Need to redraw, without resorting
			settings._iDisplayStart = 0;
			_fnDraw( settings );
		}
	};

	var searchDelay = settings.searchDelay !== null ?
		settings.searchDelay :
		_fnDataSource( settings ) === 'ssp' ?
			400 :
			0;

	var jqFilter = $('input', filter)
		.val( previousSearch.sSearch )
		.attr( 'placeholder', language.sSearchPlaceholder )
		.on(
			'keyup.DT search.DT input.DT paste.DT cut.DT',
			searchDelay ?
				_fnThrottle( searchFn, searchDelay ) :
				searchFn
		)
		.on( 'mouseup', function(e) {
			// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking
			// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`
			// checks the value to see if it has changed. In other browsers it won't have.
			setTimeout( function () {
				searchFn.call(jqFilter[0], e);
			}, 10);
		} )
		.on( 'keypress.DT', function(e) {
			/* Prevent form submission */
			if ( e.keyCode == 13 ) {
				return false;
			}
		} )
		.attr('aria-controls', tableId);

	// Update the input elements whenever the table is filtered
	$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
		if ( settings === s ) {
			// IE9 throws an 'unknown error' if document.activeElement is used
			// inside an iframe or frame...
			try {
				if ( jqFilter[0] !== document.activeElement ) {
					jqFilter.val( previousSearch.sSearch );
				}
			}
			catch ( e ) {}
		}
	} );

	return filter[0];
}


/**
 * Filter the table using both the global filter and column based filtering
 *  @param {object} oSettings dataTables settings object
 *  @param {object} oSearch search information
 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
 *  @memberof DataTable#oApi
 */
function _fnFilterComplete ( oSettings, oInput, iForce )
{
	var oPrevSearch = oSettings.oPreviousSearch;
	var aoPrevSearch = oSettings.aoPreSearchCols;
	var fnSaveFilter = function ( oFilter ) {
		/* Save the filtering values */
		oPrevSearch.sSearch = oFilter.sSearch;
		oPrevSearch.bRegex = oFilter.bRegex;
		oPrevSearch.bSmart = oFilter.bSmart;
		oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
		oPrevSearch.return = oFilter.return;
	};
	var fnRegex = function ( o ) {
		// Backwards compatibility with the bEscapeRegex option
		return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
	};

	// Resolve any column types that are unknown due to addition or invalidation
	// @todo As per sort - can this be moved into an event handler?
	_fnColumnTypes( oSettings );

	/* In server-side processing all filtering is done by the server, so no point hanging around here */
	if ( _fnDataSource( oSettings ) != 'ssp' )
	{
		/* Global filter */
		_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive, oInput.return );
		fnSaveFilter( oInput );

		/* Now do the individual column filter */
		for ( var i=0 ; i<aoPrevSearch.length ; i++ )
		{
			_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
				aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
		}

		/* Custom filtering */
		_fnFilterCustom( oSettings );
	}
	else
	{
		fnSaveFilter( oInput );
	}

	/* Tell the draw function we have been filtering */
	oSettings.bFiltered = true;
	_fnCallbackFire( oSettings, null, 'search', [oSettings] );
}


/**
 * Apply custom filtering functions
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnFilterCustom( settings )
{
	var filters = DataTable.ext.search;
	var displayRows = settings.aiDisplay;
	var row, rowIdx;

	for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
		var rows = [];

		// Loop over each row and see if it should be included
		for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
			rowIdx = displayRows[ j ];
			row = settings.aoData[ rowIdx ];

			if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
				rows.push( rowIdx );
			}
		}

		// So the array reference doesn't break set the results into the
		// existing array
		displayRows.length = 0;
		$.merge( displayRows, rows );
	}
}


/**
 * Filter the table on a per-column basis
 *  @param {object} oSettings dataTables settings object
 *  @param {string} sInput string to filter on
 *  @param {int} iColumn column to filter
 *  @param {bool} bRegex treat search string as a regular expression or not
 *  @param {bool} bSmart use smart filtering or not
 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
 *  @memberof DataTable#oApi
 */
function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
{
	if ( searchStr === '' ) {
		return;
	}

	var data;
	var out = [];
	var display = settings.aiDisplay;
	var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );

	for ( var i=0 ; i<display.length ; i++ ) {
		data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];

		if ( rpSearch.test( data ) ) {
			out.push( display[i] );
		}
	}

	settings.aiDisplay = out;
}


/**
 * Filter the data table based on user input and draw the table
 *  @param {object} settings dataTables settings object
 *  @param {string} input string to filter on
 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
 *  @param {bool} regex treat as a regular expression or not
 *  @param {bool} smart perform smart filtering or not
 *  @param {bool} caseInsensitive Do case insensitive matching or not
 *  @memberof DataTable#oApi
 */
function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
{
	var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
	var prevSearch = settings.oPreviousSearch.sSearch;
	var displayMaster = settings.aiDisplayMaster;
	var display, invalidated, i;
	var filtered = [];

	// Need to take account of custom filtering functions - always filter
	if ( DataTable.ext.search.length !== 0 ) {
		force = true;
	}

	// Check if any of the rows were invalidated
	invalidated = _fnFilterData( settings );

	// If the input is blank - we just want the full data set
	if ( input.length <= 0 ) {
		settings.aiDisplay = displayMaster.slice();
	}
	else {
		// New search - start from the master array
		if ( invalidated ||
			 force ||
			 regex ||
			 prevSearch.length > input.length ||
			 input.indexOf(prevSearch) !== 0 ||
			 settings.bSorted // On resort, the display master needs to be
			                  // re-filtered since indexes will have changed
		) {
			settings.aiDisplay = displayMaster.slice();
		}

		// Search the display array
		display = settings.aiDisplay;

		for ( i=0 ; i<display.length ; i++ ) {
			if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
				filtered.push( display[i] );
			}
		}

		settings.aiDisplay = filtered;
	}
}


/**
 * Build a regular expression object suitable for searching a table
 *  @param {string} sSearch string to search for
 *  @param {bool} bRegex treat as a regular expression or not
 *  @param {bool} bSmart perform smart filtering or not
 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
 *  @returns {RegExp} constructed object
 *  @memberof DataTable#oApi
 */
function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
{
	search = regex ?
		search :
		_fnEscapeRegex( search );
	
	if ( smart ) {
		/* For smart filtering we want to allow the search to work regardless of
		 * word order. We also want double quoted text to be preserved, so word
		 * order is important - a la google. So this is what we want to
		 * generate:
		 * 
		 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
		 */
		var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
			if ( word.charAt(0) === '"' ) {
				var m = word.match( /^"(.*)"$/ );
				word = m ? m[1] : word;
			}

			return word.replace('"', '');
		} );

		search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
	}

	return new RegExp( search, caseInsensitive ? 'i' : '' );
}


/**
 * Escape a string such that it can be used in a regular expression
 *  @param {string} sVal string to escape
 *  @returns {string} escaped string
 *  @memberof DataTable#oApi
 */
var _fnEscapeRegex = DataTable.util.escapeRegex;

var __filter_div = $('<div>')[0];
var __filter_div_textContent = __filter_div.textContent !== undefined;

// Update the filtering data for each row if needed (by invalidation or first run)
function _fnFilterData ( settings )
{
	var columns = settings.aoColumns;
	var column;
	var i, j, ien, jen, filterData, cellData, row;
	var wasInvalidated = false;

	for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
		row = settings.aoData[i];

		if ( ! row._aFilterData ) {
			filterData = [];

			for ( j=0, jen=columns.length ; j<jen ; j++ ) {
				column = columns[j];

				if ( column.bSearchable ) {
					cellData = _fnGetCellData( settings, i, j, 'filter' );

					// Search in DataTables 1.10 is string based. In 1.11 this
					// should be altered to also allow strict type checking.
					if ( cellData === null ) {
						cellData = '';
					}

					if ( typeof cellData !== 'string' && cellData.toString ) {
						cellData = cellData.toString();
					}
				}
				else {
					cellData = '';
				}

				// If it looks like there is an HTML entity in the string,
				// attempt to decode it so sorting works as expected. Note that
				// we could use a single line of jQuery to do this, but the DOM
				// method used here is much faster http://jsperf.com/html-decode
				if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
					__filter_div.innerHTML = cellData;
					cellData = __filter_div_textContent ?
						__filter_div.textContent :
						__filter_div.innerText;
				}

				if ( cellData.replace ) {
					cellData = cellData.replace(/[\r\n\u2028]/g, '');
				}

				filterData.push( cellData );
			}

			row._aFilterData = filterData;
			row._sFilterRow = filterData.join('  ');
			wasInvalidated = true;
		}
	}

	return wasInvalidated;
}


/**
 * Convert from the internal Hungarian notation to camelCase for external
 * interaction
 *  @param {object} obj Object to convert
 *  @returns {object} Inverted object
 *  @memberof DataTable#oApi
 */
function _fnSearchToCamel ( obj )
{
	return {
		search:          obj.sSearch,
		smart:           obj.bSmart,
		regex:           obj.bRegex,
		caseInsensitive: obj.bCaseInsensitive
	};
}



/**
 * Convert from camelCase notation to the internal Hungarian. We could use the
 * Hungarian convert function here, but this is cleaner
 *  @param {object} obj Object to convert
 *  @returns {object} Inverted object
 *  @memberof DataTable#oApi
 */
function _fnSearchToHung ( obj )
{
	return {
		sSearch:          obj.search,
		bSmart:           obj.smart,
		bRegex:           obj.regex,
		bCaseInsensitive: obj.caseInsensitive
	};
}

/**
 * Generate the node required for the info display
 *  @param {object} oSettings dataTables settings object
 *  @returns {node} Information element
 *  @memberof DataTable#oApi
 */
function _fnFeatureHtmlInfo ( settings )
{
	var
		tid = settings.sTableId,
		nodes = settings.aanFeatures.i,
		n = $('<div/>', {
			'class': settings.oClasses.sInfo,
			'id': ! nodes ? tid+'_info' : null
		} );

	if ( ! nodes ) {
		// Update display on each draw
		settings.aoDrawCallback.push( {
			"fn": _fnUpdateInfo,
			"sName": "information"
		} );

		n
			.attr( 'role', 'status' )
			.attr( 'aria-live', 'polite' );

		// Table is described by our info div
		$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
	}

	return n[0];
}


/**
 * Update the information elements in the display
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnUpdateInfo ( settings )
{
	/* Show information about the table */
	var nodes = settings.aanFeatures.i;
	if ( nodes.length === 0 ) {
		return;
	}

	var
		lang  = settings.oLanguage,
		start = settings._iDisplayStart+1,
		end   = settings.fnDisplayEnd(),
		max   = settings.fnRecordsTotal(),
		total = settings.fnRecordsDisplay(),
		out   = total ?
			lang.sInfo :
			lang.sInfoEmpty;

	if ( total !== max ) {
		/* Record set after filtering */
		out += ' ' + lang.sInfoFiltered;
	}

	// Convert the macros
	out += lang.sInfoPostFix;
	out = _fnInfoMacros( settings, out );

	var callback = lang.fnInfoCallback;
	if ( callback !== null ) {
		out = callback.call( settings.oInstance,
			settings, start, end, max, total, out
		);
	}

	$(nodes).html( out );
}


function _fnInfoMacros ( settings, str )
{
	// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
	// internally
	var
		formatter  = settings.fnFormatNumber,
		start      = settings._iDisplayStart+1,
		len        = settings._iDisplayLength,
		vis        = settings.fnRecordsDisplay(),
		all        = len === -1;

	return str.
		replace(/_START_/g, formatter.call( settings, start ) ).
		replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
		replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
		replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
		replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
		replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
}



/**
 * Draw the table for the first time, adding all required features
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnInitialise ( settings )
{
	var i, iLen, iAjaxStart=settings.iInitDisplayStart;
	var columns = settings.aoColumns, column;
	var features = settings.oFeatures;
	var deferLoading = settings.bDeferLoading; // value modified by the draw

	/* Ensure that the table data is fully initialised */
	if ( ! settings.bInitialised ) {
		setTimeout( function(){ _fnInitialise( settings ); }, 200 );
		return;
	}

	/* Show the display HTML options */
	_fnAddOptionsHtml( settings );

	/* Build and draw the header / footer for the table */
	_fnBuildHead( settings );
	_fnDrawHead( settings, settings.aoHeader );
	_fnDrawHead( settings, settings.aoFooter );

	/* Okay to show that something is going on now */
	_fnProcessingDisplay( settings, true );

	/* Calculate sizes for columns */
	if ( features.bAutoWidth ) {
		_fnCalculateColumnWidths( settings );
	}

	for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
		column = columns[i];

		if ( column.sWidth ) {
			column.nTh.style.width = _fnStringToCss( column.sWidth );
		}
	}

	_fnCallbackFire( settings, null, 'preInit', [settings] );

	// If there is default sorting required - let's do it. The sort function
	// will do the drawing for us. Otherwise we draw the table regardless of the
	// Ajax source - this allows the table to look initialised for Ajax sourcing
	// data (show 'loading' message possibly)
	_fnReDraw( settings );

	// Server-side processing init complete is done by _fnAjaxUpdateDraw
	var dataSrc = _fnDataSource( settings );
	if ( dataSrc != 'ssp' || deferLoading ) {
		// if there is an ajax source load the data
		if ( dataSrc == 'ajax' ) {
			_fnBuildAjax( settings, [], function(json) {
				var aData = _fnAjaxDataSrc( settings, json );

				// Got the data - add it to the table
				for ( i=0 ; i<aData.length ; i++ ) {
					_fnAddData( settings, aData[i] );
				}

				// Reset the init display for cookie saving. We've already done
				// a filter, and therefore cleared it before. So we need to make
				// it appear 'fresh'
				settings.iInitDisplayStart = iAjaxStart;

				_fnReDraw( settings );

				_fnProcessingDisplay( settings, false );
				_fnInitComplete( settings, json );
			}, settings );
		}
		else {
			_fnProcessingDisplay( settings, false );
			_fnInitComplete( settings );
		}
	}
}


/**
 * Draw the table for the first time, adding all required features
 *  @param {object} oSettings dataTables settings object
 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
 *    with client-side processing (optional)
 *  @memberof DataTable#oApi
 */
function _fnInitComplete ( settings, json )
{
	settings._bInitComplete = true;

	// When data was added after the initialisation (data or Ajax) we need to
	// calculate the column sizing
	if ( json || settings.oInit.aaData ) {
		_fnAdjustColumnSizing( settings );
	}

	_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
	_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
}


function _fnLengthChange ( settings, val )
{
	var len = parseInt( val, 10 );
	settings._iDisplayLength = len;

	_fnLengthOverflow( settings );

	// Fire length change event
	_fnCallbackFire( settings, null, 'length', [settings, len] );
}


/**
 * Generate the node required for user display length changing
 *  @param {object} settings dataTables settings object
 *  @returns {node} Display length feature node
 *  @memberof DataTable#oApi
 */
function _fnFeatureHtmlLength ( settings )
{
	var
		classes  = settings.oClasses,
		tableId  = settings.sTableId,
		menu     = settings.aLengthMenu,
		d2       = Array.isArray( menu[0] ),
		lengths  = d2 ? menu[0] : menu,
		language = d2 ? menu[1] : menu;

	var select = $('<select/>', {
		'name':          tableId+'_length',
		'aria-controls': tableId,
		'class':         classes.sLengthSelect
	} );

	for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
		select[0][ i ] = new Option(
			typeof language[i] === 'number' ?
				settings.fnFormatNumber( language[i] ) :
				language[i],
			lengths[i]
		);
	}

	var div = $('<div><label/></div>').addClass( classes.sLength );
	if ( ! settings.aanFeatures.l ) {
		div[0].id = tableId+'_length';
	}

	div.children().append(
		settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
	);

	// Can't use `select` variable as user might provide their own and the
	// reference is broken by the use of outerHTML
	$('select', div)
		.val( settings._iDisplayLength )
		.on( 'change.DT', function(e) {
			_fnLengthChange( settings, $(this).val() );
			_fnDraw( settings );
		} );

	// Update node value whenever anything changes the table's length
	$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
		if ( settings === s ) {
			$('select', div).val( len );
		}
	} );

	return div[0];
}



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Note that most of the paging logic is done in
 * DataTable.ext.pager
 */

/**
 * Generate the node required for default pagination
 *  @param {object} oSettings dataTables settings object
 *  @returns {node} Pagination feature node
 *  @memberof DataTable#oApi
 */
function _fnFeatureHtmlPaginate ( settings )
{
	var
		type   = settings.sPaginationType,
		plugin = DataTable.ext.pager[ type ],
		modern = typeof plugin === 'function',
		redraw = function( settings ) {
			_fnDraw( settings );
		},
		node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
		features = settings.aanFeatures;

	if ( ! modern ) {
		plugin.fnInit( settings, node, redraw );
	}

	/* Add a draw callback for the pagination on first instance, to update the paging display */
	if ( ! features.p )
	{
		node.id = settings.sTableId+'_paginate';

		settings.aoDrawCallback.push( {
			"fn": function( settings ) {
				if ( modern ) {
					var
						start      = settings._iDisplayStart,
						len        = settings._iDisplayLength,
						visRecords = settings.fnRecordsDisplay(),
						all        = len === -1,
						page = all ? 0 : Math.ceil( start / len ),
						pages = all ? 1 : Math.ceil( visRecords / len ),
						buttons = plugin(page, pages),
						i, ien;

					for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
						_fnRenderer( settings, 'pageButton' )(
							settings, features.p[i], i, buttons, page, pages
						);
					}
				}
				else {
					plugin.fnUpdate( settings, redraw );
				}
			},
			"sName": "pagination"
		} );
	}

	return node;
}


/**
 * Alter the display settings to change the page
 *  @param {object} settings DataTables settings object
 *  @param {string|int} action Paging action to take: "first", "previous",
 *    "next" or "last" or page number to jump to (integer)
 *  @param [bool] redraw Automatically draw the update or not
 *  @returns {bool} true page has changed, false - no change
 *  @memberof DataTable#oApi
 */
function _fnPageChange ( settings, action, redraw )
{
	var
		start     = settings._iDisplayStart,
		len       = settings._iDisplayLength,
		records   = settings.fnRecordsDisplay();

	if ( records === 0 || len === -1 )
	{
		start = 0;
	}
	else if ( typeof action === "number" )
	{
		start = action * len;

		if ( start > records )
		{
			start = 0;
		}
	}
	else if ( action == "first" )
	{
		start = 0;
	}
	else if ( action == "previous" )
	{
		start = len >= 0 ?
			start - len :
			0;

		if ( start < 0 )
		{
		  start = 0;
		}
	}
	else if ( action == "next" )
	{
		if ( start + len < records )
		{
			start += len;
		}
	}
	else if ( action == "last" )
	{
		start = Math.floor( (records-1) / len) * len;
	}
	else
	{
		_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
	}

	var changed = settings._iDisplayStart !== start;
	settings._iDisplayStart = start;

	if ( changed ) {
		_fnCallbackFire( settings, null, 'page', [settings] );

		if ( redraw ) {
			_fnDraw( settings );
		}
	}
	else {
		// No change event - paging was called, but no change
		_fnCallbackFire( settings, null, 'page-nc', [settings] );
	}

	return changed;
}



/**
 * Generate the node required for the processing node
 *  @param {object} settings dataTables settings object
 *  @returns {node} Processing element
 *  @memberof DataTable#oApi
 */
function _fnFeatureHtmlProcessing ( settings )
{
	return $('<div/>', {
			'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
			'class': settings.oClasses.sProcessing
		} )
		.html( settings.oLanguage.sProcessing )
		.append('<div><div></div><div></div><div></div><div></div></div>')
		.insertBefore( settings.nTable )[0];
}


/**
 * Display or hide the processing indicator
 *  @param {object} settings dataTables settings object
 *  @param {bool} show Show the processing indicator (true) or not (false)
 *  @memberof DataTable#oApi
 */
function _fnProcessingDisplay ( settings, show )
{
	if ( settings.oFeatures.bProcessing ) {
		$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
	}

	_fnCallbackFire( settings, null, 'processing', [settings, show] );
}

/**
 * Add any control elements for the table - specifically scrolling
 *  @param {object} settings dataTables settings object
 *  @returns {node} Node to add to the DOM
 *  @memberof DataTable#oApi
 */
function _fnFeatureHtmlTable ( settings )
{
	var table = $(settings.nTable);

	// Scrolling from here on in
	var scroll = settings.oScroll;

	if ( scroll.sX === '' && scroll.sY === '' ) {
		return settings.nTable;
	}

	var scrollX = scroll.sX;
	var scrollY = scroll.sY;
	var classes = settings.oClasses;
	var caption = table.children('caption');
	var captionSide = caption.length ? caption[0]._captionSide : null;
	var headerClone = $( table[0].cloneNode(false) );
	var footerClone = $( table[0].cloneNode(false) );
	var footer = table.children('tfoot');
	var _div = '<div/>';
	var size = function ( s ) {
		return !s ? null : _fnStringToCss( s );
	};

	if ( ! footer.length ) {
		footer = null;
	}

	/*
	 * The HTML structure that we want to generate in this function is:
	 *  div - scroller
	 *    div - scroll head
	 *      div - scroll head inner
	 *        table - scroll head table
	 *          thead - thead
	 *    div - scroll body
	 *      table - table (master table)
	 *        thead - thead clone for sizing
	 *        tbody - tbody
	 *    div - scroll foot
	 *      div - scroll foot inner
	 *        table - scroll foot table
	 *          tfoot - tfoot
	 */
	var scroller = $( _div, { 'class': classes.sScrollWrapper } )
		.append(
			$(_div, { 'class': classes.sScrollHead } )
				.css( {
					overflow: 'hidden',
					position: 'relative',
					border: 0,
					width: scrollX ? size(scrollX) : '100%'
				} )
				.append(
					$(_div, { 'class': classes.sScrollHeadInner } )
						.css( {
							'box-sizing': 'content-box',
							width: scroll.sXInner || '100%'
						} )
						.append(
							headerClone
								.removeAttr('id')
								.css( 'margin-left', 0 )
								.append( captionSide === 'top' ? caption : null )
								.append(
									table.children('thead')
								)
						)
				)
		)
		.append(
			$(_div, { 'class': classes.sScrollBody } )
				.css( {
					position: 'relative',
					overflow: 'auto',
					width: size( scrollX )
				} )
				.append( table )
		);

	if ( footer ) {
		scroller.append(
			$(_div, { 'class': classes.sScrollFoot } )
				.css( {
					overflow: 'hidden',
					border: 0,
					width: scrollX ? size(scrollX) : '100%'
				} )
				.append(
					$(_div, { 'class': classes.sScrollFootInner } )
						.append(
							footerClone
								.removeAttr('id')
								.css( 'margin-left', 0 )
								.append( captionSide === 'bottom' ? caption : null )
								.append(
									table.children('tfoot')
								)
						)
				)
		);
	}

	var children = scroller.children();
	var scrollHead = children[0];
	var scrollBody = children[1];
	var scrollFoot = footer ? children[2] : null;

	// When the body is scrolled, then we also want to scroll the headers
	if ( scrollX ) {
		$(scrollBody).on( 'scroll.DT', function (e) {
			var scrollLeft = this.scrollLeft;

			scrollHead.scrollLeft = scrollLeft;

			if ( footer ) {
				scrollFoot.scrollLeft = scrollLeft;
			}
		} );
	}

	$(scrollBody).css('max-height', scrollY);
	if (! scroll.bCollapse) {
		$(scrollBody).css('height', scrollY);
	}

	settings.nScrollHead = scrollHead;
	settings.nScrollBody = scrollBody;
	settings.nScrollFoot = scrollFoot;

	// On redraw - align columns
	settings.aoDrawCallback.push( {
		"fn": _fnScrollDraw,
		"sName": "scrolling"
	} );

	return scroller[0];
}



/**
 * Update the header, footer and body tables for resizing - i.e. column
 * alignment.
 *
 * Welcome to the most horrible function DataTables. The process that this
 * function follows is basically:
 *   1. Re-create the table inside the scrolling div
 *   2. Take live measurements from the DOM
 *   3. Apply the measurements to align the columns
 *   4. Clean up
 *
 *  @param {object} settings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnScrollDraw ( settings )
{
	// Given that this is such a monster function, a lot of variables are use
	// to try and keep the minimised size as small as possible
	var
		scroll         = settings.oScroll,
		scrollX        = scroll.sX,
		scrollXInner   = scroll.sXInner,
		scrollY        = scroll.sY,
		barWidth       = scroll.iBarWidth,
		divHeader      = $(settings.nScrollHead),
		divHeaderStyle = divHeader[0].style,
		divHeaderInner = divHeader.children('div'),
		divHeaderInnerStyle = divHeaderInner[0].style,
		divHeaderTable = divHeaderInner.children('table'),
		divBodyEl      = settings.nScrollBody,
		divBody        = $(divBodyEl),
		divBodyStyle   = divBodyEl.style,
		divFooter      = $(settings.nScrollFoot),
		divFooterInner = divFooter.children('div'),
		divFooterTable = divFooterInner.children('table'),
		header         = $(settings.nTHead),
		table          = $(settings.nTable),
		tableEl        = table[0],
		tableStyle     = tableEl.style,
		footer         = settings.nTFoot ? $(settings.nTFoot) : null,
		browser        = settings.oBrowser,
		ie67           = browser.bScrollOversize,
		dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
		headerTrgEls, footerTrgEls,
		headerSrcEls, footerSrcEls,
		headerCopy, footerCopy,
		headerWidths=[], footerWidths=[],
		headerContent=[], footerContent=[],
		idx, correction, sanityWidth,
		zeroOut = function(nSizer) {
			var style = nSizer.style;
			style.paddingTop = "0";
			style.paddingBottom = "0";
			style.borderTopWidth = "0";
			style.borderBottomWidth = "0";
			style.height = 0;
		};

	// If the scrollbar visibility has changed from the last draw, we need to
	// adjust the column sizes as the table width will have changed to account
	// for the scrollbar
	var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
	
	if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
		settings.scrollBarVis = scrollBarVis;
		_fnAdjustColumnSizing( settings );
		return; // adjust column sizing will call this function again
	}
	else {
		settings.scrollBarVis = scrollBarVis;
	}

	/*
	 * 1. Re-create the table inside the scrolling div
	 */

	// Remove the old minimised thead and tfoot elements in the inner table
	table.children('thead, tfoot').remove();

	if ( footer ) {
		footerCopy = footer.clone().prependTo( table );
		footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
		footerSrcEls = footerCopy.find('tr');
		footerCopy.find('[id]').removeAttr('id');
	}

	// Clone the current header and footer elements and then place it into the inner table
	headerCopy = header.clone().prependTo( table );
	headerTrgEls = header.find('tr'); // original header is in its own table
	headerSrcEls = headerCopy.find('tr');
	headerCopy.find('th, td').removeAttr('tabindex');
	headerCopy.find('[id]').removeAttr('id');


	/*
	 * 2. Take live measurements from the DOM - do not alter the DOM itself!
	 */

	// Remove old sizing and apply the calculated column widths
	// Get the unique column headers in the newly created (cloned) header. We want to apply the
	// calculated sizes to this header
	if ( ! scrollX )
	{
		divBodyStyle.width = '100%';
		divHeader[0].style.width = '100%';
	}

	$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
		idx = _fnVisibleToColumnIndex( settings, i );
		el.style.width = settings.aoColumns[idx].sWidth;
	} );

	if ( footer ) {
		_fnApplyToChildren( function(n) {
			n.style.width = "";
		}, footerSrcEls );
	}

	// Size the table as a whole
	sanityWidth = table.outerWidth();
	if ( scrollX === "" ) {
		// No x scrolling
		tableStyle.width = "100%";

		// IE7 will make the width of the table when 100% include the scrollbar
		// - which is shouldn't. When there is a scrollbar we need to take this
		// into account.
		if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
			divBody.css('overflow-y') == "scroll")
		) {
			tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
		}

		// Recalculate the sanity width
		sanityWidth = table.outerWidth();
	}
	else if ( scrollXInner !== "" ) {
		// legacy x scroll inner has been given - use it
		tableStyle.width = _fnStringToCss(scrollXInner);

		// Recalculate the sanity width
		sanityWidth = table.outerWidth();
	}

	// Hidden header should have zero height, so remove padding and borders. Then
	// set the width based on the real headers

	// Apply all styles in one pass
	_fnApplyToChildren( zeroOut, headerSrcEls );

	// Read all widths in next pass
	_fnApplyToChildren( function(nSizer) {
		var style = window.getComputedStyle ?
			window.getComputedStyle(nSizer).width :
			_fnStringToCss( $(nSizer).width() );

		headerContent.push( nSizer.innerHTML );
		headerWidths.push( style );
	}, headerSrcEls );

	// Apply all widths in final pass
	_fnApplyToChildren( function(nToSize, i) {
		nToSize.style.width = headerWidths[i];
	}, headerTrgEls );

	$(headerSrcEls).css('height', 0);

	/* Same again with the footer if we have one */
	if ( footer )
	{
		_fnApplyToChildren( zeroOut, footerSrcEls );

		_fnApplyToChildren( function(nSizer) {
			footerContent.push( nSizer.innerHTML );
			footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
		}, footerSrcEls );

		_fnApplyToChildren( function(nToSize, i) {
			nToSize.style.width = footerWidths[i];
		}, footerTrgEls );

		$(footerSrcEls).height(0);
	}


	/*
	 * 3. Apply the measurements
	 */

	// "Hide" the header and footer that we used for the sizing. We need to keep
	// the content of the cell so that the width applied to the header and body
	// both match, but we want to hide it completely. We want to also fix their
	// width to what they currently are
	_fnApplyToChildren( function(nSizer, i) {
		nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
		nSizer.childNodes[0].style.height = "0";
		nSizer.childNodes[0].style.overflow = "hidden";
		nSizer.style.width = headerWidths[i];
	}, headerSrcEls );

	if ( footer )
	{
		_fnApplyToChildren( function(nSizer, i) {
			nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
			nSizer.childNodes[0].style.height = "0";
			nSizer.childNodes[0].style.overflow = "hidden";
			nSizer.style.width = footerWidths[i];
		}, footerSrcEls );
	}

	// Sanity check that the table is of a sensible width. If not then we are going to get
	// misalignment - try to prevent this by not allowing the table to shrink below its min width
	if ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )
	{
		// The min width depends upon if we have a vertical scrollbar visible or not */
		correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
			divBody.css('overflow-y') == "scroll")) ?
				sanityWidth+barWidth :
				sanityWidth;

		// IE6/7 are a law unto themselves...
		if ( ie67 && (divBodyEl.scrollHeight >
			divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
		) {
			tableStyle.width = _fnStringToCss( correction-barWidth );
		}

		// And give the user a warning that we've stopped the table getting too small
		if ( scrollX === "" || scrollXInner !== "" ) {
			_fnLog( settings, 1, 'Possible column misalignment', 6 );
		}
	}
	else
	{
		correction = '100%';
	}

	// Apply to the container elements
	divBodyStyle.width = _fnStringToCss( correction );
	divHeaderStyle.width = _fnStringToCss( correction );

	if ( footer ) {
		settings.nScrollFoot.style.width = _fnStringToCss( correction );
	}


	/*
	 * 4. Clean up
	 */
	if ( ! scrollY ) {
		/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
		 * the scrollbar height from the visible display, rather than adding it on. We need to
		 * set the height in order to sort this. Don't want to do it in any other browsers.
		 */
		if ( ie67 ) {
			divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
		}
	}

	/* Finally set the width's of the header and footer tables */
	var iOuterWidth = table.outerWidth();
	divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
	divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );

	// Figure out if there are scrollbar present - if so then we need a the header and footer to
	// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
	var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
	var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
	divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";

	if ( footer ) {
		divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
		divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
		divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
	}

	// Correct DOM ordering for colgroup - comes before the thead
	table.children('colgroup').insertBefore( table.children('thead') );

	/* Adjust the position of the header in case we loose the y-scrollbar */
	divBody.trigger('scroll');

	// If sorting or filtering has occurred, jump the scrolling back to the top
	// only if we aren't holding the position
	if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
		divBodyEl.scrollTop = 0;
	}
}



/**
 * Apply a given function to the display child nodes of an element array (typically
 * TD children of TR rows
 *  @param {function} fn Method to apply to the objects
 *  @param array {nodes} an1 List of elements to look through for display children
 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
 *  @memberof DataTable#oApi
 */
function _fnApplyToChildren( fn, an1, an2 )
{
	var index=0, i=0, iLen=an1.length;
	var nNode1, nNode2;

	while ( i < iLen ) {
		nNode1 = an1[i].firstChild;
		nNode2 = an2 ? an2[i].firstChild : null;

		while ( nNode1 ) {
			if ( nNode1.nodeType === 1 ) {
				if ( an2 ) {
					fn( nNode1, nNode2, index );
				}
				else {
					fn( nNode1, index );
				}

				index++;
			}

			nNode1 = nNode1.nextSibling;
			nNode2 = an2 ? nNode2.nextSibling : null;
		}

		i++;
	}
}



var __re_html_remove = /<.*?>/g;


/**
 * Calculate the width of columns for the table
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnCalculateColumnWidths ( oSettings )
{
	var
		table = oSettings.nTable,
		columns = oSettings.aoColumns,
		scroll = oSettings.oScroll,
		scrollY = scroll.sY,
		scrollX = scroll.sX,
		scrollXInner = scroll.sXInner,
		columnCount = columns.length,
		visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
		headerCells = $('th', oSettings.nTHead),
		tableWidthAttr = table.getAttribute('width'), // from DOM element
		tableContainer = table.parentNode,
		userInputs = false,
		i, column, columnIdx, width, outerWidth,
		browser = oSettings.oBrowser,
		ie67 = browser.bScrollOversize;

	var styleWidth = table.style.width;
	if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
		tableWidthAttr = styleWidth;
	}

	/* Convert any user input sizes into pixel sizes */
	for ( i=0 ; i<visibleColumns.length ; i++ ) {
		column = columns[ visibleColumns[i] ];

		if ( column.sWidth !== null ) {
			column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );

			userInputs = true;
		}
	}

	/* If the number of columns in the DOM equals the number that we have to
	 * process in DataTables, then we can use the offsets that are created by
	 * the web- browser. No custom sizes can be set in order for this to happen,
	 * nor scrolling used
	 */
	if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
	     columnCount == _fnVisbleColumns( oSettings ) &&
	     columnCount == headerCells.length
	) {
		for ( i=0 ; i<columnCount ; i++ ) {
			var colIdx = _fnVisibleToColumnIndex( oSettings, i );

			if ( colIdx !== null ) {
				columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
			}
		}
	}
	else
	{
		// Otherwise construct a single row, worst case, table with the widest
		// node in the data, assign any user defined widths, then insert it into
		// the DOM and allow the browser to do all the hard work of calculating
		// table widths
		var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
			.css( 'visibility', 'hidden' )
			.removeAttr( 'id' );

		// Clean up the table body
		tmpTable.find('tbody tr').remove();
		var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );

		// Clone the table header and footer - we can't use the header / footer
		// from the cloned table, since if scrolling is active, the table's
		// real header and footer are contained in different table tags
		tmpTable.find('thead, tfoot').remove();
		tmpTable
			.append( $(oSettings.nTHead).clone() )
			.append( $(oSettings.nTFoot).clone() );

		// Remove any assigned widths from the footer (from scrolling)
		tmpTable.find('tfoot th, tfoot td').css('width', '');

		// Apply custom sizing to the cloned header
		headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );

		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			column = columns[ visibleColumns[i] ];

			headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
				_fnStringToCss( column.sWidthOrig ) :
				'';

			// For scrollX we need to force the column width otherwise the
			// browser will collapse it. If this width is smaller than the
			// width the column requires, then it will have no effect
			if ( column.sWidthOrig && scrollX ) {
				$( headerCells[i] ).append( $('<div/>').css( {
					width: column.sWidthOrig,
					margin: 0,
					padding: 0,
					border: 0,
					height: 1
				} ) );
			}
		}

		// Find the widest cell for each column and put it into the table
		if ( oSettings.aoData.length ) {
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				columnIdx = visibleColumns[i];
				column = columns[ columnIdx ];

				$( _fnGetWidestNode( oSettings, columnIdx ) )
					.clone( false )
					.append( column.sContentPadding )
					.appendTo( tr );
			}
		}

		// Tidy the temporary table - remove name attributes so there aren't
		// duplicated in the dom (radio elements for example)
		$('[name]', tmpTable).removeAttr('name');

		// Table has been built, attach to the document so we can work with it.
		// A holding element is used, positioned at the top of the container
		// with minimal height, so it has no effect on if the container scrolls
		// or not. Otherwise it might trigger scrolling when it actually isn't
		// needed
		var holder = $('<div/>').css( scrollX || scrollY ?
				{
					position: 'absolute',
					top: 0,
					left: 0,
					height: 1,
					right: 0,
					overflow: 'hidden'
				} :
				{}
			)
			.append( tmpTable )
			.appendTo( tableContainer );

		// When scrolling (X or Y) we want to set the width of the table as 
		// appropriate. However, when not scrolling leave the table width as it
		// is. This results in slightly different, but I think correct behaviour
		if ( scrollX && scrollXInner ) {
			tmpTable.width( scrollXInner );
		}
		else if ( scrollX ) {
			tmpTable.css( 'width', 'auto' );
			tmpTable.removeAttr('width');

			// If there is no width attribute or style, then allow the table to
			// collapse
			if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
				tmpTable.width( tableContainer.clientWidth );
			}
		}
		else if ( scrollY ) {
			tmpTable.width( tableContainer.clientWidth );
		}
		else if ( tableWidthAttr ) {
			tmpTable.width( tableWidthAttr );
		}

		// Get the width of each column in the constructed table - we need to
		// know the inner width (so it can be assigned to the other table's
		// cells) and the outer width so we can calculate the full width of the
		// table. This is safe since DataTables requires a unique cell for each
		// column, but if ever a header can span multiple columns, this will
		// need to be modified.
		var total = 0;
		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			var cell = $(headerCells[i]);
			var border = cell.outerWidth() - cell.width();

			// Use getBounding... where possible (not IE8-) because it can give
			// sub-pixel accuracy, which we then want to round up!
			var bounding = browser.bBounding ?
				Math.ceil( headerCells[i].getBoundingClientRect().width ) :
				cell.outerWidth();

			// Total is tracked to remove any sub-pixel errors as the outerWidth
			// of the table might not equal the total given here (IE!).
			total += bounding;

			// Width for each column to use
			columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
		}

		table.style.width = _fnStringToCss( total );

		// Finished with the table - ditch it
		holder.remove();
	}

	// If there is a width attr, we want to attach an event listener which
	// allows the table sizing to automatically adjust when the window is
	// resized. Use the width attr rather than CSS, since we can't know if the
	// CSS is a relative value or absolute - DOM read is always px.
	if ( tableWidthAttr ) {
		table.style.width = _fnStringToCss( tableWidthAttr );
	}

	if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
		var bindResize = function () {
			$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
				_fnAdjustColumnSizing( oSettings );
			} ) );
		};

		// IE6/7 will crash if we bind a resize event handler on page load.
		// To be removed in 1.11 which drops IE6/7 support
		if ( ie67 ) {
			setTimeout( bindResize, 1000 );
		}
		else {
			bindResize();
		}

		oSettings._reszEvt = true;
	}
}


/**
 * Throttle the calls to a function. Arguments and context are maintained for
 * the throttled function
 *  @param {function} fn Function to be called
 *  @param {int} [freq=200] call frequency in mS
 *  @returns {function} wrapped function
 *  @memberof DataTable#oApi
 */
var _fnThrottle = DataTable.util.throttle;


/**
 * Convert a CSS unit width to pixels (e.g. 2em)
 *  @param {string} width width to be converted
 *  @param {node} parent parent to get the with for (required for relative widths) - optional
 *  @returns {int} width in pixels
 *  @memberof DataTable#oApi
 */
function _fnConvertToWidth ( width, parent )
{
	if ( ! width ) {
		return 0;
	}

	var n = $('<div/>')
		.css( 'width', _fnStringToCss( width ) )
		.appendTo( parent || document.body );

	var val = n[0].offsetWidth;
	n.remove();

	return val;
}


/**
 * Get the widest node
 *  @param {object} settings dataTables settings object
 *  @param {int} colIdx column of interest
 *  @returns {node} widest table node
 *  @memberof DataTable#oApi
 */
function _fnGetWidestNode( settings, colIdx )
{
	var idx = _fnGetMaxLenString( settings, colIdx );
	if ( idx < 0 ) {
		return null;
	}

	var data = settings.aoData[ idx ];
	return ! data.nTr ? // Might not have been created when deferred rendering
		$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
		data.anCells[ colIdx ];
}


/**
 * Get the maximum strlen for each data column
 *  @param {object} settings dataTables settings object
 *  @param {int} colIdx column of interest
 *  @returns {string} max string length for each column
 *  @memberof DataTable#oApi
 */
function _fnGetMaxLenString( settings, colIdx )
{
	var s, max=-1, maxIdx = -1;

	for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
		s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
		s = s.replace( __re_html_remove, '' );
		s = s.replace( /&nbsp;/g, ' ' );

		if ( s.length > max ) {
			max = s.length;
			maxIdx = i;
		}
	}

	return maxIdx;
}


/**
 * Append a CSS unit (only if required) to a string
 *  @param {string} value to css-ify
 *  @returns {string} value with css unit
 *  @memberof DataTable#oApi
 */
function _fnStringToCss( s )
{
	if ( s === null ) {
		return '0px';
	}

	if ( typeof s == 'number' ) {
		return s < 0 ?
			'0px' :
			s+'px';
	}

	// Check it has a unit character already
	return s.match(/\d$/) ?
		s+'px' :
		s;
}



function _fnSortFlatten ( settings )
{
	var
		i, iLen, k, kLen,
		aSort = [],
		aiOrig = [],
		aoColumns = settings.aoColumns,
		aDataSort, iCol, sType, srcCol,
		fixed = settings.aaSortingFixed,
		fixedObj = $.isPlainObject( fixed ),
		nestedSort = [],
		add = function ( a ) {
			if ( a.length && ! Array.isArray( a[0] ) ) {
				// 1D array
				nestedSort.push( a );
			}
			else {
				// 2D array
				$.merge( nestedSort, a );
			}
		};

	// Build the sort array, with pre-fix and post-fix options if they have been
	// specified
	if ( Array.isArray( fixed ) ) {
		add( fixed );
	}

	if ( fixedObj && fixed.pre ) {
		add( fixed.pre );
	}

	add( settings.aaSorting );

	if (fixedObj && fixed.post ) {
		add( fixed.post );
	}

	for ( i=0 ; i<nestedSort.length ; i++ )
	{
		srcCol = nestedSort[i][0];
		aDataSort = aoColumns[ srcCol ].aDataSort;

		for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
		{
			iCol = aDataSort[k];
			sType = aoColumns[ iCol ].sType || 'string';

			if ( nestedSort[i]._idx === undefined ) {
				nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
			}

			aSort.push( {
				src:       srcCol,
				col:       iCol,
				dir:       nestedSort[i][1],
				index:     nestedSort[i]._idx,
				type:      sType,
				formatter: DataTable.ext.type.order[ sType+"-pre" ]
			} );
		}
	}

	return aSort;
}

/**
 * Change the order of the table
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 *  @todo This really needs split up!
 */
function _fnSort ( oSettings )
{
	var
		i, ien, iLen, j, jLen, k, kLen,
		sDataType, nTh,
		aiOrig = [],
		oExtSort = DataTable.ext.type.order,
		aoData = oSettings.aoData,
		aoColumns = oSettings.aoColumns,
		aDataSort, data, iCol, sType, oSort,
		formatters = 0,
		sortCol,
		displayMaster = oSettings.aiDisplayMaster,
		aSort;

	// Resolve any column types that are unknown due to addition or invalidation
	// @todo Can this be moved into a 'data-ready' handler which is called when
	//   data is going to be used in the table?
	_fnColumnTypes( oSettings );

	aSort = _fnSortFlatten( oSettings );

	for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
		sortCol = aSort[i];

		// Track if we can use the fast sort algorithm
		if ( sortCol.formatter ) {
			formatters++;
		}

		// Load the data needed for the sort, for each cell
		_fnSortData( oSettings, sortCol.col );
	}

	/* No sorting required if server-side or no sorting array */
	if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
	{
		// Create a value - key array of the current row positions such that we can use their
		// current position during the sort, if values match, in order to perform stable sorting
		for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
			aiOrig[ displayMaster[i] ] = i;
		}

		/* Do the sort - here we want multi-column sorting based on a given data source (column)
		 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
		 * follow on it's own, but this is what we want (example two column sorting):
		 *  fnLocalSorting = function(a,b){
		 *    var iTest;
		 *    iTest = oSort['string-asc']('data11', 'data12');
		 *      if (iTest !== 0)
		 *        return iTest;
		 *    iTest = oSort['numeric-desc']('data21', 'data22');
		 *    if (iTest !== 0)
		 *      return iTest;
		 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
		 *  }
		 * Basically we have a test for each sorting column, if the data in that column is equal,
		 * test the next column. If all columns match, then we use a numeric sort on the row
		 * positions in the original data array to provide a stable sort.
		 *
		 * Note - I know it seems excessive to have two sorting methods, but the first is around
		 * 15% faster, so the second is only maintained for backwards compatibility with sorting
		 * methods which do not have a pre-sort formatting function.
		 */
		if ( formatters === aSort.length ) {
			// All sort types have formatting functions
			displayMaster.sort( function ( a, b ) {
				var
					x, y, k, test, sort,
					len=aSort.length,
					dataA = aoData[a]._aSortData,
					dataB = aoData[b]._aSortData;

				for ( k=0 ; k<len ; k++ ) {
					sort = aSort[k];

					x = dataA[ sort.col ];
					y = dataB[ sort.col ];

					test = x<y ? -1 : x>y ? 1 : 0;
					if ( test !== 0 ) {
						return sort.dir === 'asc' ? test : -test;
					}
				}

				x = aiOrig[a];
				y = aiOrig[b];
				return x<y ? -1 : x>y ? 1 : 0;
			} );
		}
		else {
			// Depreciated - remove in 1.11 (providing a plug-in option)
			// Not all sort types have formatting methods, so we have to call their sorting
			// methods.
			displayMaster.sort( function ( a, b ) {
				var
					x, y, k, l, test, sort, fn,
					len=aSort.length,
					dataA = aoData[a]._aSortData,
					dataB = aoData[b]._aSortData;

				for ( k=0 ; k<len ; k++ ) {
					sort = aSort[k];

					x = dataA[ sort.col ];
					y = dataB[ sort.col ];

					fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
					test = fn( x, y );
					if ( test !== 0 ) {
						return test;
					}
				}

				x = aiOrig[a];
				y = aiOrig[b];
				return x<y ? -1 : x>y ? 1 : 0;
			} );
		}
	}

	/* Tell the draw function that we have sorted the data */
	oSettings.bSorted = true;
}


function _fnSortAria ( settings )
{
	var label;
	var nextSort;
	var columns = settings.aoColumns;
	var aSort = _fnSortFlatten( settings );
	var oAria = settings.oLanguage.oAria;

	// ARIA attributes - need to loop all columns, to update all (removing old
	// attributes as needed)
	for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
	{
		var col = columns[i];
		var asSorting = col.asSorting;
		var sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, "" );
		var th = col.nTh;

		// IE7 is throwing an error when setting these properties with jQuery's
		// attr() and removeAttr() methods...
		th.removeAttribute('aria-sort');

		/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
		if ( col.bSortable ) {
			if ( aSort.length > 0 && aSort[0].col == i ) {
				th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
				nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
			}
			else {
				nextSort = asSorting[0];
			}

			label = sTitle + ( nextSort === "asc" ?
				oAria.sSortAscending :
				oAria.sSortDescending
			);
		}
		else {
			label = sTitle;
		}

		th.setAttribute('aria-label', label);
	}
}


/**
 * Function to run on user sort request
 *  @param {object} settings dataTables settings object
 *  @param {node} attachTo node to attach the handler to
 *  @param {int} colIdx column sorting index
 *  @param {boolean} [append=false] Append the requested sort to the existing
 *    sort if true (i.e. multi-column sort)
 *  @param {function} [callback] callback function
 *  @memberof DataTable#oApi
 */
function _fnSortListener ( settings, colIdx, append, callback )
{
	var col = settings.aoColumns[ colIdx ];
	var sorting = settings.aaSorting;
	var asSorting = col.asSorting;
	var nextSortIdx;
	var next = function ( a, overflow ) {
		var idx = a._idx;
		if ( idx === undefined ) {
			idx = $.inArray( a[1], asSorting );
		}

		return idx+1 < asSorting.length ?
			idx+1 :
			overflow ?
				null :
				0;
	};

	// Convert to 2D array if needed
	if ( typeof sorting[0] === 'number' ) {
		sorting = settings.aaSorting = [ sorting ];
	}

	// If appending the sort then we are multi-column sorting
	if ( append && settings.oFeatures.bSortMulti ) {
		// Are we already doing some kind of sort on this column?
		var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );

		if ( sortIdx !== -1 ) {
			// Yes, modify the sort
			nextSortIdx = next( sorting[sortIdx], true );

			if ( nextSortIdx === null && sorting.length === 1 ) {
				nextSortIdx = 0; // can't remove sorting completely
			}

			if ( nextSortIdx === null ) {
				sorting.splice( sortIdx, 1 );
			}
			else {
				sorting[sortIdx][1] = asSorting[ nextSortIdx ];
				sorting[sortIdx]._idx = nextSortIdx;
			}
		}
		else {
			// No sort on this column yet
			sorting.push( [ colIdx, asSorting[0], 0 ] );
			sorting[sorting.length-1]._idx = 0;
		}
	}
	else if ( sorting.length && sorting[0][0] == colIdx ) {
		// Single column - already sorting on this column, modify the sort
		nextSortIdx = next( sorting[0] );

		sorting.length = 1;
		sorting[0][1] = asSorting[ nextSortIdx ];
		sorting[0]._idx = nextSortIdx;
	}
	else {
		// Single column - sort only on this column
		sorting.length = 0;
		sorting.push( [ colIdx, asSorting[0] ] );
		sorting[0]._idx = 0;
	}

	// Run the sort by calling a full redraw
	_fnReDraw( settings );

	// callback used for async user interaction
	if ( typeof callback == 'function' ) {
		callback( settings );
	}
}


/**
 * Attach a sort handler (click) to a node
 *  @param {object} settings dataTables settings object
 *  @param {node} attachTo node to attach the handler to
 *  @param {int} colIdx column sorting index
 *  @param {function} [callback] callback function
 *  @memberof DataTable#oApi
 */
function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
{
	var col = settings.aoColumns[ colIdx ];

	_fnBindAction( attachTo, {}, function (e) {
		/* If the column is not sortable - don't to anything */
		if ( col.bSortable === false ) {
			return;
		}

		// If processing is enabled use a timeout to allow the processing
		// display to be shown - otherwise to it synchronously
		if ( settings.oFeatures.bProcessing ) {
			_fnProcessingDisplay( settings, true );

			setTimeout( function() {
				_fnSortListener( settings, colIdx, e.shiftKey, callback );

				// In server-side processing, the draw callback will remove the
				// processing display
				if ( _fnDataSource( settings ) !== 'ssp' ) {
					_fnProcessingDisplay( settings, false );
				}
			}, 0 );
		}
		else {
			_fnSortListener( settings, colIdx, e.shiftKey, callback );
		}
	} );
}


/**
 * Set the sorting classes on table's body, Note: it is safe to call this function
 * when bSort and bSortClasses are false
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnSortingClasses( settings )
{
	var oldSort = settings.aLastSort;
	var sortClass = settings.oClasses.sSortColumn;
	var sort = _fnSortFlatten( settings );
	var features = settings.oFeatures;
	var i, ien, colIdx;

	if ( features.bSort && features.bSortClasses ) {
		// Remove old sorting classes
		for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
			colIdx = oldSort[i].src;

			// Remove column sorting
			$( _pluck( settings.aoData, 'anCells', colIdx ) )
				.removeClass( sortClass + (i<2 ? i+1 : 3) );
		}

		// Add new column sorting
		for ( i=0, ien=sort.length ; i<ien ; i++ ) {
			colIdx = sort[i].src;

			$( _pluck( settings.aoData, 'anCells', colIdx ) )
				.addClass( sortClass + (i<2 ? i+1 : 3) );
		}
	}

	settings.aLastSort = sort;
}


// Get the data to sort a column, be it from cache, fresh (populating the
// cache), or from a sort formatter
function _fnSortData( settings, idx )
{
	// Custom sorting function - provided by the sort data type
	var column = settings.aoColumns[ idx ];
	var customSort = DataTable.ext.order[ column.sSortDataType ];
	var customData;

	if ( customSort ) {
		customData = customSort.call( settings.oInstance, settings, idx,
			_fnColumnIndexToVisible( settings, idx )
		);
	}

	// Use / populate cache
	var row, cellData;
	var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];

	for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
		row = settings.aoData[i];

		if ( ! row._aSortData ) {
			row._aSortData = [];
		}

		if ( ! row._aSortData[idx] || customSort ) {
			cellData = customSort ?
				customData[i] : // If there was a custom sort function, use data from there
				_fnGetCellData( settings, i, idx, 'sort' );

			row._aSortData[ idx ] = formatter ?
				formatter( cellData ) :
				cellData;
		}
	}
}



/**
 * Save the state of a table
 *  @param {object} oSettings dataTables settings object
 *  @memberof DataTable#oApi
 */
function _fnSaveState ( settings )
{
	if (settings._bLoadingState) {
		return;
	}

	/* Store the interesting variables */
	var state = {
		time:    +new Date(),
		start:   settings._iDisplayStart,
		length:  settings._iDisplayLength,
		order:   $.extend( true, [], settings.aaSorting ),
		search:  _fnSearchToCamel( settings.oPreviousSearch ),
		columns: $.map( settings.aoColumns, function ( col, i ) {
			return {
				visible: col.bVisible,
				search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
			};
		} )
	};

	settings.oSavedState = state;
	_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
	
	if ( settings.oFeatures.bStateSave && !settings.bDestroying )
	{
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	}	
}


/**
 * Attempt to load a saved table state
 *  @param {object} oSettings dataTables settings object
 *  @param {object} oInit DataTables init object so we can override settings
 *  @param {function} callback Callback to execute when the state has been loaded
 *  @memberof DataTable#oApi
 */
function _fnLoadState ( settings, oInit, callback )
{
	if ( ! settings.oFeatures.bStateSave ) {
		callback();
		return;
	}

	var loaded = function(state) {
		_fnImplementState(settings, state, callback);
	}

	var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );

	if ( state !== undefined ) {
		_fnImplementState( settings, state, callback );
	}
	// otherwise, wait for the loaded callback to be executed

	return true;
}

function _fnImplementState ( settings, s, callback) {
	var i, ien;
	var columns = settings.aoColumns;
	settings._bLoadingState = true;

	// When StateRestore was introduced the state could now be implemented at any time
	// Not just initialisation. To do this an api instance is required in some places
	var api = settings._bInitComplete ? new DataTable.Api(settings) : null;

	if ( ! s || ! s.time ) {
		settings._bLoadingState = false;
		callback();
		return;
	}

	// Allow custom and plug-in manipulation functions to alter the saved data set and
	// cancelling of loading by returning false
	var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
	if ( $.inArray( false, abStateLoad ) !== -1 ) {
		settings._bLoadingState = false;
		callback();
		return;
	}

	// Reject old data
	var duration = settings.iStateDuration;
	if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
		settings._bLoadingState = false;
		callback();
		return;
	}

	// Number of columns have changed - all bets are off, no restore of settings
	if ( s.columns && columns.length !== s.columns.length ) {
		settings._bLoadingState = false;
		callback();
		return;
	}

	// Store the saved state so it might be accessed at any time
	settings.oLoadedState = $.extend( true, {}, s );

	// Page Length
	if ( s.length !== undefined ) {
		// If already initialised just set the value directly so that the select element is also updated
		if (api) {
			api.page.len(s.length)
		}
		else {
			settings._iDisplayLength   = s.length;
		}
	}

	// Restore key features - todo - for 1.11 this needs to be done by
	// subscribed events
	if ( s.start !== undefined ) {
		if(api === null) {
			settings._iDisplayStart    = s.start;
			settings.iInitDisplayStart = s.start;
		}
		else {
			_fnPageChange(settings, s.start/settings._iDisplayLength);
		}
	}

	// Order
	if ( s.order !== undefined ) {
		settings.aaSorting = [];
		$.each( s.order, function ( i, col ) {
			settings.aaSorting.push( col[0] >= columns.length ?
				[ 0, col[1] ] :
				col
			);
		} );
	}

	// Search
	if ( s.search !== undefined ) {
		$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
	}

	// Columns
	if ( s.columns ) {
		for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
			var col = s.columns[i];

			// Visibility
			if ( col.visible !== undefined ) {
				// If the api is defined, the table has been initialised so we need to use it rather than internal settings
				if (api) {
					// Don't redraw the columns on every iteration of this loop, we will do this at the end instead
					api.column(i).visible(col.visible, false);
				}
				else {
					columns[i].bVisible = col.visible;
				}
			}

			// Search
			if ( col.search !== undefined ) {
				$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
			}
		}
		
		// If the api is defined then we need to adjust the columns once the visibility has been changed
		if (api) {
			api.columns.adjust();
		}
	}

	settings._bLoadingState = false;
	_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
	callback();
};


/**
 * Return the settings object for a particular table
 *  @param {node} table table we are using as a dataTable
 *  @returns {object} Settings object - or null if not found
 *  @memberof DataTable#oApi
 */
function _fnSettingsFromNode ( table )
{
	var settings = DataTable.settings;
	var idx = $.inArray( table, _pluck( settings, 'nTable' ) );

	return idx !== -1 ?
		settings[ idx ] :
		null;
}


/**
 * Log an error message
 *  @param {object} settings dataTables settings object
 *  @param {int} level log error messages, or display them to the user
 *  @param {string} msg error message
 *  @param {int} tn Technical note id to get more information about the error.
 *  @memberof DataTable#oApi
 */
function _fnLog( settings, level, msg, tn )
{
	msg = 'DataTables warning: '+
		(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;

	if ( tn ) {
		msg += '. For more information about this error, please see '+
		'http://datatables.net/tn/'+tn;
	}

	if ( ! level  ) {
		// Backwards compatibility pre 1.10
		var ext = DataTable.ext;
		var type = ext.sErrMode || ext.errMode;

		if ( settings ) {
			_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
		}

		if ( type == 'alert' ) {
			alert( msg );
		}
		else if ( type == 'throw' ) {
			throw new Error(msg);
		}
		else if ( typeof type == 'function' ) {
			type( settings, tn, msg );
		}
	}
	else if ( window.console && console.log ) {
		console.log( msg );
	}
}


/**
 * See if a property is defined on one object, if so assign it to the other object
 *  @param {object} ret target object
 *  @param {object} src source object
 *  @param {string} name property
 *  @param {string} [mappedName] name to map too - optional, name used if not given
 *  @memberof DataTable#oApi
 */
function _fnMap( ret, src, name, mappedName )
{
	if ( Array.isArray( name ) ) {
		$.each( name, function (i, val) {
			if ( Array.isArray( val ) ) {
				_fnMap( ret, src, val[0], val[1] );
			}
			else {
				_fnMap( ret, src, val );
			}
		} );

		return;
	}

	if ( mappedName === undefined ) {
		mappedName = name;
	}

	if ( src[name] !== undefined ) {
		ret[mappedName] = src[name];
	}
}


/**
 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
 * shallow copy arrays. The reason we need to do this, is that we don't want to
 * deep copy array init values (such as aaSorting) since the dev wouldn't be
 * able to override them, but we do want to deep copy arrays.
 *  @param {object} out Object to extend
 *  @param {object} extender Object from which the properties will be applied to
 *      out
 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
 *      independent copy with the exception of the `data` or `aaData` parameters
 *      if they are present. This is so you can pass in a collection to
 *      DataTables and have that used as your data source without breaking the
 *      references
 *  @returns {object} out Reference, just for convenience - out === the return.
 *  @memberof DataTable#oApi
 *  @todo This doesn't take account of arrays inside the deep copied objects.
 */
function _fnExtend( out, extender, breakRefs )
{
	var val;

	for ( var prop in extender ) {
		if ( extender.hasOwnProperty(prop) ) {
			val = extender[prop];

			if ( $.isPlainObject( val ) ) {
				if ( ! $.isPlainObject( out[prop] ) ) {
					out[prop] = {};
				}
				$.extend( true, out[prop], val );
			}
			else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val) ) {
				out[prop] = val.slice();
			}
			else {
				out[prop] = val;
			}
		}
	}

	return out;
}


/**
 * Bind an event handers to allow a click or return key to activate the callback.
 * This is good for accessibility since a return on the keyboard will have the
 * same effect as a click, if the element has focus.
 *  @param {element} n Element to bind the action to
 *  @param {object} oData Data object to pass to the triggered function
 *  @param {function} fn Callback function for when the event is triggered
 *  @memberof DataTable#oApi
 */
function _fnBindAction( n, oData, fn )
{
	$(n)
		.on( 'click.DT', oData, function (e) {
				$(n).trigger('blur'); // Remove focus outline for mouse users
				fn(e);
			} )
		.on( 'keypress.DT', oData, function (e){
				if ( e.which === 13 ) {
					e.preventDefault();
					fn(e);
				}
			} )
		.on( 'selectstart.DT', function () {
				/* Take the brutal approach to cancelling text selection */
				return false;
			} );
}


/**
 * Register a callback function. Easily allows a callback function to be added to
 * an array store of callback functions that can then all be called together.
 *  @param {object} oSettings dataTables settings object
 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
 *  @param {function} fn Function to be called back
 *  @param {string} sName Identifying name for the callback (i.e. a label)
 *  @memberof DataTable#oApi
 */
function _fnCallbackReg( oSettings, sStore, fn, sName )
{
	if ( fn )
	{
		oSettings[sStore].push( {
			"fn": fn,
			"sName": sName
		} );
	}
}


/**
 * Fire callback functions and trigger events. Note that the loop over the
 * callback array store is done backwards! Further note that you do not want to
 * fire off triggers in time sensitive applications (for example cell creation)
 * as its slow.
 *  @param {object} settings dataTables settings object
 *  @param {string} callbackArr Name of the array storage for the callbacks in
 *      oSettings
 *  @param {string} eventName Name of the jQuery custom event to trigger. If
 *      null no trigger is fired
 *  @param {array} args Array of arguments to pass to the callback function /
 *      trigger
 *  @memberof DataTable#oApi
 */
function _fnCallbackFire( settings, callbackArr, eventName, args )
{
	var ret = [];

	if ( callbackArr ) {
		ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
			return val.fn.apply( settings.oInstance, args );
		} );
	}

	if ( eventName !== null ) {
		var e = $.Event( eventName+'.dt' );
		var table = $(settings.nTable);

		table.trigger( e, args );

		// If not yet attached to the document, trigger the event
		// on the body directly to sort of simulate the bubble
		if (table.parents('body').length === 0) {
			$('body').trigger( e, args );
		}

		ret.push( e.result );
	}

	return ret;
}


function _fnLengthOverflow ( settings )
{
	var
		start = settings._iDisplayStart,
		end = settings.fnDisplayEnd(),
		len = settings._iDisplayLength;

	/* If we have space to show extra rows (backing up from the end point - then do so */
	if ( start >= end )
	{
		start = end - len;
	}

	// Keep the start record on the current page
	start -= (start % len);

	if ( len === -1 || start < 0 )
	{
		start = 0;
	}

	settings._iDisplayStart = start;
}


function _fnRenderer( settings, type )
{
	var renderer = settings.renderer;
	var host = DataTable.ext.renderer[type];

	if ( $.isPlainObject( renderer ) && renderer[type] ) {
		// Specific renderer for this type. If available use it, otherwise use
		// the default.
		return host[renderer[type]] || host._;
	}
	else if ( typeof renderer === 'string' ) {
		// Common renderer - if there is one available for this type use it,
		// otherwise use the default
		return host[renderer] || host._;
	}

	// Use the default
	return host._;
}


/**
 * Detect the data source being used for the table. Used to simplify the code
 * a little (ajax) and to make it compress a little smaller.
 *
 *  @param {object} settings dataTables settings object
 *  @returns {string} Data source
 *  @memberof DataTable#oApi
 */
function _fnDataSource ( settings )
{
	if ( settings.oFeatures.bServerSide ) {
		return 'ssp';
	}
	else if ( settings.ajax || settings.sAjaxSource ) {
		return 'ajax';
	}
	return 'dom';
}




/**
 * Computed structure of the DataTables API, defined by the options passed to
 * `DataTable.Api.register()` when building the API.
 *
 * The structure is built in order to speed creation and extension of the Api
 * objects since the extensions are effectively pre-parsed.
 *
 * The array is an array of objects with the following structure, where this
 * base array represents the Api prototype base:
 *
 *     [
 *       {
 *         name:      'data'                -- string   - Property name
 *         val:       function () {},       -- function - Api method (or undefined if just an object
 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
 *       },
 *       {
 *         name:     'row'
 *         val:       {},
 *         methodExt: [ ... ],
 *         propExt:   [
 *           {
 *             name:      'data'
 *             val:       function () {},
 *             methodExt: [ ... ],
 *             propExt:   [ ... ]
 *           },
 *           ...
 *         ]
 *       }
 *     ]
 *
 * @type {Array}
 * @ignore
 */
var __apiStruct = [];


/**
 * `Array.prototype` reference.
 *
 * @type object
 * @ignore
 */
var __arrayProto = Array.prototype;


/**
 * Abstraction for `context` parameter of the `Api` constructor to allow it to
 * take several different forms for ease of use.
 *
 * Each of the input parameter types will be converted to a DataTables settings
 * object where possible.
 *
 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
 *   of:
 *
 *   * `string` - jQuery selector. Any DataTables' matching the given selector
 *     with be found and used.
 *   * `node` - `TABLE` node which has already been formed into a DataTable.
 *   * `jQuery` - A jQuery object of `TABLE` nodes.
 *   * `object` - DataTables settings object
 *   * `DataTables.Api` - API instance
 * @return {array|null} Matching DataTables settings objects. `null` or
 *   `undefined` is returned if no matching DataTable is found.
 * @ignore
 */
var _toSettings = function ( mixed )
{
	var idx, jq;
	var settings = DataTable.settings;
	var tables = $.map( settings, function (el, i) {
		return el.nTable;
	} );

	if ( ! mixed ) {
		return [];
	}
	else if ( mixed.nTable && mixed.oApi ) {
		// DataTables settings object
		return [ mixed ];
	}
	else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
		// Table node
		idx = $.inArray( mixed, tables );
		return idx !== -1 ? [ settings[idx] ] : null;
	}
	else if ( mixed && typeof mixed.settings === 'function' ) {
		return mixed.settings().toArray();
	}
	else if ( typeof mixed === 'string' ) {
		// jQuery selector
		jq = $(mixed);
	}
	else if ( mixed instanceof $ ) {
		// jQuery object (also DataTables instance)
		jq = mixed;
	}

	if ( jq ) {
		return jq.map( function(i) {
			idx = $.inArray( this, tables );
			return idx !== -1 ? settings[idx] : null;
		} ).toArray();
	}
};


/**
 * DataTables API class - used to control and interface with  one or more
 * DataTables enhanced tables.
 *
 * The API class is heavily based on jQuery, presenting a chainable interface
 * that you can use to interact with tables. Each instance of the API class has
 * a "context" - i.e. the tables that it will operate on. This could be a single
 * table, all tables on a page or a sub-set thereof.
 *
 * Additionally the API is designed to allow you to easily work with the data in
 * the tables, retrieving and manipulating it as required. This is done by
 * presenting the API class as an array like interface. The contents of the
 * array depend upon the actions requested by each method (for example
 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
 * return an array of objects or arrays depending upon your table's
 * configuration). The API object has a number of array like methods (`push`,
 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
 * `unique` etc) to assist your working with the data held in a table.
 *
 * Most methods (those which return an Api instance) are chainable, which means
 * the return from a method call also has all of the methods available that the
 * top level object had. For example, these two calls are equivalent:
 *
 *     // Not chained
 *     api.row.add( {...} );
 *     api.draw();
 *
 *     // Chained
 *     api.row.add( {...} ).draw();
 *
 * @class DataTable.Api
 * @param {array|object|string|jQuery} context DataTable identifier. This is
 *   used to define which DataTables enhanced tables this API will operate on.
 *   Can be one of:
 *
 *   * `string` - jQuery selector. Any DataTables' matching the given selector
 *     with be found and used.
 *   * `node` - `TABLE` node which has already been formed into a DataTable.
 *   * `jQuery` - A jQuery object of `TABLE` nodes.
 *   * `object` - DataTables settings object
 * @param {array} [data] Data to initialise the Api instance with.
 *
 * @example
 *   // Direct initialisation during DataTables construction
 *   var api = $('#example').DataTable();
 *
 * @example
 *   // Initialisation using a DataTables jQuery object
 *   var api = $('#example').dataTable().api();
 *
 * @example
 *   // Initialisation as a constructor
 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
 */
_Api = function ( context, data )
{
	if ( ! (this instanceof _Api) ) {
		return new _Api( context, data );
	}

	var settings = [];
	var ctxSettings = function ( o ) {
		var a = _toSettings( o );
		if ( a ) {
			settings.push.apply( settings, a );
		}
	};

	if ( Array.isArray( context ) ) {
		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
			ctxSettings( context[i] );
		}
	}
	else {
		ctxSettings( context );
	}

	// Remove duplicates
	this.context = _unique( settings );

	// Initial data
	if ( data ) {
		$.merge( this, data );
	}

	// selector
	this.selector = {
		rows: null,
		cols: null,
		opts: null
	};

	_Api.extend( this, this, __apiStruct );
};

DataTable.Api = _Api;

// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
// isPlainObject.
$.extend( _Api.prototype, {
	any: function ()
	{
		return this.count() !== 0;
	},


	concat:  __arrayProto.concat,


	context: [], // array of table settings objects


	count: function ()
	{
		return this.flatten().length;
	},


	each: function ( fn )
	{
		for ( var i=0, ien=this.length ; i<ien; i++ ) {
			fn.call( this, this[i], i, this );
		}

		return this;
	},


	eq: function ( idx )
	{
		var ctx = this.context;

		return ctx.length > idx ?
			new _Api( ctx[idx], this[idx] ) :
			null;
	},


	filter: function ( fn )
	{
		var a = [];

		if ( __arrayProto.filter ) {
			a = __arrayProto.filter.call( this, fn, this );
		}
		else {
			// Compatibility for browsers without EMCA-252-5 (JS 1.6)
			for ( var i=0, ien=this.length ; i<ien ; i++ ) {
				if ( fn.call( this, this[i], i, this ) ) {
					a.push( this[i] );
				}
			}
		}

		return new _Api( this.context, a );
	},


	flatten: function ()
	{
		var a = [];
		return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
	},


	join:    __arrayProto.join,


	indexOf: __arrayProto.indexOf || function (obj, start)
	{
		for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
			if ( this[i] === obj ) {
				return i;
			}
		}
		return -1;
	},

	iterator: function ( flatten, type, fn, alwaysNew ) {
		var
			a = [], ret,
			i, ien, j, jen,
			context = this.context,
			rows, items, item,
			selector = this.selector;

		// Argument shifting
		if ( typeof flatten === 'string' ) {
			alwaysNew = fn;
			fn = type;
			type = flatten;
			flatten = false;
		}

		for ( i=0, ien=context.length ; i<ien ; i++ ) {
			var apiInst = new _Api( context[i] );

			if ( type === 'table' ) {
				ret = fn.call( apiInst, context[i], i );

				if ( ret !== undefined ) {
					a.push( ret );
				}
			}
			else if ( type === 'columns' || type === 'rows' ) {
				// this has same length as context - one entry for each table
				ret = fn.call( apiInst, context[i], this[i], i );

				if ( ret !== undefined ) {
					a.push( ret );
				}
			}
			else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
				// columns and rows share the same structure.
				// 'this' is an array of column indexes for each context
				items = this[i];

				if ( type === 'column-rows' ) {
					rows = _selector_row_indexes( context[i], selector.opts );
				}

				for ( j=0, jen=items.length ; j<jen ; j++ ) {
					item = items[j];

					if ( type === 'cell' ) {
						ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
					}
					else {
						ret = fn.call( apiInst, context[i], item, i, j, rows );
					}

					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
			}
		}

		if ( a.length || alwaysNew ) {
			var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
			var apiSelector = api.selector;
			apiSelector.rows = selector.rows;
			apiSelector.cols = selector.cols;
			apiSelector.opts = selector.opts;
			return api;
		}
		return this;
	},


	lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
	{
		// Bit cheeky...
		return this.indexOf.apply( this.toArray.reverse(), arguments );
	},


	length:  0,


	map: function ( fn )
	{
		var a = [];

		if ( __arrayProto.map ) {
			a = __arrayProto.map.call( this, fn, this );
		}
		else {
			// Compatibility for browsers without EMCA-252-5 (JS 1.6)
			for ( var i=0, ien=this.length ; i<ien ; i++ ) {
				a.push( fn.call( this, this[i], i ) );
			}
		}

		return new _Api( this.context, a );
	},


	pluck: function ( prop )
	{
		var fn = DataTable.util.get(prop);

		return this.map( function ( el ) {
			return fn(el);
		} );
	},

	pop:     __arrayProto.pop,


	push:    __arrayProto.push,


	// Does not return an API instance
	reduce: __arrayProto.reduce || function ( fn, init )
	{
		return _fnReduce( this, fn, init, 0, this.length, 1 );
	},


	reduceRight: __arrayProto.reduceRight || function ( fn, init )
	{
		return _fnReduce( this, fn, init, this.length-1, -1, -1 );
	},


	reverse: __arrayProto.reverse,


	// Object with rows, columns and opts
	selector: null,


	shift:   __arrayProto.shift,


	slice: function () {
		return new _Api( this.context, this );
	},


	sort:    __arrayProto.sort, // ? name - order?


	splice:  __arrayProto.splice,


	toArray: function ()
	{
		return __arrayProto.slice.call( this );
	},


	to$: function ()
	{
		return $( this );
	},


	toJQuery: function ()
	{
		return $( this );
	},


	unique: function ()
	{
		return new _Api( this.context, _unique(this) );
	},


	unshift: __arrayProto.unshift
} );


_Api.extend = function ( scope, obj, ext )
{
	// Only extend API instances and static properties of the API
	if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
		return;
	}

	var
		i, ien,
		struct,
		methodScoping = function ( scope, fn, struc ) {
			return function () {
				var ret = fn.apply( scope, arguments );

				// Method extension
				_Api.extend( ret, ret, struc.methodExt );
				return ret;
			};
		};

	for ( i=0, ien=ext.length ; i<ien ; i++ ) {
		struct = ext[i];

		// Value
		obj[ struct.name ] = struct.type === 'function' ?
			methodScoping( scope, struct.val, struct ) :
			struct.type === 'object' ?
				{} :
				struct.val;

		obj[ struct.name ].__dt_wrapper = true;

		// Property extension
		_Api.extend( scope, obj[ struct.name ], struct.propExt );
	}
};


// @todo - Is there need for an augment function?
// _Api.augment = function ( inst, name )
// {
// 	// Find src object in the structure from the name
// 	var parts = name.split('.');

// 	_Api.extend( inst, obj );
// };


//     [
//       {
//         name:      'data'                -- string   - Property name
//         val:       function () {},       -- function - Api method (or undefined if just an object
//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
//       },
//       {
//         name:     'row'
//         val:       {},
//         methodExt: [ ... ],
//         propExt:   [
//           {
//             name:      'data'
//             val:       function () {},
//             methodExt: [ ... ],
//             propExt:   [ ... ]
//           },
//           ...
//         ]
//       }
//     ]

_Api.register = _api_register = function ( name, val )
{
	if ( Array.isArray( name ) ) {
		for ( var j=0, jen=name.length ; j<jen ; j++ ) {
			_Api.register( name[j], val );
		}
		return;
	}

	var
		i, ien,
		heir = name.split('.'),
		struct = __apiStruct,
		key, method;

	var find = function ( src, name ) {
		for ( var i=0, ien=src.length ; i<ien ; i++ ) {
			if ( src[i].name === name ) {
				return src[i];
			}
		}
		return null;
	};

	for ( i=0, ien=heir.length ; i<ien ; i++ ) {
		method = heir[i].indexOf('()') !== -1;
		key = method ?
			heir[i].replace('()', '') :
			heir[i];

		var src = find( struct, key );
		if ( ! src ) {
			src = {
				name:      key,
				val:       {},
				methodExt: [],
				propExt:   [],
				type:      'object'
			};
			struct.push( src );
		}

		if ( i === ien-1 ) {
			src.val = val;
			src.type = typeof val === 'function' ?
				'function' :
				$.isPlainObject( val ) ?
					'object' :
					'other';
		}
		else {
			struct = method ?
				src.methodExt :
				src.propExt;
		}
	}
};

_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
	_Api.register( pluralName, val );

	_Api.register( singularName, function () {
		var ret = val.apply( this, arguments );

		if ( ret === this ) {
			// Returned item is the API instance that was passed in, return it
			return this;
		}
		else if ( ret instanceof _Api ) {
			// New API instance returned, want the value from the first item
			// in the returned array for the singular result.
			return ret.length ?
				Array.isArray( ret[0] ) ?
					new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
					ret[0] :
				undefined;
		}

		// Non-API return - just fire it back
		return ret;
	} );
};


/**
 * Selector for HTML tables. Apply the given selector to the give array of
 * DataTables settings objects.
 *
 * @param {string|integer} [selector] jQuery selector string or integer
 * @param  {array} Array of DataTables settings objects to be filtered
 * @return {array}
 * @ignore
 */
var __table_selector = function ( selector, a )
{
	if ( Array.isArray(selector) ) {
		return $.map( selector, function (item) {
			return __table_selector(item, a);
		} );
	}

	// Integer is used to pick out a table by index
	if ( typeof selector === 'number' ) {
		return [ a[ selector ] ];
	}

	// Perform a jQuery selector on the table nodes
	var nodes = $.map( a, function (el, i) {
		return el.nTable;
	} );

	return $(nodes)
		.filter( selector )
		.map( function (i) {
			// Need to translate back from the table node to the settings
			var idx = $.inArray( this, nodes );
			return a[ idx ];
		} )
		.toArray();
};



/**
 * Context selector for the API's context (i.e. the tables the API instance
 * refers to.
 *
 * @name    DataTable.Api#tables
 * @param {string|integer} [selector] Selector to pick which tables the iterator
 *   should operate on. If not given, all tables in the current context are
 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
 *   select multiple tables or as an integer to select a single table.
 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
 */
_api_register( 'tables()', function ( selector ) {
	// A new instance is created if there was a selector specified
	return selector !== undefined && selector !== null ?
		new _Api( __table_selector( selector, this.context ) ) :
		this;
} );


_api_register( 'table()', function ( selector ) {
	var tables = this.tables( selector );
	var ctx = tables.context;

	// Truncate to the first matched table
	return ctx.length ?
		new _Api( ctx[0] ) :
		tables;
} );


_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
	return this.iterator( 'table', function ( ctx ) {
		return ctx.nTable;
	}, 1 );
} );


_api_registerPlural( 'tables().body()', 'table().body()' , function () {
	return this.iterator( 'table', function ( ctx ) {
		return ctx.nTBody;
	}, 1 );
} );


_api_registerPlural( 'tables().header()', 'table().header()' , function () {
	return this.iterator( 'table', function ( ctx ) {
		return ctx.nTHead;
	}, 1 );
} );


_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
	return this.iterator( 'table', function ( ctx ) {
		return ctx.nTFoot;
	}, 1 );
} );


_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
	return this.iterator( 'table', function ( ctx ) {
		return ctx.nTableWrapper;
	}, 1 );
} );



/**
 * Redraw the tables in the current context.
 */
_api_register( 'draw()', function ( paging ) {
	return this.iterator( 'table', function ( settings ) {
		if ( paging === 'page' ) {
			_fnDraw( settings );
		}
		else {
			if ( typeof paging === 'string' ) {
				paging = paging === 'full-hold' ?
					false :
					true;
			}

			_fnReDraw( settings, paging===false );
		}
	} );
} );



/**
 * Get the current page index.
 *
 * @return {integer} Current page index (zero based)
 *//**
 * Set the current page.
 *
 * Note that if you attempt to show a page which does not exist, DataTables will
 * not throw an error, but rather reset the paging.
 *
 * @param {integer|string} action The paging action to take. This can be one of:
 *  * `integer` - The page index to jump to
 *  * `string` - An action to take:
 *    * `first` - Jump to first page.
 *    * `next` - Jump to the next page
 *    * `previous` - Jump to previous page
 *    * `last` - Jump to the last page.
 * @returns {DataTables.Api} this
 */
_api_register( 'page()', function ( action ) {
	if ( action === undefined ) {
		return this.page.info().page; // not an expensive call
	}

	// else, have an action to take on all tables
	return this.iterator( 'table', function ( settings ) {
		_fnPageChange( settings, action );
	} );
} );


/**
 * Paging information for the first table in the current context.
 *
 * If you require paging information for another table, use the `table()` method
 * with a suitable selector.
 *
 * @return {object} Object with the following properties set:
 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
 *  * `pages` - Total number of pages
 *  * `start` - Display index for the first record shown on the current page
 *  * `end` - Display index for the last record shown on the current page
 *  * `length` - Display length (number of records). Note that generally `start
 *    + length = end`, but this is not always true, for example if there are
 *    only 2 records to show on the final page, with a length of 10.
 *  * `recordsTotal` - Full data set length
 *  * `recordsDisplay` - Data set length once the current filtering criterion
 *    are applied.
 */
_api_register( 'page.info()', function ( action ) {
	if ( this.context.length === 0 ) {
		return undefined;
	}

	var
		settings   = this.context[0],
		start      = settings._iDisplayStart,
		len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
		visRecords = settings.fnRecordsDisplay(),
		all        = len === -1;

	return {
		"page":           all ? 0 : Math.floor( start / len ),
		"pages":          all ? 1 : Math.ceil( visRecords / len ),
		"start":          start,
		"end":            settings.fnDisplayEnd(),
		"length":         len,
		"recordsTotal":   settings.fnRecordsTotal(),
		"recordsDisplay": visRecords,
		"serverSide":     _fnDataSource( settings ) === 'ssp'
	};
} );


/**
 * Get the current page length.
 *
 * @return {integer} Current page length. Note `-1` indicates that all records
 *   are to be shown.
 *//**
 * Set the current page length.
 *
 * @param {integer} Page length to set. Use `-1` to show all records.
 * @returns {DataTables.Api} this
 */
_api_register( 'page.len()', function ( len ) {
	// Note that we can't call this function 'length()' because `length`
	// is a Javascript property of functions which defines how many arguments
	// the function expects.
	if ( len === undefined ) {
		return this.context.length !== 0 ?
			this.context[0]._iDisplayLength :
			undefined;
	}

	// else, set the page length
	return this.iterator( 'table', function ( settings ) {
		_fnLengthChange( settings, len );
	} );
} );



var __reload = function ( settings, holdPosition, callback ) {
	// Use the draw event to trigger a callback
	if ( callback ) {
		var api = new _Api( settings );

		api.one( 'draw', function () {
			callback( api.ajax.json() );
		} );
	}

	if ( _fnDataSource( settings ) == 'ssp' ) {
		_fnReDraw( settings, holdPosition );
	}
	else {
		_fnProcessingDisplay( settings, true );

		// Cancel an existing request
		var xhr = settings.jqXHR;
		if ( xhr && xhr.readyState !== 4 ) {
			xhr.abort();
		}

		// Trigger xhr
		_fnBuildAjax( settings, [], function( json ) {
			_fnClearTable( settings );

			var data = _fnAjaxDataSrc( settings, json );
			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
				_fnAddData( settings, data[i] );
			}

			_fnReDraw( settings, holdPosition );
			_fnProcessingDisplay( settings, false );
		} );
	}
};


/**
 * Get the JSON response from the last Ajax request that DataTables made to the
 * server. Note that this returns the JSON from the first table in the current
 * context.
 *
 * @return {object} JSON received from the server.
 */
_api_register( 'ajax.json()', function () {
	var ctx = this.context;

	if ( ctx.length > 0 ) {
		return ctx[0].json;
	}

	// else return undefined;
} );


/**
 * Get the data submitted in the last Ajax request
 */
_api_register( 'ajax.params()', function () {
	var ctx = this.context;

	if ( ctx.length > 0 ) {
		return ctx[0].oAjaxData;
	}

	// else return undefined;
} );


/**
 * Reload tables from the Ajax data source. Note that this function will
 * automatically re-draw the table when the remote data has been loaded.
 *
 * @param {boolean} [reset=true] Reset (default) or hold the current paging
 *   position. A full re-sort and re-filter is performed when this method is
 *   called, which is why the pagination reset is the default action.
 * @returns {DataTables.Api} this
 */
_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
	return this.iterator( 'table', function (settings) {
		__reload( settings, resetPaging===false, callback );
	} );
} );


/**
 * Get the current Ajax URL. Note that this returns the URL from the first
 * table in the current context.
 *
 * @return {string} Current Ajax source URL
 *//**
 * Set the Ajax URL. Note that this will set the URL for all tables in the
 * current context.
 *
 * @param {string} url URL to set.
 * @returns {DataTables.Api} this
 */
_api_register( 'ajax.url()', function ( url ) {
	var ctx = this.context;

	if ( url === undefined ) {
		// get
		if ( ctx.length === 0 ) {
			return undefined;
		}
		ctx = ctx[0];

		return ctx.ajax ?
			$.isPlainObject( ctx.ajax ) ?
				ctx.ajax.url :
				ctx.ajax :
			ctx.sAjaxSource;
	}

	// set
	return this.iterator( 'table', function ( settings ) {
		if ( $.isPlainObject( settings.ajax ) ) {
			settings.ajax.url = url;
		}
		else {
			settings.ajax = url;
		}
		// No need to consider sAjaxSource here since DataTables gives priority
		// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
		// value of `sAjaxSource` redundant.
	} );
} );


/**
 * Load data from the newly set Ajax URL. Note that this method is only
 * available when `ajax.url()` is used to set a URL. Additionally, this method
 * has the same effect as calling `ajax.reload()` but is provided for
 * convenience when setting a new URL. Like `ajax.reload()` it will
 * automatically redraw the table once the remote data has been loaded.
 *
 * @returns {DataTables.Api} this
 */
_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
	// Same as a reload, but makes sense to present it for easy access after a
	// url change
	return this.iterator( 'table', function ( ctx ) {
		__reload( ctx, resetPaging===false, callback );
	} );
} );




var _selector_run = function ( type, selector, selectFn, settings, opts )
{
	var
		out = [], res,
		a, i, ien, j, jen,
		selectorType = typeof selector;

	// Can't just check for isArray here, as an API or jQuery instance might be
	// given with their array like look
	if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
		selector = [ selector ];
	}

	for ( i=0, ien=selector.length ; i<ien ; i++ ) {
		// Only split on simple strings - complex expressions will be jQuery selectors
		a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
			selector[i].split(',') :
			[ selector[i] ];

		for ( j=0, jen=a.length ; j<jen ; j++ ) {
			res = selectFn( typeof a[j] === 'string' ? (a[j]).trim() : a[j] );

			if ( res && res.length ) {
				out = out.concat( res );
			}
		}
	}

	// selector extensions
	var ext = _ext.selector[ type ];
	if ( ext.length ) {
		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
			out = ext[i]( settings, opts, out );
		}
	}

	return _unique( out );
};


var _selector_opts = function ( opts )
{
	if ( ! opts ) {
		opts = {};
	}

	// Backwards compatibility for 1.9- which used the terminology filter rather
	// than search
	if ( opts.filter && opts.search === undefined ) {
		opts.search = opts.filter;
	}

	return $.extend( {
		search: 'none',
		order: 'current',
		page: 'all'
	}, opts );
};


var _selector_first = function ( inst )
{
	// Reduce the API instance to the first item found
	for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
		if ( inst[i].length > 0 ) {
			// Assign the first element to the first item in the instance
			// and truncate the instance and context
			inst[0] = inst[i];
			inst[0].length = 1;
			inst.length = 1;
			inst.context = [ inst.context[i] ];

			return inst;
		}
	}

	// Not found - return an empty instance
	inst.length = 0;
	return inst;
};


var _selector_row_indexes = function ( settings, opts )
{
	var
		i, ien, tmp, a=[],
		displayFiltered = settings.aiDisplay,
		displayMaster = settings.aiDisplayMaster;

	var
		search = opts.search,  // none, applied, removed
		order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
		page   = opts.page;    // all, current

	if ( _fnDataSource( settings ) == 'ssp' ) {
		// In server-side processing mode, most options are irrelevant since
		// rows not shown don't exist and the index order is the applied order
		// Removed is a special case - for consistency just return an empty
		// array
		return search === 'removed' ?
			[] :
			_range( 0, displayMaster.length );
	}
	else if ( page == 'current' ) {
		// Current page implies that order=current and filter=applied, since it is
		// fairly senseless otherwise, regardless of what order and search actually
		// are
		for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
			a.push( displayFiltered[i] );
		}
	}
	else if ( order == 'current' || order == 'applied' ) {
		if ( search == 'none') {
			a = displayMaster.slice();
		}
		else if ( search == 'applied' ) {
			a = displayFiltered.slice();
		}
		else if ( search == 'removed' ) {
			// O(n+m) solution by creating a hash map
			var displayFilteredMap = {};

			for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
				displayFilteredMap[displayFiltered[i]] = null;
			}

			a = $.map( displayMaster, function (el) {
				return ! displayFilteredMap.hasOwnProperty(el) ?
					el :
					null;
			} );
		}
	}
	else if ( order == 'index' || order == 'original' ) {
		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			if ( search == 'none' ) {
				a.push( i );
			}
			else { // applied | removed
				tmp = $.inArray( i, displayFiltered );

				if ((tmp === -1 && search == 'removed') ||
					(tmp >= 0   && search == 'applied') )
				{
					a.push( i );
				}
			}
		}
	}

	return a;
};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Rows
 *
 * {}          - no selector - use all available rows
 * {integer}   - row aoData index
 * {node}      - TR node
 * {string}    - jQuery selector to apply to the TR elements
 * {array}     - jQuery array of nodes, or simply an array of TR nodes
 *
 */
var __row_selector = function ( settings, selector, opts )
{
	var rows;
	var run = function ( sel ) {
		var selInt = _intVal( sel );
		var i, ien;
		var aoData = settings.aoData;

		// Short cut - selector is a number and no options provided (default is
		// all records, so no need to check if the index is in there, since it
		// must be - dev error if the index doesn't exist).
		if ( selInt !== null && ! opts ) {
			return [ selInt ];
		}

		if ( ! rows ) {
			rows = _selector_row_indexes( settings, opts );
		}

		if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
			// Selector - integer
			return [ selInt ];
		}
		else if ( sel === null || sel === undefined || sel === '' ) {
			// Selector - none
			return rows;
		}

		// Selector - function
		if ( typeof sel === 'function' ) {
			return $.map( rows, function (idx) {
				var row = aoData[ idx ];
				return sel( idx, row._aData, row.nTr ) ? idx : null;
			} );
		}

		// Selector - node
		if ( sel.nodeName ) {
			var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
			var cellIdx = sel._DT_CellIndex;

			if ( rowIdx !== undefined ) {
				// Make sure that the row is actually still present in the table
				return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
					[ rowIdx ] :
					[];
			}
			else if ( cellIdx ) {
				return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?
					[ cellIdx.row ] :
					[];
			}
			else {
				var host = $(sel).closest('*[data-dt-row]');
				return host.length ?
					[ host.data('dt-row') ] :
					[];
			}
		}

		// ID selector. Want to always be able to select rows by id, regardless
		// of if the tr element has been created or not, so can't rely upon
		// jQuery here - hence a custom implementation. This does not match
		// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
		// but to select it using a CSS selector engine (like Sizzle or
		// querySelect) it would need to need to be escaped for some characters.
		// DataTables simplifies this for row selectors since you can select
		// only a row. A # indicates an id any anything that follows is the id -
		// unescaped.
		if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
			// get row index from id
			var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
			if ( rowObj !== undefined ) {
				return [ rowObj.idx ];
			}

			// need to fall through to jQuery in case there is DOM id that
			// matches
		}
		
		// Get nodes in the order from the `rows` array with null values removed
		var nodes = _removeEmpty(
			_pluck_order( settings.aoData, rows, 'nTr' )
		);

		// Selector - jQuery selector string, array of nodes or jQuery object/
		// As jQuery's .filter() allows jQuery objects to be passed in filter,
		// it also allows arrays, so this will cope with all three options
		return $(nodes)
			.filter( sel )
			.map( function () {
				return this._DT_RowIndex;
			} )
			.toArray();
	};

	return _selector_run( 'row', selector, run, settings, opts );
};


_api_register( 'rows()', function ( selector, opts ) {
	// argument shifting
	if ( selector === undefined ) {
		selector = '';
	}
	else if ( $.isPlainObject( selector ) ) {
		opts = selector;
		selector = '';
	}

	opts = _selector_opts( opts );

	var inst = this.iterator( 'table', function ( settings ) {
		return __row_selector( settings, selector, opts );
	}, 1 );

	// Want argument shifting here and in __row_selector?
	inst.selector.rows = selector;
	inst.selector.opts = opts;

	return inst;
} );

_api_register( 'rows().nodes()', function () {
	return this.iterator( 'row', function ( settings, row ) {
		return settings.aoData[ row ].nTr || undefined;
	}, 1 );
} );

_api_register( 'rows().data()', function () {
	return this.iterator( true, 'rows', function ( settings, rows ) {
		return _pluck_order( settings.aoData, rows, '_aData' );
	}, 1 );
} );

_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
	return this.iterator( 'row', function ( settings, row ) {
		var r = settings.aoData[ row ];
		return type === 'search' ? r._aFilterData : r._aSortData;
	}, 1 );
} );

_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
	return this.iterator( 'row', function ( settings, row ) {
		_fnInvalidate( settings, row, src );
	} );
} );

_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
	return this.iterator( 'row', function ( settings, row ) {
		return row;
	}, 1 );
} );

_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
	var a = [];
	var context = this.context;

	// `iterator` will drop undefined values, but in this case we want them
	for ( var i=0, ien=context.length ; i<ien ; i++ ) {
		for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
			var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
			a.push( (hash === true ? '#' : '' )+ id );
		}
	}

	return new _Api( context, a );
} );

_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
	var that = this;

	this.iterator( 'row', function ( settings, row, thatIdx ) {
		var data = settings.aoData;
		var rowData = data[ row ];
		var i, ien, j, jen;
		var loopRow, loopCells;

		data.splice( row, 1 );

		// Update the cached indexes
		for ( i=0, ien=data.length ; i<ien ; i++ ) {
			loopRow = data[i];
			loopCells = loopRow.anCells;

			// Rows
			if ( loopRow.nTr !== null ) {
				loopRow.nTr._DT_RowIndex = i;
			}

			// Cells
			if ( loopCells !== null ) {
				for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
					loopCells[j]._DT_CellIndex.row = i;
				}
			}
		}

		// Delete from the display arrays
		_fnDeleteIndex( settings.aiDisplayMaster, row );
		_fnDeleteIndex( settings.aiDisplay, row );
		_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes

		// For server-side processing tables - subtract the deleted row from the count
		if ( settings._iRecordsDisplay > 0 ) {
			settings._iRecordsDisplay--;
		}

		// Check for an 'overflow' they case for displaying the table
		_fnLengthOverflow( settings );

		// Remove the row's ID reference if there is one
		var id = settings.rowIdFn( rowData._aData );
		if ( id !== undefined ) {
			delete settings.aIds[ id ];
		}
	} );

	this.iterator( 'table', function ( settings ) {
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			settings.aoData[i].idx = i;
		}
	} );

	return this;
} );


_api_register( 'rows.add()', function ( rows ) {
	var newRows = this.iterator( 'table', function ( settings ) {
			var row, i, ien;
			var out = [];

			for ( i=0, ien=rows.length ; i<ien ; i++ ) {
				row = rows[i];

				if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
					out.push( _fnAddTr( settings, row )[0] );
				}
				else {
					out.push( _fnAddData( settings, row ) );
				}
			}

			return out;
		}, 1 );

	// Return an Api.rows() extended instance, so rows().nodes() etc can be used
	var modRows = this.rows( -1 );
	modRows.pop();
	$.merge( modRows, newRows );

	return modRows;
} );





/**
 *
 */
_api_register( 'row()', function ( selector, opts ) {
	return _selector_first( this.rows( selector, opts ) );
} );


_api_register( 'row().data()', function ( data ) {
	var ctx = this.context;

	if ( data === undefined ) {
		// Get
		return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ]._aData :
			undefined;
	}

	// Set
	var row = ctx[0].aoData[ this[0] ];
	row._aData = data;

	// If the DOM has an id, and the data source is an array
	if ( Array.isArray( data ) && row.nTr && row.nTr.id ) {
		_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
	}

	// Automatically invalidate
	_fnInvalidate( ctx[0], this[0], 'data' );

	return this;
} );


_api_register( 'row().node()', function () {
	var ctx = this.context;

	return ctx.length && this.length ?
		ctx[0].aoData[ this[0] ].nTr || null :
		null;
} );


_api_register( 'row.add()', function ( row ) {
	// Allow a jQuery object to be passed in - only a single row is added from
	// it though - the first element in the set
	if ( row instanceof $ && row.length ) {
		row = row[0];
	}

	var rows = this.iterator( 'table', function ( settings ) {
		if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
			return _fnAddTr( settings, row )[0];
		}
		return _fnAddData( settings, row );
	} );

	// Return an Api.rows() extended instance, with the newly added row selected
	return this.row( rows[0] );
} );


$(document).on('plugin-init.dt', function (e, context) {
	var api = new _Api( context );
	var namespace = 'on-plugin-init';
	var stateSaveParamsEvent = 'stateSaveParams.' + namespace;
	var destroyEvent = 'destroy. ' + namespace;

	api.on( stateSaveParamsEvent, function ( e, settings, d ) {
		// This could be more compact with the API, but it is a lot faster as a simple
		// internal loop
		var idFn = settings.rowIdFn;
		var data = settings.aoData;
		var ids = [];

		for (var i=0 ; i<data.length ; i++) {
			if (data[i]._detailsShow) {
				ids.push( '#' + idFn(data[i]._aData) );
			}
		}

		d.childRows = ids;
	});

	api.on( destroyEvent, function () {
		api.off(stateSaveParamsEvent + ' ' + destroyEvent);
	});

	var loaded = api.state.loaded();

	if ( loaded && loaded.childRows ) {
		api
			.rows( $.map(loaded.childRows, function (id){
				return id.replace(/:/g, '\\:')
			}) )
			.every( function () {
				_fnCallbackFire( context, null, 'requestChild', [ this ] )
			});
	}
});

var __details_add = function ( ctx, row, data, klass )
{
	// Convert to array of TR elements
	var rows = [];
	var addRow = function ( r, k ) {
		// Recursion to allow for arrays of jQuery objects
		if ( Array.isArray( r ) || r instanceof $ ) {
			for ( var i=0, ien=r.length ; i<ien ; i++ ) {
				addRow( r[i], k );
			}
			return;
		}

		// If we get a TR element, then just add it directly - up to the dev
		// to add the correct number of columns etc
		if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
			rows.push( r );
		}
		else {
			// Otherwise create a row with a wrapper
			var created = $('<tr><td></td></tr>').addClass( k );
			$('td', created)
				.addClass( k )
				.html( r )
				[0].colSpan = _fnVisbleColumns( ctx );

			rows.push( created[0] );
		}
	};

	addRow( data, klass );

	if ( row._details ) {
		row._details.detach();
	}

	row._details = $(rows);

	// If the children were already shown, that state should be retained
	if ( row._detailsShow ) {
		row._details.insertAfter( row.nTr );
	}
};


// Make state saving of child row details async to allow them to be batch processed
var __details_state = DataTable.util.throttle(
	function (ctx) {
		_fnSaveState( ctx[0] )
	},
	500
);


var __details_remove = function ( api, idx )
{
	var ctx = api.context;

	if ( ctx.length ) {
		var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];

		if ( row && row._details ) {
			row._details.remove();

			row._detailsShow = undefined;
			row._details = undefined;
			$( row.nTr ).removeClass( 'dt-hasChild' );
			__details_state( ctx );
		}
	}
};


var __details_display = function ( api, show ) {
	var ctx = api.context;

	if ( ctx.length && api.length ) {
		var row = ctx[0].aoData[ api[0] ];

		if ( row._details ) {
			row._detailsShow = show;

			if ( show ) {
				row._details.insertAfter( row.nTr );
				$( row.nTr ).addClass( 'dt-hasChild' );
			}
			else {
				row._details.detach();
				$( row.nTr ).removeClass( 'dt-hasChild' );
			}

			_fnCallbackFire( ctx[0], null, 'childRow', [ show, api.row( api[0] ) ] )

			__details_events( ctx[0] );
			__details_state( ctx );
		}
	}
};


var __details_events = function ( settings )
{
	var api = new _Api( settings );
	var namespace = '.dt.DT_details';
	var drawEvent = 'draw'+namespace;
	var colvisEvent = 'column-sizing'+namespace;
	var destroyEvent = 'destroy'+namespace;
	var data = settings.aoData;

	api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );

	if ( _pluck( data, '_details' ).length > 0 ) {
		// On each draw, insert the required elements into the document
		api.on( drawEvent, function ( e, ctx ) {
			if ( settings !== ctx ) {
				return;
			}

			api.rows( {page:'current'} ).eq(0).each( function (idx) {
				// Internal data grab
				var row = data[ idx ];

				if ( row._detailsShow ) {
					row._details.insertAfter( row.nTr );
				}
			} );
		} );

		// Column visibility change - update the colspan
		api.on( colvisEvent, function ( e, ctx, idx, vis ) {
			if ( settings !== ctx ) {
				return;
			}

			// Update the colspan for the details rows (note, only if it already has
			// a colspan)
			var row, visible = _fnVisbleColumns( ctx );

			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
				row = data[i];

				if ( row._details ) {
					row._details.children('td[colspan]').attr('colspan', visible );
				}
			}
		} );

		// Table destroyed - nuke any child rows
		api.on( destroyEvent, function ( e, ctx ) {
			if ( settings !== ctx ) {
				return;
			}

			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
				if ( data[i]._details ) {
					__details_remove( api, i );
				}
			}
		} );
	}
};

// Strings for the method names to help minification
var _emp = '';
var _child_obj = _emp+'row().child';
var _child_mth = _child_obj+'()';

// data can be:
//  tr
//  string
//  jQuery or array of any of the above
_api_register( _child_mth, function ( data, klass ) {
	var ctx = this.context;

	if ( data === undefined ) {
		// get
		return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ]._details :
			undefined;
	}
	else if ( data === true ) {
		// show
		this.child.show();
	}
	else if ( data === false ) {
		// remove
		__details_remove( this );
	}
	else if ( ctx.length && this.length ) {
		// set
		__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
	}

	return this;
} );


_api_register( [
	_child_obj+'.show()',
	_child_mth+'.show()' // only when `child()` was called with parameters (without
], function ( show ) {   // it returns an object and this method is not executed)
	__details_display( this, true );
	return this;
} );


_api_register( [
	_child_obj+'.hide()',
	_child_mth+'.hide()' // only when `child()` was called with parameters (without
], function () {         // it returns an object and this method is not executed)
	__details_display( this, false );
	return this;
} );


_api_register( [
	_child_obj+'.remove()',
	_child_mth+'.remove()' // only when `child()` was called with parameters (without
], function () {           // it returns an object and this method is not executed)
	__details_remove( this );
	return this;
} );


_api_register( _child_obj+'.isShown()', function () {
	var ctx = this.context;

	if ( ctx.length && this.length ) {
		// _detailsShown as false or undefined will fall through to return false
		return ctx[0].aoData[ this[0] ]._detailsShow || false;
	}
	return false;
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Columns
 *
 * {integer}           - column index (>=0 count from left, <0 count from right)
 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
 * "{string}:name"     - column name
 * "{string}"          - jQuery selector on column header nodes
 *
 */

// can be an array of these items, comma separated list, or an array of comma
// separated lists

var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;


// r1 and r2 are redundant - but it means that the parameters match for the
// iterator callback in columns().data()
var __columnData = function ( settings, column, r1, r2, rows ) {
	var a = [];
	for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
		a.push( _fnGetCellData( settings, rows[row], column ) );
	}
	return a;
};


var __column_selector = function ( settings, selector, opts )
{
	var
		columns = settings.aoColumns,
		names = _pluck( columns, 'sName' ),
		nodes = _pluck( columns, 'nTh' );

	var run = function ( s ) {
		var selInt = _intVal( s );

		// Selector - all
		if ( s === '' ) {
			return _range( columns.length );
		}

		// Selector - index
		if ( selInt !== null ) {
			return [ selInt >= 0 ?
				selInt : // Count from left
				columns.length + selInt // Count from right (+ because its a negative value)
			];
		}

		// Selector = function
		if ( typeof s === 'function' ) {
			var rows = _selector_row_indexes( settings, opts );

			return $.map( columns, function (col, idx) {
				return s(
						idx,
						__columnData( settings, idx, 0, 0, rows ),
						nodes[ idx ]
					) ? idx : null;
			} );
		}

		// jQuery or string selector
		var match = typeof s === 'string' ?
			s.match( __re_column_selector ) :
			'';

		if ( match ) {
			switch( match[2] ) {
				case 'visIdx':
				case 'visible':
					var idx = parseInt( match[1], 10 );
					// Visible index given, convert to column index
					if ( idx < 0 ) {
						// Counting from the right
						var visColumns = $.map( columns, function (col,i) {
							return col.bVisible ? i : null;
						} );
						return [ visColumns[ visColumns.length + idx ] ];
					}
					// Counting from the left
					return [ _fnVisibleToColumnIndex( settings, idx ) ];

				case 'name':
					// match by name. `names` is column index complete and in order
					return $.map( names, function (name, i) {
						return name === match[1] ? i : null;
					} );

				default:
					return [];
			}
		}

		// Cell in the table body
		if ( s.nodeName && s._DT_CellIndex ) {
			return [ s._DT_CellIndex.column ];
		}

		// jQuery selector on the TH elements for the columns
		var jqResult = $( nodes )
			.filter( s )
			.map( function () {
				return $.inArray( this, nodes ); // `nodes` is column index complete and in order
			} )
			.toArray();

		if ( jqResult.length || ! s.nodeName ) {
			return jqResult;
		}

		// Otherwise a node which might have a `dt-column` data attribute, or be
		// a child or such an element
		var host = $(s).closest('*[data-dt-column]');
		return host.length ?
			[ host.data('dt-column') ] :
			[];
	};

	return _selector_run( 'column', selector, run, settings, opts );
};


var __setColumnVis = function ( settings, column, vis ) {
	var
		cols = settings.aoColumns,
		col  = cols[ column ],
		data = settings.aoData,
		row, cells, i, ien, tr;

	// Get
	if ( vis === undefined ) {
		return col.bVisible;
	}

	// Set
	// No change
	if ( col.bVisible === vis ) {
		return;
	}

	if ( vis ) {
		// Insert column
		// Need to decide if we should use appendChild or insertBefore
		var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );

		for ( i=0, ien=data.length ; i<ien ; i++ ) {
			tr = data[i].nTr;
			cells = data[i].anCells;

			if ( tr ) {
				// insertBefore can act like appendChild if 2nd arg is null
				tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
			}
		}
	}
	else {
		// Remove column
		$( _pluck( settings.aoData, 'anCells', column ) ).detach();
	}

	// Common actions
	col.bVisible = vis;
};


_api_register( 'columns()', function ( selector, opts ) {
	// argument shifting
	if ( selector === undefined ) {
		selector = '';
	}
	else if ( $.isPlainObject( selector ) ) {
		opts = selector;
		selector = '';
	}

	opts = _selector_opts( opts );

	var inst = this.iterator( 'table', function ( settings ) {
		return __column_selector( settings, selector, opts );
	}, 1 );

	// Want argument shifting here and in _row_selector?
	inst.selector.cols = selector;
	inst.selector.opts = opts;

	return inst;
} );

_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
	return this.iterator( 'column', function ( settings, column ) {
		return settings.aoColumns[column].nTh;
	}, 1 );
} );

_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
	return this.iterator( 'column', function ( settings, column ) {
		return settings.aoColumns[column].nTf;
	}, 1 );
} );

_api_registerPlural( 'columns().data()', 'column().data()', function () {
	return this.iterator( 'column-rows', __columnData, 1 );
} );

_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
	return this.iterator( 'column', function ( settings, column ) {
		return settings.aoColumns[column].mData;
	}, 1 );
} );

_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
	return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
		return _pluck_order( settings.aoData, rows,
			type === 'search' ? '_aFilterData' : '_aSortData', column
		);
	}, 1 );
} );

_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
	return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
		return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
	}, 1 );
} );

_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
	var that = this;
	var ret = this.iterator( 'column', function ( settings, column ) {
		if ( vis === undefined ) {
			return settings.aoColumns[ column ].bVisible;
		} // else
		__setColumnVis( settings, column, vis );
	} );

	// Group the column visibility changes
	if ( vis !== undefined ) {
		this.iterator( 'table', function ( settings ) {
			// Redraw the header after changes
			_fnDrawHead( settings, settings.aoHeader );
			_fnDrawHead( settings, settings.aoFooter );
	
			// Update colspan for no records display. Child rows and extensions will use their own
			// listeners to do this - only need to update the empty table item here
			if ( ! settings.aiDisplay.length ) {
				$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
			}
	
			_fnSaveState( settings );

			// Second loop once the first is done for events
			that.iterator( 'column', function ( settings, column ) {
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
			} );

			if ( calc === undefined || calc ) {
				that.columns.adjust();
			}
		});
	}

	return ret;
} );

_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
	return this.iterator( 'column', function ( settings, column ) {
		return type === 'visible' ?
			_fnColumnIndexToVisible( settings, column ) :
			column;
	}, 1 );
} );

_api_register( 'columns.adjust()', function () {
	return this.iterator( 'table', function ( settings ) {
		_fnAdjustColumnSizing( settings );
	}, 1 );
} );

_api_register( 'column.index()', function ( type, idx ) {
	if ( this.context.length !== 0 ) {
		var ctx = this.context[0];

		if ( type === 'fromVisible' || type === 'toData' ) {
			return _fnVisibleToColumnIndex( ctx, idx );
		}
		else if ( type === 'fromData' || type === 'toVisible' ) {
			return _fnColumnIndexToVisible( ctx, idx );
		}
	}
} );

_api_register( 'column()', function ( selector, opts ) {
	return _selector_first( this.columns( selector, opts ) );
} );

var __cell_selector = function ( settings, selector, opts )
{
	var data = settings.aoData;
	var rows = _selector_row_indexes( settings, opts );
	var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
	var allCells = $(_flatten( [], cells ));
	var row;
	var columns = settings.aoColumns.length;
	var a, i, ien, j, o, host;

	var run = function ( s ) {
		var fnSelector = typeof s === 'function';

		if ( s === null || s === undefined || fnSelector ) {
			// All cells and function selectors
			a = [];

			for ( i=0, ien=rows.length ; i<ien ; i++ ) {
				row = rows[i];

				for ( j=0 ; j<columns ; j++ ) {
					o = {
						row: row,
						column: j
					};

					if ( fnSelector ) {
						// Selector - function
						host = data[ row ];

						if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
							a.push( o );
						}
					}
					else {
						// Selector - all
						a.push( o );
					}
				}
			}

			return a;
		}
		
		// Selector - index
		if ( $.isPlainObject( s ) ) {
			// Valid cell index and its in the array of selectable rows
			return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?
				[s] :
				[];
		}

		// Selector - jQuery filtered cells
		var jqResult = allCells
			.filter( s )
			.map( function (i, el) {
				return { // use a new object, in case someone changes the values
					row:    el._DT_CellIndex.row,
					column: el._DT_CellIndex.column
 				};
			} )
			.toArray();

		if ( jqResult.length || ! s.nodeName ) {
			return jqResult;
		}

		// Otherwise the selector is a node, and there is one last option - the
		// element might be a child of an element which has dt-row and dt-column
		// data attributes
		host = $(s).closest('*[data-dt-row]');
		return host.length ?
			[ {
				row: host.data('dt-row'),
				column: host.data('dt-column')
			} ] :
			[];
	};

	return _selector_run( 'cell', selector, run, settings, opts );
};




_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
	// Argument shifting
	if ( $.isPlainObject( rowSelector ) ) {
		// Indexes
		if ( rowSelector.row === undefined ) {
			// Selector options in first parameter
			opts = rowSelector;
			rowSelector = null;
		}
		else {
			// Cell index objects in first parameter
			opts = columnSelector;
			columnSelector = null;
		}
	}
	if ( $.isPlainObject( columnSelector ) ) {
		opts = columnSelector;
		columnSelector = null;
	}

	// Cell selector
	if ( columnSelector === null || columnSelector === undefined ) {
		return this.iterator( 'table', function ( settings ) {
			return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
		} );
	}

	// The default built in options need to apply to row and columns
	var internalOpts = opts ? {
		page: opts.page,
		order: opts.order,
		search: opts.search
	} : {};

	// Row + column selector
	var columns = this.columns( columnSelector, internalOpts );
	var rows = this.rows( rowSelector, internalOpts );
	var i, ien, j, jen;

	var cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {
		var a = [];

		for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
			for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
				a.push( {
					row:    rows[idx][i],
					column: columns[idx][j]
				} );
			}
		}

		return a;
	}, 1 );

	// There is currently only one extension which uses a cell selector extension
	// It is a _major_ performance drag to run this if it isn't needed, so this is
	// an extension specific check at the moment
	var cells = opts && opts.selected ?
		this.cells( cellsNoOpts, opts ) :
		cellsNoOpts;

	$.extend( cells.selector, {
		cols: columnSelector,
		rows: rowSelector,
		opts: opts
	} );

	return cells;
} );


_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
	return this.iterator( 'cell', function ( settings, row, column ) {
		var data = settings.aoData[ row ];

		return data && data.anCells ?
			data.anCells[ column ] :
			undefined;
	}, 1 );
} );


_api_register( 'cells().data()', function () {
	return this.iterator( 'cell', function ( settings, row, column ) {
		return _fnGetCellData( settings, row, column );
	}, 1 );
} );


_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
	type = type === 'search' ? '_aFilterData' : '_aSortData';

	return this.iterator( 'cell', function ( settings, row, column ) {
		return settings.aoData[ row ][ type ][ column ];
	}, 1 );
} );


_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
	return this.iterator( 'cell', function ( settings, row, column ) {
		return _fnGetCellData( settings, row, column, type );
	}, 1 );
} );


_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
	return this.iterator( 'cell', function ( settings, row, column ) {
		return {
			row: row,
			column: column,
			columnVisible: _fnColumnIndexToVisible( settings, column )
		};
	}, 1 );
} );


_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
	return this.iterator( 'cell', function ( settings, row, column ) {
		_fnInvalidate( settings, row, src, column );
	} );
} );



_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
	return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
} );


_api_register( 'cell().data()', function ( data ) {
	var ctx = this.context;
	var cell = this[0];

	if ( data === undefined ) {
		// Get
		return ctx.length && cell.length ?
			_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
			undefined;
	}

	// Set
	_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
	_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );

	return this;
} );



/**
 * Get current ordering (sorting) that has been applied to the table.
 *
 * @returns {array} 2D array containing the sorting information for the first
 *   table in the current context. Each element in the parent array represents
 *   a column being sorted upon (i.e. multi-sorting with two columns would have
 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
 *   the column index that the sorting condition applies to, the second is the
 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
 *   index of the sorting order from the `column.sorting` initialisation array.
 *//**
 * Set the ordering for the table.
 *
 * @param {integer} order Column index to sort upon.
 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
 * @returns {DataTables.Api} this
 *//**
 * Set the ordering for the table.
 *
 * @param {array} order 1D array of sorting information to be applied.
 * @param {array} [...] Optional additional sorting conditions
 * @returns {DataTables.Api} this
 *//**
 * Set the ordering for the table.
 *
 * @param {array} order 2D array of sorting information to be applied.
 * @returns {DataTables.Api} this
 */
_api_register( 'order()', function ( order, dir ) {
	var ctx = this.context;

	if ( order === undefined ) {
		// get
		return ctx.length !== 0 ?
			ctx[0].aaSorting :
			undefined;
	}

	// set
	if ( typeof order === 'number' ) {
		// Simple column / direction passed in
		order = [ [ order, dir ] ];
	}
	else if ( order.length && ! Array.isArray( order[0] ) ) {
		// Arguments passed in (list of 1D arrays)
		order = Array.prototype.slice.call( arguments );
	}
	// otherwise a 2D array was passed in

	return this.iterator( 'table', function ( settings ) {
		settings.aaSorting = order.slice();
	} );
} );


/**
 * Attach a sort listener to an element for a given column
 *
 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
 *   listener to. This can take the form of a single DOM node, a jQuery
 *   collection of nodes or a jQuery selector which will identify the node(s).
 * @param {integer} column the column that a click on this node will sort on
 * @param {function} [callback] callback function when sort is run
 * @returns {DataTables.Api} this
 */
_api_register( 'order.listener()', function ( node, column, callback ) {
	return this.iterator( 'table', function ( settings ) {
		_fnSortAttachListener( settings, node, column, callback );
	} );
} );


_api_register( 'order.fixed()', function ( set ) {
	if ( ! set ) {
		var ctx = this.context;
		var fixed = ctx.length ?
			ctx[0].aaSortingFixed :
			undefined;

		return Array.isArray( fixed ) ?
			{ pre: fixed } :
			fixed;
	}

	return this.iterator( 'table', function ( settings ) {
		settings.aaSortingFixed = $.extend( true, {}, set );
	} );
} );


// Order by the selected column(s)
_api_register( [
	'columns().order()',
	'column().order()'
], function ( dir ) {
	var that = this;

	return this.iterator( 'table', function ( settings, i ) {
		var sort = [];

		$.each( that[i], function (j, col) {
			sort.push( [ col, dir ] );
		} );

		settings.aaSorting = sort;
	} );
} );



_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
	var ctx = this.context;

	if ( input === undefined ) {
		// get
		return ctx.length !== 0 ?
			ctx[0].oPreviousSearch.sSearch :
			undefined;
	}

	// set
	return this.iterator( 'table', function ( settings ) {
		if ( ! settings.oFeatures.bFilter ) {
			return;
		}

		_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
			"sSearch": input+"",
			"bRegex":  regex === null ? false : regex,
			"bSmart":  smart === null ? true  : smart,
			"bCaseInsensitive": caseInsen === null ? true : caseInsen
		} ), 1 );
	} );
} );


_api_registerPlural(
	'columns().search()',
	'column().search()',
	function ( input, regex, smart, caseInsen ) {
		return this.iterator( 'column', function ( settings, column ) {
			var preSearch = settings.aoPreSearchCols;

			if ( input === undefined ) {
				// get
				return preSearch[ column ].sSearch;
			}

			// set
			if ( ! settings.oFeatures.bFilter ) {
				return;
			}

			$.extend( preSearch[ column ], {
				"sSearch": input+"",
				"bRegex":  regex === null ? false : regex,
				"bSmart":  smart === null ? true  : smart,
				"bCaseInsensitive": caseInsen === null ? true : caseInsen
			} );

			_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
		} );
	}
);

/*
 * State API methods
 */

_api_register( 'state()', function () {
	return this.context.length ?
		this.context[0].oSavedState :
		null;
} );


_api_register( 'state.clear()', function () {
	return this.iterator( 'table', function ( settings ) {
		// Save an empty object
		settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
	} );
} );


_api_register( 'state.loaded()', function () {
	return this.context.length ?
		this.context[0].oLoadedState :
		null;
} );


_api_register( 'state.save()', function () {
	return this.iterator( 'table', function ( settings ) {
		_fnSaveState( settings );
	} );
} );



/**
 * Provide a common method for plug-ins to check the version of DataTables being
 * used, in order to ensure compatibility.
 *
 *  @param {string} version Version string to check for, in the format "X.Y.Z".
 *    Note that the formats "X" and "X.Y" are also acceptable.
 *  @returns {boolean} true if this version of DataTables is greater or equal to
 *    the required version, or false if this version of DataTales is not
 *    suitable
 *  @static
 *  @dtopt API-Static
 *
 *  @example
 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
 */
DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
{
	var aThis = DataTable.version.split('.');
	var aThat = version.split('.');
	var iThis, iThat;

	for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
		iThis = parseInt( aThis[i], 10 ) || 0;
		iThat = parseInt( aThat[i], 10 ) || 0;

		// Parts are the same, keep comparing
		if (iThis === iThat) {
			continue;
		}

		// Parts are different, return immediately
		return iThis > iThat;
	}

	return true;
};


/**
 * Check if a `<table>` node is a DataTable table already or not.
 *
 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
 *      selector for the table to test. Note that if more than more than one
 *      table is passed on, only the first will be checked
 *  @returns {boolean} true the table given is a DataTable, or false otherwise
 *  @static
 *  @dtopt API-Static
 *
 *  @example
 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
 *      $('#example').dataTable();
 *    }
 */
DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
{
	var t = $(table).get(0);
	var is = false;

	if ( table instanceof DataTable.Api ) {
		return true;
	}

	$.each( DataTable.settings, function (i, o) {
		var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
		var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

		if ( o.nTable === t || head === t || foot === t ) {
			is = true;
		}
	} );

	return is;
};


/**
 * Get all DataTable tables that have been initialised - optionally you can
 * select to get only currently visible tables.
 *
 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
 *    or visible tables only.
 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
 *    DataTables
 *  @static
 *  @dtopt API-Static
 *
 *  @example
 *    $.each( $.fn.dataTable.tables(true), function () {
 *      $(table).DataTable().columns.adjust();
 *    } );
 */
DataTable.tables = DataTable.fnTables = function ( visible )
{
	var api = false;

	if ( $.isPlainObject( visible ) ) {
		api = visible.api;
		visible = visible.visible;
	}

	var a = $.map( DataTable.settings, function (o) {
		if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
			return o.nTable;
		}
	} );

	return api ?
		new _Api( a ) :
		a;
};


/**
 * Convert from camel case parameters to Hungarian notation. This is made public
 * for the extensions to provide the same ability as DataTables core to accept
 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
 * parameters.
 *
 *  @param {object} src The model object which holds all parameters that can be
 *    mapped.
 *  @param {object} user The object to convert from camel case to Hungarian.
 *  @param {boolean} force When set to `true`, properties which already have a
 *    Hungarian value in the `user` object will be overwritten. Otherwise they
 *    won't be.
 */
DataTable.camelToHungarian = _fnCamelToHungarian;



/**
 *
 */
_api_register( '$()', function ( selector, opts ) {
	var
		rows   = this.rows( opts ).nodes(), // Get all rows
		jqRows = $(rows);

	return $( [].concat(
		jqRows.filter( selector ).toArray(),
		jqRows.find( selector ).toArray()
	) );
} );


// jQuery functions to operate on the tables
$.each( [ 'on', 'one', 'off' ], function (i, key) {
	_api_register( key+'()', function ( /* event, handler */ ) {
		var args = Array.prototype.slice.call(arguments);

		// Add the `dt` namespace automatically if it isn't already present
		args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
			return ! e.match(/\.dt\b/) ?
				e+'.dt' :
				e;
			} ).join( ' ' );

		var inst = $( this.tables().nodes() );
		inst[key].apply( inst, args );
		return this;
	} );
} );


_api_register( 'clear()', function () {
	return this.iterator( 'table', function ( settings ) {
		_fnClearTable( settings );
	} );
} );


_api_register( 'settings()', function () {
	return new _Api( this.context, this.context );
} );


_api_register( 'init()', function () {
	var ctx = this.context;
	return ctx.length ? ctx[0].oInit : null;
} );


_api_register( 'data()', function () {
	return this.iterator( 'table', function ( settings ) {
		return _pluck( settings.aoData, '_aData' );
	} ).flatten();
} );


_api_register( 'destroy()', function ( remove ) {
	remove = remove || false;

	return this.iterator( 'table', function ( settings ) {
		var classes   = settings.oClasses;
		var table     = settings.nTable;
		var tbody     = settings.nTBody;
		var thead     = settings.nTHead;
		var tfoot     = settings.nTFoot;
		var jqTable   = $(table);
		var jqTbody   = $(tbody);
		var jqWrapper = $(settings.nTableWrapper);
		var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
		var i, ien;

		// Flag to note that the table is currently being destroyed - no action
		// should be taken
		settings.bDestroying = true;

		// Fire off the destroy callbacks for plug-ins etc
		_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );

		// If not being removed from the document, make all columns visible
		if ( ! remove ) {
			new _Api( settings ).columns().visible( true );
		}

		// Blitz all `DT` namespaced events (these are internal events, the
		// lowercase, `dt` events are user subscribed and they are responsible
		// for removing them
		jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
		$(window).off('.DT-'+settings.sInstance);

		// When scrolling we had to break the table up - restore it
		if ( table != thead.parentNode ) {
			jqTable.children('thead').detach();
			jqTable.append( thead );
		}

		if ( tfoot && table != tfoot.parentNode ) {
			jqTable.children('tfoot').detach();
			jqTable.append( tfoot );
		}

		settings.aaSorting = [];
		settings.aaSortingFixed = [];
		_fnSortingClasses( settings );

		$( rows ).removeClass( settings.asStripeClasses.join(' ') );

		$('th, td', thead).removeClass( classes.sSortable+' '+
			classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
		);

		// Add the TR elements back into the table in their original order
		jqTbody.children().detach();
		jqTbody.append( rows );

		var orig = settings.nTableWrapper.parentNode;

		// Remove the DataTables generated nodes, events and classes
		var removedMethod = remove ? 'remove' : 'detach';
		jqTable[ removedMethod ]();
		jqWrapper[ removedMethod ]();

		// If we need to reattach the table to the document
		if ( ! remove && orig ) {
			// insertBefore acts like appendChild if !arg[1]
			orig.insertBefore( table, settings.nTableReinsertBefore );

			// Restore the width of the original table - was read from the style property,
			// so we can restore directly to that
			jqTable
				.css( 'width', settings.sDestroyWidth )
				.removeClass( classes.sTable );

			// If the were originally stripe classes - then we add them back here.
			// Note this is not fool proof (for example if not all rows had stripe
			// classes - but it's a good effort without getting carried away
			ien = settings.asDestroyStripes.length;

			if ( ien ) {
				jqTbody.children().each( function (i) {
					$(this).addClass( settings.asDestroyStripes[i % ien] );
				} );
			}
		}

		/* Remove the settings object from the settings array */
		var idx = $.inArray( settings, DataTable.settings );
		if ( idx !== -1 ) {
			DataTable.settings.splice( idx, 1 );
		}
	} );
} );


// Add the `every()` method for rows, columns and cells in a compact form
$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
	_api_register( type+'s().every()', function ( fn ) {
		var opts = this.selector.opts;
		var api = this;

		return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
			// Rows and columns:
			//  arg1 - index
			//  arg2 - table counter
			//  arg3 - loop counter
			//  arg4 - undefined
			// Cells:
			//  arg1 - row index
			//  arg2 - column index
			//  arg3 - table counter
			//  arg4 - loop counter
			fn.call(
				api[ type ](
					arg1,
					type==='cell' ? arg2 : opts,
					type==='cell' ? opts : undefined
				),
				arg1, arg2, arg3, arg4
			);
		} );
	} );
} );


// i18n method for extensions to be able to use the language object from the
// DataTable
_api_register( 'i18n()', function ( token, def, plural ) {
	var ctx = this.context[0];
	var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );

	if ( resolved === undefined ) {
		resolved = def;
	}

	if ( plural !== undefined && $.isPlainObject( resolved ) ) {
		resolved = resolved[ plural ] !== undefined ?
			resolved[ plural ] :
			resolved._;
	}

	return resolved.replace( '%d', plural ); // nb: plural might be undefined,
} );
/**
 * Version string for plug-ins to check compatibility. Allowed format is
 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
 * only for non-release builds. See http://semver.org/ for more information.
 *  @member
 *  @type string
 *  @default Version number
 */
DataTable.version = "1.13.2";

/**
 * Private data store, containing all of the settings objects that are
 * created for the tables on a given page.
 *
 * Note that the `DataTable.settings` object is aliased to
 * `jQuery.fn.dataTableExt` through which it may be accessed and
 * manipulated, or `jQuery.fn.dataTable.settings`.
 *  @member
 *  @type array
 *  @default []
 *  @private
 */
DataTable.settings = [];

/**
 * Object models container, for the various models that DataTables has
 * available to it. These models define the objects that are used to hold
 * the active state and configuration of the table.
 *  @namespace
 */
DataTable.models = {};



/**
 * Template object for the way in which DataTables holds information about
 * search information for the global filter and individual column filters.
 *  @namespace
 */
DataTable.models.oSearch = {
	/**
	 * Flag to indicate if the filtering should be case insensitive or not
	 *  @type boolean
	 *  @default true
	 */
	"bCaseInsensitive": true,

	/**
	 * Applied search term
	 *  @type string
	 *  @default <i>Empty string</i>
	 */
	"sSearch": "",

	/**
	 * Flag to indicate if the search term should be interpreted as a
	 * regular expression (true) or not (false) and therefore and special
	 * regex characters escaped.
	 *  @type boolean
	 *  @default false
	 */
	"bRegex": false,

	/**
	 * Flag to indicate if DataTables is to use its smart filtering or not.
	 *  @type boolean
	 *  @default true
	 */
	"bSmart": true,

	/**
	 * Flag to indicate if DataTables should only trigger a search when
	 * the return key is pressed.
	 *  @type boolean
	 *  @default false
	 */
	"return": false
};




/**
 * Template object for the way in which DataTables holds information about
 * each individual row. This is the object format used for the settings
 * aoData array.
 *  @namespace
 */
DataTable.models.oRow = {
	/**
	 * TR element for the row
	 *  @type node
	 *  @default null
	 */
	"nTr": null,

	/**
	 * Array of TD elements for each row. This is null until the row has been
	 * created.
	 *  @type array nodes
	 *  @default []
	 */
	"anCells": null,

	/**
	 * Data object from the original data source for the row. This is either
	 * an array if using the traditional form of DataTables, or an object if
	 * using mData options. The exact type will depend on the passed in
	 * data from the data source, or will be an array if using DOM a data
	 * source.
	 *  @type array|object
	 *  @default []
	 */
	"_aData": [],

	/**
	 * Sorting data cache - this array is ostensibly the same length as the
	 * number of columns (although each index is generated only as it is
	 * needed), and holds the data that is used for sorting each column in the
	 * row. We do this cache generation at the start of the sort in order that
	 * the formatting of the sort data need be done only once for each cell
	 * per sort. This array should not be read from or written to by anything
	 * other than the master sorting methods.
	 *  @type array
	 *  @default null
	 *  @private
	 */
	"_aSortData": null,

	/**
	 * Per cell filtering data cache. As per the sort data cache, used to
	 * increase the performance of the filtering in DataTables
	 *  @type array
	 *  @default null
	 *  @private
	 */
	"_aFilterData": null,

	/**
	 * Filtering data cache. This is the same as the cell filtering cache, but
	 * in this case a string rather than an array. This is easily computed with
	 * a join on `_aFilterData`, but is provided as a cache so the join isn't
	 * needed on every search (memory traded for performance)
	 *  @type array
	 *  @default null
	 *  @private
	 */
	"_sFilterRow": null,

	/**
	 * Cache of the class name that DataTables has applied to the row, so we
	 * can quickly look at this variable rather than needing to do a DOM check
	 * on className for the nTr property.
	 *  @type string
	 *  @default <i>Empty string</i>
	 *  @private
	 */
	"_sRowStripe": "",

	/**
	 * Denote if the original data source was from the DOM, or the data source
	 * object. This is used for invalidating data, so DataTables can
	 * automatically read data from the original source, unless uninstructed
	 * otherwise.
	 *  @type string
	 *  @default null
	 *  @private
	 */
	"src": null,

	/**
	 * Index in the aoData array. This saves an indexOf lookup when we have the
	 * object, but want to know the index
	 *  @type integer
	 *  @default -1
	 *  @private
	 */
	"idx": -1
};


/**
 * Template object for the column information object in DataTables. This object
 * is held in the settings aoColumns array and contains all the information that
 * DataTables needs about each individual column.
 *
 * Note that this object is related to {@link DataTable.defaults.column}
 * but this one is the internal data store for DataTables's cache of columns.
 * It should NOT be manipulated outside of DataTables. Any configuration should
 * be done through the initialisation options.
 *  @namespace
 */
DataTable.models.oColumn = {
	/**
	 * Column index. This could be worked out on-the-fly with $.inArray, but it
	 * is faster to just hold it as a variable
	 *  @type integer
	 *  @default null
	 */
	"idx": null,

	/**
	 * A list of the columns that sorting should occur on when this column
	 * is sorted. That this property is an array allows multi-column sorting
	 * to be defined for a column (for example first name / last name columns
	 * would benefit from this). The values are integers pointing to the
	 * columns to be sorted on (typically it will be a single integer pointing
	 * at itself, but that doesn't need to be the case).
	 *  @type array
	 */
	"aDataSort": null,

	/**
	 * Define the sorting directions that are applied to the column, in sequence
	 * as the column is repeatedly sorted upon - i.e. the first value is used
	 * as the sorting direction when the column if first sorted (clicked on).
	 * Sort it again (click again) and it will move on to the next index.
	 * Repeat until loop.
	 *  @type array
	 */
	"asSorting": null,

	/**
	 * Flag to indicate if the column is searchable, and thus should be included
	 * in the filtering or not.
	 *  @type boolean
	 */
	"bSearchable": null,

	/**
	 * Flag to indicate if the column is sortable or not.
	 *  @type boolean
	 */
	"bSortable": null,

	/**
	 * Flag to indicate if the column is currently visible in the table or not
	 *  @type boolean
	 */
	"bVisible": null,

	/**
	 * Store for manual type assignment using the `column.type` option. This
	 * is held in store so we can manipulate the column's `sType` property.
	 *  @type string
	 *  @default null
	 *  @private
	 */
	"_sManualType": null,

	/**
	 * Flag to indicate if HTML5 data attributes should be used as the data
	 * source for filtering or sorting. True is either are.
	 *  @type boolean
	 *  @default false
	 *  @private
	 */
	"_bAttrSrc": false,

	/**
	 * Developer definable function that is called whenever a cell is created (Ajax source,
	 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	 * allowing you to modify the DOM element (add background colour for example) when the
	 * element is available.
	 *  @type function
	 *  @param {element} nTd The TD node that has been created
	 *  @param {*} sData The Data for the cell
	 *  @param {array|object} oData The data for the whole row
	 *  @param {int} iRow The row index for the aoData data store
	 *  @default null
	 */
	"fnCreatedCell": null,

	/**
	 * Function to get data from a cell in a column. You should <b>never</b>
	 * access data directly through _aData internally in DataTables - always use
	 * the method attached to this property. It allows mData to function as
	 * required. This function is automatically assigned by the column
	 * initialisation method
	 *  @type function
	 *  @param {array|object} oData The data array/object for the array
	 *    (i.e. aoData[]._aData)
	 *  @param {string} sSpecific The specific data type you want to get -
	 *    'display', 'type' 'filter' 'sort'
	 *  @returns {*} The data for the cell from the given row's data
	 *  @default null
	 */
	"fnGetData": null,

	/**
	 * Function to set data for a cell in the column. You should <b>never</b>
	 * set the data directly to _aData internally in DataTables - always use
	 * this method. It allows mData to function as required. This function
	 * is automatically assigned by the column initialisation method
	 *  @type function
	 *  @param {array|object} oData The data array/object for the array
	 *    (i.e. aoData[]._aData)
	 *  @param {*} sValue Value to set
	 *  @default null
	 */
	"fnSetData": null,

	/**
	 * Property to read the value for the cells in the column from the data
	 * source array / object. If null, then the default content is used, if a
	 * function is given then the return from the function is used.
	 *  @type function|int|string|null
	 *  @default null
	 */
	"mData": null,

	/**
	 * Partner property to mData which is used (only when defined) to get
	 * the data - i.e. it is basically the same as mData, but without the
	 * 'set' option, and also the data fed to it is the result from mData.
	 * This is the rendering method to match the data method of mData.
	 *  @type function|int|string|null
	 *  @default null
	 */
	"mRender": null,

	/**
	 * Unique header TH/TD element for this column - this is what the sorting
	 * listener is attached to (if sorting is enabled.)
	 *  @type node
	 *  @default null
	 */
	"nTh": null,

	/**
	 * Unique footer TH/TD element for this column (if there is one). Not used
	 * in DataTables as such, but can be used for plug-ins to reference the
	 * footer for each column.
	 *  @type node
	 *  @default null
	 */
	"nTf": null,

	/**
	 * The class to apply to all TD elements in the table's TBODY for the column
	 *  @type string
	 *  @default null
	 */
	"sClass": null,

	/**
	 * When DataTables calculates the column widths to assign to each column,
	 * it finds the longest string in each column and then constructs a
	 * temporary table and reads the widths from that. The problem with this
	 * is that "mmm" is much wider then "iiii", but the latter is a longer
	 * string - thus the calculation can go wrong (doing it properly and putting
	 * it into an DOM object and measuring that is horribly(!) slow). Thus as
	 * a "work around" we provide this option. It will append its value to the
	 * text that is found to be the longest string for the column - i.e. padding.
	 *  @type string
	 */
	"sContentPadding": null,

	/**
	 * Allows a default value to be given for a column's data, and will be used
	 * whenever a null data source is encountered (this can be because mData
	 * is set to null, or because the data source itself is null).
	 *  @type string
	 *  @default null
	 */
	"sDefaultContent": null,

	/**
	 * Name for the column, allowing reference to the column by name as well as
	 * by index (needs a lookup to work by name).
	 *  @type string
	 */
	"sName": null,

	/**
	 * Custom sorting data type - defines which of the available plug-ins in
	 * afnSortData the custom sorting will use - if any is defined.
	 *  @type string
	 *  @default std
	 */
	"sSortDataType": 'std',

	/**
	 * Class to be applied to the header element when sorting on this column
	 *  @type string
	 *  @default null
	 */
	"sSortingClass": null,

	/**
	 * Class to be applied to the header element when sorting on this column -
	 * when jQuery UI theming is used.
	 *  @type string
	 *  @default null
	 */
	"sSortingClassJUI": null,

	/**
	 * Title of the column - what is seen in the TH element (nTh).
	 *  @type string
	 */
	"sTitle": null,

	/**
	 * Column sorting and filtering type
	 *  @type string
	 *  @default null
	 */
	"sType": null,

	/**
	 * Width of the column
	 *  @type string
	 *  @default null
	 */
	"sWidth": null,

	/**
	 * Width of the column when it was first "encountered"
	 *  @type string
	 *  @default null
	 */
	"sWidthOrig": null
};


/*
 * Developer note: The properties of the object below are given in Hungarian
 * notation, that was used as the interface for DataTables prior to v1.10, however
 * from v1.10 onwards the primary interface is camel case. In order to avoid
 * breaking backwards compatibility utterly with this change, the Hungarian
 * version is still, internally the primary interface, but is is not documented
 * - hence the @name tags in each doc comment. This allows a Javascript function
 * to create a map from Hungarian notation to camel case (going the other direction
 * would require each property to be listed, which would add around 3K to the size
 * of DataTables, while this method is about a 0.5K hit).
 *
 * Ultimately this does pave the way for Hungarian notation to be dropped
 * completely, but that is a massive amount of work and will break current
 * installs (therefore is on-hold until v2).
 */

/**
 * Initialisation options that can be given to DataTables at initialisation
 * time.
 *  @namespace
 */
DataTable.defaults = {
	/**
	 * An array of data to use for the table, passed in at initialisation which
	 * will be used in preference to any data which is already in the DOM. This is
	 * particularly useful for constructing tables purely in Javascript, for
	 * example with a custom Ajax call.
	 *  @type array
	 *  @default null
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.data
	 *
	 *  @example
	 *    // Using a 2D array data source
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "data": [
	 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
	 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
	 *        ],
	 *        "columns": [
	 *          { "title": "Engine" },
	 *          { "title": "Browser" },
	 *          { "title": "Platform" },
	 *          { "title": "Version" },
	 *          { "title": "Grade" }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using an array of objects as a data source (`data`)
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "data": [
	 *          {
	 *            "engine":   "Trident",
	 *            "browser":  "Internet Explorer 4.0",
	 *            "platform": "Win 95+",
	 *            "version":  4,
	 *            "grade":    "X"
	 *          },
	 *          {
	 *            "engine":   "Trident",
	 *            "browser":  "Internet Explorer 5.0",
	 *            "platform": "Win 95+",
	 *            "version":  5,
	 *            "grade":    "C"
	 *          }
	 *        ],
	 *        "columns": [
	 *          { "title": "Engine",   "data": "engine" },
	 *          { "title": "Browser",  "data": "browser" },
	 *          { "title": "Platform", "data": "platform" },
	 *          { "title": "Version",  "data": "version" },
	 *          { "title": "Grade",    "data": "grade" }
	 *        ]
	 *      } );
	 *    } );
	 */
	"aaData": null,


	/**
	 * If ordering is enabled, then DataTables will perform a first pass sort on
	 * initialisation. You can define which column(s) the sort is performed
	 * upon, and the sorting direction, with this variable. The `sorting` array
	 * should contain an array for each column to be sorted initially containing
	 * the column's index and a direction string ('asc' or 'desc').
	 *  @type array
	 *  @default [[0,'asc']]
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.order
	 *
	 *  @example
	 *    // Sort by 3rd column first, and then 4th column
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "order": [[2,'asc'], [3,'desc']]
	 *      } );
	 *    } );
	 *
	 *    // No initial sorting
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "order": []
	 *      } );
	 *    } );
	 */
	"aaSorting": [[0,'asc']],


	/**
	 * This parameter is basically identical to the `sorting` parameter, but
	 * cannot be overridden by user interaction with the table. What this means
	 * is that you could have a column (visible or hidden) which the sorting
	 * will always be forced on first - any sorting after that (from the user)
	 * will then be performed as required. This can be useful for grouping rows
	 * together.
	 *  @type array
	 *  @default null
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.orderFixed
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "orderFixed": [[0,'asc']]
	 *      } );
	 *    } )
	 */
	"aaSortingFixed": [],


	/**
	 * DataTables can be instructed to load data to display in the table from a
	 * Ajax source. This option defines how that Ajax call is made and where to.
	 *
	 * The `ajax` property has three different modes of operation, depending on
	 * how it is defined. These are:
	 *
	 * * `string` - Set the URL from where the data should be loaded from.
	 * * `object` - Define properties for `jQuery.ajax`.
	 * * `function` - Custom data get function
	 *
	 * `string`
	 * --------
	 *
	 * As a string, the `ajax` property simply defines the URL from which
	 * DataTables will load data.
	 *
	 * `object`
	 * --------
	 *
	 * As an object, the parameters in the object are passed to
	 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
	 * of the Ajax request. DataTables has a number of default parameters which
	 * you can override using this option. Please refer to the jQuery
	 * documentation for a full description of the options available, although
	 * the following parameters provide additional options in DataTables or
	 * require special consideration:
	 *
	 * * `data` - As with jQuery, `data` can be provided as an object, but it
	 *   can also be used as a function to manipulate the data DataTables sends
	 *   to the server. The function takes a single parameter, an object of
	 *   parameters with the values that DataTables has readied for sending. An
	 *   object may be returned which will be merged into the DataTables
	 *   defaults, or you can add the items to the object that was passed in and
	 *   not return anything from the function. This supersedes `fnServerParams`
	 *   from DataTables 1.9-.
	 *
	 * * `dataSrc` - By default DataTables will look for the property `data` (or
	 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
	 *   from an Ajax source or for server-side processing - this parameter
	 *   allows that property to be changed. You can use Javascript dotted
	 *   object notation to get a data source for multiple levels of nesting, or
	 *   it my be used as a function. As a function it takes a single parameter,
	 *   the JSON returned from the server, which can be manipulated as
	 *   required, with the returned value being that used by DataTables as the
	 *   data source for the table. This supersedes `sAjaxDataProp` from
	 *   DataTables 1.9-.
	 *
	 * * `success` - Should not be overridden it is used internally in
	 *   DataTables. To manipulate / transform the data returned by the server
	 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
	 *
	 * `function`
	 * ----------
	 *
	 * As a function, making the Ajax call is left up to yourself allowing
	 * complete control of the Ajax request. Indeed, if desired, a method other
	 * than Ajax could be used to obtain the required data, such as Web storage
	 * or an AIR database.
	 *
	 * The function is given four parameters and no return is required. The
	 * parameters are:
	 *
	 * 1. _object_ - Data to send to the server
	 * 2. _function_ - Callback function that must be executed when the required
	 *    data has been obtained. That data should be passed into the callback
	 *    as the only parameter
	 * 3. _object_ - DataTables settings object for the table
	 *
	 * Note that this supersedes `fnServerData` from DataTables 1.9-.
	 *
	 *  @type string|object|function
	 *  @default null
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.ajax
	 *  @since 1.10.0
	 *
	 * @example
	 *   // Get JSON data from a file via Ajax.
	 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
	 *   $('#example').dataTable( {
	 *     "ajax": "data.json"
	 *   } );
	 *
	 * @example
	 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
	 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
	 *   $('#example').dataTable( {
	 *     "ajax": {
	 *       "url": "data.json",
	 *       "dataSrc": "tableData"
	 *     }
	 *   } );
	 *
	 * @example
	 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
	 *   // from a plain array rather than an array in an object
	 *   $('#example').dataTable( {
	 *     "ajax": {
	 *       "url": "data.json",
	 *       "dataSrc": ""
	 *     }
	 *   } );
	 *
	 * @example
	 *   // Manipulate the data returned from the server - add a link to data
	 *   // (note this can, should, be done using `render` for the column - this
	 *   // is just a simple example of how the data can be manipulated).
	 *   $('#example').dataTable( {
	 *     "ajax": {
	 *       "url": "data.json",
	 *       "dataSrc": function ( json ) {
	 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
	 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
	 *         }
	 *         return json;
	 *       }
	 *     }
	 *   } );
	 *
	 * @example
	 *   // Add data to the request
	 *   $('#example').dataTable( {
	 *     "ajax": {
	 *       "url": "data.json",
	 *       "data": function ( d ) {
	 *         return {
	 *           "extra_search": $('#extra').val()
	 *         };
	 *       }
	 *     }
	 *   } );
	 *
	 * @example
	 *   // Send request as POST
	 *   $('#example').dataTable( {
	 *     "ajax": {
	 *       "url": "data.json",
	 *       "type": "POST"
	 *     }
	 *   } );
	 *
	 * @example
	 *   // Get the data from localStorage (could interface with a form for
	 *   // adding, editing and removing rows).
	 *   $('#example').dataTable( {
	 *     "ajax": function (data, callback, settings) {
	 *       callback(
	 *         JSON.parse( localStorage.getItem('dataTablesData') )
	 *       );
	 *     }
	 *   } );
	 */
	"ajax": null,


	/**
	 * This parameter allows you to readily specify the entries in the length drop
	 * down menu that DataTables shows when pagination is enabled. It can be
	 * either a 1D array of options which will be used for both the displayed
	 * option and the value, or a 2D array which will use the array in the first
	 * position as the value, and the array in the second position as the
	 * displayed options (useful for language strings such as 'All').
	 *
	 * Note that the `pageLength` property will be automatically set to the
	 * first value given in this array, unless `pageLength` is also provided.
	 *  @type array
	 *  @default [ 10, 25, 50, 100 ]
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.lengthMenu
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
	 *      } );
	 *    } );
	 */
	"aLengthMenu": [ 10, 25, 50, 100 ],


	/**
	 * The `columns` option in the initialisation parameter allows you to define
	 * details about the way individual columns behave. For a full list of
	 * column options that can be set, please see
	 * {@link DataTable.defaults.column}. Note that if you use `columns` to
	 * define your columns, you must have an entry in the array for every single
	 * column that you have in your table (these can be null if you don't which
	 * to specify any options).
	 *  @member
	 *
	 *  @name DataTable.defaults.column
	 */
	"aoColumns": null,

	/**
	 * Very similar to `columns`, `columnDefs` allows you to target a specific
	 * column, multiple columns, or all columns, using the `targets` property of
	 * each object in the array. This allows great flexibility when creating
	 * tables, as the `columnDefs` arrays can be of any length, targeting the
	 * columns you specifically want. `columnDefs` may use any of the column
	 * options available: {@link DataTable.defaults.column}, but it _must_
	 * have `targets` defined in each object in the array. Values in the `targets`
	 * array may be:
	 *   <ul>
	 *     <li>a string - class name will be matched on the TH for the column</li>
	 *     <li>0 or a positive integer - column index counting from the left</li>
	 *     <li>a negative integer - column index counting from the right</li>
	 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
	 *   </ul>
	 *  @member
	 *
	 *  @name DataTable.defaults.columnDefs
	 */
	"aoColumnDefs": null,


	/**
	 * Basically the same as `search`, this parameter defines the individual column
	 * filtering state at initialisation time. The array must be of the same size
	 * as the number of columns, and each element be an object with the parameters
	 * `search` and `escapeRegex` (the latter is optional). 'null' is also
	 * accepted and the default will be used.
	 *  @type array
	 *  @default []
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.searchCols
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "searchCols": [
	 *          null,
	 *          { "search": "My filter" },
	 *          null,
	 *          { "search": "^[0-9]", "escapeRegex": false }
	 *        ]
	 *      } );
	 *    } )
	 */
	"aoSearchCols": [],


	/**
	 * An array of CSS classes that should be applied to displayed rows. This
	 * array may be of any length, and DataTables will apply each class
	 * sequentially, looping when required.
	 *  @type array
	 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
	 *    options</i>
	 *
	 *  @dtopt Option
	 *  @name DataTable.defaults.stripeClasses
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
	 *      } );
	 *    } )
	 */
	"asStripeClasses": null,


	/**
	 * Enable or disable automatic column width calculation. This can be disabled
	 * as an optimisation (it takes some time to calculate the widths) if the
	 * tables widths are passed in using `columns`.
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.autoWidth
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "autoWidth": false
	 *      } );
	 *    } );
	 */
	"bAutoWidth": true,


	/**
	 * Deferred rendering can provide DataTables with a huge speed boost when you
	 * are using an Ajax or JS data source for the table. This option, when set to
	 * true, will cause DataTables to defer the creation of the table elements for
	 * each row until they are needed for a draw - saving a significant amount of
	 * time.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.deferRender
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "ajax": "sources/arrays.txt",
	 *        "deferRender": true
	 *      } );
	 *    } );
	 */
	"bDeferRender": false,


	/**
	 * Replace a DataTable which matches the given selector and replace it with
	 * one which has the properties of the new initialisation object passed. If no
	 * table matches the selector, then the new DataTable will be constructed as
	 * per normal.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.destroy
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "srollY": "200px",
	 *        "paginate": false
	 *      } );
	 *
	 *      // Some time later....
	 *      $('#example').dataTable( {
	 *        "filter": false,
	 *        "destroy": true
	 *      } );
	 *    } );
	 */
	"bDestroy": false,


	/**
	 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
	 * that it allows the end user to input multiple words (space separated) and
	 * will match a row containing those words, even if not in the order that was
	 * specified (this allow matching across multiple columns). Note that if you
	 * wish to use filtering in DataTables this must remain 'true' - to remove the
	 * default filtering input box and retain filtering abilities, please use
	 * {@link DataTable.defaults.dom}.
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.searching
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "searching": false
	 *      } );
	 *    } );
	 */
	"bFilter": true,


	/**
	 * Enable or disable the table information display. This shows information
	 * about the data that is currently visible on the page, including information
	 * about filtered data if that action is being performed.
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.info
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "info": false
	 *      } );
	 *    } );
	 */
	"bInfo": true,


	/**
	 * Allows the end user to select the size of a formatted page from a select
	 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.lengthChange
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "lengthChange": false
	 *      } );
	 *    } );
	 */
	"bLengthChange": true,


	/**
	 * Enable or disable pagination.
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.paging
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "paging": false
	 *      } );
	 *    } );
	 */
	"bPaginate": true,


	/**
	 * Enable or disable the display of a 'processing' indicator when the table is
	 * being processed (e.g. a sort). This is particularly useful for tables with
	 * large amounts of data where it can take a noticeable amount of time to sort
	 * the entries.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.processing
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "processing": true
	 *      } );
	 *    } );
	 */
	"bProcessing": false,


	/**
	 * Retrieve the DataTables object for the given selector. Note that if the
	 * table has already been initialised, this parameter will cause DataTables
	 * to simply return the object that has already been set up - it will not take
	 * account of any changes you might have made to the initialisation object
	 * passed to DataTables (setting this parameter to true is an acknowledgement
	 * that you understand this). `destroy` can be used to reinitialise a table if
	 * you need.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.retrieve
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      initTable();
	 *      tableActions();
	 *    } );
	 *
	 *    function initTable ()
	 *    {
	 *      return $('#example').dataTable( {
	 *        "scrollY": "200px",
	 *        "paginate": false,
	 *        "retrieve": true
	 *      } );
	 *    }
	 *
	 *    function tableActions ()
	 *    {
	 *      var table = initTable();
	 *      // perform API operations with oTable
	 *    }
	 */
	"bRetrieve": false,


	/**
	 * When vertical (y) scrolling is enabled, DataTables will force the height of
	 * the table's viewport to the given height at all times (useful for layout).
	 * However, this can look odd when filtering data down to a small data set,
	 * and the footer is left "floating" further down. This parameter (when
	 * enabled) will cause DataTables to collapse the table's viewport down when
	 * the result set will fit within the given Y height.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.scrollCollapse
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "scrollY": "200",
	 *        "scrollCollapse": true
	 *      } );
	 *    } );
	 */
	"bScrollCollapse": false,


	/**
	 * Configure DataTables to use server-side processing. Note that the
	 * `ajax` parameter must also be given in order to give DataTables a
	 * source to obtain the required data for each draw.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Features
	 *  @dtopt Server-side
	 *  @name DataTable.defaults.serverSide
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "serverSide": true,
	 *        "ajax": "xhr.php"
	 *      } );
	 *    } );
	 */
	"bServerSide": false,


	/**
	 * Enable or disable sorting of columns. Sorting of individual columns can be
	 * disabled by the `sortable` option for each column.
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.ordering
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "ordering": false
	 *      } );
	 *    } );
	 */
	"bSort": true,


	/**
	 * Enable or display DataTables' ability to sort multiple columns at the
	 * same time (activated by shift-click by the user).
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.orderMulti
	 *
	 *  @example
	 *    // Disable multiple column sorting ability
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "orderMulti": false
	 *      } );
	 *    } );
	 */
	"bSortMulti": true,


	/**
	 * Allows control over whether DataTables should use the top (true) unique
	 * cell that is found for a single column, or the bottom (false - default).
	 * This is useful when using complex headers.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.orderCellsTop
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "orderCellsTop": true
	 *      } );
	 *    } );
	 */
	"bSortCellsTop": false,


	/**
	 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
	 * `sorting\_3` to the columns which are currently being sorted on. This is
	 * presented as a feature switch as it can increase processing time (while
	 * classes are removed and added) so for large data sets you might want to
	 * turn this off.
	 *  @type boolean
	 *  @default true
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.orderClasses
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "orderClasses": false
	 *      } );
	 *    } );
	 */
	"bSortClasses": true,


	/**
	 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
	 * used to save table display information such as pagination information,
	 * display length, filtering and sorting. As such when the end user reloads
	 * the page the display display will match what thy had previously set up.
	 *
	 * Due to the use of `localStorage` the default state saving is not supported
	 * in IE6 or 7. If state saving is required in those browsers, use
	 * `stateSaveCallback` to provide a storage solution such as cookies.
	 *  @type boolean
	 *  @default false
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.stateSave
	 *
	 *  @example
	 *    $(document).ready( function () {
	 *      $('#example').dataTable( {
	 *        "stateSave": true
	 *      } );
	 *    } );
	 */
	"bStateSave": false,


	/**
	 * This function is called when a TR element is created (and all TD child
	 * elements have been inserted), or registered if using a DOM source, allowing
	 * manipulation of the TR element (adding classes etc).
	 *  @type function
	 *  @param {node} row "TR" element for the current row
	 *  @param {array} data Raw data array for this row
	 *  @param {int} dataIndex The index of this row in the internal aoData array
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.createdRow
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "createdRow": function( row, data, dataIndex ) {
	 *          // Bold the grade for all 'A' grade browsers
	 *          if ( data[4] == "A" )
	 *          {
	 *            $('td:eq(4)', row).html( '<b>A</b>' );
	 *          }
	 *        }
	 *      } );
	 *    } );
	 */
	"fnCreatedRow": null,


	/**
	 * This function is called on every 'draw' event, and allows you to
	 * dynamically modify any aspect you want about the created DOM.
	 *  @type function
	 *  @param {object} settings DataTables settings object
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.drawCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "drawCallback": function( settings ) {
	 *          alert( 'DataTables has redrawn the table' );
	 *        }
	 *      } );
	 *    } );
	 */
	"fnDrawCallback": null,


	/**
	 * Identical to fnHeaderCallback() but for the table footer this function
	 * allows you to modify the table footer on every 'draw' event.
	 *  @type function
	 *  @param {node} foot "TR" element for the footer
	 *  @param {array} data Full table data (as derived from the original HTML)
	 *  @param {int} start Index for the current display starting point in the
	 *    display array
	 *  @param {int} end Index for the current display ending point in the
	 *    display array
	 *  @param {array int} display Index array to translate the visual position
	 *    to the full data array
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.footerCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "footerCallback": function( tfoot, data, start, end, display ) {
	 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
	 *        }
	 *      } );
	 *    } )
	 */
	"fnFooterCallback": null,


	/**
	 * When rendering large numbers in the information element for the table
	 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
	 * to have a comma separator for the 'thousands' units (e.g. 1 million is
	 * rendered as "1,000,000") to help readability for the end user. This
	 * function will override the default method DataTables uses.
	 *  @type function
	 *  @member
	 *  @param {int} toFormat number to be formatted
	 *  @returns {string} formatted string for DataTables to show the number
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.formatNumber
	 *
	 *  @example
	 *    // Format a number using a single quote for the separator (note that
	 *    // this can also be done with the language.thousands option)
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "formatNumber": function ( toFormat ) {
	 *          return toFormat.toString().replace(
	 *            /\B(?=(\d{3})+(?!\d))/g, "'"
	 *          );
	 *        };
	 *      } );
	 *    } );
	 */
	"fnFormatNumber": function ( toFormat ) {
		return toFormat.toString().replace(
			/\B(?=(\d{3})+(?!\d))/g,
			this.oLanguage.sThousands
		);
	},


	/**
	 * This function is called on every 'draw' event, and allows you to
	 * dynamically modify the header row. This can be used to calculate and
	 * display useful information about the table.
	 *  @type function
	 *  @param {node} head "TR" element for the header
	 *  @param {array} data Full table data (as derived from the original HTML)
	 *  @param {int} start Index for the current display starting point in the
	 *    display array
	 *  @param {int} end Index for the current display ending point in the
	 *    display array
	 *  @param {array int} display Index array to translate the visual position
	 *    to the full data array
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.headerCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "fheaderCallback": function( head, data, start, end, display ) {
	 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
	 *        }
	 *      } );
	 *    } )
	 */
	"fnHeaderCallback": null,


	/**
	 * The information element can be used to convey information about the current
	 * state of the table. Although the internationalisation options presented by
	 * DataTables are quite capable of dealing with most customisations, there may
	 * be times where you wish to customise the string further. This callback
	 * allows you to do exactly that.
	 *  @type function
	 *  @param {object} oSettings DataTables settings object
	 *  @param {int} start Starting position in data for the draw
	 *  @param {int} end End position in data for the draw
	 *  @param {int} max Total number of rows in the table (regardless of
	 *    filtering)
	 *  @param {int} total Total number of rows in the data set, after filtering
	 *  @param {string} pre The string that DataTables has formatted using it's
	 *    own rules
	 *  @returns {string} The string to be displayed in the information element.
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.infoCallback
	 *
	 *  @example
	 *    $('#example').dataTable( {
	 *      "infoCallback": function( settings, start, end, max, total, pre ) {
	 *        return start +" to "+ end;
	 *      }
	 *    } );
	 */
	"fnInfoCallback": null,


	/**
	 * Called when the table has been initialised. Normally DataTables will
	 * initialise sequentially and there will be no need for this function,
	 * however, this does not hold true when using external language information
	 * since that is obtained using an async XHR call.
	 *  @type function
	 *  @param {object} settings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.initComplete
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "initComplete": function(settings, json) {
	 *          alert( 'DataTables has finished its initialisation.' );
	 *        }
	 *      } );
	 *    } )
	 */
	"fnInitComplete": null,


	/**
	 * Called at the very start of each table draw and can be used to cancel the
	 * draw by returning false, any other return (including undefined) results in
	 * the full draw occurring).
	 *  @type function
	 *  @param {object} settings DataTables settings object
	 *  @returns {boolean} False will cancel the draw, anything else (including no
	 *    return) will allow it to complete.
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.preDrawCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "preDrawCallback": function( settings ) {
	 *          if ( $('#test').val() == 1 ) {
	 *            return false;
	 *          }
	 *        }
	 *      } );
	 *    } );
	 */
	"fnPreDrawCallback": null,


	/**
	 * This function allows you to 'post process' each row after it have been
	 * generated for each table draw, but before it is rendered on screen. This
	 * function might be used for setting the row class name etc.
	 *  @type function
	 *  @param {node} row "TR" element for the current row
	 *  @param {array} data Raw data array for this row
	 *  @param {int} displayIndex The display index for the current table draw
	 *  @param {int} displayIndexFull The index of the data in the full list of
	 *    rows (after filtering)
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.rowCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
	 *          // Bold the grade for all 'A' grade browsers
	 *          if ( data[4] == "A" ) {
	 *            $('td:eq(4)', row).html( '<b>A</b>' );
	 *          }
	 *        }
	 *      } );
	 *    } );
	 */
	"fnRowCallback": null,


	/**
	 * __Deprecated__ The functionality provided by this parameter has now been
	 * superseded by that provided through `ajax`, which should be used instead.
	 *
	 * This parameter allows you to override the default function which obtains
	 * the data from the server so something more suitable for your application.
	 * For example you could use POST data, or pull information from a Gears or
	 * AIR database.
	 *  @type function
	 *  @member
	 *  @param {string} source HTTP source to obtain the data from (`ajax`)
	 *  @param {array} data A key/value pair object containing the data to send
	 *    to the server
	 *  @param {function} callback to be called on completion of the data get
	 *    process that will draw the data on the page.
	 *  @param {object} settings DataTables settings object
	 *
	 *  @dtopt Callbacks
	 *  @dtopt Server-side
	 *  @name DataTable.defaults.serverData
	 *
	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
	 */
	"fnServerData": null,


	/**
	 * __Deprecated__ The functionality provided by this parameter has now been
	 * superseded by that provided through `ajax`, which should be used instead.
	 *
	 *  It is often useful to send extra data to the server when making an Ajax
	 * request - for example custom filtering information, and this callback
	 * function makes it trivial to send extra information to the server. The
	 * passed in parameter is the data set that has been constructed by
	 * DataTables, and you can add to this or modify it as you require.
	 *  @type function
	 *  @param {array} data Data array (array of objects which are name/value
	 *    pairs) that has been constructed by DataTables and will be sent to the
	 *    server. In the case of Ajax sourced data with server-side processing
	 *    this will be an empty array, for server-side processing there will be a
	 *    significant number of parameters!
	 *  @returns {undefined} Ensure that you modify the data array passed in,
	 *    as this is passed by reference.
	 *
	 *  @dtopt Callbacks
	 *  @dtopt Server-side
	 *  @name DataTable.defaults.serverParams
	 *
	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
	 */
	"fnServerParams": null,


	/**
	 * Load the table state. With this function you can define from where, and how, the
	 * state of a table is loaded. By default DataTables will load from `localStorage`
	 * but you might wish to use a server-side database or cookies.
	 *  @type function
	 *  @member
	 *  @param {object} settings DataTables settings object
	 *  @param {object} callback Callback that can be executed when done. It
	 *    should be passed the loaded state object.
	 *  @return {object} The DataTables state object to be loaded
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.stateLoadCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateSave": true,
	 *        "stateLoadCallback": function (settings, callback) {
	 *          $.ajax( {
	 *            "url": "/state_load",
	 *            "dataType": "json",
	 *            "success": function (json) {
	 *              callback( json );
	 *            }
	 *          } );
	 *        }
	 *      } );
	 *    } );
	 */
	"fnStateLoadCallback": function ( settings ) {
		try {
			return JSON.parse(
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
					'DataTables_'+settings.sInstance+'_'+location.pathname
				)
			);
		} catch (e) {
			return {};
		}
	},


	/**
	 * Callback which allows modification of the saved state prior to loading that state.
	 * This callback is called when the table is loading state from the stored data, but
	 * prior to the settings object being modified by the saved state. Note that for
	 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
	 * a plug-in.
	 *  @type function
	 *  @param {object} settings DataTables settings object
	 *  @param {object} data The state object that is to be loaded
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.stateLoadParams
	 *
	 *  @example
	 *    // Remove a saved filter, so filtering is never loaded
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateSave": true,
	 *        "stateLoadParams": function (settings, data) {
	 *          data.oSearch.sSearch = "";
	 *        }
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Disallow state loading by returning false
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateSave": true,
	 *        "stateLoadParams": function (settings, data) {
	 *          return false;
	 *        }
	 *      } );
	 *    } );
	 */
	"fnStateLoadParams": null,


	/**
	 * Callback that is called when the state has been loaded from the state saving method
	 * and the DataTables settings object has been modified as a result of the loaded state.
	 *  @type function
	 *  @param {object} settings DataTables settings object
	 *  @param {object} data The state object that was loaded
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.stateLoaded
	 *
	 *  @example
	 *    // Show an alert with the filtering value that was saved
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateSave": true,
	 *        "stateLoaded": function (settings, data) {
	 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
	 *        }
	 *      } );
	 *    } );
	 */
	"fnStateLoaded": null,


	/**
	 * Save the table state. This function allows you to define where and how the state
	 * information for the table is stored By default DataTables will use `localStorage`
	 * but you might wish to use a server-side database or cookies.
	 *  @type function
	 *  @member
	 *  @param {object} settings DataTables settings object
	 *  @param {object} data The state object to be saved
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.stateSaveCallback
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateSave": true,
	 *        "stateSaveCallback": function (settings, data) {
	 *          // Send an Ajax request to the server with the state object
	 *          $.ajax( {
	 *            "url": "/state_save",
	 *            "data": data,
	 *            "dataType": "json",
	 *            "method": "POST"
	 *            "success": function () {}
	 *          } );
	 *        }
	 *      } );
	 *    } );
	 */
	"fnStateSaveCallback": function ( settings, data ) {
		try {
			(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
				'DataTables_'+settings.sInstance+'_'+location.pathname,
				JSON.stringify( data )
			);
		} catch (e) {}
	},


	/**
	 * Callback which allows modification of the state to be saved. Called when the table
	 * has changed state a new state save is required. This method allows modification of
	 * the state saving object prior to actually doing the save, including addition or
	 * other state properties or modification. Note that for plug-in authors, you should
	 * use the `stateSaveParams` event to save parameters for a plug-in.
	 *  @type function
	 *  @param {object} settings DataTables settings object
	 *  @param {object} data The state object to be saved
	 *
	 *  @dtopt Callbacks
	 *  @name DataTable.defaults.stateSaveParams
	 *
	 *  @example
	 *    // Remove a saved filter, so filtering is never saved
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateSave": true,
	 *        "stateSaveParams": function (settings, data) {
	 *          data.oSearch.sSearch = "";
	 *        }
	 *      } );
	 *    } );
	 */
	"fnStateSaveParams": null,


	/**
	 * Duration for which the saved state information is considered valid. After this period
	 * has elapsed the state will be returned to the default.
	 * Value is given in seconds.
	 *  @type int
	 *  @default 7200 <i>(2 hours)</i>
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.stateDuration
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "stateDuration": 60*60*24; // 1 day
	 *      } );
	 *    } )
	 */
	"iStateDuration": 7200,


	/**
	 * When enabled DataTables will not make a request to the server for the first
	 * page draw - rather it will use the data already on the page (no sorting etc
	 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
	 * is used to indicate that deferred loading is required, but it is also used
	 * to tell DataTables how many records there are in the full table (allowing
	 * the information element and pagination to be displayed correctly). In the case
	 * where a filtering is applied to the table on initial load, this can be
	 * indicated by giving the parameter as an array, where the first element is
	 * the number of records available after filtering and the second element is the
	 * number of records without filtering (allowing the table information element
	 * to be shown correctly).
	 *  @type int | array
	 *  @default null
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.deferLoading
	 *
	 *  @example
	 *    // 57 records available in the table, no filtering applied
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "serverSide": true,
	 *        "ajax": "scripts/server_processing.php",
	 *        "deferLoading": 57
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "serverSide": true,
	 *        "ajax": "scripts/server_processing.php",
	 *        "deferLoading": [ 57, 100 ],
	 *        "search": {
	 *          "search": "my_filter"
	 *        }
	 *      } );
	 *    } );
	 */
	"iDeferLoading": null,


	/**
	 * Number of rows to display on a single page when using pagination. If
	 * feature enabled (`lengthChange`) then the end user will be able to override
	 * this to a custom setting using a pop-up menu.
	 *  @type int
	 *  @default 10
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.pageLength
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "pageLength": 50
	 *      } );
	 *    } )
	 */
	"iDisplayLength": 10,


	/**
	 * Define the starting point for data display when using DataTables with
	 * pagination. Note that this parameter is the number of records, rather than
	 * the page number, so if you have 10 records per page and want to start on
	 * the third page, it should be "20".
	 *  @type int
	 *  @default 0
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.displayStart
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "displayStart": 20
	 *      } );
	 *    } )
	 */
	"iDisplayStart": 0,


	/**
	 * By default DataTables allows keyboard navigation of the table (sorting, paging,
	 * and filtering) by adding a `tabindex` attribute to the required elements. This
	 * allows you to tab through the controls and press the enter key to activate them.
	 * The tabindex is default 0, meaning that the tab follows the flow of the document.
	 * You can overrule this using this parameter if you wish. Use a value of -1 to
	 * disable built-in keyboard navigation.
	 *  @type int
	 *  @default 0
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.tabIndex
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "tabIndex": 1
	 *      } );
	 *    } );
	 */
	"iTabIndex": 0,


	/**
	 * Classes that DataTables assigns to the various components and features
	 * that it adds to the HTML table. This allows classes to be configured
	 * during initialisation in addition to through the static
	 * {@link DataTable.ext.oStdClasses} object).
	 *  @namespace
	 *  @name DataTable.defaults.classes
	 */
	"oClasses": {},


	/**
	 * All strings that DataTables uses in the user interface that it creates
	 * are defined in this object, allowing you to modified them individually or
	 * completely replace them all as required.
	 *  @namespace
	 *  @name DataTable.defaults.language
	 */
	"oLanguage": {
		/**
		 * Strings that are used for WAI-ARIA labels and controls only (these are not
		 * actually visible on the page, but will be read by screenreaders, and thus
		 * must be internationalised as well).
		 *  @namespace
		 *  @name DataTable.defaults.language.aria
		 */
		"oAria": {
			/**
			 * ARIA label that is added to the table headers when the column may be
			 * sorted ascending by activing the column (click or return when focused).
			 * Note that the column header is prefixed to this string.
			 *  @type string
			 *  @default : activate to sort column ascending
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.aria.sortAscending
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "aria": {
			 *            "sortAscending": " - click/return to sort ascending"
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"sSortAscending": ": activate to sort column ascending",

			/**
			 * ARIA label that is added to the table headers when the column may be
			 * sorted descending by activing the column (click or return when focused).
			 * Note that the column header is prefixed to this string.
			 *  @type string
			 *  @default : activate to sort column ascending
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.aria.sortDescending
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "aria": {
			 *            "sortDescending": " - click/return to sort descending"
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"sSortDescending": ": activate to sort column descending"
		},

		/**
		 * Pagination string used by DataTables for the built-in pagination
		 * control types.
		 *  @namespace
		 *  @name DataTable.defaults.language.paginate
		 */
		"oPaginate": {
			/**
			 * Text to use when using the 'full_numbers' type of pagination for the
			 * button to take the user to the first page.
			 *  @type string
			 *  @default First
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.paginate.first
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "paginate": {
			 *            "first": "First page"
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"sFirst": "First",


			/**
			 * Text to use when using the 'full_numbers' type of pagination for the
			 * button to take the user to the last page.
			 *  @type string
			 *  @default Last
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.paginate.last
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "paginate": {
			 *            "last": "Last page"
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"sLast": "Last",


			/**
			 * Text to use for the 'next' pagination button (to take the user to the
			 * next page).
			 *  @type string
			 *  @default Next
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.paginate.next
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "paginate": {
			 *            "next": "Next page"
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"sNext": "Next",


			/**
			 * Text to use for the 'previous' pagination button (to take the user to
			 * the previous page).
			 *  @type string
			 *  @default Previous
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.paginate.previous
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "paginate": {
			 *            "previous": "Previous page"
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"sPrevious": "Previous"
		},

		/**
		 * This string is shown in preference to `zeroRecords` when the table is
		 * empty of data (regardless of filtering). Note that this is an optional
		 * parameter - if it is not given, the value of `zeroRecords` will be used
		 * instead (either the default or given value).
		 *  @type string
		 *  @default No data available in table
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.emptyTable
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "emptyTable": "No data available in table"
		 *        }
		 *      } );
		 *    } );
		 */
		"sEmptyTable": "No data available in table",


		/**
		 * This string gives information to the end user about the information
		 * that is current on display on the page. The following tokens can be
		 * used in the string and will be dynamically replaced as the table
		 * display updates. This tokens can be placed anywhere in the string, or
		 * removed as needed by the language requires:
		 *
		 * * `\_START\_` - Display index of the first record on the current page
		 * * `\_END\_` - Display index of the last record on the current page
		 * * `\_TOTAL\_` - Number of records in the table after filtering
		 * * `\_MAX\_` - Number of records in the table without filtering
		 * * `\_PAGE\_` - Current page number
		 * * `\_PAGES\_` - Total number of pages of data in the table
		 *
		 *  @type string
		 *  @default Showing _START_ to _END_ of _TOTAL_ entries
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.info
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "info": "Showing page _PAGE_ of _PAGES_"
		 *        }
		 *      } );
		 *    } );
		 */
		"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",


		/**
		 * Display information string for when the table is empty. Typically the
		 * format of this string should match `info`.
		 *  @type string
		 *  @default Showing 0 to 0 of 0 entries
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.infoEmpty
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "infoEmpty": "No entries to show"
		 *        }
		 *      } );
		 *    } );
		 */
		"sInfoEmpty": "Showing 0 to 0 of 0 entries",


		/**
		 * When a user filters the information in a table, this string is appended
		 * to the information (`info`) to give an idea of how strong the filtering
		 * is. The variable _MAX_ is dynamically updated.
		 *  @type string
		 *  @default (filtered from _MAX_ total entries)
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.infoFiltered
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "infoFiltered": " - filtering from _MAX_ records"
		 *        }
		 *      } );
		 *    } );
		 */
		"sInfoFiltered": "(filtered from _MAX_ total entries)",


		/**
		 * If can be useful to append extra information to the info string at times,
		 * and this variable does exactly that. This information will be appended to
		 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
		 * being used) at all times.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.infoPostFix
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "infoPostFix": "All records shown are derived from real information."
		 *        }
		 *      } );
		 *    } );
		 */
		"sInfoPostFix": "",


		/**
		 * This decimal place operator is a little different from the other
		 * language options since DataTables doesn't output floating point
		 * numbers, so it won't ever use this for display of a number. Rather,
		 * what this parameter does is modify the sort methods of the table so
		 * that numbers which are in a format which has a character other than
		 * a period (`.`) as a decimal place will be sorted numerically.
		 *
		 * Note that numbers with different decimal places cannot be shown in
		 * the same table and still be sortable, the table must be consistent.
		 * However, multiple different tables on the page can use different
		 * decimal place characters.
		 *  @type string
		 *  @default 
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.decimal
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "decimal": ","
		 *          "thousands": "."
		 *        }
		 *      } );
		 *    } );
		 */
		"sDecimal": "",


		/**
		 * DataTables has a build in number formatter (`formatNumber`) which is
		 * used to format large numbers that are used in the table information.
		 * By default a comma is used, but this can be trivially changed to any
		 * character you wish with this parameter.
		 *  @type string
		 *  @default ,
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.thousands
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "thousands": "'"
		 *        }
		 *      } );
		 *    } );
		 */
		"sThousands": ",",


		/**
		 * Detail the action that will be taken when the drop down menu for the
		 * pagination length option is changed. The '_MENU_' variable is replaced
		 * with a default select list of 10, 25, 50 and 100, and can be replaced
		 * with a custom select box if required.
		 *  @type string
		 *  @default Show _MENU_ entries
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.lengthMenu
		 *
		 *  @example
		 *    // Language change only
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "lengthMenu": "Display _MENU_ records"
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Language and options change
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "lengthMenu": 'Display <select>'+
		 *            '<option value="10">10</option>'+
		 *            '<option value="20">20</option>'+
		 *            '<option value="30">30</option>'+
		 *            '<option value="40">40</option>'+
		 *            '<option value="50">50</option>'+
		 *            '<option value="-1">All</option>'+
		 *            '</select> records'
		 *        }
		 *      } );
		 *    } );
		 */
		"sLengthMenu": "Show _MENU_ entries",


		/**
		 * When using Ajax sourced data and during the first draw when DataTables is
		 * gathering the data, this message is shown in an empty row in the table to
		 * indicate to the end user the the data is being loaded. Note that this
		 * parameter is not used when loading data by server-side processing, just
		 * Ajax sourced data with client-side processing.
		 *  @type string
		 *  @default Loading...
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.loadingRecords
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "loadingRecords": "Please wait - loading..."
		 *        }
		 *      } );
		 *    } );
		 */
		"sLoadingRecords": "Loading...",


		/**
		 * Text which is displayed when the table is processing a user action
		 * (usually a sort command or similar).
		 *  @type string
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.processing
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "processing": "DataTables is currently busy"
		 *        }
		 *      } );
		 *    } );
		 */
		"sProcessing": "",


		/**
		 * Details the actions that will be taken when the user types into the
		 * filtering input text box. The variable "_INPUT_", if used in the string,
		 * is replaced with the HTML text box for the filtering input allowing
		 * control over where it appears in the string. If "_INPUT_" is not given
		 * then the input box is appended to the string automatically.
		 *  @type string
		 *  @default Search:
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.search
		 *
		 *  @example
		 *    // Input text box will be appended at the end automatically
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "search": "Filter records:"
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Specify where the filter should appear
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "search": "Apply filter _INPUT_ to table"
		 *        }
		 *      } );
		 *    } );
		 */
		"sSearch": "Search:",


		/**
		 * Assign a `placeholder` attribute to the search `input` element
		 *  @type string
		 *  @default 
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.searchPlaceholder
		 */
		"sSearchPlaceholder": "",


		/**
		 * All of the language information can be stored in a file on the
		 * server-side, which DataTables will look up if this parameter is passed.
		 * It must store the URL of the language file, which is in a JSON format,
		 * and the object has the same properties as the oLanguage object in the
		 * initialiser object (i.e. the above parameters). Please refer to one of
		 * the example language files to see how this works in action.
		 *  @type string
		 *  @default <i>Empty string - i.e. disabled</i>
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.url
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
		 *        }
		 *      } );
		 *    } );
		 */
		"sUrl": "",


		/**
		 * Text shown inside the table records when the is no information to be
		 * displayed after filtering. `emptyTable` is shown when there is simply no
		 * information in the table at all (regardless of filtering).
		 *  @type string
		 *  @default No matching records found
		 *
		 *  @dtopt Language
		 *  @name DataTable.defaults.language.zeroRecords
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "language": {
		 *          "zeroRecords": "No records to display"
		 *        }
		 *      } );
		 *    } );
		 */
		"sZeroRecords": "No matching records found"
	},


	/**
	 * This parameter allows you to have define the global filtering state at
	 * initialisation time. As an object the `search` parameter must be
	 * defined, but all other parameters are optional. When `regex` is true,
	 * the search string will be treated as a regular expression, when false
	 * (default) it will be treated as a straight string. When `smart`
	 * DataTables will use it's smart filtering methods (to word match at
	 * any point in the data), when false this will not be done.
	 *  @namespace
	 *  @extends DataTable.models.oSearch
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.search
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "search": {"search": "Initial search"}
	 *      } );
	 *    } )
	 */
	"oSearch": $.extend( {}, DataTable.models.oSearch ),


	/**
	 * __Deprecated__ The functionality provided by this parameter has now been
	 * superseded by that provided through `ajax`, which should be used instead.
	 *
	 * By default DataTables will look for the property `data` (or `aaData` for
	 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
	 * source or for server-side processing - this parameter allows that
	 * property to be changed. You can use Javascript dotted object notation to
	 * get a data source for multiple levels of nesting.
	 *  @type string
	 *  @default data
	 *
	 *  @dtopt Options
	 *  @dtopt Server-side
	 *  @name DataTable.defaults.ajaxDataProp
	 *
	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
	 */
	"sAjaxDataProp": "data",


	/**
	 * __Deprecated__ The functionality provided by this parameter has now been
	 * superseded by that provided through `ajax`, which should be used instead.
	 *
	 * You can instruct DataTables to load data from an external
	 * source using this parameter (use aData if you want to pass data in you
	 * already have). Simply provide a url a JSON object can be obtained from.
	 *  @type string
	 *  @default null
	 *
	 *  @dtopt Options
	 *  @dtopt Server-side
	 *  @name DataTable.defaults.ajaxSource
	 *
	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
	 */
	"sAjaxSource": null,


	/**
	 * This initialisation variable allows you to specify exactly where in the
	 * DOM you want DataTables to inject the various controls it adds to the page
	 * (for example you might want the pagination controls at the top of the
	 * table). DIV elements (with or without a custom class) can also be added to
	 * aid styling. The follow syntax is used:
	 *   <ul>
	 *     <li>The following options are allowed:
	 *       <ul>
	 *         <li>'l' - Length changing</li>
	 *         <li>'f' - Filtering input</li>
	 *         <li>'t' - The table!</li>
	 *         <li>'i' - Information</li>
	 *         <li>'p' - Pagination</li>
	 *         <li>'r' - pRocessing</li>
	 *       </ul>
	 *     </li>
	 *     <li>The following constants are allowed:
	 *       <ul>
	 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
	 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
	 *       </ul>
	 *     </li>
	 *     <li>The following syntax is expected:
	 *       <ul>
	 *         <li>'&lt;' and '&gt;' - div elements</li>
	 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
	 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
	 *       </ul>
	 *     </li>
	 *     <li>Examples:
	 *       <ul>
	 *         <li>'&lt;"wrapper"flipt&gt;'</li>
	 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
	 *       </ul>
	 *     </li>
	 *   </ul>
	 *  @type string
	 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
	 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.dom
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
	 *      } );
	 *    } );
	 */
	"sDom": "lfrtip",


	/**
	 * Search delay option. This will throttle full table searches that use the
	 * DataTables provided search input element (it does not effect calls to
	 * `dt-api search()`, providing a delay before the search is made.
	 *  @type integer
	 *  @default 0
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.searchDelay
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "searchDelay": 200
	 *      } );
	 *    } )
	 */
	"searchDelay": null,


	/**
	 * DataTables features six different built-in options for the buttons to
	 * display for pagination control:
	 *
	 * * `numbers` - Page number buttons only
	 * * `simple` - 'Previous' and 'Next' buttons only
	 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
	 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
	 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
	 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
	 *  
	 * Further methods can be added using {@link DataTable.ext.oPagination}.
	 *  @type string
	 *  @default simple_numbers
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.pagingType
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "pagingType": "full_numbers"
	 *      } );
	 *    } )
	 */
	"sPaginationType": "simple_numbers",


	/**
	 * Enable horizontal scrolling. When a table is too wide to fit into a
	 * certain layout, or you have a large number of columns in the table, you
	 * can enable x-scrolling to show the table in a viewport, which can be
	 * scrolled. This property can be `true` which will allow the table to
	 * scroll horizontally when needed, or any CSS unit, or a number (in which
	 * case it will be treated as a pixel measurement). Setting as simply `true`
	 * is recommended.
	 *  @type boolean|string
	 *  @default <i>blank string - i.e. disabled</i>
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.scrollX
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "scrollX": true,
	 *        "scrollCollapse": true
	 *      } );
	 *    } );
	 */
	"sScrollX": "",


	/**
	 * This property can be used to force a DataTable to use more width than it
	 * might otherwise do when x-scrolling is enabled. For example if you have a
	 * table which requires to be well spaced, this parameter is useful for
	 * "over-sizing" the table, and thus forcing scrolling. This property can by
	 * any CSS unit, or a number (in which case it will be treated as a pixel
	 * measurement).
	 *  @type string
	 *  @default <i>blank string - i.e. disabled</i>
	 *
	 *  @dtopt Options
	 *  @name DataTable.defaults.scrollXInner
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "scrollX": "100%",
	 *        "scrollXInner": "110%"
	 *      } );
	 *    } );
	 */
	"sScrollXInner": "",


	/**
	 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
	 * to the given height, and enable scrolling for any data which overflows the
	 * current viewport. This can be used as an alternative to paging to display
	 * a lot of data in a small area (although paging and scrolling can both be
	 * enabled at the same time). This property can be any CSS unit, or a number
	 * (in which case it will be treated as a pixel measurement).
	 *  @type string
	 *  @default <i>blank string - i.e. disabled</i>
	 *
	 *  @dtopt Features
	 *  @name DataTable.defaults.scrollY
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "scrollY": "200px",
	 *        "paginate": false
	 *      } );
	 *    } );
	 */
	"sScrollY": "",


	/**
	 * __Deprecated__ The functionality provided by this parameter has now been
	 * superseded by that provided through `ajax`, which should be used instead.
	 *
	 * Set the HTTP method that is used to make the Ajax call for server-side
	 * processing or Ajax sourced data.
	 *  @type string
	 *  @default GET
	 *
	 *  @dtopt Options
	 *  @dtopt Server-side
	 *  @name DataTable.defaults.serverMethod
	 *
	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
	 */
	"sServerMethod": "GET",


	/**
	 * DataTables makes use of renderers when displaying HTML elements for
	 * a table. These renderers can be added or modified by plug-ins to
	 * generate suitable mark-up for a site. For example the Bootstrap
	 * integration plug-in for DataTables uses a paging button renderer to
	 * display pagination buttons in the mark-up required by Bootstrap.
	 *
	 * For further information about the renderers available see
	 * DataTable.ext.renderer
	 *  @type string|object
	 *  @default null
	 *
	 *  @name DataTable.defaults.renderer
	 *
	 */
	"renderer": null,


	/**
	 * Set the data property name that DataTables should use to get a row's id
	 * to set as the `id` property in the node.
	 *  @type string
	 *  @default DT_RowId
	 *
	 *  @name DataTable.defaults.rowId
	 */
	"rowId": "DT_RowId"
};

_fnHungarianMap( DataTable.defaults );



/*
 * Developer note - See note in model.defaults.js about the use of Hungarian
 * notation and camel case.
 */

/**
 * Column options that can be given to DataTables at initialisation time.
 *  @namespace
 */
DataTable.defaults.column = {
	/**
	 * Define which column(s) an order will occur on for this column. This
	 * allows a column's ordering to take multiple columns into account when
	 * doing a sort or use the data from a different column. For example first
	 * name / last name columns make sense to do a multi-column sort over the
	 * two columns.
	 *  @type array|int
	 *  @default null <i>Takes the value of the column index automatically</i>
	 *
	 *  @name DataTable.defaults.column.orderData
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
	 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
	 *          { "orderData": 2, "targets": [ 2 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "orderData": [ 0, 1 ] },
	 *          { "orderData": [ 1, 0 ] },
	 *          { "orderData": 2 },
	 *          null,
	 *          null
	 *        ]
	 *      } );
	 *    } );
	 */
	"aDataSort": null,
	"iDataSort": -1,


	/**
	 * You can control the default ordering direction, and even alter the
	 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
	 * using this parameter.
	 *  @type array
	 *  @default [ 'asc', 'desc' ]
	 *
	 *  @name DataTable.defaults.column.orderSequence
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
	 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
	 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          null,
	 *          { "orderSequence": [ "asc" ] },
	 *          { "orderSequence": [ "desc", "asc", "asc" ] },
	 *          { "orderSequence": [ "desc" ] },
	 *          null
	 *        ]
	 *      } );
	 *    } );
	 */
	"asSorting": [ 'asc', 'desc' ],


	/**
	 * Enable or disable filtering on the data in this column.
	 *  @type boolean
	 *  @default true
	 *
	 *  @name DataTable.defaults.column.searchable
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "searchable": false, "targets": [ 0 ] }
	 *        ] } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "searchable": false },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ] } );
	 *    } );
	 */
	"bSearchable": true,


	/**
	 * Enable or disable ordering on this column.
	 *  @type boolean
	 *  @default true
	 *
	 *  @name DataTable.defaults.column.orderable
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "orderable": false, "targets": [ 0 ] }
	 *        ] } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "orderable": false },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ] } );
	 *    } );
	 */
	"bSortable": true,


	/**
	 * Enable or disable the display of this column.
	 *  @type boolean
	 *  @default true
	 *
	 *  @name DataTable.defaults.column.visible
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "visible": false, "targets": [ 0 ] }
	 *        ] } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "visible": false },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ] } );
	 *    } );
	 */
	"bVisible": true,


	/**
	 * Developer definable function that is called whenever a cell is created (Ajax source,
	 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	 * allowing you to modify the DOM element (add background colour for example) when the
	 * element is available.
	 *  @type function
	 *  @param {element} td The TD node that has been created
	 *  @param {*} cellData The Data for the cell
	 *  @param {array|object} rowData The data for the whole row
	 *  @param {int} row The row index for the aoData data store
	 *  @param {int} col The column index for aoColumns
	 *
	 *  @name DataTable.defaults.column.createdCell
	 *  @dtopt Columns
	 *
	 *  @example
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [3],
	 *          "createdCell": function (td, cellData, rowData, row, col) {
	 *            if ( cellData == "1.7" ) {
	 *              $(td).css('color', 'blue')
	 *            }
	 *          }
	 *        } ]
	 *      });
	 *    } );
	 */
	"fnCreatedCell": null,


	/**
	 * This parameter has been replaced by `data` in DataTables to ensure naming
	 * consistency. `dataProp` can still be used, as there is backwards
	 * compatibility in DataTables for this option, but it is strongly
	 * recommended that you use `data` in preference to `dataProp`.
	 *  @name DataTable.defaults.column.dataProp
	 */


	/**
	 * This property can be used to read data from any data source property,
	 * including deeply nested objects / properties. `data` can be given in a
	 * number of different ways which effect its behaviour:
	 *
	 * * `integer` - treated as an array index for the data source. This is the
	 *   default that DataTables uses (incrementally increased for each column).
	 * * `string` - read an object property from the data source. There are
	 *   three 'special' options that can be used in the string to alter how
	 *   DataTables reads the data from the source object:
	 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	 *      Javascript to read from nested objects, so to can the options
	 *      specified in `data`. For example: `browser.version` or
	 *      `browser.name`. If your object parameter name contains a period, use
	 *      `\\` to escape it - i.e. `first\\.name`.
	 *    * `[]` - Array notation. DataTables can automatically combine data
	 *      from and array source, joining the data with the characters provided
	 *      between the two brackets. For example: `name[, ]` would provide a
	 *      comma-space separated list from the source array. If no characters
	 *      are provided between the brackets, the original array source is
	 *      returned.
	 *    * `()` - Function notation. Adding `()` to the end of a parameter will
	 *      execute a function of the name given. For example: `browser()` for a
	 *      simple function on the data source, `browser.version()` for a
	 *      function in a nested property or even `browser().version` to get an
	 *      object property if the function called returns an object. Note that
	 *      function notation is recommended for use in `render` rather than
	 *      `data` as it is much simpler to use as a renderer.
	 * * `null` - use the original data source for the row rather than plucking
	 *   data directly from it. This action has effects on two other
	 *   initialisation options:
	 *    * `defaultContent` - When null is given as the `data` option and
	 *      `defaultContent` is specified for the column, the value defined by
	 *      `defaultContent` will be used for the cell.
	 *    * `render` - When null is used for the `data` option and the `render`
	 *      option is specified for the column, the whole data source for the
	 *      row is used for the renderer.
	 * * `function` - the function given will be executed whenever DataTables
	 *   needs to set or get the data for a cell in the column. The function
	 *   takes three parameters:
	 *    * Parameters:
	 *      * `{array|object}` The data source for the row
	 *      * `{string}` The type call data requested - this will be 'set' when
	 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
	 *        when gathering data. Note that when `undefined` is given for the
	 *        type DataTables expects to get the raw data for the object back<
	 *      * `{*}` Data to set when the second parameter is 'set'.
	 *    * Return:
	 *      * The return value from the function is not required when 'set' is
	 *        the type of call, but otherwise the return is what will be used
	 *        for the data requested.
	 *
	 * Note that `data` is a getter and setter option. If you just require
	 * formatting of data for output, you will likely want to use `render` which
	 * is simply a getter and thus simpler to use.
	 *
	 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
	 * name change reflects the flexibility of this property and is consistent
	 * with the naming of mRender. If 'mDataProp' is given, then it will still
	 * be used by DataTables, as it automatically maps the old name to the new
	 * if required.
	 *
	 *  @type string|int|function|null
	 *  @default null <i>Use automatically calculated column index</i>
	 *
	 *  @name DataTable.defaults.column.data
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Read table data from objects
	 *    // JSON structure for each row:
	 *    //   {
	 *    //      "engine": {value},
	 *    //      "browser": {value},
	 *    //      "platform": {value},
	 *    //      "version": {value},
	 *    //      "grade": {value}
	 *    //   }
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "ajaxSource": "sources/objects.txt",
	 *        "columns": [
	 *          { "data": "engine" },
	 *          { "data": "browser" },
	 *          { "data": "platform" },
	 *          { "data": "version" },
	 *          { "data": "grade" }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Read information from deeply nested objects
	 *    // JSON structure for each row:
	 *    //   {
	 *    //      "engine": {value},
	 *    //      "browser": {value},
	 *    //      "platform": {
	 *    //         "inner": {value}
	 *    //      },
	 *    //      "details": [
	 *    //         {value}, {value}
	 *    //      ]
	 *    //   }
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "ajaxSource": "sources/deep.txt",
	 *        "columns": [
	 *          { "data": "engine" },
	 *          { "data": "browser" },
	 *          { "data": "platform.inner" },
	 *          { "data": "details.0" },
	 *          { "data": "details.1" }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `data` as a function to provide different information for
	 *    // sorting, filtering and display. In this case, currency (price)
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "data": function ( source, type, val ) {
	 *            if (type === 'set') {
	 *              source.price = val;
	 *              // Store the computed display and filter values for efficiency
	 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
	 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
	 *              return;
	 *            }
	 *            else if (type === 'display') {
	 *              return source.price_display;
	 *            }
	 *            else if (type === 'filter') {
	 *              return source.price_filter;
	 *            }
	 *            // 'sort', 'type' and undefined all just use the integer
	 *            return source.price;
	 *          }
	 *        } ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using default content
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "data": null,
	 *          "defaultContent": "Click to edit"
	 *        } ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using array notation - outputting a list from an array
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "data": "name[, ]"
	 *        } ]
	 *      } );
	 *    } );
	 *
	 */
	"mData": null,


	/**
	 * This property is the rendering partner to `data` and it is suggested that
	 * when you want to manipulate data for display (including filtering,
	 * sorting etc) without altering the underlying data for the table, use this
	 * property. `render` can be considered to be the the read only companion to
	 * `data` which is read / write (then as such more complex). Like `data`
	 * this option can be given in a number of different ways to effect its
	 * behaviour:
	 *
	 * * `integer` - treated as an array index for the data source. This is the
	 *   default that DataTables uses (incrementally increased for each column).
	 * * `string` - read an object property from the data source. There are
	 *   three 'special' options that can be used in the string to alter how
	 *   DataTables reads the data from the source object:
	 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	 *      Javascript to read from nested objects, so to can the options
	 *      specified in `data`. For example: `browser.version` or
	 *      `browser.name`. If your object parameter name contains a period, use
	 *      `\\` to escape it - i.e. `first\\.name`.
	 *    * `[]` - Array notation. DataTables can automatically combine data
	 *      from and array source, joining the data with the characters provided
	 *      between the two brackets. For example: `name[, ]` would provide a
	 *      comma-space separated list from the source array. If no characters
	 *      are provided between the brackets, the original array source is
	 *      returned.
	 *    * `()` - Function notation. Adding `()` to the end of a parameter will
	 *      execute a function of the name given. For example: `browser()` for a
	 *      simple function on the data source, `browser.version()` for a
	 *      function in a nested property or even `browser().version` to get an
	 *      object property if the function called returns an object.
	 * * `object` - use different data for the different data types requested by
	 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
	 *   of the object is the data type the property refers to and the value can
	 *   defined using an integer, string or function using the same rules as
	 *   `render` normally does. Note that an `_` option _must_ be specified.
	 *   This is the default value to use if you haven't specified a value for
	 *   the data type requested by DataTables.
	 * * `function` - the function given will be executed whenever DataTables
	 *   needs to set or get the data for a cell in the column. The function
	 *   takes three parameters:
	 *    * Parameters:
	 *      * {array|object} The data source for the row (based on `data`)
	 *      * {string} The type call data requested - this will be 'filter',
	 *        'display', 'type' or 'sort'.
	 *      * {array|object} The full data source for the row (not based on
	 *        `data`)
	 *    * Return:
	 *      * The return value from the function is what will be used for the
	 *        data requested.
	 *
	 *  @type string|int|function|object|null
	 *  @default null Use the data source value.
	 *
	 *  @name DataTable.defaults.column.render
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Create a comma separated list from an array of objects
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "ajaxSource": "sources/deep.txt",
	 *        "columns": [
	 *          { "data": "engine" },
	 *          { "data": "browser" },
	 *          {
	 *            "data": "platform",
	 *            "render": "[, ].name"
	 *          }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Execute a function to obtain data
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "data": null, // Use the full data source object for the renderer's source
	 *          "render": "browserName()"
	 *        } ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // As an object, extracting different data for the different types
	 *    // This would be used with a data source such as:
	 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
	 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
	 *    // (which has both forms) is used for filtering for if a user inputs either format, while
	 *    // the formatted phone number is the one that is shown in the table.
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "data": null, // Use the full data source object for the renderer's source
	 *          "render": {
	 *            "_": "phone",
	 *            "filter": "phone_filter",
	 *            "display": "phone_display"
	 *          }
	 *        } ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Use as a function to create a link from the data source
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "data": "download_link",
	 *          "render": function ( data, type, full ) {
	 *            return '<a href="'+data+'">Download</a>';
	 *          }
	 *        } ]
	 *      } );
	 *    } );
	 */
	"mRender": null,


	/**
	 * Change the cell type created for the column - either TD cells or TH cells. This
	 * can be useful as TH cells have semantic meaning in the table body, allowing them
	 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
	 *  @type string
	 *  @default td
	 *
	 *  @name DataTable.defaults.column.cellType
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Make the first column use TH cells
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [ {
	 *          "targets": [ 0 ],
	 *          "cellType": "th"
	 *        } ]
	 *      } );
	 *    } );
	 */
	"sCellType": "td",


	/**
	 * Class to give to each cell in this column.
	 *  @type string
	 *  @default <i>Empty string</i>
	 *
	 *  @name DataTable.defaults.column.class
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "class": "my_class", "targets": [ 0 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "class": "my_class" },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ]
	 *      } );
	 *    } );
	 */
	"sClass": "",

	/**
	 * When DataTables calculates the column widths to assign to each column,
	 * it finds the longest string in each column and then constructs a
	 * temporary table and reads the widths from that. The problem with this
	 * is that "mmm" is much wider then "iiii", but the latter is a longer
	 * string - thus the calculation can go wrong (doing it properly and putting
	 * it into an DOM object and measuring that is horribly(!) slow). Thus as
	 * a "work around" we provide this option. It will append its value to the
	 * text that is found to be the longest string for the column - i.e. padding.
	 * Generally you shouldn't need this!
	 *  @type string
	 *  @default <i>Empty string<i>
	 *
	 *  @name DataTable.defaults.column.contentPadding
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          null,
	 *          null,
	 *          null,
	 *          {
	 *            "contentPadding": "mmm"
	 *          }
	 *        ]
	 *      } );
	 *    } );
	 */
	"sContentPadding": "",


	/**
	 * Allows a default value to be given for a column's data, and will be used
	 * whenever a null data source is encountered (this can be because `data`
	 * is set to null, or because the data source itself is null).
	 *  @type string
	 *  @default null
	 *
	 *  @name DataTable.defaults.column.defaultContent
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          {
	 *            "data": null,
	 *            "defaultContent": "Edit",
	 *            "targets": [ -1 ]
	 *          }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          null,
	 *          null,
	 *          null,
	 *          {
	 *            "data": null,
	 *            "defaultContent": "Edit"
	 *          }
	 *        ]
	 *      } );
	 *    } );
	 */
	"sDefaultContent": null,


	/**
	 * This parameter is only used in DataTables' server-side processing. It can
	 * be exceptionally useful to know what columns are being displayed on the
	 * client side, and to map these to database fields. When defined, the names
	 * also allow DataTables to reorder information from the server if it comes
	 * back in an unexpected order (i.e. if you switch your columns around on the
	 * client-side, your server-side code does not also need updating).
	 *  @type string
	 *  @default <i>Empty string</i>
	 *
	 *  @name DataTable.defaults.column.name
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "name": "engine", "targets": [ 0 ] },
	 *          { "name": "browser", "targets": [ 1 ] },
	 *          { "name": "platform", "targets": [ 2 ] },
	 *          { "name": "version", "targets": [ 3 ] },
	 *          { "name": "grade", "targets": [ 4 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "name": "engine" },
	 *          { "name": "browser" },
	 *          { "name": "platform" },
	 *          { "name": "version" },
	 *          { "name": "grade" }
	 *        ]
	 *      } );
	 *    } );
	 */
	"sName": "",


	/**
	 * Defines a data source type for the ordering which can be used to read
	 * real-time information from the table (updating the internally cached
	 * version) prior to ordering. This allows ordering to occur on user
	 * editable elements such as form inputs.
	 *  @type string
	 *  @default std
	 *
	 *  @name DataTable.defaults.column.orderDataType
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
	 *          { "type": "numeric", "targets": [ 3 ] },
	 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
	 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          null,
	 *          null,
	 *          { "orderDataType": "dom-text" },
	 *          { "orderDataType": "dom-text", "type": "numeric" },
	 *          { "orderDataType": "dom-select" },
	 *          { "orderDataType": "dom-checkbox" }
	 *        ]
	 *      } );
	 *    } );
	 */
	"sSortDataType": "std",


	/**
	 * The title of this column.
	 *  @type string
	 *  @default null <i>Derived from the 'TH' value for this column in the
	 *    original HTML table.</i>
	 *
	 *  @name DataTable.defaults.column.title
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "title": "My column title", "targets": [ 0 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "title": "My column title" },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ]
	 *      } );
	 *    } );
	 */
	"sTitle": null,


	/**
	 * The type allows you to specify how the data for this column will be
	 * ordered. Four types (string, numeric, date and html (which will strip
	 * HTML tags before ordering)) are currently available. Note that only date
	 * formats understood by Javascript's Date() object will be accepted as type
	 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
	 * 'numeric', 'date' or 'html' (by default). Further types can be adding
	 * through plug-ins.
	 *  @type string
	 *  @default null <i>Auto-detected from raw data</i>
	 *
	 *  @name DataTable.defaults.column.type
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "type": "html", "targets": [ 0 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "type": "html" },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ]
	 *      } );
	 *    } );
	 */
	"sType": null,


	/**
	 * Defining the width of the column, this parameter may take any CSS value
	 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
	 * been given a specific width through this interface ensuring that the table
	 * remains readable.
	 *  @type string
	 *  @default null <i>Automatic</i>
	 *
	 *  @name DataTable.defaults.column.width
	 *  @dtopt Columns
	 *
	 *  @example
	 *    // Using `columnDefs`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columnDefs": [
	 *          { "width": "20%", "targets": [ 0 ] }
	 *        ]
	 *      } );
	 *    } );
	 *
	 *  @example
	 *    // Using `columns`
	 *    $(document).ready( function() {
	 *      $('#example').dataTable( {
	 *        "columns": [
	 *          { "width": "20%" },
	 *          null,
	 *          null,
	 *          null,
	 *          null
	 *        ]
	 *      } );
	 *    } );
	 */
	"sWidth": null
};

_fnHungarianMap( DataTable.defaults.column );



/**
 * DataTables settings object - this holds all the information needed for a
 * given table, including configuration, data and current application of the
 * table options. DataTables does not have a single instance for each DataTable
 * with the settings attached to that instance, but rather instances of the
 * DataTable "class" are created on-the-fly as needed (typically by a
 * $().dataTable() call) and the settings object is then applied to that
 * instance.
 *
 * Note that this object is related to {@link DataTable.defaults} but this
 * one is the internal data store for DataTables's cache of columns. It should
 * NOT be manipulated outside of DataTables. Any configuration should be done
 * through the initialisation options.
 *  @namespace
 *  @todo Really should attach the settings object to individual instances so we
 *    don't need to create new instances on each $().dataTable() call (if the
 *    table already exists). It would also save passing oSettings around and
 *    into every single function. However, this is a very significant
 *    architecture change for DataTables and will almost certainly break
 *    backwards compatibility with older installations. This is something that
 *    will be done in 2.0.
 */
DataTable.models.oSettings = {
	/**
	 * Primary features of DataTables and their enablement state.
	 *  @namespace
	 */
	"oFeatures": {

		/**
		 * Flag to say if DataTables should automatically try to calculate the
		 * optimum table and columns widths (true) or not (false).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bAutoWidth": null,

		/**
		 * Delay the creation of TR and TD elements until they are actually
		 * needed by a driven page draw. This can give a significant speed
		 * increase for Ajax source and Javascript source data, but makes no
		 * difference at all for DOM and server-side processing tables.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bDeferRender": null,

		/**
		 * Enable filtering on the table or not. Note that if this is disabled
		 * then there is no filtering at all on the table, including fnFilter.
		 * To just remove the filtering input use sDom and remove the 'f' option.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bFilter": null,

		/**
		 * Table information element (the 'Showing x of y records' div) enable
		 * flag.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bInfo": null,

		/**
		 * Present a user control allowing the end user to change the page size
		 * when pagination is enabled.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bLengthChange": null,

		/**
		 * Pagination enabled or not. Note that if this is disabled then length
		 * changing must also be disabled.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bPaginate": null,

		/**
		 * Processing indicator enable flag whenever DataTables is enacting a
		 * user request - typically an Ajax request for server-side processing.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bProcessing": null,

		/**
		 * Server-side processing enabled flag - when enabled DataTables will
		 * get all data from the server for every draw - there is no filtering,
		 * sorting or paging done on the client-side.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bServerSide": null,

		/**
		 * Sorting enablement flag.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSort": null,

		/**
		 * Multi-column sorting
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSortMulti": null,

		/**
		 * Apply a class to the columns which are being sorted to provide a
		 * visual highlight or not. This can slow things down when enabled since
		 * there is a lot of DOM interaction.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSortClasses": null,

		/**
		 * State saving enablement flag.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bStateSave": null
	},


	/**
	 * Scrolling settings for a table.
	 *  @namespace
	 */
	"oScroll": {
		/**
		 * When the table is shorter in height than sScrollY, collapse the
		 * table container down to the height of the table (when true).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bCollapse": null,

		/**
		 * Width of the scrollbar for the web-browser's platform. Calculated
		 * during table initialisation.
		 *  @type int
		 *  @default 0
		 */
		"iBarWidth": 0,

		/**
		 * Viewport width for horizontal scrolling. Horizontal scrolling is
		 * disabled if an empty string.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sX": null,

		/**
		 * Width to expand the table to when using x-scrolling. Typically you
		 * should not need to use this.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @deprecated
		 */
		"sXInner": null,

		/**
		 * Viewport height for vertical scrolling. Vertical scrolling is disabled
		 * if an empty string.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sY": null
	},

	/**
	 * Language information for the table.
	 *  @namespace
	 *  @extends DataTable.defaults.oLanguage
	 */
	"oLanguage": {
		/**
		 * Information callback function. See
		 * {@link DataTable.defaults.fnInfoCallback}
		 *  @type function
		 *  @default null
		 */
		"fnInfoCallback": null
	},

	/**
	 * Browser support parameters
	 *  @namespace
	 */
	"oBrowser": {
		/**
		 * Indicate if the browser incorrectly calculates width:100% inside a
		 * scrolling element (IE6/7)
		 *  @type boolean
		 *  @default false
		 */
		"bScrollOversize": false,

		/**
		 * Determine if the vertical scrollbar is on the right or left of the
		 * scrolling container - needed for rtl language layout, although not
		 * all browsers move the scrollbar (Safari).
		 *  @type boolean
		 *  @default false
		 */
		"bScrollbarLeft": false,

		/**
		 * Flag for if `getBoundingClientRect` is fully supported or not
		 *  @type boolean
		 *  @default false
		 */
		"bBounding": false,

		/**
		 * Browser scrollbar width
		 *  @type integer
		 *  @default 0
		 */
		"barWidth": 0
	},


	"ajax": null,


	/**
	 * Array referencing the nodes which are used for the features. The
	 * parameters of this object match what is allowed by sDom - i.e.
	 *   <ul>
	 *     <li>'l' - Length changing</li>
	 *     <li>'f' - Filtering input</li>
	 *     <li>'t' - The table!</li>
	 *     <li>'i' - Information</li>
	 *     <li>'p' - Pagination</li>
	 *     <li>'r' - pRocessing</li>
	 *   </ul>
	 *  @type array
	 *  @default []
	 */
	"aanFeatures": [],

	/**
	 * Store data information - see {@link DataTable.models.oRow} for detailed
	 * information.
	 *  @type array
	 *  @default []
	 */
	"aoData": [],

	/**
	 * Array of indexes which are in the current display (after filtering etc)
	 *  @type array
	 *  @default []
	 */
	"aiDisplay": [],

	/**
	 * Array of indexes for display - no filtering
	 *  @type array
	 *  @default []
	 */
	"aiDisplayMaster": [],

	/**
	 * Map of row ids to data indexes
	 *  @type object
	 *  @default {}
	 */
	"aIds": {},

	/**
	 * Store information about each column that is in use
	 *  @type array
	 *  @default []
	 */
	"aoColumns": [],

	/**
	 * Store information about the table's header
	 *  @type array
	 *  @default []
	 */
	"aoHeader": [],

	/**
	 * Store information about the table's footer
	 *  @type array
	 *  @default []
	 */
	"aoFooter": [],

	/**
	 * Store the applied global search information in case we want to force a
	 * research or compare the old search to a new one.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @namespace
	 *  @extends DataTable.models.oSearch
	 */
	"oPreviousSearch": {},

	/**
	 * Store the applied search for each column - see
	 * {@link DataTable.models.oSearch} for the format that is used for the
	 * filtering information for each column.
	 *  @type array
	 *  @default []
	 */
	"aoPreSearchCols": [],

	/**
	 * Sorting that is applied to the table. Note that the inner arrays are
	 * used in the following manner:
	 * <ul>
	 *   <li>Index 0 - column number</li>
	 *   <li>Index 1 - current sorting direction</li>
	 * </ul>
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type array
	 *  @todo These inner arrays should really be objects
	 */
	"aaSorting": null,

	/**
	 * Sorting that is always applied to the table (i.e. prefixed in front of
	 * aaSorting).
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type array
	 *  @default []
	 */
	"aaSortingFixed": [],

	/**
	 * Classes to use for the striping of a table.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type array
	 *  @default []
	 */
	"asStripeClasses": null,

	/**
	 * If restoring a table - we should restore its striping classes as well
	 *  @type array
	 *  @default []
	 */
	"asDestroyStripes": [],

	/**
	 * If restoring a table - we should restore its width
	 *  @type int
	 *  @default 0
	 */
	"sDestroyWidth": 0,

	/**
	 * Callback functions array for every time a row is inserted (i.e. on a draw).
	 *  @type array
	 *  @default []
	 */
	"aoRowCallback": [],

	/**
	 * Callback functions for the header on each draw.
	 *  @type array
	 *  @default []
	 */
	"aoHeaderCallback": [],

	/**
	 * Callback function for the footer on each draw.
	 *  @type array
	 *  @default []
	 */
	"aoFooterCallback": [],

	/**
	 * Array of callback functions for draw callback functions
	 *  @type array
	 *  @default []
	 */
	"aoDrawCallback": [],

	/**
	 * Array of callback functions for row created function
	 *  @type array
	 *  @default []
	 */
	"aoRowCreatedCallback": [],

	/**
	 * Callback functions for just before the table is redrawn. A return of
	 * false will be used to cancel the draw.
	 *  @type array
	 *  @default []
	 */
	"aoPreDrawCallback": [],

	/**
	 * Callback functions for when the table has been initialised.
	 *  @type array
	 *  @default []
	 */
	"aoInitComplete": [],


	/**
	 * Callbacks for modifying the settings to be stored for state saving, prior to
	 * saving state.
	 *  @type array
	 *  @default []
	 */
	"aoStateSaveParams": [],

	/**
	 * Callbacks for modifying the settings that have been stored for state saving
	 * prior to using the stored values to restore the state.
	 *  @type array
	 *  @default []
	 */
	"aoStateLoadParams": [],

	/**
	 * Callbacks for operating on the settings object once the saved state has been
	 * loaded
	 *  @type array
	 *  @default []
	 */
	"aoStateLoaded": [],

	/**
	 * Cache the table ID for quick access
	 *  @type string
	 *  @default <i>Empty string</i>
	 */
	"sTableId": "",

	/**
	 * The TABLE node for the main table
	 *  @type node
	 *  @default null
	 */
	"nTable": null,

	/**
	 * Permanent ref to the thead element
	 *  @type node
	 *  @default null
	 */
	"nTHead": null,

	/**
	 * Permanent ref to the tfoot element - if it exists
	 *  @type node
	 *  @default null
	 */
	"nTFoot": null,

	/**
	 * Permanent ref to the tbody element
	 *  @type node
	 *  @default null
	 */
	"nTBody": null,

	/**
	 * Cache the wrapper node (contains all DataTables controlled elements)
	 *  @type node
	 *  @default null
	 */
	"nTableWrapper": null,

	/**
	 * Indicate if when using server-side processing the loading of data
	 * should be deferred until the second draw.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type boolean
	 *  @default false
	 */
	"bDeferLoading": false,

	/**
	 * Indicate if all required information has been read in
	 *  @type boolean
	 *  @default false
	 */
	"bInitialised": false,

	/**
	 * Information about open rows. Each object in the array has the parameters
	 * 'nTr' and 'nParent'
	 *  @type array
	 *  @default []
	 */
	"aoOpenRows": [],

	/**
	 * Dictate the positioning of DataTables' control elements - see
	 * {@link DataTable.model.oInit.sDom}.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type string
	 *  @default null
	 */
	"sDom": null,

	/**
	 * Search delay (in mS)
	 *  @type integer
	 *  @default null
	 */
	"searchDelay": null,

	/**
	 * Which type of pagination should be used.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type string
	 *  @default two_button
	 */
	"sPaginationType": "two_button",

	/**
	 * The state duration (for `stateSave`) in seconds.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type int
	 *  @default 0
	 */
	"iStateDuration": 0,

	/**
	 * Array of callback functions for state saving. Each array element is an
	 * object with the following parameters:
	 *   <ul>
	 *     <li>function:fn - function to call. Takes two parameters, oSettings
	 *       and the JSON string to save that has been thus far created. Returns
	 *       a JSON string to be inserted into a json object
	 *       (i.e. '"param": [ 0, 1, 2]')</li>
	 *     <li>string:sName - name of callback</li>
	 *   </ul>
	 *  @type array
	 *  @default []
	 */
	"aoStateSave": [],

	/**
	 * Array of callback functions for state loading. Each array element is an
	 * object with the following parameters:
	 *   <ul>
	 *     <li>function:fn - function to call. Takes two parameters, oSettings
	 *       and the object stored. May return false to cancel state loading</li>
	 *     <li>string:sName - name of callback</li>
	 *   </ul>
	 *  @type array
	 *  @default []
	 */
	"aoStateLoad": [],

	/**
	 * State that was saved. Useful for back reference
	 *  @type object
	 *  @default null
	 */
	"oSavedState": null,

	/**
	 * State that was loaded. Useful for back reference
	 *  @type object
	 *  @default null
	 */
	"oLoadedState": null,

	/**
	 * Source url for AJAX data for the table.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type string
	 *  @default null
	 */
	"sAjaxSource": null,

	/**
	 * Property from a given object from which to read the table data from. This
	 * can be an empty string (when not server-side processing), in which case
	 * it is  assumed an an array is given directly.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type string
	 */
	"sAjaxDataProp": null,

	/**
	 * The last jQuery XHR object that was used for server-side data gathering.
	 * This can be used for working with the XHR information in one of the
	 * callbacks
	 *  @type object
	 *  @default null
	 */
	"jqXHR": null,

	/**
	 * JSON returned from the server in the last Ajax request
	 *  @type object
	 *  @default undefined
	 */
	"json": undefined,

	/**
	 * Data submitted as part of the last Ajax request
	 *  @type object
	 *  @default undefined
	 */
	"oAjaxData": undefined,

	/**
	 * Function to get the server-side data.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type function
	 */
	"fnServerData": null,

	/**
	 * Functions which are called prior to sending an Ajax request so extra
	 * parameters can easily be sent to the server
	 *  @type array
	 *  @default []
	 */
	"aoServerParams": [],

	/**
	 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
	 * required).
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type string
	 */
	"sServerMethod": null,

	/**
	 * Format numbers for display.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type function
	 */
	"fnFormatNumber": null,

	/**
	 * List of options that can be used for the user selectable length menu.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type array
	 *  @default []
	 */
	"aLengthMenu": null,

	/**
	 * Counter for the draws that the table does. Also used as a tracker for
	 * server-side processing
	 *  @type int
	 *  @default 0
	 */
	"iDraw": 0,

	/**
	 * Indicate if a redraw is being done - useful for Ajax
	 *  @type boolean
	 *  @default false
	 */
	"bDrawing": false,

	/**
	 * Draw index (iDraw) of the last error when parsing the returned data
	 *  @type int
	 *  @default -1
	 */
	"iDrawError": -1,

	/**
	 * Paging display length
	 *  @type int
	 *  @default 10
	 */
	"_iDisplayLength": 10,

	/**
	 * Paging start point - aiDisplay index
	 *  @type int
	 *  @default 0
	 */
	"_iDisplayStart": 0,

	/**
	 * Server-side processing - number of records in the result set
	 * (i.e. before filtering), Use fnRecordsTotal rather than
	 * this property to get the value of the number of records, regardless of
	 * the server-side processing setting.
	 *  @type int
	 *  @default 0
	 *  @private
	 */
	"_iRecordsTotal": 0,

	/**
	 * Server-side processing - number of records in the current display set
	 * (i.e. after filtering). Use fnRecordsDisplay rather than
	 * this property to get the value of the number of records, regardless of
	 * the server-side processing setting.
	 *  @type boolean
	 *  @default 0
	 *  @private
	 */
	"_iRecordsDisplay": 0,

	/**
	 * The classes to use for the table
	 *  @type object
	 *  @default {}
	 */
	"oClasses": {},

	/**
	 * Flag attached to the settings object so you can check in the draw
	 * callback if filtering has been done in the draw. Deprecated in favour of
	 * events.
	 *  @type boolean
	 *  @default false
	 *  @deprecated
	 */
	"bFiltered": false,

	/**
	 * Flag attached to the settings object so you can check in the draw
	 * callback if sorting has been done in the draw. Deprecated in favour of
	 * events.
	 *  @type boolean
	 *  @default false
	 *  @deprecated
	 */
	"bSorted": false,

	/**
	 * Indicate that if multiple rows are in the header and there is more than
	 * one unique cell per column, if the top one (true) or bottom one (false)
	 * should be used for sorting / title by DataTables.
	 * Note that this parameter will be set by the initialisation routine. To
	 * set a default use {@link DataTable.defaults}.
	 *  @type boolean
	 */
	"bSortCellsTop": null,

	/**
	 * Initialisation object that is used for the table
	 *  @type object
	 *  @default null
	 */
	"oInit": null,

	/**
	 * Destroy callback functions - for plug-ins to attach themselves to the
	 * destroy so they can clean up markup and events.
	 *  @type array
	 *  @default []
	 */
	"aoDestroyCallback": [],


	/**
	 * Get the number of records in the current record set, before filtering
	 *  @type function
	 */
	"fnRecordsTotal": function ()
	{
		return _fnDataSource( this ) == 'ssp' ?
			this._iRecordsTotal * 1 :
			this.aiDisplayMaster.length;
	},

	/**
	 * Get the number of records in the current record set, after filtering
	 *  @type function
	 */
	"fnRecordsDisplay": function ()
	{
		return _fnDataSource( this ) == 'ssp' ?
			this._iRecordsDisplay * 1 :
			this.aiDisplay.length;
	},

	/**
	 * Get the display end point - aiDisplay index
	 *  @type function
	 */
	"fnDisplayEnd": function ()
	{
		var
			len      = this._iDisplayLength,
			start    = this._iDisplayStart,
			calc     = start + len,
			records  = this.aiDisplay.length,
			features = this.oFeatures,
			paginate = features.bPaginate;

		if ( features.bServerSide ) {
			return paginate === false || len === -1 ?
				start + records :
				Math.min( start+len, this._iRecordsDisplay );
		}
		else {
			return ! paginate || calc>records || len===-1 ?
				records :
				calc;
		}
	},

	/**
	 * The DataTables object for this table
	 *  @type object
	 *  @default null
	 */
	"oInstance": null,

	/**
	 * Unique identifier for each instance of the DataTables object. If there
	 * is an ID on the table node, then it takes that value, otherwise an
	 * incrementing internal counter is used.
	 *  @type string
	 *  @default null
	 */
	"sInstance": null,

	/**
	 * tabindex attribute value that is added to DataTables control elements, allowing
	 * keyboard navigation of the table and its controls.
	 */
	"iTabIndex": 0,

	/**
	 * DIV container for the footer scrolling table if scrolling
	 */
	"nScrollHead": null,

	/**
	 * DIV container for the footer scrolling table if scrolling
	 */
	"nScrollFoot": null,

	/**
	 * Last applied sort
	 *  @type array
	 *  @default []
	 */
	"aLastSort": [],

	/**
	 * Stored plug-in instances
	 *  @type object
	 *  @default {}
	 */
	"oPlugins": {},

	/**
	 * Function used to get a row's id from the row's data
	 *  @type function
	 *  @default null
	 */
	"rowIdFn": null,

	/**
	 * Data location where to store a row's id
	 *  @type string
	 *  @default null
	 */
	"rowId": null
};

/**
 * Extension object for DataTables that is used to provide all extension
 * options.
 *
 * Note that the `DataTable.ext` object is available through
 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
 *  @namespace
 *  @extends DataTable.models.ext
 */


/**
 * DataTables extensions
 * 
 * This namespace acts as a collection area for plug-ins that can be used to
 * extend DataTables capabilities. Indeed many of the build in methods
 * use this method to provide their own capabilities (sorting methods for
 * example).
 *
 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
 * reasons
 *
 *  @namespace
 */
DataTable.ext = _ext = {
	/**
	 * Buttons. For use with the Buttons extension for DataTables. This is
	 * defined here so other extensions can define buttons regardless of load
	 * order. It is _not_ used by DataTables core.
	 *
	 *  @type object
	 *  @default {}
	 */
	buttons: {},


	/**
	 * Element class names
	 *
	 *  @type object
	 *  @default {}
	 */
	classes: {},


	/**
	 * DataTables build type (expanded by the download builder)
	 *
	 *  @type string
	 */
	builder: "-source-",


	/**
	 * Error reporting.
	 * 
	 * How should DataTables report an error. Can take the value 'alert',
	 * 'throw', 'none' or a function.
	 *
	 *  @type string|function
	 *  @default alert
	 */
	errMode: "alert",


	/**
	 * Feature plug-ins.
	 * 
	 * This is an array of objects which describe the feature plug-ins that are
	 * available to DataTables. These feature plug-ins are then available for
	 * use through the `dom` initialisation option.
	 * 
	 * Each feature plug-in is described by an object which must have the
	 * following properties:
	 * 
	 * * `fnInit` - function that is used to initialise the plug-in,
	 * * `cFeature` - a character so the feature can be enabled by the `dom`
	 *   instillation option. This is case sensitive.
	 *
	 * The `fnInit` function has the following input parameters:
	 *
	 * 1. `{object}` DataTables settings object: see
	 *    {@link DataTable.models.oSettings}
	 *
	 * And the following return is expected:
	 * 
	 * * {node|null} The element which contains your feature. Note that the
	 *   return may also be void if your plug-in does not require to inject any
	 *   DOM elements into DataTables control (`dom`) - for example this might
	 *   be useful when developing a plug-in which allows table control via
	 *   keyboard entry
	 *
	 *  @type array
	 *
	 *  @example
	 *    $.fn.dataTable.ext.features.push( {
	 *      "fnInit": function( oSettings ) {
	 *        return new TableTools( { "oDTSettings": oSettings } );
	 *      },
	 *      "cFeature": "T"
	 *    } );
	 */
	feature: [],


	/**
	 * Row searching.
	 * 
	 * This method of searching is complimentary to the default type based
	 * searching, and a lot more comprehensive as it allows you complete control
	 * over the searching logic. Each element in this array is a function
	 * (parameters described below) that is called for every row in the table,
	 * and your logic decides if it should be included in the searching data set
	 * or not.
	 *
	 * Searching functions have the following input parameters:
	 *
	 * 1. `{object}` DataTables settings object: see
	 *    {@link DataTable.models.oSettings}
	 * 2. `{array|object}` Data for the row to be processed (same as the
	 *    original format that was passed in as the data source, or an array
	 *    from a DOM data source
	 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
	 *    can be useful to retrieve the `TR` element if you need DOM interaction.
	 *
	 * And the following return is expected:
	 *
	 * * {boolean} Include the row in the searched result set (true) or not
	 *   (false)
	 *
	 * Note that as with the main search ability in DataTables, technically this
	 * is "filtering", since it is subtractive. However, for consistency in
	 * naming we call it searching here.
	 *
	 *  @type array
	 *  @default []
	 *
	 *  @example
	 *    // The following example shows custom search being applied to the
	 *    // fourth column (i.e. the data[3] index) based on two input values
	 *    // from the end-user, matching the data in a certain range.
	 *    $.fn.dataTable.ext.search.push(
	 *      function( settings, data, dataIndex ) {
	 *        var min = document.getElementById('min').value * 1;
	 *        var max = document.getElementById('max').value * 1;
	 *        var version = data[3] == "-" ? 0 : data[3]*1;
	 *
	 *        if ( min == "" && max == "" ) {
	 *          return true;
	 *        }
	 *        else if ( min == "" && version < max ) {
	 *          return true;
	 *        }
	 *        else if ( min < version && "" == max ) {
	 *          return true;
	 *        }
	 *        else if ( min < version && version < max ) {
	 *          return true;
	 *        }
	 *        return false;
	 *      }
	 *    );
	 */
	search: [],


	/**
	 * Selector extensions
	 *
	 * The `selector` option can be used to extend the options available for the
	 * selector modifier options (`selector-modifier` object data type) that
	 * each of the three built in selector types offer (row, column and cell +
	 * their plural counterparts). For example the Select extension uses this
	 * mechanism to provide an option to select only rows, columns and cells
	 * that have been marked as selected by the end user (`{selected: true}`),
	 * which can be used in conjunction with the existing built in selector
	 * options.
	 *
	 * Each property is an array to which functions can be pushed. The functions
	 * take three attributes:
	 *
	 * * Settings object for the host table
	 * * Options object (`selector-modifier` object type)
	 * * Array of selected item indexes
	 *
	 * The return is an array of the resulting item indexes after the custom
	 * selector has been applied.
	 *
	 *  @type object
	 */
	selector: {
		cell: [],
		column: [],
		row: []
	},


	/**
	 * Internal functions, exposed for used in plug-ins.
	 * 
	 * Please note that you should not need to use the internal methods for
	 * anything other than a plug-in (and even then, try to avoid if possible).
	 * The internal function may change between releases.
	 *
	 *  @type object
	 *  @default {}
	 */
	internal: {},


	/**
	 * Legacy configuration options. Enable and disable legacy options that
	 * are available in DataTables.
	 *
	 *  @type object
	 */
	legacy: {
		/**
		 * Enable / disable DataTables 1.9 compatible server-side processing
		 * requests
		 *
		 *  @type boolean
		 *  @default null
		 */
		ajax: null
	},


	/**
	 * Pagination plug-in methods.
	 * 
	 * Each entry in this object is a function and defines which buttons should
	 * be shown by the pagination rendering method that is used for the table:
	 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
	 * buttons are displayed in the document, while the functions here tell it
	 * what buttons to display. This is done by returning an array of button
	 * descriptions (what each button will do).
	 *
	 * Pagination types (the four built in options and any additional plug-in
	 * options defined here) can be used through the `paginationType`
	 * initialisation parameter.
	 *
	 * The functions defined take two parameters:
	 *
	 * 1. `{int} page` The current page index
	 * 2. `{int} pages` The number of pages in the table
	 *
	 * Each function is expected to return an array where each element of the
	 * array can be one of:
	 *
	 * * `first` - Jump to first page when activated
	 * * `last` - Jump to last page when activated
	 * * `previous` - Show previous page when activated
	 * * `next` - Show next page when activated
	 * * `{int}` - Show page of the index given
	 * * `{array}` - A nested array containing the above elements to add a
	 *   containing 'DIV' element (might be useful for styling).
	 *
	 * Note that DataTables v1.9- used this object slightly differently whereby
	 * an object with two functions would be defined for each plug-in. That
	 * ability is still supported by DataTables 1.10+ to provide backwards
	 * compatibility, but this option of use is now decremented and no longer
	 * documented in DataTables 1.10+.
	 *
	 *  @type object
	 *  @default {}
	 *
	 *  @example
	 *    // Show previous, next and current page buttons only
	 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
	 *      return [ 'previous', page, 'next' ];
	 *    };
	 */
	pager: {},


	renderer: {
		pageButton: {},
		header: {}
	},


	/**
	 * Ordering plug-ins - custom data source
	 * 
	 * The extension options for ordering of data available here is complimentary
	 * to the default type based ordering that DataTables typically uses. It
	 * allows much greater control over the the data that is being used to
	 * order a column, but is necessarily therefore more complex.
	 * 
	 * This type of ordering is useful if you want to do ordering based on data
	 * live from the DOM (for example the contents of an 'input' element) rather
	 * than just the static string that DataTables knows of.
	 * 
	 * The way these plug-ins work is that you create an array of the values you
	 * wish to be ordering for the column in question and then return that
	 * array. The data in the array much be in the index order of the rows in
	 * the table (not the currently ordering order!). Which order data gathering
	 * function is run here depends on the `dt-init columns.orderDataType`
	 * parameter that is used for the column (if any).
	 *
	 * The functions defined take two parameters:
	 *
	 * 1. `{object}` DataTables settings object: see
	 *    {@link DataTable.models.oSettings}
	 * 2. `{int}` Target column index
	 *
	 * Each function is expected to return an array:
	 *
	 * * `{array}` Data for the column to be ordering upon
	 *
	 *  @type array
	 *
	 *  @example
	 *    // Ordering using `input` node values
	 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
	 *    {
	 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
	 *        return $('input', td).val();
	 *      } );
	 *    }
	 */
	order: {},


	/**
	 * Type based plug-ins.
	 *
	 * Each column in DataTables has a type assigned to it, either by automatic
	 * detection or by direct assignment using the `type` option for the column.
	 * The type of a column will effect how it is ordering and search (plug-ins
	 * can also make use of the column type if required).
	 *
	 * @namespace
	 */
	type: {
		/**
		 * Type detection functions.
		 *
		 * The functions defined in this object are used to automatically detect
		 * a column's type, making initialisation of DataTables super easy, even
		 * when complex data is in the table.
		 *
		 * The functions defined take two parameters:
		 *
	     *  1. `{*}` Data from the column cell to be analysed
	     *  2. `{settings}` DataTables settings object. This can be used to
	     *     perform context specific type detection - for example detection
	     *     based on language settings such as using a comma for a decimal
	     *     place. Generally speaking the options from the settings will not
	     *     be required
		 *
		 * Each function is expected to return:
		 *
		 * * `{string|null}` Data type detected, or null if unknown (and thus
		 *   pass it on to the other type detection functions.
		 *
		 *  @type array
		 *
		 *  @example
		 *    // Currency type detection plug-in:
		 *    $.fn.dataTable.ext.type.detect.push(
		 *      function ( data, settings ) {
		 *        // Check the numeric part
		 *        if ( ! data.substring(1).match(/[0-9]/) ) {
		 *          return null;
		 *        }
		 *
		 *        // Check prefixed by currency
		 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
		 *          return 'currency';
		 *        }
		 *        return null;
		 *      }
		 *    );
		 */
		detect: [],


		/**
		 * Type based search formatting.
		 *
		 * The type based searching functions can be used to pre-format the
		 * data to be search on. For example, it can be used to strip HTML
		 * tags or to de-format telephone numbers for numeric only searching.
		 *
		 * Note that is a search is not defined for a column of a given type,
		 * no search formatting will be performed.
		 * 
		 * Pre-processing of searching data plug-ins - When you assign the sType
		 * for a column (or have it automatically detected for you by DataTables
		 * or a type detection plug-in), you will typically be using this for
		 * custom sorting, but it can also be used to provide custom searching
		 * by allowing you to pre-processing the data and returning the data in
		 * the format that should be searched upon. This is done by adding
		 * functions this object with a parameter name which matches the sType
		 * for that target column. This is the corollary of <i>afnSortData</i>
		 * for searching data.
		 *
		 * The functions defined take a single parameter:
		 *
	     *  1. `{*}` Data from the column cell to be prepared for searching
		 *
		 * Each function is expected to return:
		 *
		 * * `{string|null}` Formatted string that will be used for the searching.
		 *
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
		 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
		 *    }
		 */
		search: {},


		/**
		 * Type based ordering.
		 *
		 * The column type tells DataTables what ordering to apply to the table
		 * when a column is sorted upon. The order for each type that is defined,
		 * is defined by the functions available in this object.
		 *
		 * Each ordering option can be described by three properties added to
		 * this object:
		 *
		 * * `{type}-pre` - Pre-formatting function
		 * * `{type}-asc` - Ascending order function
		 * * `{type}-desc` - Descending order function
		 *
		 * All three can be used together, only `{type}-pre` or only
		 * `{type}-asc` and `{type}-desc` together. It is generally recommended
		 * that only `{type}-pre` is used, as this provides the optimal
		 * implementation in terms of speed, although the others are provided
		 * for compatibility with existing Javascript sort functions.
		 *
		 * `{type}-pre`: Functions defined take a single parameter:
		 *
	     *  1. `{*}` Data from the column cell to be prepared for ordering
		 *
		 * And return:
		 *
		 * * `{*}` Data to be sorted upon
		 *
		 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
		 * functions, taking two parameters:
		 *
	     *  1. `{*}` Data to compare to the second parameter
	     *  2. `{*}` Data to compare to the first parameter
		 *
		 * And returning:
		 *
		 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
		 *   than the second parameter, ===0 if the two parameters are equal and
		 *   >0 if the first parameter should be sorted height than the second
		 *   parameter.
		 * 
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    // Numeric ordering of formatted numbers with a pre-formatter
		 *    $.extend( $.fn.dataTable.ext.type.order, {
		 *      "string-pre": function(x) {
		 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
		 *        return parseFloat( a );
		 *      }
		 *    } );
		 *
		 *  @example
		 *    // Case-sensitive string ordering, with no pre-formatting method
		 *    $.extend( $.fn.dataTable.ext.order, {
		 *      "string-case-asc": function(x,y) {
		 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		 *      },
		 *      "string-case-desc": function(x,y) {
		 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
		 *      }
		 *    } );
		 */
		order: {}
	},

	/**
	 * Unique DataTables instance counter
	 *
	 * @type int
	 * @private
	 */
	_unique: 0,


	//
	// Depreciated
	// The following properties are retained for backwards compatibility only.
	// The should not be used in new projects and will be removed in a future
	// version
	//

	/**
	 * Version check function.
	 *  @type function
	 *  @depreciated Since 1.10
	 */
	fnVersionCheck: DataTable.fnVersionCheck,


	/**
	 * Index for what 'this' index API functions should use
	 *  @type int
	 *  @deprecated Since v1.10
	 */
	iApiIndex: 0,


	/**
	 * jQuery UI class container
	 *  @type object
	 *  @deprecated Since v1.10
	 */
	oJUIClasses: {},


	/**
	 * Software version
	 *  @type string
	 *  @deprecated Since v1.10
	 */
	sVersion: DataTable.version
};


//
// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
//
$.extend( _ext, {
	afnFiltering: _ext.search,
	aTypes:       _ext.type.detect,
	ofnSearch:    _ext.type.search,
	oSort:        _ext.type.order,
	afnSortData:  _ext.order,
	aoFeatures:   _ext.feature,
	oApi:         _ext.internal,
	oStdClasses:  _ext.classes,
	oPagination:  _ext.pager
} );


$.extend( DataTable.ext.classes, {
	"sTable": "dataTable",
	"sNoFooter": "no-footer",

	/* Paging buttons */
	"sPageButton": "paginate_button",
	"sPageButtonActive": "current",
	"sPageButtonDisabled": "disabled",

	/* Striping classes */
	"sStripeOdd": "odd",
	"sStripeEven": "even",

	/* Empty row */
	"sRowEmpty": "dataTables_empty",

	/* Features */
	"sWrapper": "dataTables_wrapper",
	"sFilter": "dataTables_filter",
	"sInfo": "dataTables_info",
	"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
	"sLength": "dataTables_length",
	"sProcessing": "dataTables_processing",

	/* Sorting */
	"sSortAsc": "sorting_asc",
	"sSortDesc": "sorting_desc",
	"sSortable": "sorting", /* Sortable in both directions */
	"sSortableAsc": "sorting_desc_disabled",
	"sSortableDesc": "sorting_asc_disabled",
	"sSortableNone": "sorting_disabled",
	"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */

	/* Filtering */
	"sFilterInput": "",

	/* Page length */
	"sLengthSelect": "",

	/* Scrolling */
	"sScrollWrapper": "dataTables_scroll",
	"sScrollHead": "dataTables_scrollHead",
	"sScrollHeadInner": "dataTables_scrollHeadInner",
	"sScrollBody": "dataTables_scrollBody",
	"sScrollFoot": "dataTables_scrollFoot",
	"sScrollFootInner": "dataTables_scrollFootInner",

	/* Misc */
	"sHeaderTH": "",
	"sFooterTH": "",

	// Deprecated
	"sSortJUIAsc": "",
	"sSortJUIDesc": "",
	"sSortJUI": "",
	"sSortJUIAscAllowed": "",
	"sSortJUIDescAllowed": "",
	"sSortJUIWrapper": "",
	"sSortIcon": "",
	"sJUIHeader": "",
	"sJUIFooter": ""
} );


var extPagination = DataTable.ext.pager;

function _numbers ( page, pages ) {
	var
		numbers = [],
		buttons = extPagination.numbers_length,
		half = Math.floor( buttons / 2 ),
		i = 1;

	if ( pages <= buttons ) {
		numbers = _range( 0, pages );
	}
	else if ( page <= half ) {
		numbers = _range( 0, buttons-2 );
		numbers.push( 'ellipsis' );
		numbers.push( pages-1 );
	}
	else if ( page >= pages - 1 - half ) {
		numbers = _range( pages-(buttons-2), pages );
		numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
		numbers.splice( 0, 0, 0 );
	}
	else {
		numbers = _range( page-half+2, page+half-1 );
		numbers.push( 'ellipsis' );
		numbers.push( pages-1 );
		numbers.splice( 0, 0, 'ellipsis' );
		numbers.splice( 0, 0, 0 );
	}

	numbers.DT_el = 'span';
	return numbers;
}


$.extend( extPagination, {
	simple: function ( page, pages ) {
		return [ 'previous', 'next' ];
	},

	full: function ( page, pages ) {
		return [  'first', 'previous', 'next', 'last' ];
	},

	numbers: function ( page, pages ) {
		return [ _numbers(page, pages) ];
	},

	simple_numbers: function ( page, pages ) {
		return [ 'previous', _numbers(page, pages), 'next' ];
	},

	full_numbers: function ( page, pages ) {
		return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
	},
	
	first_last_numbers: function (page, pages) {
 		return ['first', _numbers(page, pages), 'last'];
 	},

	// For testing and plug-ins to use
	_numbers: _numbers,

	// Number of number buttons (including ellipsis) to show. _Must be odd!_
	numbers_length: 7
} );


$.extend( true, DataTable.ext.renderer, {
	pageButton: {
		_: function ( settings, host, idx, buttons, page, pages ) {
			var classes = settings.oClasses;
			var lang = settings.oLanguage.oPaginate;
			var aria = settings.oLanguage.oAria.paginate || {};
			var btnDisplay, btnClass;

			var attach = function( container, buttons ) {
				var i, ien, node, button, tabIndex;
				var disabledClass = classes.sPageButtonDisabled;
				var clickHandler = function ( e ) {
					_fnPageChange( settings, e.data.action, true );
				};

				for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
					button = buttons[i];

					if ( Array.isArray( button ) ) {
						var inner = $( '<'+(button.DT_el || 'div')+'/>' )
							.appendTo( container );
						attach( inner, button );
					}
					else {
						btnDisplay = null;
						btnClass = button;
						tabIndex = settings.iTabIndex;

						switch ( button ) {
							case 'ellipsis':
								container.append('<span class="ellipsis">&#x2026;</span>');
								break;

							case 'first':
								btnDisplay = lang.sFirst;

								if ( page === 0 ) {
									tabIndex = -1;
									btnClass += ' ' + disabledClass;
								}
								break;

							case 'previous':
								btnDisplay = lang.sPrevious;

								if ( page === 0 ) {
									tabIndex = -1;
									btnClass += ' ' + disabledClass;
								}
								break;

							case 'next':
								btnDisplay = lang.sNext;

								if ( pages === 0 || page === pages-1 ) {
									tabIndex = -1;
									btnClass += ' ' + disabledClass;
								}
								break;

							case 'last':
								btnDisplay = lang.sLast;

								if ( pages === 0 || page === pages-1 ) {
									tabIndex = -1;
									btnClass += ' ' + disabledClass;
								}
								break;

							default:
								btnDisplay = settings.fnFormatNumber( button + 1 );
								btnClass = page === button ?
									classes.sPageButtonActive : '';
								break;
						}

						if ( btnDisplay !== null ) {
							var tag = settings.oInit.pagingTag || 'a';
							var disabled = btnClass.indexOf(disabledClass) !== -1;
		

							node = $('<'+tag+'>', {
									'class': classes.sPageButton+' '+btnClass,
									'aria-controls': settings.sTableId,
									'aria-disabled': disabled ? 'true' : null,
									'aria-label': aria[ button ],
									'aria-role': 'link',
									'aria-current': btnClass === classes.sPageButtonActive ? 'page' : null,
									'data-dt-idx': button,
									'tabindex': tabIndex,
									'id': idx === 0 && typeof button === 'string' ?
										settings.sTableId +'_'+ button :
										null
								} )
								.html( btnDisplay )
								.appendTo( container );

							_fnBindAction(
								node, {action: button}, clickHandler
							);
						}
					}
				}
			};

			// IE9 throws an 'unknown error' if document.activeElement is used
			// inside an iframe or frame. Try / catch the error. Not good for
			// accessibility, but neither are frames.
			var activeEl;

			try {
				// Because this approach is destroying and recreating the paging
				// elements, focus is lost on the select button which is bad for
				// accessibility. So we want to restore focus once the draw has
				// completed
				activeEl = $(host).find(document.activeElement).data('dt-idx');
			}
			catch (e) {}

			attach( $(host).empty(), buttons );

			if ( activeEl !== undefined ) {
				$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');
			}
		}
	}
} );



// Built in type detection. See model.ext.aTypes for information about
// what is required from this methods.
$.extend( DataTable.ext.type.detect, [
	// Plain numbers - first since V8 detects some plain numbers as dates
	// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
	function ( d, settings )
	{
		var decimal = settings.oLanguage.sDecimal;
		return _isNumber( d, decimal ) ? 'num'+decimal : null;
	},

	// Dates (only those recognised by the browser's Date.parse)
	function ( d, settings )
	{
		// V8 tries _very_ hard to make a string passed into `Date.parse()`
		// valid, so we need to use a regex to restrict date formats. Use a
		// plug-in for anything other than ISO8601 style strings
		if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
			return null;
		}
		var parsed = Date.parse(d);
		return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
	},

	// Formatted numbers
	function ( d, settings )
	{
		var decimal = settings.oLanguage.sDecimal;
		return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
	},

	// HTML numeric
	function ( d, settings )
	{
		var decimal = settings.oLanguage.sDecimal;
		return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
	},

	// HTML numeric, formatted
	function ( d, settings )
	{
		var decimal = settings.oLanguage.sDecimal;
		return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
	},

	// HTML (this is strict checking - there must be html)
	function ( d, settings )
	{
		return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
			'html' : null;
	}
] );



// Filter formatting functions. See model.ext.ofnSearch for information about
// what is required from these methods.
// 
// Note that additional search methods are added for the html numbers and
// html formatted numbers by `_addNumericSort()` when we know what the decimal
// place is


$.extend( DataTable.ext.type.search, {
	html: function ( data ) {
		return _empty(data) ?
			data :
			typeof data === 'string' ?
				data
					.replace( _re_new_lines, " " )
					.replace( _re_html, "" ) :
				'';
	},

	string: function ( data ) {
		return _empty(data) ?
			data :
			typeof data === 'string' ?
				data.replace( _re_new_lines, " " ) :
				data;
	}
} );



var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
	if ( d !== 0 && (!d || d === '-') ) {
		return -Infinity;
	}
	
	let type = typeof d;

	if (type === 'number' || type === 'bigint') {
		return d;
	}

	// If a decimal place other than `.` is used, it needs to be given to the
	// function so we can detect it and replace with a `.` which is the only
	// decimal place Javascript recognises - it is not locale aware.
	if ( decimalPlace ) {
		d = _numToDecimal( d, decimalPlace );
	}

	if ( d.replace ) {
		if ( re1 ) {
			d = d.replace( re1, '' );
		}

		if ( re2 ) {
			d = d.replace( re2, '' );
		}
	}

	return d * 1;
};


// Add the numeric 'deformatting' functions for sorting and search. This is done
// in a function to provide an easy ability for the language options to add
// additional methods if a non-period decimal place is used.
function _addNumericSort ( decimalPlace ) {
	$.each(
		{
			// Plain numbers
			"num": function ( d ) {
				return __numericReplace( d, decimalPlace );
			},

			// Formatted numbers
			"num-fmt": function ( d ) {
				return __numericReplace( d, decimalPlace, _re_formatted_numeric );
			},

			// HTML numeric
			"html-num": function ( d ) {
				return __numericReplace( d, decimalPlace, _re_html );
			},

			// HTML numeric, formatted
			"html-num-fmt": function ( d ) {
				return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
			}
		},
		function ( key, fn ) {
			// Add the ordering method
			_ext.type.order[ key+decimalPlace+'-pre' ] = fn;

			// For HTML types add a search formatter that will strip the HTML
			if ( key.match(/^html\-/) ) {
				_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
			}
		}
	);
}


// Default sort methods
$.extend( _ext.type.order, {
	// Dates
	"date-pre": function ( d ) {
		var ts = Date.parse( d );
		return isNaN(ts) ? -Infinity : ts;
	},

	// html
	"html-pre": function ( a ) {
		return _empty(a) ?
			'' :
			a.replace ?
				a.replace( /<.*?>/g, "" ).toLowerCase() :
				a+'';
	},

	// string
	"string-pre": function ( a ) {
		// This is a little complex, but faster than always calling toString,
		// http://jsperf.com/tostring-v-check
		return _empty(a) ?
			'' :
			typeof a === 'string' ?
				a.toLowerCase() :
				! a.toString ?
					'' :
					a.toString();
	},

	// string-asc and -desc are retained only for compatibility with the old
	// sort methods
	"string-asc": function ( x, y ) {
		return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	},

	"string-desc": function ( x, y ) {
		return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	}
} );


// Numeric sorting types - order doesn't matter here
_addNumericSort( '' );


$.extend( true, DataTable.ext.renderer, {
	header: {
		_: function ( settings, cell, column, classes ) {
			// No additional mark-up required
			// Attach a sort listener to update on sort - note that using the
			// `DT` namespace will allow the event to be removed automatically
			// on destroy, while the `dt` namespaced event is the one we are
			// listening for
			$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
				if ( settings !== ctx ) { // need to check this this is the host
					return;               // table, not a nested one
				}

				var colIdx = column.idx;

				cell
					.removeClass(
						classes.sSortAsc +' '+
						classes.sSortDesc
					)
					.addClass( columns[ colIdx ] == 'asc' ?
						classes.sSortAsc : columns[ colIdx ] == 'desc' ?
							classes.sSortDesc :
							column.sSortingClass
					);
			} );
		},

		jqueryui: function ( settings, cell, column, classes ) {
			$('<div/>')
				.addClass( classes.sSortJUIWrapper )
				.append( cell.contents() )
				.append( $('<span/>')
					.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
				)
				.appendTo( cell );

			// Attach a sort listener to update on sort
			$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
				if ( settings !== ctx ) {
					return;
				}

				var colIdx = column.idx;

				cell
					.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
					.addClass( columns[ colIdx ] == 'asc' ?
						classes.sSortAsc : columns[ colIdx ] == 'desc' ?
							classes.sSortDesc :
							column.sSortingClass
					);

				cell
					.find( 'span.'+classes.sSortIcon )
					.removeClass(
						classes.sSortJUIAsc +" "+
						classes.sSortJUIDesc +" "+
						classes.sSortJUI +" "+
						classes.sSortJUIAscAllowed +" "+
						classes.sSortJUIDescAllowed
					)
					.addClass( columns[ colIdx ] == 'asc' ?
						classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
							classes.sSortJUIDesc :
							column.sSortingClassJUI
					);
			} );
		}
	}
} );

/*
 * Public helper functions. These aren't used internally by DataTables, or
 * called by any of the options passed into DataTables, but they can be used
 * externally by developers working with DataTables. They are helper functions
 * to make working with DataTables a little bit easier.
 */

var __htmlEscapeEntities = function ( d ) {
	if (Array.isArray(d)) {
		d = d.join(',');
	}

	return typeof d === 'string' ?
		d
			.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;') :
		d;
};

// Common logic for moment, luxon or a date action
function __mld( dt, momentFn, luxonFn, dateFn, arg1 ) {
	if (window.moment) {
		return dt[momentFn]( arg1 );
	}
	else if (window.luxon) {
		return dt[luxonFn]( arg1 );
	}
	
	return dateFn ? dt[dateFn]( arg1 ) : dt;
}


var __mlWarning = false;
function __mldObj (d, format, locale) {
	var dt;

	if (window.moment) {
		dt = window.moment.utc( d, format, locale, true );

		if (! dt.isValid()) {
			return null;
		}
	}
	else if (window.luxon) {
		dt = format && typeof d === 'string'
			? window.luxon.DateTime.fromFormat( d, format )
			: window.luxon.DateTime.fromISO( d );

		if (! dt.isValid) {
			return null;
		}

		dt.setLocale(locale);
	}
	else if (! format) {
		// No format given, must be ISO
		dt = new Date(d);
	}
	else {
		if (! __mlWarning) {
			alert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');
		}

		__mlWarning = true;
	}

	return dt;
}

// Wrapper for date, datetime and time which all operate the same way with the exception of
// the output string for auto locale support
function __mlHelper (localeString) {
	return function ( from, to, locale, def ) {
		// Luxon and Moment support
		// Argument shifting
		if ( arguments.length === 0 ) {
			locale = 'en';
			to = null; // means toLocaleString
			from = null; // means iso8601
		}
		else if ( arguments.length === 1 ) {
			locale = 'en';
			to = from;
			from = null;
		}
		else if ( arguments.length === 2 ) {
			locale = to;
			to = from;
			from = null;
		}

		var typeName = 'datetime-' + to;

		// Add type detection and sorting specific to this date format - we need to be able to identify
		// date type columns as such, rather than as numbers in extensions. Hence the need for this.
		if (! DataTable.ext.type.order[typeName]) {
			// The renderer will give the value to type detect as the type!
			DataTable.ext.type.detect.unshift(function (d) {
				return d === typeName ? typeName : false;
			});

			// The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a
			// `valueOf` which gives milliseconds epoch
			DataTable.ext.type.order[typeName + '-asc'] = function (a, b) {
				var x = a.valueOf();
				var y = b.valueOf();

				return x === y
					? 0
					: x < y
						? -1
						: 1;
			}

			DataTable.ext.type.order[typeName + '-desc'] = function (a, b) {
				var x = a.valueOf();
				var y = b.valueOf();

				return x === y
					? 0
					: x > y
						? -1
						: 1;
			}
		}
	
		return function ( d, type ) {
			// Allow for a default value
			if (d === null || d === undefined) {
				if (def === '--now') {
					// We treat everything as UTC further down, so no changes are
					// made, as such need to get the local date / time as if it were
					// UTC
					var local = new Date();
					d = new Date( Date.UTC(
						local.getFullYear(), local.getMonth(), local.getDate(),
						local.getHours(), local.getMinutes(), local.getSeconds()
					) );
				}
				else {
					d = '';
				}
			}

			if (type === 'type') {
				// Typing uses the type name for fast matching
				return typeName;
			}

			if (d === '') {
				return type !== 'sort'
					? ''
					: __mldObj('0000-01-01 00:00:00', null, locale);
			}

			// Shortcut. If `from` and `to` are the same, we are using the renderer to
			// format for ordering, not display - its already in the display format.
			if ( to !== null && from === to && type !== 'sort' && type !== 'type' && ! (d instanceof Date) ) {
				return d;
			}

			var dt = __mldObj(d, from, locale);

			if (dt === null) {
				return d;
			}

			if (type === 'sort') {
				return dt;
			}
			
			var formatted = to === null
				? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()
				: __mld(dt, 'format', 'toFormat', 'toISOString', to);

			// XSS protection
			return type === 'display' ?
				__htmlEscapeEntities( formatted ) :
				formatted;
		};
	}
}

// Based on locale, determine standard number formatting
// Fallback for legacy browsers is US English
var __thousands = ',';
var __decimal = '.';

if (Intl) {
	try {
		var num = new Intl.NumberFormat().formatToParts(100000.1);
	
		for (var i=0 ; i<num.length ; i++) {
			if (num[i].type === 'group') {
				__thousands = num[i].value;
			}
			else if (num[i].type === 'decimal') {
				__decimal = num[i].value;
			}
		}
	}
	catch (e) {
		// noop
	}
}

// Formatted date time detection - use by declaring the formats you are going to use
DataTable.datetime = function ( format, locale ) {
	var typeName = 'datetime-detect-' + format;

	if (! locale) {
		locale = 'en';
	}

	if (! DataTable.ext.type.order[typeName]) {
		DataTable.ext.type.detect.unshift(function (d) {
			var dt = __mldObj(d, format, locale);
			return d === '' || dt ? typeName : false;
		});

		DataTable.ext.type.order[typeName + '-pre'] = function (d) {
			return __mldObj(d, format, locale) || 0;
		}
	}
}

/**
 * Helpers for `columns.render`.
 *
 * The options defined here can be used with the `columns.render` initialisation
 * option to provide a display renderer. The following functions are defined:
 *
 * * `number` - Will format numeric data (defined by `columns.data`) for
 *   display, retaining the original unformatted data for sorting and filtering.
 *   It takes 5 parameters:
 *   * `string` - Thousands grouping separator
 *   * `string` - Decimal point indicator
 *   * `integer` - Number of decimal points to show
 *   * `string` (optional) - Prefix.
 *   * `string` (optional) - Postfix (/suffix).
 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
 *   parameters.
 *
 * @example
 *   // Column definition using the number renderer
 *   {
 *     data: "salary",
 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
 *   }
 *
 * @namespace
 */
DataTable.render = {
	date: __mlHelper('toLocaleDateString'),
	datetime: __mlHelper('toLocaleString'),
	time: __mlHelper('toLocaleTimeString'),
	number: function ( thousands, decimal, precision, prefix, postfix ) {
		// Auto locale detection
		if (thousands === null || thousands === undefined) {
			thousands = __thousands;
		}

		if (decimal === null || decimal === undefined) {
			decimal = __decimal;
		}

		return {
			display: function ( d ) {
				if ( typeof d !== 'number' && typeof d !== 'string' ) {
					return d;
				}

				if (d === '' || d === null) {
					return d;
				}

				var negative = d < 0 ? '-' : '';
				var flo = parseFloat( d );

				// If NaN then there isn't much formatting that we can do - just
				// return immediately, escaping any HTML (this was supposed to
				// be a number after all)
				if ( isNaN( flo ) ) {
					return __htmlEscapeEntities( d );
				}

				flo = flo.toFixed( precision );
				d = Math.abs( flo );

				var intPart = parseInt( d, 10 );
				var floatPart = precision ?
					decimal+(d - intPart).toFixed( precision ).substring( 2 ):
					'';

				// If zero, then can't have a negative prefix
				if (intPart === 0 && parseFloat(floatPart) === 0) {
					negative = '';
				}

				return negative + (prefix||'') +
					intPart.toString().replace(
						/\B(?=(\d{3})+(?!\d))/g, thousands
					) +
					floatPart +
					(postfix||'');
			}
		};
	},

	text: function () {
		return {
			display: __htmlEscapeEntities,
			filter: __htmlEscapeEntities
		};
	}
};


/*
 * This is really a good bit rubbish this method of exposing the internal methods
 * publicly... - To be fixed in 2.0 using methods on the prototype
 */


/**
 * Create a wrapper function for exporting an internal functions to an external API.
 *  @param {string} fn API function name
 *  @returns {function} wrapped function
 *  @memberof DataTable#internal
 */
function _fnExternApiFunc (fn)
{
	return function() {
		var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
			Array.prototype.slice.call(arguments)
		);
		return DataTable.ext.internal[fn].apply( this, args );
	};
}


/**
 * Reference to internal functions for use by plug-in developers. Note that
 * these methods are references to internal functions and are considered to be
 * private. If you use these methods, be aware that they are liable to change
 * between versions.
 *  @namespace
 */
$.extend( DataTable.ext.internal, {
	_fnExternApiFunc: _fnExternApiFunc,
	_fnBuildAjax: _fnBuildAjax,
	_fnAjaxUpdate: _fnAjaxUpdate,
	_fnAjaxParameters: _fnAjaxParameters,
	_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
	_fnAjaxDataSrc: _fnAjaxDataSrc,
	_fnAddColumn: _fnAddColumn,
	_fnColumnOptions: _fnColumnOptions,
	_fnAdjustColumnSizing: _fnAdjustColumnSizing,
	_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
	_fnColumnIndexToVisible: _fnColumnIndexToVisible,
	_fnVisbleColumns: _fnVisbleColumns,
	_fnGetColumns: _fnGetColumns,
	_fnColumnTypes: _fnColumnTypes,
	_fnApplyColumnDefs: _fnApplyColumnDefs,
	_fnHungarianMap: _fnHungarianMap,
	_fnCamelToHungarian: _fnCamelToHungarian,
	_fnLanguageCompat: _fnLanguageCompat,
	_fnBrowserDetect: _fnBrowserDetect,
	_fnAddData: _fnAddData,
	_fnAddTr: _fnAddTr,
	_fnNodeToDataIndex: _fnNodeToDataIndex,
	_fnNodeToColumnIndex: _fnNodeToColumnIndex,
	_fnGetCellData: _fnGetCellData,
	_fnSetCellData: _fnSetCellData,
	_fnSplitObjNotation: _fnSplitObjNotation,
	_fnGetObjectDataFn: _fnGetObjectDataFn,
	_fnSetObjectDataFn: _fnSetObjectDataFn,
	_fnGetDataMaster: _fnGetDataMaster,
	_fnClearTable: _fnClearTable,
	_fnDeleteIndex: _fnDeleteIndex,
	_fnInvalidate: _fnInvalidate,
	_fnGetRowElements: _fnGetRowElements,
	_fnCreateTr: _fnCreateTr,
	_fnBuildHead: _fnBuildHead,
	_fnDrawHead: _fnDrawHead,
	_fnDraw: _fnDraw,
	_fnReDraw: _fnReDraw,
	_fnAddOptionsHtml: _fnAddOptionsHtml,
	_fnDetectHeader: _fnDetectHeader,
	_fnGetUniqueThs: _fnGetUniqueThs,
	_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
	_fnFilterComplete: _fnFilterComplete,
	_fnFilterCustom: _fnFilterCustom,
	_fnFilterColumn: _fnFilterColumn,
	_fnFilter: _fnFilter,
	_fnFilterCreateSearch: _fnFilterCreateSearch,
	_fnEscapeRegex: _fnEscapeRegex,
	_fnFilterData: _fnFilterData,
	_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
	_fnUpdateInfo: _fnUpdateInfo,
	_fnInfoMacros: _fnInfoMacros,
	_fnInitialise: _fnInitialise,
	_fnInitComplete: _fnInitComplete,
	_fnLengthChange: _fnLengthChange,
	_fnFeatureHtmlLength: _fnFeatureHtmlLength,
	_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
	_fnPageChange: _fnPageChange,
	_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
	_fnProcessingDisplay: _fnProcessingDisplay,
	_fnFeatureHtmlTable: _fnFeatureHtmlTable,
	_fnScrollDraw: _fnScrollDraw,
	_fnApplyToChildren: _fnApplyToChildren,
	_fnCalculateColumnWidths: _fnCalculateColumnWidths,
	_fnThrottle: _fnThrottle,
	_fnConvertToWidth: _fnConvertToWidth,
	_fnGetWidestNode: _fnGetWidestNode,
	_fnGetMaxLenString: _fnGetMaxLenString,
	_fnStringToCss: _fnStringToCss,
	_fnSortFlatten: _fnSortFlatten,
	_fnSort: _fnSort,
	_fnSortAria: _fnSortAria,
	_fnSortListener: _fnSortListener,
	_fnSortAttachListener: _fnSortAttachListener,
	_fnSortingClasses: _fnSortingClasses,
	_fnSortData: _fnSortData,
	_fnSaveState: _fnSaveState,
	_fnLoadState: _fnLoadState,
	_fnImplementState: _fnImplementState,
	_fnSettingsFromNode: _fnSettingsFromNode,
	_fnLog: _fnLog,
	_fnMap: _fnMap,
	_fnBindAction: _fnBindAction,
	_fnCallbackReg: _fnCallbackReg,
	_fnCallbackFire: _fnCallbackFire,
	_fnLengthOverflow: _fnLengthOverflow,
	_fnRenderer: _fnRenderer,
	_fnDataSource: _fnDataSource,
	_fnRowAttributes: _fnRowAttributes,
	_fnExtend: _fnExtend,
	_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
	                                // in 1.10, so this dead-end function is
	                                // added to prevent errors
} );


// jQuery access
$.fn.dataTable = DataTable;

// Provide access to the host jQuery object (circular reference)
DataTable.$ = $;

// Legacy aliases
$.fn.dataTableSettings = DataTable.settings;
$.fn.dataTableExt = DataTable.ext;

// With a capital `D` we return a DataTables API instance rather than a
// jQuery object
$.fn.DataTable = function ( opts ) {
	return $(this).dataTable( opts ).api();
};

// All properties that are available to $.fn.dataTable should also be
// available on $.fn.DataTable
$.each( DataTable, function ( prop, val ) {
	$.fn.DataTable[ prop ] = val;
} );

DataTable.use = function (module, type) {
	if (type === 'lib' || module.fn) {
		$ = module;
	}
	else if (type == 'win' || module.document) {
		window = module;
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataTable);


/***/ })

}]);