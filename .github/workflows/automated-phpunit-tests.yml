name: Automated PHPUnit Tests

on:
  push:
    # Ignore branches which are expected to have producion assets, and some tests would fail
    branches-ignore:
      - main
      - other/sandbox

    # Only run tests if relevant file types (php, js, css, etc) are changed
    paths:
      - '**.php'
      - '**.js'
      - '**.css'
      - '**.vue'
      - '**.scss'
      - '**.env.ci'
      - '**.env.dusk.ci'
      - '**.json'
      - '**.lock'
      - '**.xml'
      - '**.yml'
      - '**.gitignore'
      - '**.gitattributes'

jobs:
  phpunit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        db: [mysql, mariadb]

    services:
      db:
        image: ${{ matrix.db == 'mysql' && 'mysql:8' || 'mariadb:11.7' }}
        env:
          MYSQL_DATABASE: testing
          MYSQL_USER: default
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: secretroot
          MYSQL_INITDB_SKIP_TZINFO: ${{ matrix.db == 'mariadb' && '1' || '' }}
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=10s --health-retries=10

    steps:
      - name: Setup PHP Action
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug
        env:
          fail-fast: true

      - uses: actions/checkout@v4

      - name: Start db service
        run: sudo /etc/init.d/mysql start

      - name: Get composer cache directory
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-files-dir)" >> $GITHUB_ENV

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts

      - name: Prepare Laravel Application
        run: ln -f -s .env.ci .env

      - name: Clear Config
        run: php artisan config:clear

      - name: Run Migration
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.db.ports['3306'] }}

      - name: Run Testsuite
        run: vendor/bin/phpunit --colors=never --coverage-clover=coverage.xml --testsuite AllNonDusk
        env:
          DB_PORT: ${{ job.services.db.ports['3306'] }}

      - name: Upload coverage to Codacy
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml -t ${{secrets.CODACY_PROJECT_TOKEN}}
